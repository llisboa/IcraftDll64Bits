' --------------------------------------------------------------------------------
'
' INTERCRAFT SOLUTIONS INFORMÁTICA LTDA
' 14 DE JUNHO DE 2007 - BASE COMUM PARA SOLUÇÕES ICRAFT
' BIBLIOTECA PADRÃO PARA SITE ASPNET E APL VB
'
'
' OBSERVAÇÕES:::
'   - xxobservaçãoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
'   - qualquer alteração deverá ser enviada por msg a toda equipe web@icraft.com.br.
'   - funções db devem considerar     oracle/mysql/msaccess.
'   - tipos equivalentes em textlong  clob/longtext/memo.
'   - tipos equivalentes em binary    blob/blob/olebinary.
'   - webconn considera para site asp.net o web.config e para apl windows app.config.
'   - todas as funções classes enumerações precisam de esclarecimentos --> '''.
'
' ALTERAÇÕES:::
'   - dd/mmm/yyyy xtécnico xxmotivotodocomletrasminúsculasxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
'   - 14/jul/2007 lucianol normalização, testes clob/blob e inclusão de objecttobytearray.
'   - 14/jul/2007 lucianol acerto nz para considerar nulo quando isnothing.
'   - 14/jul/2007 lucianol inclusão função dsproxseq para retornar próximo sequencial (simula sequence).
'   - 17/jul/2007 lucianol inclusão função dscarregacampos para preenchimento automático de campos de formulário.
'   - 18/jul/2007 lucianol inclusão função dsgravacampos para gravação de campos automaticamente em tabela ou sql.
'   - 21/jul/2007 lucianol gravação binária testes com oracle mysql access criação função ByteArrayToObject e CampoConteudo.
'   - 22/jul/2007 lucianol tratamento de erro em conversões bytearrayobject e vice-versa retornando Nothing quando um erro ocorrer.
'   - 23/jul/2007 lucianol transformação função controleconteudo para classe.
'   - 30/jul/2007 lucianol criação dscarregatop.
'   - 01/ago/2007 thiagop  inclusão de função ShowJSMessage para exibir mensagem de aviso após submissão de dados.
'   - 13/set/2007 lucianol separação de funções obsoletas, preparação da prop para procurar controles em containers.
'   - 03/out/2007 thiagop  inclusão de funções ExibeData, GravaData e Enum para Parâmetro na GravaData.
'   - 06/nov/2007 lucianol findcontrol normal não encontrava itens em paineis existentes (panel.findcontrol). inclui findcontrolespecial.
'   - 07/nov/2007 lucianol criação de componentes icraftcombobox e icraftgridview.
'   - 08/nov/2007 lucianol criação de rotinas de combobox tratamento padrão addhandle para mudança de itens dependentes.
'   - 08/nov/2007 lucianol alteração de rotina de busca de componentes automática para form.findgeral, que procura nos filhos e nos pais.
'   - 08/nov/2007 lucianol agrupamento e identificação de rotinas combobox separando-as no código para melhor visualização. criação de constantes combonull e combosepdefault.
'   - 08/nov/2007 lucianol exclusão da função dscarregacombo, substituída por carregacombo em seu novo formato.
'   - 08/nov/2007 lucianol origemcontrole, rotina excluída, substituída por form.findgeral...
'   - 08/nov/2007 lucianol icftcombobox, inclusão de opção de lista no combobox.
'   - 08/nov/2007 lucianol macrosubstsql, possibilidade de fazer referência ao valor diretamente. Definição explícita de tipos param esperados.
'   - 08/nov/2007 lucianol macrosubstsql, previsão de tratamento do tipo [:exprsql.FLTCAMPO], que é igual a [:FLTCAMPO].
'   - 08/nov/2007 lucianol macrosubstsql, previsão de tratamento do tipo [:valor.FLTCAMPO] para substituição pura e simples no sql sem considerar EXPRSQL. Utilizado para colocar nomes de campos etc.
'   - 09/nov/2007 lucianol macrosubsttext, sendo função prevendo apenas o retorno de sql com traduções.
'   - 09/nov/2007 lucianol nzv, considerando zero também como valor vazio de numéricos (como "" para string).
'   - 09/nov/2007 lucianol regexmatches, retirada do parâmetro group, já que não estava sendo utilizado.
'   - 10/nov/2007 lucianol html.a_ref, colocação do httputility.htmlencode para qualquer código ser interpretado como html.
'   - 10/nov/2007 lucianol erromsg, inserção de rotina de notificação e tratamento de erro para evitar uso da tela showjsmessage.
'   - 10/nov/2007 lucianol geradefs, rotinas para leitura dos atributos das tabelas do gerador (sistema, tabela, campos etc.).
'   - 11/nov/2007 lucianol icftcombobox, criação de propriedades style e containerstyle, impl da rotina de erro, testes de funcionamento.
'   - 11/nov/2007 lucianol icftcombobox, ajuste de rotina de tramento de erro e retirada dos try catchs das funções da biblioteca.
'   - 11/nov/2007 lucianol icftdetalhes, inclusão de controle para detalhes de registro.
'   - 11/nov/2007 lucianol nz, previsão de tipo int32, que faltava.
'   - 13/nov/2007 lucianol notamsg, troca do nome da classe de erroicft para notaicft, para permitir qq tipo de notificação.
'   - 13/nov/2007 lucianol html, inclusão de código para criação de tabelas.
'   - 13/nov/2007 lucianol gerador, classe sendo adaptada para importar e exportar formatos de estrutura.
'   - 19/nov/2007 lucianol extendtoarray, para permitir que um campo guarde inúmeros valores.
'   - 19/nov/2007 lucianol temporaryfile, para retornar nome de arquivo livre para tratamento (deve ser excluído no final do procedimento).
'   - 19/nov/2007 lucianol temporarydir, obtém diretório temporário, que corresponde ao param de config dir_temp.
'   - 19/nov/2007 lucianol gerador, recurso para exportar em oracle, criando triggers e cascate update (sem recursividade).
'   - 19/nov/2007 lucianol dscarregacombo, retirada do recurso e verificação de todo o código.
'   - 20/nov/2007 lucianol extendtoarraylist, passa do tipo armazenado em campo texto para arraylist.
'   - 20/nov/2007 lucianol procuranode, procura node em uma árvore através de um de seus atributos.
'   - 20/nov/2007 lucianol inseretab, inclui no bloco de texto tab antes de cada linha, considerando separador como parâmetro.
'   - 20/nov/2007 lucianol filtroform, diferenciação de texto para apresentação do filtro simplificado em tela para usuario.
'   - 20/nov/2007 lucianol filtroform, atualização de parâmetros de controle de filtro para mostrar etiqueta e tooltip no form.
'   - 13/dez/2007 lucianol downloadarquivo, para facilitar o processo de envio de arquivo para browser do usuário.
'   - 13/dez/2007 lucianol downloadconteudo, para envio de conteúdo ao cliente.
'   - 13/dez/2007 lucianol prop, alteração para buscar o objeto, quando este for passado por texto ou retornar nothing.
'   - 13/dez/2007 lucianol gerador, função diferença percebendo mais parâmetros além de nome etc entre oracle e definições.
'   - 13/dez/2007 lucianol gerador, exportação atualizada da estrutura para oracle e access.
'   - 13/dez/2007 lucianol prop, previsão da propriedade checked para combobox put e set.
'   - 13/dez/2007 lucianol gerador, inclusão de rotina para documentar diferença entre relacionamentos.
'   - 13/dez/2007 lucianol gerador, rotina de convesão de tipos oracle para access.
'   - 20/dez/2007 lucianol autoseq, inclusão de tratamento de campos automáticos. mencionando proxseq no gerador, campo é atualizado com próximo sequencial automaticamente.
'   - 20/dez/2007 lucianol valorpadrao, inclusão de tratamento do campo gerador valorpadrao, permitindo NOW para formatação de data atual.
'   - 20/dez/2007 lucianol filtro em form, inclusão de campo genérico para filtro de todos os campos.
'   - 23/dez/2007 lucianol segmexpr, inclusão da função para concatenar qualquer lista de segmentos considerando separador.
'   - 23/dez/2007 lucianol controle, preparação para considerar tipo de campo na formatação de entrada e apresentação.
'   - 23/dez/2007 lucianol formatos possíveis outros: | memo | html.
'   - 23/dez/2007 lucianol formatos possíveis data: | dd/MM/yyyy | dd/MM/yyyy HH:mm | dd/MM/yyyy HH:mm:ss.
'   - 23/dez/2007 lucianol formatos possíveis número: | inteiro | real.
'   - 25/dez/2007 lucianol regex mudança de parâmetro de grupo para permitir nomes em regex ?<nome>...
'   - 27/dez/2007 lucianol comandoaccess alteração da rotina para converter código de concatenação " || " em " & " (observar os espaços).
'   - 05/jan/2008 lucianol criacampo, inclusão desta rotina na biblioteca para criação dinâmica de campos.
'   - 05/jan/2008 lucianol rel1n, inclusão desta classe na biblioteca para criação de combobox dinâmica baseada em relacionamentos.
'   - 05/jan/2008 lucianol troca de dd/MM/yyyy para dd\/MM\/yyyy para manter a barra mesmo com idioma inglês.
'   - 05/jan/2008 lucianol mudei atualizoucombo para atualizoucontrole, pois função serve para todos os controles.
'   - 05/jan/2008 lucianol erro na função atualiza combo com mais de uma coluna. estava desconsiderando ocultavalor. erro de escrita da do attributo foi corrigido.
'   - 05/jan/2008 lucianol crypb decrypb inclusão de rotinas de criptografia básica, só para esconder código do usuário em atributo de campo.
'   - 05/jan/2008 lucianol icftdetails criação de componente para permitir alteração de registros baseando-se em sql simples, orientado pela chave.
'   - 05/jan/2008 lucianol icftdetails vínculo entre details e gridview, permitindo edição simplificada de registros de cadastro.
'   - 05/jan/2008 lucianol icftform correção de aplicação de filtro vazio, que apresentava erro.
'   - 05/jan/2008 lucianol rotinas de linha, inclusão das rotinas de tratamento de buffer de linha (de registro) na biblioteca funções para salvar, checar e comparar.
'   - 10/jan/2008 lucianol nz, tratamento de nulo em conteúdos numéricos, que geravam erro. nulo retornará zero.
'   - 10/jan/2008 lucianol idioma, registro de idioma em variável de sessão com verificação de target e argumentos para mudança.
'   - 14/jan/2008 thiagop  função IncluiStyleSheet, para inclusão dinâmica de folhas de estilo na página.
'   - 21/fev/2008 lucianol automatizagrid, que inclui diversas funcionalidades em grid simples, conforme padronização
'   - 01/mar/2008 lucianol atualização da biblioteca icraft.vb com suporte aplicativo form além da web.
'   - 11/jul/2008 lucianol dsgrava e similares para mysql utilizar registro de variáveis de ambiente: CONN_IP, CONN_MACHINE E CONN_USER.
'   - 11/jul/2008 lucianol gerador mysql inclusão de logon indireto fazendo uso das variáveis CONN_IP, CONN_MACHINE E CONN_USER.
'   - 27/nov/2008 lucianol --- remodelagem de código com base nas necessidades evitando dependência de objeto DAO, sendo este criado conforme seu uso.
'   - 27/nov/2008 lucianol utilização de begin area para organização de código.
'   - 28/nov/2008 lucianol explicações em todas as funções e trechos do código (que estavam faltando).
'   - 28/nov/2008 lucianol correção em rotina pausa, que na Internet não aguardava segundos, System.Threading.Thread.Sleep(Segundos * 1000).
'   - 28/nov/2008 lucianol acerto no gerador para criação de estrutura de grants para usuários.
'   - 11/jan/2008 lucianol criação componente flash com possibilidade de popup.
'   - 11/jan/2008 lucianol alteração de função CarregaEvento para possibilitar programação tanto no SAFARI quanto no Microsoft, incluindo attachEvent e obj[evento]=func.
'   - 11/jan/2008 lucianol inclusão função AdicionaFuncao(obj, evento, funcao) para permitir incluir no SAFARI uma função sem cancelar as anteriores(concatenar funções).
'   - 11/jan/2008 lucianol ScrollLeft e ScrollTop para resolver problema de obtenção de posição de scroll, que é diferente entre os navegadores.
'   - 11/jan/2008 lucianol Centraliza com código suficiente para posicionar elemento no centro da tela.
'   - 11/jan/2008 lucianol criado componente LightBox para facilitar inclusão do recurso em javascript.
'   - 11/jan/2008 lucianol alteração da rotina de IncluiStyleSheet para pegar no diretório inc por default.
'   - 11/jan/2008 lucianol alteração do LightBox, inclusão de opção de grupo para permitir anterior e posterior.
'   - 13/jan/2008 lucianol inclusão do prototype.js entre as bibliotecas carregadas pela intercraft por ser exigido pelo lightbox.
'   - 13/jan/2008 lucianol alteração da função $() no javascript Icraft.js para $_() por já existir no prototype e alteração de todas para uso desta nova.
'   - 13/jan/2008 lucianol alteração $_() para considerar param "window" e "document", retornando controle obj correspondente.
'   - 14/jan/2008 lucianol alteração $_() para ajustar no do campo trocando "$" para "_", pois uniqueID retorna nome com "$".
'   - 14/jan/2008 lucianol função DebugPrint alterada para ao invés de dar erro, apresentar [[erro]] quando ocorre a tentativa de impressão de conteúdo de propriedade inexistente.
'   - 19/jan/2008 lucianol alteração na classe html incluindo PROTEGE para retornar apenas html previsível sem scripts etc
'   - 22/jan/2008 lucianol rotina paginacao permitindo posicionamento não só pelo num de página como também por chave, sendo esta passada em arraylist (paramtoarraylist)
'   - 22/jan/2008 lucianol inclusão da rotina DSDataColumns("campo1;campo2") para facilitar definição de primarykey em dataset
'   - 11/abr/2009 lucianol NZ, tornando ero também condição de retorno default. Muito trabalhoso e constante os tratamentos de erro com rotinas que envolvem propriedades opcionais. Nestes casos, NZ também poderá ser utilizado.
'   - 11/abr/2009 lucianol Prop, função não previa preenchimento de ImageUrl. Acertado.
'   - 11/abr/2009 lucianol ExibeData, tive problemas com data retornada nula. Para evitar situações como esta, ativei uma série de formatos:          PADRÃO "dd/MM/YYYY HH:mm:ss", "dd de mmmm de yyyy", "i", "a", "ai", "mmm dd, yyyy", "mmm dd, yyyy i", "mmm dd, yyyy c", "mmmm, yyyy i", "mmmm, yyyy c", "dd de mmmm de yyyy c" entre outros.
'   - 18/abr/2009 lucianol email/valida início de estrutura para operar objetos no sistema
'   - 19/abr/2009 lucianol enviaemail - inclui rotina de incorporação de imagens que faz uso de diretório temporário.
'   - 19/abr/2009 lucianol enviaemail - inclui rotina de autenticação em smtp
'   - 19/abr/2009 lucianol enviaemail - inclui rotina para evitar envio de estruturas já tratadas enviaemail(email,smtp...)
'   - 20/abr/2009 lucianol abstrcarac - para permitir conferência tipo dígito verificador
'   - 20/abr/2009 lucianol base36 - que retorna base36 de um número 0-9 A-Z limitando em nr casas considerando menos significativas
'   - 20/abr/2009 lucianol base36alga - transforma num em um dígito sendo a partir de 35 "z"
'   - 21/abr/2009 lucianol prop - inclusão de retorno name ao invés de id quando objeto é um control de windows forms
'   - 21/abr/2009 lucianol toda biblioteca - mudança completa de todos os controlcollections e controls para object permitindo utilização tanto em app quanto em web.ui
'   - 21/abr/2009 lucianol strstr - correção em critério de retorno com base em primeiro parâmetro negativo
'   - 26/abr/2009 lucianol enviaemail - alteração da sobrecarga de controle total (params retornados por byref) para retornar arquivos temporários caso sejam necessários, cids entre outros params. Exemplo:
'
'                           Dim mail As MailMessage = Nothing ' obriga que primeira execução inicie a mensagem
'                           Dim smtp As SmtpClient = Nothing ' obriga que primeira execução carregue smtp correto
'                           Dim tmps As New ArrayList ' retornará arquivos temporários caso sejam utilizados
'                           Dim cids As New ArrayList ' retornará cids caso imagens incorporadas
'                           Dim ret As New System.Text.StringBuilder
'                           ret.AppendLine(Icraft.EnviaEmail(mail, smtp, "lucianol@icraft.com.br", "lucianol@icraft.com.br", "teste com figura attach", "<img src=""http://www.intercraft.inf.br/figuras/bd02.jpg""/>", MailPriority.High, "smtpi.icraft.com.br", , , , , , True, cids, tmps, ParamArrayToArrayList("http://www.intercraft.inf.brx/", "\\webserver\inetpub\Intercraft\")))
'                           ret.AppendLine(Icraft.EnviaEmail(mail, smtp, , "luciano.lisboa@intermesa.com.br"))
'                           MsgBox(ret.ToString) ' mostra retorno
'                           mail.Dispose() ' limpa email para liberar os arquivos
'                           Icraft.ApagaTemps(tmps) ' apaga arquivos temporários
'
'   - 26/abr/2009 lucianol apagatemps - função que apaga arquivos mencionados no arraylist tmps
'   - 26/abr/2009 lucianol listadir - retorna arraylist contendo lista de arquivos disponíveis no diretório especificado
'   - 07/mai/2009 lucianol criação de dll a partir do icraft.vb. troca de nome da classe principal para icftbase e inclusão desta no namespace icraft.
'   - 18/jun/2009 lucianol ctypestr - tratando "on" como critério para booleano
'   - 18/jun/2009 lucianol prop - busca de conteúdo do campo booleano diretamente do formulário
'   - 28/jun/2009 lucianol infra - substituição icftmessage antigo pelo recurso feito em ajax
'   - 15/jul/2009 lucianol imagempath - função padronizada para busca de imagens em ambiente web
'   - 15/jul/2009 lucianol themepath - função para localizar arquivo em diretório de tema
'   - 15/jul/2009 lucianol ajuste no formato de header do arquivo padronizado para toda solução icraft
'   - 18/jul/2009 lucianol exibehtml - alteração da função para permitir definição de [link:url|descrição], [imgbut:urlimg|urllink|descrição] e [img:url|legenda]
'   - 18/jul/2009 lucianol exibehtml - classe para incorporar recursos exibehtml, temporária ainda, mas com as funções de handle para replace por regex
'   - 18/jul/2009 lucianol htmlreplimgbut - para regex replace ref ao exibe [imgbut:...]
'   - 18/jul/2009 lucianol htmlreplink - para regex replace ref ao exibe [link:...]
'   - 18/jul/2009 lucianol htmlreplimg - para regex replace ref ao exibe [img:...]
'   - 18/jun/2009 lucianol exibehtmlenc - para tratamento e encapsulamento de html
'   - 19/jul/2009 lucianol incluicampo - formatação de campo tipo data com tamanho menor por causa do assistente de calendário
'   - 19/jul/2009 lucianol incluicampo - especificação de tamanho para compobox, pois não estava sendo definido
'   - 19/jul/2009 lucianol imageurl - para obter diretório da imagem. caso não seja especificado, será avaliado como img
'   - 19/jul/2009 lucianol imagearq - para retornar diretório em disco de imagem específica
'   - 19/jul/2009 lucianol regexpamostra - bloqueio dos caracteres '<' e '>' para evitar tratamento de html
'   - 16/ago/2009 lucianol textologex - em web, incluir também variáveis de sessão no texto correspondente ao erro
'   - 16/ago/2009 lucianol logonsession - tostring para apresentar dados do logon de usuário
'   - 16/ago/2009 lucianol nz - preparo para conversão de logonsession para string, apresentando suas informações no formato (atrib=...;atrib2=...)
'   - 16/ago/2009 lucianol gerador microsoftxoracle - alteração do tipo float que deu problemas no fill do vb - single para number(8,6) e double para number(16,12)
'   - 16/ago/2009 lucianol gerador oraclexmicrosoft - tam > 16 ou decim > 2 para double
'   - 17/ago/2009 lucianol emailstr - obrigatoriedade de email no formato mínimo xxx@xxx.x
'   - 19/ago/2009 lucianol estadosdobrasil - retorna array com ufs do brasil
'   - 19/ago/2009 lucianol listadepaises - retorna array com nome de países por todo o mundo
'   - 19/ago/2009 lucianol exprexpr - rotina para concatenar expressões sem repetição de delimitador
'   - 19/ago/2009 lucianol fileexpr e urlexpr - utilização da função exprexpr
'   - 20/ago/2009 lucianol textologex - tanto para http como apl ignora mensagem de erro caso seja nothing
'   - 24/ago/2009 lucianol tiraacento - rotina que elimina acento do texto (removeacento)
'   - 24/ago/2009 lucianol obtempag - obtém página da internet em texto
'   - 24/ago/2009 lucianol lprop - configurar retorno de texto para tentar obter conteúdo de objeto antes de buscar request
'   - 28/ago/2009 weslleya capitalizar - criação da função que capitalizar uma string passada como parâmetro
'   - 31/ago/2009 weslleya primletramaius - faz um tipo de capitalização especial adequado à função primletramaius desenvolvida em Oracle
'   - 03/set/2009 lucianol soemailstr - rotina que obtém trecho de email existente ou string vazia caso não exista email válido
'   - 16/set/2009 lucianol class email - incluindo rotina de busca de somente endereço e descrição
'   - 16/set/2009 lucianol paginacao - inclusão de suporte para datarowcollection (sem possibilidade de add)
'   - 16/set/2009 weslleya dsgrava - preparação de variáveis para gravação de detalhes de conexão de internet no Oracle
'   - 16/set/2009 weslleya gravaoraclerestr - alteração da geração de script do trigger para consumir as variáveis de detalhes de conexão de internet
'   - 26/set/2009 lucianol lprop - considerando on e off para gravação de valor booleano
'   - 31/out/2009 lucianol regexmasctags - para retornar máscara capaz de quebrar tags html de forma recursiva
'   - 31/out/2009 lucianol regexhtml - manipulador de texto como html prox, dentro etc
'   - 31/out/2009 lucianol entifica - troca caracteres especiais de texto por códigos de entidade html
'   - 02/nov/2009 lucianol debugprint - para facilitar diagnóstico em telas de servidor
'   - 09/nov/2009 danielcosta - DSCarrega para banco SQLServer
'   - 09/nov/2009 danielcosta - DSFiltra - Filtra o conteudo de um dataset auxilia na redução do número de acessos ao banco
'   - 27/nov/2009 lucianol email - inclusão da propriedade domínio
'   - 28/nov/2009 lucianol chamaasync - inclusão de rotina delegada para chamada assíncrona, utilizando thread e liberando processador
'   - 02/dez/2009 weslleya CriadorDeObjetos - Criação da classe responsável por carregar dll e criar objetos diretamente dela
'   - 02/dez/2009 weslleya DsCarrega - Modificação dos objetos MySql para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsCarregaEstr - Modificação dos objetos MySql para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsGrava - Modificação dos objetos MySql para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsCriaComandoMySql - Modificação dos objetos MySql para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsCarrega - Modificação dos objetos Oracle para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsCarregaEstr - Modificação dos objetos Oracle para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsGrava - Modificação dos objetos Oracle para utilizar a classe CriadorDeObjetos
'   - 02/dez/2009 weslleya DsCriaComandoOracle - Modificação dos objetos Oracle para utilizar a classe CriadorDeObjetos
'   - 25/dez/2009 lucianol exibedata - ao invés de month, acertei para utilizar month - 1, pois array começa do zero
'   - 25/dez/2009 lucianol listadir - inclusão de critério para pesquisa de arquivos
'   - 26/dez/2009 lucianol exibehtml - retorno de html quando iniciado e finalizado com html
'   - 28/dez/2009 lucianol vardesessao - forma padronizada de montar variável para inclusão em sessão
'   - 28/dez/2009 lucianol atrib - criação de função para simplificar processo de implementação de atributos em todos os componentes
'   - 28/dez/2009 lucianol dscarrega e diversos - possibilidade de passar string de conexão diretamente com params providerName:System.Data.OleDb;Provider:Microsoft.Jet.OLEDB.4.0;Data Source:~/UC/ICFTCOMBOBOX/TESTE/ICFTCOMBOTESTE.MDB, sendo ~ substituído pela raiz do diretório
'   - 28/dez/2009 lucianol combobox - correção de rotina de atualização, que considerava incorretamente attribute atualizar ao invés de prope atualizar
'   - 28/dez/2009 lucianol combobox - inclusão de conceito excluirvalores que relaciona valores que não devem ser incluídos no combo (caso mais de uma coluna, considerar primeira como valor - chave composta deverá ser concatenada evitando repetição)
'   - 29/dez/2009 weslleya exprexpr - correção da função para substituir DelimAlternativo por Delim
'   - 30/dez/2009 lucianol itemtoarraylist e itemtoobject - busca por atrib, depois por item depois por attribute
'   - 30/dez/2009 lucianol gerador msaccess - inclusão de descrições em tabelas de sistema
'   - 30/dez/2009 lucianol gerador oracle - proteção de código evitando nothing em visoes e usuários
'   - 30/dez/2009 carandre gravaoraclesemrestr - acerto de função for cur em user job passando de owner para schema_user
'   - 30/dez/2009 carandre gravaoraclesemrestr - inclusão de comentário na função que gera script tanto para todas as tabelas inclusive as do sistema
'   - 30/dez/2009 lucianol pegatitulopagwebdocabeca - para obter titulo que se encontra no cabeçalho da página
'   - 30/dez/2009 lucianol pegatitulopagweb - para pegar título entre as tags title no header
'   - 30/dez/2009 lucianol pegahtmlemarquivo - para pegar htmlregex em arquivo 
'   - 30/dez/2009 lucianol fileexpr - inclusão de tratamento de ~/ para referenciar à home do site
'   - 30/dez/2009 lucianol imageurl - correção de probl. estava com fileexpr ao invés de urlexpr
'   - 30/dez/2009 lucianol listadir - troca de verificação de ~/ pelo fileexpr
'   - 01/jan/2010 lucianol obtemtexto - rotina para obter texto a partir de diretório ou url
'   - 08/jan/2010 weslleya novasenha - incorporação da função novasenha criada por Luciano na biblioteca
'   - 08/jan/2010 anderson exibedata - implementação do formato mmmm/yy para datas do tipo Dezembro/09
'   - 09/jan/2010 lucianol classe gerador - inclusão de propriedade xml para permitir entrara e obtenção de estrutura
'   - 09/jan/2010 lucianol classe campo - inclusão da propriedade tabela na classe campo para permitir salvamento a partir da classe gerador
'   - 09/jan/2010 lucianol tipocomotabela - para transformar uma classe em tabela e propriedades de classe em campos
'   - 09/jan/2010 lucianol textoemstream - para retornar um stream com um texto específico fazendo uso de memorystream
'   - 09/jan/2010 lucianol class gerador - inclusão de parâmetro GeraTabsSistema para indicar que o usuário deseja gerar tabelas do sistema
'   - 09/jan/2010 lucianol class gerador - inclusão de variável tabssistema contendo lista de tabelas criadas automaticamente pelo sistema
'   - 09/jan/2010 lucianol carregamsaccess - acerto de descrições para tabelas do sistema, inclusão de critério geratabssistema
'   - 09/jan/2010 lucianol classe tnsnamesreader para obter nomes de serviços do oracle
'   - 17/jan/2010 lucianol soma - rotina para somar números de uma sequência de valores
'   - 17/jan/2010 lucianol class gerador - inclusão de critérios alterando apenas a rotina de carga a partir do oracle, por falta de tempo
'   - 20/jan/2010 lucianol classe form - inclusão de rotina buscatipo para retornar um determinado tipo procurado por todo sistema de objetos
'   - 22/jan/2010 lucianol substituição do critério gerasistema pelo exporta infrasistema
'   - 31/jan/2010 lucianol filtrocampoconteudo - para montar filtro de sql com base nos campos de estrutura de VO e conteúdos
'   - 02/fev/2010 lucianol atualização tabelas do gerador inclusão de usuário e direito
'   - 02/fev/2010 lucianol tipoaccessToscript - retirada da função de dentro da classe do gerador para colocá-la diretamente no icftbase
'   - 02/fev/2010 lucianol acessook - inclusão de função para validação de login
'   - 02/fev/2010 lucianol masteracessook - função para verificação de login na masterpage
'   - 02/fev/2010 lucianol buscatipo - alteração para considerar tanto lista de tipos como string de tipos, permitindo procurar "system.string"
'   - 02/fev/2010 lucianol buscaprimeirotipo - retorna primeiro objeto daquele tipo de forma direta (sem vetor)
'   - 02/fev/2010 lucianol buscatipo - inclusão de javerificado para não entrar em controle já analisado
'   - 02/fev/2010 lucianol registracontrolecomopostback - inclui controle na lista de postback do primeiro updatepanel existente
'   - 09/fev/2010 lucianol emailstr - considerar além do espaço caractere (128+32=160) como espaço
'   - 09/fev/2010 lucianol htmld - html decode especial. retira todas as tags html
'   - 09/fev/2010 lucianol tirahtml - retira tags html
'   - 10/fev/2010 lucianol itemencode - configura conteúdo de forma que não possua códigos como ponto e vírgula e dois pontos, utilizados como separadores em expressões Icraft
'   - 10/fev/2010 lucianol itemdecode - rotina inversa ao itemencode, que retorna conteúdo previamente codificado
'   - 10/fev/2010 luicanol salvacontroles - para armazenamento de conteúdo de controles
'   - 10/fev/2010 lucianol recuperacontroles - para recuperação de conteúdo de controles a partir do salvamento prévio
'   - 18/fev/2010 lucianol form.controles - com parâmetro para permitir busca de controles de forma hierarquica (recursiva) permitindo especificação de mais de um prefixo
'   - 18/fev/2010 lucianol recuperadoform - para obter dados salvos em page.request.form conforme prefixos
'   - 18/fev/2010 lucianol urlexpr - converte c:\... em ~/ caso esteja na raiz do site
'   - 20/fev/2010 lucianol prop - vai tentar recuperar via reflexion antes de recuperar attributes no caso de propriedade não identificada pelo código
'   - 20/fev/2010 lucianol nz - conversão do tipo enum com ctype retornava número. caso seja enum, utilizará formato enum.tostring para retornar texto específico
'   - 20/fev/2010 lucianol incluicampo - alteração de rotina para considerar linha em tabela ao invés de inclusão de campo em divs soltos
'   - 22/fev/2010 lucianol fileexpr - inclusão de substituição de raiz fazendo uso do resolveurl('~/')
'   - 22/fev/2010 lucianol obtercor - rotina para obter cor a partir de um texto específico
'   - 22/fev/2010 lucianol incluicampo - modificação do nome do calendário para considerar não só calenda como o nome do campo evitando erro de duplicidade no mesmo form
'   - 22/fev/2010 lucianol notamsg mostra e mostrasem - eliminadas estas funções por não serem mais necessárias (ativação do notamsg ajax)
'   - 22/fev/2010 lucianol prope - precisei acertar rotina, pois criando attributo com add, mas quando utilizava como tag texto, gerava falha na interpretação do ==
'   - 22/fev/2010 lucianol conteudo - salvamento considerando valores em itemencode para evitar problemas com caracteres especiais para tratamento de itemlista
'   - 22/fev/2010 lucianol aplicamascara - modificação de tooltip para organização de texto relativo ao caminho, salvasemcaminho e máscara
'   - 22/fev/2010 lucianol paginacao - consideração de dataset vazio se não possuir registro ou for nothing, pois não existia esta última opção
'   - 27/fev/2010 lucianol regaplkey - grava ou obtém atributo no regedit do software da máquina 
'   - 27/fev/2010 lucianol regmachinekey - grava ou obtém atributo no regedit do machine da máquina
'   - 28/fev/2010 lucianol dirreplica - classe para efetuar replica de arquivos em diretório e subdiretórios
'   - 28/fev/2010 lucianol segsexpr - função para formatar segundos em hora, minuto e segundos
'   - 28/fev/2010 lucianol exibesegs - exibe segundos em diversos formatos
'   - 28/fev/2010 lucianol pl - função para retorno de singular ou plural conforme um número especificado
'   - 02/mar/2010 lucianol pagatribparam - define um parâmetro adicional de uma string com url podendo já possuir parâmetros ou não
'   - 05/mar/2010 lucianol dosshell - para executar comandos em dos
'   - 07/mar/2010 lucianol webconf - site_dir e site_url foram eliminados do config sendo esta função preparada para retornar tais valores para compatibilidade
'   - 18/mar/2010 lucianol uriexpr - função retorna caminho completo http... baseado na raiz ou em caminho de arquivo     
'   - 18/mar/2010 lucianol diretório temporário e de log no web.config sendo possíveis de se definir com ~/
'   - 23/mar/2010 lucianol procuraarq - recebendo pag e procurando por default diretório inicial e final
'   - 23/mar/2010 lucianol listadir - opção para procurar em subdiretórios ou não
'   - 09/abr/2010 lucianol retiraurl - função para retirar parâmetro returnurl de url
'   - 09/abr/2010 lucianol redircond - desvia caso exista definição. caso não tenha destino, desvia para home
'   - 17/abr/2010 lucianol acessookorigemtrata - para transformar entradas em texto em acessoorigem a ser utilizada pelo login
'   - 17/abr/2010 lucianol strconndscarrega - para retornar um dataset contendo na própria string a conexão e o sql como strdb;select * ...
'   - 17/abr/2010 lucianol acessook - inclusão de tratamento de login consultando tabelas com base nos acessotipos
'   - 17/abr/2010 lucianol masteracessook - configuração dos parâmetros considerando sua execução a partir do próprio componente de login permitindo inclusão simplesmente do componente na página para que login funcione
'   - 24/abr/2010 lucianol combobox - resolvido erro tratando excluirvalores somente se houver lista
'   - 24/abr/2010 lucianol redircond - tratar somente se destino estiver preenchido
'   - 24/abr/2010 lucianol redircond - evitar redirecionamento se já estiver na página utilizando também resolveurl
'   - 24/abr/2010 lucianol redircond - se redirecionamento for requisitado, tentará redirurl e caso este esteja vazio, utilizará returnurl e caso este esteja vazio, request.url.queryandpath (página atual)
'   - 24/abr/2010 lucianol registracontrolecomopostback - alterada rotina para pesquisar antes em variável de sessão ao invés de procurar pelo scriptmanager
'   - 24/abr/2010 lucianol acessookorigem - inclusão do critério de acesso nas rotinas relacionadas com acessookorigem
'   - 24/abr/2010 lucianol acessookorigem - resolução de problema sendo incluída quantidade de parâmetros que a rotina precisava pular caso fosse listaaberta
'   - 24/abr/2010 lucianol acessookorigem - redirecionamento quando senha válida considerando returnurl
'   - 24/abr/2010 lucianol strconnusuario - rotina de retorno de string de conexão considerando usuário conectado
'   - 24/abr/2010 lucianol trataerro - tratamento de erro customizado considerando erros do tipo icraft exception para proceder redirecionamento à tela de login
'   - 24/abr/2010 lucianol ex - classe de erros genéricos intercraft - início de especificação com usuário incorreto
'   - 24/abr/2010 lucianol dirconfig - configurações gravadas em diretório para página podendo ser de usuário ou não, rotinas para criar, excluir e listar
'   - 29/abr/2010 weslleya vardesessao - sobrecarga para permitir gravação de variável de sessão com base em masterpage
'   - 06/mai/2010 lucianol acertaok - rotina redireciona agora considerando returnurl
'   - 06/mai/2010 lucianol nomearqlivre - busca nome livre em diretório considerando um arquivo inicial
'   - 06/mai/2010 lucianol enviaemail - inclusão de opção para envio de arquivos attachados
'   - 06/mai/2010 lucianol enviaemail - alteração para gravar em cids todas as imagens vinculadas e evitar novas cargas pela pesquisa na mesma variável daquelas já existentes
'   - 07/mai/2010 weslleya objtods - cria um dataset tipado com base em um objeto
'   - 11/mai/2010 lucianol paramarraytoarraylista considerando qualquer tipo list of como uma listagem de opções
'   - 11/mai/2010 lucianol formato - tratamento de dbnull para evitar erro
'   - 11/mai/2010 lucianol downloadarquivo e downloadarquivotam - inclusão de fileexpr para preparo do nome de arquivo
'   - 11/mai/2010 lucianol vardesessao considerando page, master ou controle para obter apprelative
'   - 11/mai/2010 lucianol class gerador oracle usuario acerto dos campos login, nome descr, senha, validoate e grupo
'   - 11/mai/2010 lucianol class gerador oracle ajuste de objetos gerador que não tinha prefixo ger_ que passaram a ter
'   - 11/mai/2010 lucianol class gerador oracle evitando dar erro quando um dos tópicos tabelas, campos, visoes, objetos etc está sem registros
'   - 11/mai/2010 lucianol class gerador oracle acerto de códigos de coment para considerarem sempre classe ou grupo | descrição | etiqueta
'   - 11/mai/2010 lucianol primletramaiuscomespaco para permitir formatar textos com prim maiúscula com espaços
'   - 11/mai/2010 lucianol dirconfig nomearq formatação para considerar primmaiusccomespaço retirando-se o espaço logo após
'   - 11/mai/2010 lucianol apprelative criada função para retornar caminho em url de uma página específica podendo passado uma página, uma master ou um controle
'   - 14/mai/2010 lucianol textoeemstream opção de colocar o encoding do texto
'   - 14/mai/2010 lucianol gerador otimização para permitir export de objetos em oracle
'   - 14/mai/2010 lucianol downloadconteudo utilizando encoding
'   - 15/mai/2010 lucianol todas as rotinas de download atualização para considerar tamanho e inclusão de parâmetro encoding
'   - 15/mai/2010 lucianol downloadprep para incluir no repsonse formatações padronizadas de download sendo base para todas as outras funções relativas a download
'   - 15/mai/2010 lucianol downloadbytes para baixar fluxo de bytes corrigindo problema que ocorria comk tamanho de ignorar encoding
'   - 15/mai/2010 lucianol downloadfuncoes correção das demais funções para considerarem downloadprep e definição de encoding e tamanho
'   - 19/mai/2010 lucianol strexpr estava faltando adicionar o item na string de retorno - função corrigida
'   - 20/mai/2010 lucianol dns inclusão de rotinas para manipulação de dns
'   - 20/mai/2010 lucianol dosshell inclusão de opção para rodar processo com outro usuário, senha e domínio
'   - 20/mai/2010 lucianol gerador inclusão de direitos na estrutura com carga pelo gerador e gravação pelo oracle
'   - 30/mai/2010 lucianol criação de eventos antesdelogoff e depoisdelogin colocando em logoff e login respectivamente
'   - 04/jun/2010 lucianol acessok possibilidade de passar para função senhaaberta em pesquisa
'   - 18/jun/2010 weslleya gravaoraclerestr inserida condição que só permite o retorno de um registro na consulta dos gatilhos
'   - 23/jun/2010 lucianol criação de tabelas sys_config_global com campo prop_extend e formato
'   - 23/jun/2010 lucianol dsconfig acerto de função considerando parâmetros opcionais formato e prop_extend
'   - 23/jun/2010 lucianol meta inclusão de propriedade para obter em sys_config_global especificações de meta definição em formato padronizado
'   - 23/jun/2010 weslleya xmlparamysql permitindo que, a partir de um xml seja gerada uma string contendo o script para criação dessas tabelas em mysql
'   - 23/jun/2010 weslleya xmlparaoracle permitindo que, a partir de um xml seja gerada uma string contendo o script para criação dessas tabelas em oracle
'   - 24/jun/2010 weslleya gravaoraclesemrestr alterada para utilizar xmlparaoracle
'   - 25/jun/2010 weslleya xmlparamysql cria os comandos alter de comentários para tabelas e campos
'   - 25/jun/2010 weslleya gravamysql alterada para utilizar xmlparamysql
'   - 25/jun/2010 lucianol classe paghtml para manipular informações sobre uma página
'   - 25/jun/2010 lucianol pegahtmlemtexto para tornar mais intuitivo acesso ao regexhtml
'   - 29/jun/2010 weslleya objtodsflags enum contendo opções a serem utilizadas na função objtods
'   - 29/jun/2010 weslleya flagsetado função que indica se um flag está ou não ativo dentro de uma sequência
'   - 29/jun/2010 weslleya objtods alterado para permitir listar métodos além de propriedades
'   - 05/jul/2010 lucianol criação de tabcol para ser utilizado em criação de estruturas DS por referenciamento de tipos "x" para string e assim por diante
'   - 10/jul/2010 lucianol dstabreg para criação de DS com base em tipos diretos sendo campo, tipo onde tipo é o próprio desejado 1 para numérico, "x" para string
'   - 12/jul/2010 lucianol dstabcols adaptação do dstabreg para permitir utilização de tipos diversos sendo agora preparada a opção apenas para dstablcols (campo, tipo)
'   - 14/jul/2010 lucianol dslistaset cria dataset a partir de uma lista tendo a primeira linha o nome dos campos
'   - 20/jul/2010 lucianol arqbasenomecomplex para permitir utilização do nome do arquivo para gravar ordem,nome,descr,tipo de target
'   - 20/jul/2010 lucianol paramp para proteção de conteúdos provenientes da internet sendo evitados códigos que pudessem comprometer funcionamento uso paramp(request.param(...))
'   - 20/jul/2010 lucianol somentenavez para permitir rodar código somente uma determinada vez sendo 1 a primeira considerando um tempo base de cálculo das vezes
'   - 01/ago/2010 lucianol incorporação de montaestrut para permitir geração de código baseado em template
'   - 10/ago/2010 lucianol render em montaestrut correção incorporando novos tipos como radiobuttonlist icftcombobox
'   - 20/ago/2010 lucianol exibetrecho que possibilita apresentação de palavras de um determinado texto (ainda desconsiderando tags html)
'   - 05/set/2010 lucianol ultimoevento permitindo registro de evento momento controle argumento para uma determinada página
'   - 05/set/2010 lucianol nzconcat para facilitar condições do tipo if(valor<>"","concat" & valor, defaultsemconcat
'   - 05/set/2010 lucianol inclusão tipo rowid na função tipooracletoscript
'   - 05/set/2010 lucianol alterado código gerador para desconsiderar tabelas iniciadas por sys_ em gravamysql
'   - 05/set/2010 lucianol utilizando xmlparamysql baseando-se em arquivo para criação das tabelas de sistema em gravamysql
'   - 05/set/2010 lucianol alterada função para criação de usuário somente se o mesmo não existir em gravaoraclerestr
'   - 05/set/2010 lucianol incluída rotina codtab para verificar automaticamente um código disponível na criação de tabelas quando este não é informado
'   - 05/set/2010 lucianol nomerel considerando codtab sendo também protegi considerando limite de qtd caracteres para qtd não passar de 30 máximo de nome de rel
'   - 08/set/2010 lucianol inclusão de constante de versão para icraft e componentes (uma versão para todos)
'   - 09/set/2010 lucianol inclusão mostrapaghelp para facilitar entendimento de funcionamento de páginas com parâmetros tipo aplicativo mostraimagem etc
'   - 09/set/2010 lucianol classe html agora contém help que retorna um texto html demonstrando elementos para help incluindo versão e página formato inicial depois será melhorado
'   - 21/set/2010 lucianol inclusão troca texto para executar diversos replrepl conforme paramarray passado
'   - 23/set/2010 lucianol allnbsp rotina que troca espaço no início e final mesmo que seja &nbsp; 
'   - 23/set/2010 thyagop  clobappend e clobgrava para gravação progressiva em campos com tamanho maior que o buffer do adapter
'   - 26/set/2010 lucianol tamdir para obtenção de tamanho de diretório e arquivo, possibilitando busca recursiva
'   - 26/set/2010 lucianol exibetamdir com opções de apresentação de tamanho de diretório em bytes kbytes megabytes gigabytes e teras
'   - 19/out/2010 lucianol dirreplica proteção de código tratamento das mensagens de erro com try/Catch 
'   - 19/out/2010 lucianol vardesessao alteração para possibilitar mais de um param no final de modo que pudesse utilizar em código de segurança com mais de um parâmetro
'   - 19/out/2010 lucianol exibetamdir para apresentação de expressões do tipo espaço disponível em disco
'   - 19/out/2010 lucianol dspairkey para transformar consulta em uma coleção de pairkey facilitando acesso indexado tipo php
'   - 19/out/2010 lucianol dsconfigparams para carga de mais de um parâmetro ao mesmo tempo permitindo acesso de cada um como colunas de datarow
'   - 19/out/2010 lucianol executavbs para executar cscript em shell retornando o resultado
'   - 19/out/2010 lucianol segcalc para calcular códigos de segurança a partir de página e parâmetros
'   - 22/out/2010 lucianol dacmod10 e dacmod11 para cálculo de dac de números para boleto etc
'   - 23/out/2010 lucianol carregaurlbin para carregar imagens a partir de url convertendo-as em array de bytes muito util para crystall
'   - 23/out/2010 lucianol carregaarqbin para carregar diretamente arquivos do disco salvando-os em arrays de bytes muito util para crystall
'   - 26/out/2010 lucianol urirecursoraiz para retornar link de um recurso considerando caminho alternativo sugerido por variável de ambiente recurso_uri_traduz
'   - 26/out/2010 lucianol uriraiz como função utiliza variável estática, incluído parâmetro recarregar para permitir atualização desta função pelo uc/checkup.aspx
'   - 26/out/2010 lucianol html table com possibilidade de passar um array de objetos
'   - 26/out/2010 lucianol depoisdelogin transformei este evento que erroneamente estava como shared em classe acessoevents para que não sofresse sobreposição
'   - 26/out/2010 lucianol acessoevents para permitir configuração de callback das rotinas relacionadas com acesso
'   - 26/out/2010 lucianol redircond utilização da função regex com uriraiz para saber se link atual e destino seriam iguais
'   - 26/out/2010 lucianol vardesessao permitindo a especificação de mais de um parâmetro como termo - isso possibilita concatenação em termos compostos, que pode ser utilizado com objetivo de segurança
'   - 18/nov/2010 marciof  validasenha - função de validação de senha forte com 8 caracteres, pelo menos 1 letra e um número, não pode conter mais de 2 letras ou números repetidos e tambem números e letras sequenciais
'   - 22/nov/2010 lucianol tiracaracespec - inclusão de parâmetro para permitir definição do caracter pelo qual será trocado o carac especial vazio como default
'   - 22/nov/2010 lucianol temnalista permitindo buscar em array, arraylist e outros enumerables
'   - 22/nov/2010 lucianol gerador export para mysql atualização com baseu em xml sistema e gerador
'   - 22/nov/2010 lucianol gravamysql retornando string ao invés de simplesmente gravar em arquivo
'   - 22/nov/2010 lucianol tiposcripttomysql prevendo também possibilidade de estar preenchido tipo no formato do oracle
'   - 22/nov/2010 lucianol strconndscarrega inclusão sub_g para especificar conjunto que é obrigatório em mysql
'   - 24/nov/2010 thyagot  fileexpr atualizando para que a função contemple ~/ também em vb.net
'   - 24/nov/2010 thyago   dirreplica modificação função conteúdo bloqueado para retornar booleano
'   - 24/nov/2010 lucianol icraft.vb criação da dll sendo eliminadas todas as diretivas de pre-compilação
'   - 24/nov/2010 lucianol ambiente criação de opções para saber em tempo de execução qual tipo de aplicativo entre windowsforms, web e console
'   - 24/nov/2010 lucianol funções em geral adaptando aquelas que já possui critério de ambiente para considerar também console
'   - 27/fev/2010 lucianol temnalista alteração temnalista para permitir pesquisa multivalorada temnalista("um;dois","dois;tres") = true pois dois é elem comum
'   - 27/fev/2010 lucianol modificação rotinas de pré-compilação para permitir detecção de windowsforms, web em tempo de execução
'   - 27/fev/2010 lucianol class exibe para formatar jsencod, htmlreplimgbut, htmlrepllink e htmlreplimg
'   - 27/fev/2010 lucianol exibesegs para formatar tempo considerando formato desejado e arredondamento
'   - 27/fev/2010 lucianol ldata inclusão de formato yyyy mm dd hh mm ss
'   - 27/fev/2010 lucianol ldata acerto de especificação de máscara de data de ano YYYY para yyyy, minúsculo é correto
'   - 27/fev/2010 márcio   rotinas com tabela de gerador utilizando tabespec opc sys_config ao invés do próprio nome
'   - 27/fev/2010 lucianol urljsencode evitando codificar números também. números e letras são apresentados de forma aberta (sem codificação)
'   - 27/fev/2010 lucianol nzn para considerar elemento nulo também de combo
'   - 27/fev/2010 lucianol nznv é o mesmo que nzv, mas para nzn, ou seja, considerando também elem nulo de combo
'   - 27/fev/2010 thyago   dsgrava gravação de textos com tamanho maior que o bloco permitido chunk
'   - 27/fev/2010 lucianol valoratual obtendo valor considerando elemento nulo de combo caso objeto seja uc_icftcombobox_icftcombobox_ascx
'   - 27/fev/2010 lucianol help bloco para preparação de trecho html de apresentação de mensagens de ajuda
'   - 27/fev/2010 lucianol table permitindo passagem de variável com array ao invés de lista
'   - 27/fev/2010 lucianol querydecode para proteger de letras coringa como dois pontos, barra, e comercial e igual
'   - 27/fev/2010 lucianol obtemcor permitindo recuperação de cor pelo nome
'   - 27/fev/2010 lucianol dirreplica com registro de log para erros adicionais como não encontrar arquivo, tentativa de exclusão sem sucesso
'   - 27/fev/2010 lucianol acessook com handles para notificação de antes e depois de login
'   - 27/fev/2010 lucianol acessook considerando além de loginreturl, return_url ou returnurl
'   - 27/fev/2010 lucianol nomearqlivre pega próximo arquivo livre dentro de uma sequência especificada por um nome
'   - 27/fev/2010 thyago   montaestrut inclusão de critérios botoes, busca, page_load, page_loadcomplete, carregatudo, gridsel, ordemnova, carreganav, mudoupag e btnsalva_click
'   - 27/fev/2010 lucianol mostrapaghelp para apresentar página de ajuda sem master sem muita formatação
'   - 27/fev/2010 lucianol trocatexto para trocar uma série de textos dois em dois
'   - 27/fev/2010 thyago   clobappend clob grava para gravação de textos longos
'   - 27/fev/2010 lucianol trimnbsp para eliminação de espaços incluindo espaços em entity
'   - 27/fev/2010 lucianol tamdir para mostrar tamanho de diretório
'   - 27/fev/2010 lucianol dspairkey para transformar pesquisa de dupla em dicionário de índice e valor
'   - 27/fev/2010 lucianol executavbs para executar script em dos
'   - 27/fev/2010 lucianol dacmod10 para cálculo de dígito verificador padrão mod10
'   - 27/fev/2010 lucianol dacmod11 para cálculo de dígito verificador padrão mod11
'   - 27/fev/2010 lucianol carregaurlbin para carga de arquivos binários em array de bytes
'   - 27/fev/2010 lucianol validasenha para garantir senha se é válida dentro de condições básicas passadas como parâmetros (tamanho, carac, etc)
'   - 27/fev/2010 lucianol xmlelem e xmlelemparams para obter um conteúdo através de caminho em arquivo ou formato xml
'   - 27/fev/2010 lucianol ctypeval para obtenção de valores em tipo específico
'   - 27/fev/2010 lucianol extenso para criação de texto baseado em número em determinado idioma
'   - 27/fev/2010 lucianol litem para obtenção de um número ou texto conforme posição desejada litem("texto;um;dois", "um")=2 ou litem("texto;um;dois",2) = "um"
'   - 27/fev/2010 lucianol formredim para permitir redirecionamento automático de formulário redefinindo também campos internos com marcação específica
'   - 09/mar/2010 lucianol atualizoucontrole permitindo utilização tanto da função prope como prop, estava incorreta permitindo prope sem que o param fosse passado
'   - 09/mar/2010 lucianol contatempo inclusão da função durante para fazer enquanto durante(segundos)
'   - 09/mar/2010 lucianol gerador reestruturado para funcionar com dataset. antes eram classes
'   - 09/mar/2010 lucianol dsgravalinhas para gravação de uma sequência de linhas em banco de dados
'   - 09/mar/2010 lucianol trimcarac para eliminar outros que não os espaços extremos
'   - 09/mar/2010 lucianol urlcodifica preparação de url para desempacote em variáveis request
'   - 09/mar/2010 lucianol urldecodifica para retorno de url no caso de empacotamento por urlcodifica
'   - 24/abr/2011 thyagot  formatnum - inclusão de função
'   - 24/abr/2011 thyagot  formattxt - inclusão de função
'   - 09/jun/2011 lucianol enviaemail inclusão de urlslocais para tratamento de diretório de imagens e arquivos attachados
'   - 09/jun/2011 lucianol gravalog parâmetro para iniciararq ao invés de adicionar no final
'   - 09/jun/2011 lucianol exists procurando não só em texto de prop como também em obj(atributo)
'   - 09/jun/2011 lucianol objfindatt procurando não só em texto de prop como também em obj(atributo)
'   - 09/jun/2011 lucianol urlexpr considerando retorno para ambiente web ou apl
'   - 09/jun/2011 lucianol exibedata considerando novo formato yyyy_mm_dd_hh_mm_ss
'   - 09/jun/2011 lucianol dsfiltratab inclusão de rotina para filtrar tabelas
'   - 09/jun/2011 lucianol prop considerando conteúdo do request form caso encontre checkbox vazio
'   - 09/jun/2011 lucianol macrosubst considerando dbnull como informação também na procura de variáveis
'   - 09/jun/2011 lucianol itemstoarraylist inclusão de valores também considera, além de atrib(item,proprel) e item(proprel), attributes(proprel) e prop(item,proprel)
'   - 09/jun/2011 lucianol downloadbytes só gravando fluxo caso quantidade de bytes seja diferente de zero
'   - 09/jun/2011 lucianol enviaemail limpando cids para cada envio evitando dats de nos emails enviados após o primeiro
'   - 09/jun/2011 lucianol enviaemail informação mais explícita sobre erro de não encontrar http quando imagens em anexo
'   - 09/jun/2011 lucianol enviaemail possibilidade de listitem como arquivo attachado sendo texto o nome apresentado e value o nome do arquivo enviado
'   - 09/jun/2011 lucianol uriraiz considerando tipo de ambiente sendo para forms a variável utilizada para url_raiz_site como raiz do site
'   - 09/jun/2011 lucianol raizcompl considerando tipo de ambiente sendo que ocorre para forms a trica de ~/ para raiz
'   - 09/jun/2011 lucianol filexpr para ambiente form, considera ~/ como raiz do aplicativo caso não encontre variável url_raiz_site
'   - 09/jun/2011 lucianol gravareg evita que ocorra comparação com system.dbnull para condição de gravação de campo enorme
'   - 09/jun/2011 lucianol form conteúdo nz para obter conteúdo do controle pois dava erro quando este era dbnull
'   - 09/jun/2011 lucianol máscara de entrada considerando a mesma configuração regex para currency e moeda
'   - 09/jun/2011 lucianol contatempo inclusão rotina durante para retornar booleano informando se ainda está em execução considerando segundos passados do momento de início do contador
'   - 09/jun/2011 lucianol relsn1 considerando esquema das tabelas do gerador, pois estamos utilizando mesma string de conexão e acessando com usuários distintos em apls
'   - 09/jun/2011 lucianol class email inclusão de primeiro nome e último nome que são atualizados mediante criação do endereço
'   - 09/jun/2011 lucianol criador de objetos passou a buscar dll em startuppath, startuppath/bin, basedirectory, basedirectory/bin, enviroment windir, enviroment system directory
'   - 09/jun/2011 lucianol gerador remodelagem do recurso para funcionamento em aplicativo 
'   - 09/jun/2011 lucianol inclusão montaestrut retirada do icftauto para criação de código
'   - 09/jun/2011 lucianol carregaxml possibilidade de obter a partir de um xml um dataset
'   - 09/jun/2011 lucianol gravaxml gravação de arquivo xml a partir do dataset
'   - 09/jun/2011 lucianol soma para somatório de vários números
'   - 09/jun/2011 lucianol filtrocampoconteudo que ajuda na montagem de filtros com base em critérios passados por paramarray no formato :variável e conteúdo
'   - 09/jun/2011 lucianol tipooracletoscript que retorna formato unificado o padrão oracle (na verdade, unificado já é oracle. ele apenas concatena texto a partir do datatype, datalength e precision, campos na tabela columns do oracle
'   - 09/jun/2011 lucianol tipoaccesstoscript para retornar formato unificado a partir do columns de datatable do dao
'   - 09/jun/2011 lucianol tiposcripttoaccess para atualizar estrutura equivalente com column do datatable a partir do formato unificado do gerador
'   - 09/jun/2011 lucianol tiposcripttooracle monta texto conforme especificação unificada a ser utilizado em scripts oracle
'   - 09/jun/2011 lucianol itemencode e itemdecode para proteção de conteúdo a ser encaminhado pela web, escondendo caracteres especiais
'   - 09/jun/2011 lucianol direplica função para replicação de diretórios
'   - 09/jun/2011 lucianol primletramaiuscocomespaco faz o que o nome informa. prepara textos com letras maiúsculas iniciando palavras separadas por espaço
'   - 09/jun/2011 lucianol exibetamdir possibilita obter tamanho de diretório em formato específico ou conforme melhor apresentação considerando a grandeza
'   - 09/jun/2011 lucianol codinsercoes e decodinsercoes para ser utilizada em especificação para código em linhas simples transformando enter em {vbcrlf} entre outros caracteres protegidos
'   - 09/jun/2011 lucianol segcheck que verifica mediante uma string passada a correspondência com trecho de segurança específico
'   - 09/jun/2011 lucianol segmin retorna um trecho de segurança considrando janela de tempo de minuto atual x minutos para frente e x minutos para trás
'   - 09/jun/2011 lucianol semaspas retira aspas ou "'" do termo
'   - 09/jun/2011 lucianol listaenterpvstr transforma lista de enter e ponto e vírgula em list of strings
'   - 09/jun/2011 lucianol rendertxt para ler estrutura de controle obtendo código correspondente em html
'   - 09/jun/2011 lucianol instrlista permite manuseio de listas do tipo ";um;dois;tres;quatro;" permitindo verificar, incluir ou excluir termos
'   - 09/jun/2011 lucianol carregareg considernado prefixo container esquematabelaorigem filtro podendo ser origem um sql ou o próprio dataset
'   - 09/jun/2011 lucianol tratex protege código para uso em sql oracle transformando apóstrofo em apóstrofo duplo (um sqlexpr simplificado)
'   - 09/jun/2011 lucianol defs obtém do gerador as especificações de gerador de tabela e campos
'   - 09/jun/2011 lucianol geraformapl para criar um formulário a partir das especificações de gerador possibilitando edição de dados de forma simplificada
'   - 09/jun/2011 lucianol arraydecolunas retorna um array de datacolumns com base em dataset e lista de nomes separados por ponto e vírgula
'   - 09/jun/2011 lucianol concatcampos concatena conteúdo de campos separando-os por ponto e vírgula
'   - 09/ago/2011 lucianol inclusão de função dsarquivo para carregar arquivos (imagens entre outros) pelo próprio banco de dados
'   - 09/ago/2011 lucianol inclusão função carregapb para preencher picturebox com imagem ou limpar caso seja nula ou vazia
'   - 09/ago/2011 lucianol atualização da função sync com [falha] para notificação em log e excluirquandoencontrar
'   - 09/ago/2011 lucianol inclusão de classe boleto com critérios e especificações genéricas para aplicativos web e app
'   - 24/ago/2011 lucianol inclusão de função concatvalores
'   - 24/ago/2011 lucianol recurso de importação de estruturas a partir de tabelas ger_
'   - 24/ago/2011 lucianol inclusão de função numpl para mostrar número seguido do termo no plural ou não conforme número
'   - 24/ago/2011 lucianol rotina para facilitar contagem com dicionário chamada regdict
'   - 29/ago/2011 lucianol rotina regdict para incluir automaticamente um índice em dicionário ou atualizar seu valor
'   - 29/ago/2011 lucianol paramarraytodic para transformar paramarray var:, conteudo em dicionário
'   - 29/ago/2011 lucianol equivalencia para retornar vetor var:=conteudo
'   - 29/ago/2011 lucianol regsplit para quebrar strings em matches
'   - 29/ago/2011 lucianol classe codbarras permitindo trabalhar com tipos 128c, 128b e interc25
'   - 12/dez/2011 lucianol limitaseqcarac para incluir espaço de x em x caracteres para garantir adequada apresentação em tabelas (sem espaços trechos ultrapassam área de apresentação)
'   - 19/dez/2011 lucianol inclusão de rotinas de tradução código morse texto para código e código para texto
'   - 27/dez/2011 lucianol alteração rotina eliminareg para considerar obtemvalorctl ao invés de ctlprop(atual)
'   - 27/dez/2011 lucianol rotina gravareg estava considerando incorretamente columnname para formulário ao invés de name apenas. alterada rotina para considerar columnname para datarow e name para demais condições
'   - 03/jan/2012 lucianol splitmultdelim para dividir linha considerando diversos delimitadores
'   - 10/jan/2012 lucianol classe boleto inclusão de especificação de campos em linha digitável
'   - 10/jan/2012 lucianol splitmultidelim para permitir quebra por múltiplos delimitadores transformando trechos em arraylist
'   - 15/jan/2012 lucianol gravareg considerando busca de dados em datarow ao invés de container form
'   - 16/jan/2012 lucianol incorporação de imagem em boleto para tornar ferramenta independente
'   - 16/jan/2012 lucianol preparo de função para carga de definições a partir de dataset a ser utilizada pela rotina de filtro
'   - 16/jan/2012 lucianol utilização de obtervalor ao invés de ctypestr na busca por chave a ser excluída
'   - 17/jan/2012 lucianol formato para geração de formulário considerando relacionamento complementar (escolhe primeiro seleciona segundo)
'   - 17/jan/2012 lucianol incorporação de rotina de carga de definições a partir de dataset na ferramenta de filtro
'   - 17/jan/2012 lucianol inclusão de ATUALIZADO_POR para permitir atualização de campos interdependentes e forms
'   - 17/jan/2012 lucianol classe boleto eliminação da função dirimagem
'   - 30/jan/2012 lucianol nova versão devido à implementação de instrução/carregamento no CLC
'   - 30/jan/2012 lucianol inclusão do trimcasado
'   - 22/abr/2012 lucianol imagetobitmap inclusão de rotina para transformar image em bitmap
'   - 22/abr/2012 lucianol bitmaptoimage inclusão de rotina para transformar bitmap em image
'   - 22/abr/2012 lucianol paracaber rotina para proporcionalizar bitmap conforme maior tamanho em quadro definido mantendo escala
'   - 22/abr/2012 raul     exibesegsopc inclusão de params d_dias_x_horas_y_minutos_e_z_segundos e mm_ss
'   - 22/abr/2012 lucianol carregaarqbin fechamento de arquivo após carga dos bytes
'   - 22/abr/2012 cleiton  gravaoracle inclusão de linha para liberar utilização de pacote utlpkg.xml (preparação para envio de mensagem)
'   - 22/abr/2012 cleiton  formato inclusão de rotina para validação de máscara sem ponto
'   - 22/abr/2012 lucianol arraypegaitem obtem elementos de x em x elementos (pulando qtd informada)
'   - 22/abr/2012 lucianol otemdoxmlelem para obtenção de item em xml utilizando apontamento sequenciado PARAM1/PARAM2/PARAM3...
'   - 22/abr/2012 lucianol arquivodet para obtenção de detalhes de lista de arquivos
'   - 22/abr/2012 lucianol colunapornome para obtenção de coluna através de pesquisa por nome
'   - 24/abr/2012 lucianol gravaarqbin para gravação de arquivos binários
'   - 12/jun/2012 lucianol topacum para retornar posicionamento acumlado de um campo referenete a altrura
'   - 12/jun/2012 lucianol topacum para retornar posicionamento acumlado de um campo referenete ao left
'   - 20/jun/2012 lucianol função para exportação para excel com base em tabela
'   - 20/jun/2012 lucianol função para obtenção do diretório do aplicativo corrente
'   - 30/jun/2012 lucianol função para separar cláusulas IN em um arraylist
'   - 07/jul/2012 lucianol definetamcols para definir tamanho de colunas em grid
'   - 07/jul/2012 lucianol obtemtamcols para obter configuração atual de colunas de grid
'   - 07/jul/2012 lucianol inclusão de texto condicional para obtenção 10.0.0.*|teste1|10.50.0.*|teste2...
'   - 09/jul/2012 lucianol inclusão de salvaarraybyte para salvar um array de bytes em um arquivo compactado
'   - 29/jul/2012 lucianol troca de prope (antigo) por ctlprop para possibilitar gravação de propriedade também no windows.forms
'   - 29/jul/2012 lucianol carregacombo caso seja windows.forms, não passar login(page) como parâmetro
'   - 29/jul/2012 lucianol carregacombo uso de carga assíncrona quando windows.forms
'   - 29/jul/2012 lucianol carregacomboassinc rotina incluída para carga de combos de forma assíncrona, sem travamento da máquina
'   - 29/jul/2012 lucianol assincdet para registro de rotinas assíncronas ainda em execução. limpaassinccomplet para garantir que permaneçam apenas rotinas em execução sendo eliminadas as demais
'   - 29/jul/2012 lucianol ctlprop novo permite obtenção de param de windows forms ou attributes em system.web
'   - 07/jan/2013 lucianol função grava reg não estava considerando todos os campos tipo clob. gravava apenas o primeiro. for incluído para considerar todos
'   - 07/jan/2013 lucianol na criação do formulário, após criação de campo browser, bind para sua ativação
'   - 07/fev/2013 silvio   atualização da propriedade SegCalc para gerar uma nova série de senhas
'   - 12/ago/2013 lucianol tratarsa para facilitar manipulação de criptografia RSA
'   - 14/ago/2013 silvio   função GetWindowThreadProcessId para pegar o Id do processo da janela ativa através de API.
'   - 14/ago/2013 silvio   função Fecha Excel para poder encerrar o processo do excel e evitar ocupação de memória desnecessário.
'   - 08/jun/2014 lucianol desltxt para deslocar linhas em texto (incluir trecho no início de cada uma)
'   - 08/jun/2014 lucianol arvtotxt para converter uma árvore treeview em txt considerando deslocamento hierárquico
'   - 08/jun/2014 lucianol arvtoxmldoc para converter árvore em um xmldoc considerando pre-âmbulo <xml>
'   - 08/jun/2014 lucianol arvtoxmlnode para converter apontamento em árvore em xmlnode
'   - 08/jun/2014 lucianol joinsqlexpr para join utilizando sqlexpr
'   - 08/jul/2014 lucianol carregaxmlnaarv carrega arquivo xml ou estrutura xml em uma treeview
'   - 14/jul/2014 lucianol randtext para obter strings aleatórias
'   - 14/jul/2014 lucianol classe captchaimagem para renderizar textos evitando ação de robôs
'   - 14/jul/2014 lucianol classe captcha para facilitar implementação do conceito mantendo último segredo
'   - 15/jul/2014 lucianol selitems para retornar texto representando itens selecionados de listbox
'   - 16/jul/2014 lucianol criaobj função para criar objeto a partir da biblioteca e da classe 
'   - 02/set/2017 lucianol assincrun correção de problema tornando fazendo uso do abort para cancelar a thread

' IDÉIAS/NECESSIDADES:::
'   - xtecnico xxcomentárioxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
'   - lucianol necessária criação de sys_config_global também no access
'   - lucianol necessária atualização de conteudo para config em referências para campo de sys_config_global
'   - lucianol apagar arquivos desnecessários em solução lightbox como imagens, por exemplo.
'   - lucianol ferramenta capaz de verificar 
'   - lucianol arrayv, ver velocidade de busca no array por delegate e busca por for each.
'   - lucianol elementosstr, registrar velocidade e buscar instruções de par ordenado.
'   - lucianol carregacombo, implementar regex consideraando "teste de ; texto";"mais um".
'   - lucianol macrosubst, deixar claro os itens que sofrem interpretação de macrosubst: sql no carrega, tabela e sistema no combobox.
'   - lucianol macrosubst, verificar performance de consultas sem e consultas com macrosubst.
'   - lucianol nz, ver comparação de performance de if not isnothing(..) e nz.
'   - lucianol notamsg, pedir para pessoal fazer tela html para montagem em java (ou control.add) da mensagem de erro para usuário.
'   - lucianol notamsg, permitir parametrização de erros desconhecidos para facilitar testes (mediante a verificação, algumas redes poderiam efetuar o cadastro do regex correspondente e mensagem padronizada).
'   - lucianol notamsg, seria interessante criar um componente ao invés de rotina de biblioteca que tivesse layout e o verifica já no PRE_RENDER.
'   - lucianol itenstoarraylist, necessária utilização da função prop(variavel, propriedade) para expandir a funcionalidade.
'   - lucianol notamsg, hoje, apresenta apenas msg e dá opção de fechar.
'   - lucianol notamsg, caso urldestino esteja vazia, será realmente a opção de fechar, mas caso esteja preenchida, ao invés de fechar, apresentará continuar sendo o javascript um redirecionamento para esta nova página..
'   - lucianol notamsg, bloquear os eventos do javascript enquanto a msg estiver sendo apresentada (simular popup)..
'   - lucianol showjsmessage, incluir parâmetro na função javascript showjsmessage permitindo que se passe um texto para título da janela..
'   - lucianol notamsg, incluir enum que apresente os diversos estados (ou títulos) facilitando a string "carregando registro", "carregando página"....
'   - lucianol proxseq, utilizado em chaves compostas (inclusão de filtro).
'   - lucianol valordefault, deve tratar macrosubstituição.
'   - lucianol now em format no macrosubstituição.
'   - lucianol ip e outros, request e server no macrosubst.
'   - lucianol logon, deve considerar ip (função de logon simples e concatenado com ip).
'   - lucianol notamsg, deve registrar erro como ocorre no errohttpmodule.
'   - lucianol form, muito difícil, mas seria interessante marcar conteúdo pesquisado em campos (amarelo).
'   - lucianol detailsview, atualizar somente mediante alguma atualização.
'   - lucianol gridview e detailsview altera atualizar para mudancadeselecao
'   - lucianol     e mudancadedados :selecao para alteracao de chave, o que
'   - lucianol     obrigaria reposicionamentos das dependências / :mudancadedados 
'   - lucianol     para atualizacao dos dados em dependências.
'   - lucianol icftform, ao alterar combo tarefa usuário, campo cliente no filtro, ocorre postback sem necessidade.

'
' --------------------------------------------------------------------------------
'
'
'

' Exigência de bibliotecas Icraft.DLL - 2011
Imports Microsoft.VisualBasic ' Recursos antigos de linguagem vb.
Imports System.Collections.Generic ' Coleções.
Imports System.Collections.ObjectModel ' Pré-definições para coleções.
Imports System.Configuration ' Acesso à arquivos de configuração.
Imports System.Data ' Oledb microsoft.
Imports System.Data.OleDb ' Oledb microsoft.
Imports System.Drawing ' Edição de imagens.
Imports System.IO ' Acesso à arquivos.
Imports System.Linq ' Linq.
Imports System.Net ' Recursos de rede.
Imports System.Net.Mail ' Correio eletrônico.
Imports System.Text ' Manipulação de texto stringbuilder.
Imports System.Text.RegularExpressions ' Regex.
Imports System.Web ' Suporte web (obrigatório para integração de funções app/web).
Imports System.Web.Security ' Segurança de web (obrigatório para integração de funções app/web).
Imports System.Web.UI ' Componentes para web (obrigatório para integração de funções app/web).
Imports System.Web.UI.WebControls ' Controles web (obrigatório para integração de funções app/web).
Imports System.Windows.Forms.Form ' Controles em form (obrigatório para integração de funções app/web).
Imports System.Xml ' Serialização de xml.
Imports Microsoft.Win32 ' Declare para acesso de funções user.
Imports System.Data.SqlClient ' Acesso à sqlserver (obrigatório para integração oracle/mysql/sqlserv).
Imports System.Web.Services ' Disponibilização de interfaces webservices.
Imports System.Web.Services.Protocols ' Manuseio de ferramentas de protocolo.
Imports System.Security.Cryptography ' Biblioteca de criptografia.
Imports System
Imports System.Drawing.Drawing2D
Imports System.Drawing.Imaging
Imports System.Drawing.Text


Namespace Icraft ' Biblioteca desenvolvida pela Intercraft para uso genérico em aplicativos - componentes/funções desde 1996 - contém antigas funções VBA e adaptação das mesmas para ambiente VB.NET.

    <WebService()> Public Class IcftBase ' Funções Intercraft para uso genérico em aplicativos - acessibilidade em VB, VC, CSHARP, MsAccess, Oracle entre outros ambientes.
        ''' <summary>
        ''' Obtém versão do conjunto de soluções Intercraft para aplicativos.
        ''' </summary>
        ''' <value>Versão no formato V1.1.1.1.</value>
        ''' <returns>Versão no formato V1.1.1.1.</returns>
        ''' <remarks></remarks>
        Public Shared ReadOnly Property Versao() As String
            Get
                Return "V" & Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1).Replace("Version=", ""))
            End Get
        End Property

        ''' <summary>
        ''' Separador padrão de colunas em combo ou elementos da biblioteca de um modo geral: PARAM1 | PARAM2 ...
        ''' </summary>
        ''' <remarks></remarks>
        Public Const ComboSepDefault As String = " | "

        ''' <summary>
        ''' String que aparece na combo quando item vazio é incluído, representando nenhuma seleção.
        ''' </summary>
        ''' <remarks></remarks>
        Public Const ComboNull As String = "--"

        ''' <summary>
        ''' Definições DAO para permitir vínculo conforme necessidade.
        ''' </summary>
        ''' <remarks></remarks>
        Public Const DAO_RelationAttributeEnum_dbRelationDeleteCascade As Integer = 4096 ' Exclusão em cascata para atributo de DAO.
        Public Const DAO_RelationAttributeEnum_dbRelationUpdateCascade As Integer = 256 ' Atualização em cascata para atributo de DAO.
        Public Const DAO_RelationAttributeEnum_dbRelationDontEnforce As Integer = 2 ' Não garantir integridade para atributo de DAO.
        Public Const DAO_DataTypeEnum_dbText As Integer = 10 ' Atributo de DAO do tipo texto.
        Public Const DAO_DataTypeEnum_dbDouble As Integer = 7 ' Atributo de DAO do tipo double.
        Public Const DAO_DataTypeEnum_dbDate As Integer = 8 ' Atributo de DAO do tipo data.
        Public Const DAO_DataTypeEnum_dbMemo As Integer = 12 ' Atributo de DAO do tipo memo.
        Public Const DAO_DataTypeEnum_dbBinary As Integer = 9 ' Atributo de DAO do tipo binário.
        Public Const DAO_DataTypeEnum_dbBoolean As Integer = 1 ' Atributo de DAO do tipo booleano.
        Public Const DAO_LanguageConstants_dbLangGeneral As String = ";LANGID=0x0409;CP=1252;COUNTRY=0" ' Especificação genérica para atributo de DAO.

        ''' <summary>
        ''' Tipos de bases previstas, nomes de providers para facilitar.
        ''' </summary>
        ''' <remarks></remarks>
        Public Const MySQL As String = "MySql.Data.MySqlClient" ' Nome padrão para componente de acesso Mysql.
        Public Const MSAccess As String = "System.Data.OleDb" ' Nome padrão para componente de acesso ao MsAccess.
        Public Const Oracle As String = "System.Data.OracleClient" ' Nome padrão para componente de acesso ao Oracle.
        Public Const SQLServer As String = "System.Data.SqlClient" ' Nome padrão para componente de acesso ao SQLServer.
        Public Const Odbc As String = "System.Data.Odbc" ' Nome padrão para banco de dados ODBC.

        ''' <summary>
        ''' Opções de comando para funções de formatação de data para gravação em banco de dados.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum TipoBaseSQL
            Gerador
            MSAccess
            MySQL
            Oracle
            SQLServer
            XML
        End Enum

        ''' <summary>
        ''' Opções de comando para funções de tratamento de SQL.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum ExprSQLTipo
            Sel
            Ins
            Upd
            Del
        End Enum

        ''' <summary>
        ''' Chave default utilizada por encrypt/decrypt para codificação de texto.
        ''' </summary>
        ''' <remarks></remarks>
        Const EncrypBChavePadrao As String = "AoPu2.%X´A¨'AÇç~^.M<"

        ''' <summary>
        ''' Idiomas padronizados facilitando seu uso em biblioteca.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum TipoIdioma
            PT_BR
            EN
            ES
        End Enum

        ''' <summary>
        ''' Opções para interpretação do elemento quando adicionado ao conjunto elementosstr.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum ElementoStrOpera
            Atribui
            Aumenta
            Diminui
        End Enum

        ''' <summary>
        ''' Texto encontrado em tipo de componente.
        ''' </summary>
        ''' <remarks></remarks>
        Const TipoTxtIcftMenu As String = "ASP.uc_icftmenu_ascx"

        ''' <summary>
        ''' Texto utilizado como tabulador em visualizações das comparações de estrutura no GERADOR.
        ''' </summary>
        ''' <remarks></remarks>
        Const Gerador_Tabula As String = "+--"

        ''' <summary>
        ''' Atributos previstos para procura node.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum NodeCampo
            NavigateUrl
            Text
            TooolTip
            ValuePath
        End Enum

        ''' <summary>
        ''' Tipo de opção para execução NOCACHE.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum NoCacheTipo
            PaginaExpirada
            SemHistorico
        End Enum

        ''' <summary>
        ''' Lista de países para preenchimento de fontes de dados de controles combo e afins.
        ''' </summary>
        ''' <value></value>
        ''' <returns>Um array de strings onde cada elemento representa um país da lista.</returns>
        ''' <remarks></remarks>
        Shared ReadOnly Property ListaDePaises(Optional Maiusculas As Boolean = False) As Array
            Get
                Dim Paises As String = "Brasil,Afeganistão,África do Sul,Albânia,Alemanha,Algéria,Andorra,Angola,Anguilla,Antártida,Antígua e Barbuda,Antilhas Holandesas,Arábia Saudita,Argentina,Armênia,Aruba,Austrália,Áustria,Azerbaijão,Bahamas,Bahrain,Bangladesh,Barbados,Belarus,Bélgica,Belize,Benin,Bermuda,Bolívia,Butão,Bósnia-Herzegovina,Botsuana,Brunei,Bulgária,Burkina Faso,Burundi,Cabo Verde,Camboja,Camarões,Canadá,Casaquistão,Chade,Chile,China,Chipre,Colômbia,Comoros,Congo,Coréia do Norte,Coréia do Sul,Costa do Marfim,Costa Rica,Croácia,Cuba,Dinamarca,Djibouti,Dominica,El Salvador,Equador,Egito,Emirados Árabes Unidos,Eritréia,Espanha,Eslováquia,Eslovênia,Estados Unidos da América,Estônia,Etiópia,Fiji,Filipinas,Finlândia,França,Gabão,Gâmbia,Gana,Geórgia,Gibraltar,Granada,Grécia,Groelândia,Guadalupe,Guam,Guatemala,Guiana Francesa,Guiné,Guiné-Bissau,Guiné Equatorial,Guiana,Haiti,Honduras,Hong Kong,Hungria,Iêmen,Ilhas Cayman,Ilha Bouvet,Ilhas Cocos,Ilhas Cook,Ilhas costeiras dos EUA,Ilhas Costeiras dos EUA,Ilhas Faroe,Ilhas Heard e McDonald,Ilhas Mariana do Norte,Ilhas Marshall,Ilhas Natal,Ilha Norfolk,Ilha Pitcairn,Ilhas S. Georgia e S. Sandwich,Ilhas Salomão,Ilhas Svalbard e Jan Mayen,Ilhas Turks e Caicos,Ilhas Virgens,Ilhas Virgens Britânicas,Ilhas Wallis e Futuna,Índia,Indonésia,Islândia,Irã,Iraque,Irlanda,Israel,Itália,Iugoslávia (ex-),Jamaica,Japão,Jordânia,Kiribati,Kuwait,Kyrgyztan,Laos,Látvia,Lesoto,Líbano,Libéria,Líbia,Liechtenstein,Lituânia,Luxemburgo,Macau,Macedônia,antiga Iugoslávia,Madagascar,Malásia,Malaui,Maldivas,Mali,Malta,Marrocos,Martinica,Maurício,Mauritânia,Mayotte,México,Micronésia,Moçambique,Moldova,Mônaco,Mongólia,Montserrat,Myanmar,Namíbia,Nauru,Nepal,Holanda,Nicarágua,Niger,Nigéria,Niue,Noruega,Nova Caledônia,Nova Zelândia,Oman,Palau,Panamá,Papua Nova Guiné,Paquistão,Paraguai,Peru,Polinésia Francesa,Polônia,Porto Rico,Portugal,Qatar,Quênia,Reino Unido,República Centro-Africana,República Dominicana,República Tcheca,Reunião,Romênia,Ruanda,Rússia,Saara Ocidental,Saint Kitts e Nevis,Saint Vincent e Grenadines,Samoa,Samoa Americana,San Marino,Santa Helena,Santa Lúcia,São Tomé e Príncipe,Senegal,Serra Leão,Seychelles,Singapura,Síria,Somália,Sri Lanka,St. Pierre e Miquelon,Sudão,Suriname,Suazilândia,Suécia,Suíça,Tailândia,Taiwan,Tajikistão,Tanzânia,Territórios Franceses do Sul,Território marítimo das Índias Britânicas,Timor Leste,Togo,Tokelau,Tonga,Trinidad e Tobago,Tunísia,Turcomenistão,Turquia,Tuvalu,Ucrânia,Uganda,Uruguai,Usbequistão,Vanuatu,Vaticano,Venezuela,Vietnã,Zaire,Zâmbia,Zimbábue"
                If Maiusculas Then
                    Paises = UCase(Paises)
                End If
                Return Split(Paises, ",")
            End Get
        End Property

        ''' <summary>
        ''' Lista de estados do Brasil para preenchimento de fontes de dados de controles combo e afins.
        ''' </summary>
        ''' <value></value>
        ''' <returns>Um array de strings onde cada elemento representa um estado do Brasil presente na lista.</returns>
        ''' <remarks></remarks>
        Shared ReadOnly Property EstadosDoBrasil() As Array
            Get
                Return Split("AC,AL,AM,AP,BA,CE,DF,ES,EX,GO,MA,MG,MS,MT,PA,PB,PE,PI,PR,RJ,RN,RO,RR,RS,SC,SE,SP,TO", ",")
            End Get
        End Property

        ''' <summary>
        ''' Lista com código de ocorrências da Caixa Econômica.
        ''' </summary>
        ''' <returns>Listagem com chave, valor de ocorrências da Caixa Econômica.</returns>
        Shared ReadOnly Property CodOcorrenciaCAIXA() As Dictionary(Of String, String)
            Get
                Dim dict As New Dictionary(Of String, String)
                dict.Add("00", "00 - Nenhuma")
                dict.Add("01", "01 - Solicitação de Impressão de Títulos Confirmada")
                dict.Add("02", "02 - Entrada Confirmada")
                dict.Add("03", "03 - Entrada Rejeitada")
                dict.Add("04", "04 - Transferência de Carteira/Entrada")
                dict.Add("05", "05 - Transferência de Carteira/Baixa")
                dict.Add("06", "06 - Liquidação")
                dict.Add("07", "07 - Confirmação Do Recebimento da Instrução de Desconto")
                dict.Add("08", "08 - Confirmação Do Recebimento Do Cancelamento Do Desconto")
                dict.Add("09", "09 - Baixa")
                dict.Add("12", "12 - Confirmação Recebimento Instrução de Abatimento")
                dict.Add("13", "13 - Confirmação Recebimento Instrução de Cancelamento Abatimento")
                dict.Add("14", "14 - Confirmação Recebimento Instrução Alteração de Vencimento")
                dict.Add("19", "19 - Confirmação Recebimento Instrução de Protesto")
                dict.Add("20", "20 - Confirmação Recebimento Instrução de Sustação/Cancelamento de Protesto")
                dict.Add("25", "25 - Protestado e Baixado (Baixa por Ter Sido Protestado)")
                dict.Add("26", "26 - Instrução Rejeitada")
                dict.Add("27", "27 - Confirmação Do Pedido de Alteração de Outros Dados")
                dict.Add("28", "28 - Débito de Tarifas/Custas")
                dict.Add("30", "30 - Alteração de Dados Rejeitada")
                dict.Add("35", "35 - Confirmação de Inclusão Banco de Sacado")
                dict.Add("36", "36 - Confirmação de Alteração Banco de Sacado")
                dict.Add("37", "37 - Confirmação de Exclusão Banco de Sacado")
                dict.Add("38", "38 - Emissão de Bloquetos de Banco de Sacado")
                dict.Add("39", "39 - Manutenção de Sacado Rejeitada")
                dict.Add("40", "40 - Entrada de Título via Banco de Sacado Rejeitada")
                dict.Add("41", "41 - Manutenção de Banco de Sacado Rejeitada")
                dict.Add("44", "44 - Estorno de Baixa / Liquidação")
                dict.Add("45", "45 - Alteração de Dados")
                Return dict
            End Get
        End Property


        ''' <summary>
        ''' Envia email e, caso ocorra, retorna string de erro.
        ''' </summary>
        ''' <param name="De">Nome e email do remetente no formato: 'nome' [email@dominio.com.br].</param>
        ''' <param name="Para">Nome e email dos destinatários no formato: 'nome1' [email1@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="Assunto">Texto de assunto da mensagem.</param>
        ''' <param name="Corpo">Corpo da mensagem em html.</param>
        ''' <param name="Prioridade">Nível de prioridade entre alta, normal e baixa.</param>
        ''' <param name="SmtpHost">Servidor de smtp. Na sua ausência, smtp_host do webconfig será considerado.</param>
        ''' <param name="SmtpPort">Porta de smtp. Na sua ausência, smtp_host do webconfig será considerada.</param>
        ''' <param name="CC">Com cópia. Deve conter lista 'nome' [email@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="BCC">Com cópia oculta. Também pode ser informado com BCC na frente de qualquer destinatário. Deve conter lista 'nome' [email@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="SMTPUsuario">Usuário de autenticação no SMTP.</param>
        ''' <param name="SMTPSenha">Senha de autenticação no SMTP.</param>
        ''' <param name="IncorporaImagens">Ordena incorporação das imagens ao invés de seguirem links para elas.</param>
        ''' <param name="UrlsLocais">Parâmetros contendo url e dir correspondente para redirecionamento, podendo ser mais de um par.</param>''' 
        ''' <param name="Attachs">Lista de arquivos a seguirem attachados.</param>
        ''' <returns>Retorna um texto correspondente ao erro ou "" caso o envio tenha sido um sucesso.</returns>
        ''' <remarks></remarks>
        Public Shared Function EnviaEmail(ByVal De As String, ByVal Para As Object, ByVal Assunto As String, ByVal Corpo As String, Optional ByVal Prioridade As System.Net.Mail.MailPriority = MailPriority.Normal, Optional ByVal SmtpHost As String = Nothing, Optional ByVal SmtpPort As Integer = Nothing, Optional ByVal CC As Object = Nothing, Optional ByVal BCC As Object = Nothing, Optional ByVal SMTPUsuario As String = "", Optional ByVal SMTPSenha As String = "", Optional ByVal IncorporaImagens As Boolean = False, Optional ByVal UrlsLocais As ArrayList = Nothing, Optional ByVal Attachs As ArrayList = Nothing) As String
            Dim Mail As New System.Net.Mail.MailMessage

            SmtpHost = NZV(SmtpHost, WebConf("smtp_host"))
            SmtpPort = NZV(NZV(SmtpPort, Val(WebConf("smtp_port"))), 25)
            SMTPUsuario = NZV(SMTPUsuario, WebConf("smtp_usuario"))
            SMTPSenha = NZV(SMTPSenha, WebConf("smtp_senha"))

            Dim Enviar As New System.Net.Mail.SmtpClient(SmtpHost, SmtpPort)
            Dim TMPS As New ArrayList
            Dim Ret As String = EnviaEmail(Mail, Enviar, De, Para, Assunto, Corpo, Prioridade, SmtpHost, SmtpPort, CC, BCC, SMTPUsuario, SMTPSenha, IncorporaImagens, , TMPS, UrlsLocais, Attachs)
            Mail.Dispose() ' libera arquivos
            Mail = Nothing
            ApagaTemps(TMPS)
            Return Ret
        End Function

        ''' <summary>
        ''' Grava texto em arquivo no disco.
        ''' </summary>
        ''' <param name="ArqLog">Nome do arquivo, incluindo seu diretório.</param>
        ''' <param name="Msg">Mensagem a ser gravada.</param>
        ''' <remarks></remarks>
        Public Shared Sub GravaLog(ByVal ArqLog As String, ByVal Msg As String, Optional ByVal IniciarArq As Boolean = False, Optional ByVal Enc As Encoding = Nothing)
            Dim EXU As Exception = Nothing
            For n As Integer = 1 To 10
                Try
                    Dim log As System.IO.StreamWriter

                    If IsNothing(Enc) Then
                        log = New System.IO.StreamWriter(ArqLog, Not IniciarArq)
                    Else
                        log = New System.IO.StreamWriter(ArqLog, Not IniciarArq, Enc)
                    End If
                    log.WriteLine(Msg)
                    log.Close()
                    Exit Sub
                Catch EX As Exception
                    EXU = EX
                End Try
                System.Threading.Thread.Sleep(10)
            Next
            Throw New Exception("Falha ao tentar gravar em arquivo de log uma ocorrência:         " & EXU.Message)
        End Sub

        ''' <summary>
        ''' Verifica existência de item na lista sem quebra por delimitador.
        ''' </summary>
        ''' <param name="LISTA">Lista de objetos onse a pesquisa ocorrerá.</param>
        ''' <param name="Conteudo">Conteúdo pesquisado.</param>
        ''' <param name="Atributo">Atributo opcional. Na falta deste, nome será utilizado.</param>
        ''' <returns>Retorna true caso encontre ou false caso contrário.</returns>
        ''' <remarks></remarks>
        Public Shared Function Exists(ByVal Lista As Object, ByVal Conteudo As Object, Optional ByVal Atributo As String = "") As Boolean
            For Each Obj As Object In Lista
                Try
                    If Prop(Obj, Atributo) = Conteudo Then
                        Return True
                    End If
                Catch
                End Try
                Try
                    If Obj(Atributo) = Conteudo Then
                        Return True
                    End If
                Catch
                End Try
            Next
            Return False
        End Function

        ''' <summary>
        ''' Verifica se existe texto em uma string determinada.
        ''' </summary>
        ''' <param name="Texto">Texto onde será procurado.</param>
        ''' <param name="Conteudo">Conteúdo que será pesquisado.</param>
        ''' <param name="Delimit">Delimiteador.</param>
        ''' <param name="IgnoreCase">Caso para ignorar.</param>
        ''' <returns></returns>
        Public Shared Function TemNaString(ByVal Texto As Object, ByVal Conteudo As Object, Optional ByVal Delimit As String = ";", Optional ByVal IgnoreCase As Boolean = True) As Boolean
            For Each Termo In Split(Conteudo, Delimit)
                If InStr(Texto, Termo) <> 0 Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Verifica existência de item texto na lista, quebrando texto origem conforme delimitador "UM;DOIS;TRES".
        ''' </summary>
        ''' <param name="LISTA">Texto ou lista de objetos onde conteúdo será pesquisado.</param>
        ''' <param name="Conteudo">Conteúdo a ser pesquisado, que pode ser um texto ou um objeto.</param>
        ''' <param name="Delimit">Delimitador para o caso de origem como texto, que será decomposto de acordo com o delimitador.</param>
        ''' <param name="IgnoreCase">Opção de ignorar diferenciação de maiúsculas e minúsculas.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function TemNaLista(ByVal Lista As Object, ByVal Conteudo As Object, Optional ByVal Delimit As String = ";", Optional ByVal IgnoreCase As Boolean = True) As Boolean
            Dim ListaObj As Object = Nothing
            If TypeOf Lista Is String Then
                ListaObj = Split(Lista, Delimit)
            ElseIf TypeOf Lista Is System.Enum Then
                If IsArray(Conteudo) Then
                    For Each Item As Object In Conteudo
                        Dim Result As Boolean = TemNaLista(Lista, Item, Delimit, IgnoreCase)
                        If Result Then Return True
                    Next
                    Return False
                End If
                Dim RetEnum As Object = System.Enum.Parse(Lista, Conteudo, True)
                Return Not IsNothing(RetEnum)
            Else
                ListaObj = Lista
            End If
            If TypeOf Conteudo Is String AndAlso InStr(Conteudo, Delimit) <> 0 Then
                Conteudo = Split(Conteudo, Delimit)
            End If
            If Not IsNothing(Lista) Then
                For Each Elem As Object In ListaObj
                    If IsArray(Conteudo) Then
                        Dim Result As Boolean = TemNaLista(Conteudo, Elem)
                        If Result Then Return True
                    Else
                        If TypeOf Elem Is String Then
                            If Compare(Elem, Conteudo, IgnoreCase) Then
                                Return True
                            End If
                        Else
                            If Elem = Conteudo Then
                                Return True
                            End If
                        End If
                    End If
                Next
                Return False
            End If
            Return Nothing
        End Function


        ''' <summary>
        ''' Procura objeto através de um atributo.
        ''' </summary>
        ''' <param name="LISTA">Lista de objetos na qual a pesquisa ocorrerá.</param>
        ''' <param name="Conteudo">Conteúdo a ser pesquisado.</param>
        ''' <param name="Atributo">Atributo considerado para pesquisa. Na sua ausência, nome será escolhido.</param>
        ''' <returns>Retorna o item encontrado ou nothing caso não haja coincidência de atributo.</returns>
        ''' <remarks></remarks>
        Shared Function ObjFindByAtt(ByVal Lista As Object, ByVal Conteudo As Object, Optional ByVal Atributo As String = "") As Object
            For Each Obj As Object In Lista
                Try
                    If Prop(Obj, Atributo) = Conteudo Then
                        Return Obj
                    End If
                Catch
                End Try
                Try
                    If Obj(Atributo) = Conteudo Then
                        Return Obj
                    End If
                Catch
                End Try
            Next
            Return Nothing
        End Function

        ''' <summary>
        ''' Executa pausa na thread atual como sleep.
        ''' </summary>
        ''' <param name="Segundos">Segundos de pausa.</param>
        ''' <remarks></remarks>
        Shared Sub Espera(ByVal Segundos As Double)
            If Ambiente() = AmbienteTipo.Windowsforms Then
                Dim n As Date = Now
                Do While (Now - n).TotalSeconds < Segundos
                    If System.Windows.Forms.Application.MessageLoop() Then
                        System.Windows.Forms.Application.DoEvents()
                    End If
                Loop
            Else
                System.Threading.Thread.Sleep(Segundos * 1000)
            End If
        End Sub

        ''' <summary>
        ''' Troca de texto enquanto este for encontrado na string de origem.
        ''' </summary>
        ''' <param name="Texto">Texto no qual ocorrerá a troca.</param>
        ''' <param name="De">Texto que será trocado. Enquanto este for encontrado, será substituído.</param>
        ''' <param name="Para">Texto a ser colocado no local do texto encontrado.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Shared Function ReplRepl(ByVal Texto As String, ByVal De As String, ByVal Para As String) As String
            Do While InStr(Texto, De) <> 0
                Texto = Replace(Texto, De, Para)
            Loop
            Return Texto
        End Function

        ''' <summary>
        ''' Procura node em uma árvore através de atributos previstos como enum NodeCampo.
        ''' </summary>
        ''' <param name="Arvore">Árvore onde ocorrerá a procura.</param>
        ''' <param name="Campo">Atributos no qual será baseada a procura.</param>
        ''' <param name="Conteudo">Conteúdo que deverá constar no atributo.</param>
        ''' <returns>Retorna o threenode, caso seja encontrado ou Nothing.</returns>
        ''' <remarks></remarks>
        Shared Function ProcuraNode(ByVal Arvore As TreeNodeCollection, ByVal Campo As NodeCampo, ByVal Conteudo As String) As TreeNode
            If Not IsNothing(Conteudo) Then
                For Each No As TreeNode In Arvore
                    Dim Ret As TreeNode = Nothing

                    If Campo = NodeCampo.NavigateUrl AndAlso TemNaLista(Conteudo, No.NavigateUrl) Then
                        Ret = No
                    ElseIf Campo = NodeCampo.Text AndAlso RegexGroup(No.Text, "(^|<div .*>)" & Conteudo & "($|</div>)").Success Then
                        Ret = No
                    ElseIf Campo = NodeCampo.TooolTip AndAlso Compare(No.ToolTip, Conteudo) Then
                        Ret = No
                    ElseIf Campo = NodeCampo.ValuePath AndAlso Compare(No.ValuePath, Conteudo) Then
                        Ret = No
                    Else
                        Ret = ProcuraNode(No.ChildNodes, Campo, Conteudo)
                    End If
                    If Not IsNothing(Ret) Then
                        Return Ret
                    End If
                Next
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Busca de node com base em conteúdo passado por variável GET.
        ''' </summary>
        ''' <param name="Arvore">Árvore a ser pesquisada.</param>
        ''' <param name="URL">URL tratada contendo a variável.</param>
        ''' <param name="SessaoVarNome">Nome da variável a ser extraída da URL.</param>
        ''' <param name="SessaoVarDef">Valor default da variável a ser considerada na falta da variável.</param>
        ''' <returns>Node encontrado ou nothing.</returns>
        ''' <remarks></remarks>
        Shared Function ProcuraNodeURLComplSessao(ByVal Arvore As TreeNodeCollection, ByVal URL As String, ByVal SessaoVarNome As String, ByVal SessaoVarDef As String) As TreeNode
            URL = URL & IIf(URL.IndexOf("?") <> -1, "&", "?") & SessaoVarNome & "=" & NZ(HttpContext.Current.Session(SessaoVarNome), SessaoVarDef)
            Return ProcuraNode(Arvore, NodeCampo.NavigateUrl, URL)
        End Function

        ''' <summary>
        ''' Obtém parte da string considerando parâmetro de início e final, como exemplo desta instrução existente no C++.
        ''' </summary>
        ''' <param name="Variavel">Variável texto a ser tratado.</param>
        ''' <param name="Inicio">Posição inicial a considerar, partindo do 0. Número negativo considera ponto a partir do fim do texto (-1 é o último caracter).</param>
        ''' <param name="Final">Posição final do texto a considerar partindo do 0. Número negativo considera ponto a partir do fim (-1 significa texto até o penúltimo caracter, ou seja, elimina o último).</param>
        ''' <returns>Retorna parte do texto selecionado entre início e fim indicados.</returns>
        ''' <remarks></remarks>
        Shared Function StrStr(ByVal Variavel As String, ByVal Inicio As Integer, Optional ByVal Final As Integer = Nothing) As String
            If Inicio < 0 Then
                Inicio = (Len(Variavel) + Inicio)
            End If
            If Not NZ(Final, 0) = 0 Then
                If Final < 0 Then
                    Final = (Len(Variavel) + Final) - 1
                End If
                Return Variavel.Substring(Inicio, Final - Inicio + 1)
            End If
            Return Variavel.Substring(Inicio)
        End Function

        ''' <summary>
        ''' Concatena um conjunto de expressões separando-as ou não por um delimitador especificado.
        ''' </summary>
        ''' <param name="Delim">Um caractere ou expressão que será colocada entre as outras.</param>
        ''' <param name="DelimAlternativo">Um caractere ou expressão que será substituída por Delim.</param>
        ''' <param name="Inicial">Um caractere ou expressão que será colocada no início da string.</param>
        ''' <param name="Segmentos">O conjunto de expressões que será concatenado.</param>
        ''' <returns>Retorna uma string com todos os objetos de Segmentos concatenados.</returns>
        ''' <remarks></remarks>
        Shared Function ExprExpr(ByVal Delim As String, ByVal DelimAlternativo As String, ByVal Inicial As Object, ByVal ParamArray Segmentos() As Object) As String
            Inicial = NZ(Inicial, "")
            Dim Lista As ArrayList = ParamArrayToArrayList(Segmentos)
            For Each item As Object In Lista
                If Not IsNothing(item) Then
                    If Not IsNothing(DelimAlternativo) AndAlso DelimAlternativo <> "" Then
                        item = item.Replace(DelimAlternativo, Delim)
                    End If
                    item = NZ(item, "")
                    If item <> "" Then
                        If Inicial <> "" Then
                            If Inicial.EndsWith(Delim) AndAlso item.StartsWith(Delim) Then
                                Inicial &= CType(item, String).Substring(Delim.Length)
                            ElseIf Inicial.EndsWith(Delim) OrElse item.StartsWith(Delim) Then
                                Inicial &= item
                            Else
                                Inicial &= Delim & item
                            End If
                        Else
                            Inicial &= item
                        End If
                    End If
                End If
            Next
            Return Inicial
        End Function

        ''' <summary>
        ''' Concatena URL evitando barras repetidas.
        ''' </summary>
        ''' <param name="Segmentos">São os trechos a serem concatenados, podendo ser mais de dois.</param>
        ''' <returns>Retorna expressão de segmentos concatenados.</returns>
        ''' <remarks></remarks>
        Shared Function URLExpr(ByVal ParamArray Segmentos() As Object) As String
            Dim URL As String = ExprExpr("/", "\", "", Segmentos)
            If Regex.Match(URL, "(?is)^[a-z0-9]:/").Success Then
                If Ambiente() = AmbienteTipo.WEB Then
                    URL = URL.ToLower.Replace(HttpContext.Current.Server.MapPath("~/").Replace("\", "/").ToLower, "~/")
                Else
                    URL = URL.Replace("\", "/").ToLower
                    URL = URL.Replace(FileExpr("~/").Replace("\", "/").ToLower, "~/")
                End If
            End If
            Return URL
        End Function

        ''' <summary>
        ''' Concatena segmentos incluindo separador entre os termos existentes.
        ''' </summary>
        ''' <param name="Separador">Termo a ser colocado entre os segmentos.</param>
        ''' <param name="Segmentos">Itens em paramarray a ser concatenado com o separador.</param>
        ''' <returns>Retorna texto resultante da concatenação dos segmentos utilizando separador.</returns>
        ''' <remarks></remarks>
        Shared Function SegmExpr(ByVal Separador As String, ByVal ParamArray Segmentos() As Object) As String
            Dim Ret As String = ""
            For Each Item As String In Segmentos
                If Item <> "" Then
                    If Ret <> "" AndAlso Not Ret.EndsWith(Separador) Then
                        Ret &= Separador
                    End If
                    Ret &= Item
                End If
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Cancela cache da página indicada.
        ''' </summary>
        ''' <param name="Pagina">Página que deverá ter o cache cancelado.</param>
        ''' <remarks></remarks>
        Shared Sub NoCache(ByVal Pagina As Page, Optional ByVal Tipo As NoCacheTipo = NoCacheTipo.PaginaExpirada)
            If Tipo = NoCacheTipo.PaginaExpirada Then
                Pagina.Response.Cache.SetExpires(DateTime.Now)
            ElseIf Tipo = NoCacheTipo.SemHistorico Then
                Pagina.Response.Cache.SetExpires(DateTime.Now)
                Pagina.Response.Cache.SetNoStore()
            End If
            Pagina.Response.AppendHeader("pragma", "no-cache")
        End Sub

        ''' <summary>
        ''' Busca nos subcontrols de um objeto, itens do tipo especificado.
        ''' </summary>
        ''' <param name="Obj">Container a ser pesquisado.</param>
        ''' <param name="Prefix">Prefixo dos controles considerados.</param>
        ''' <param name="Tipo">Tipo no formato texto ex:System.String.</param>
        ''' <returns>Retorna lista de objetos encontrados, que atendam o critério.</returns>
        ''' <remarks></remarks>
        Shared Function ItemsDoTipo(ByVal Obj As Object, ByVal Prefix As String, ByVal Tipo As String) As List(Of Object)
            Dim Lista As List(Of Object) = New List(Of Object)
            For Each Item As Object In Form.Controles(Obj, Prefix)
                If Compare(Item.GetType.ToString, Tipo) Then
                    Lista.Add(Item)
                End If
            Next
            Return Lista
        End Function

        ''' <summary>
        ''' Adiciona itens de uma origem para uma coleção destino.
        ''' </summary>
        ''' <param name="Destino">A coleção na qual serão adicionados os itens.</param>
        ''' <param name="Origem">Uma coleção contendo os itens a serem enumerados (for each) para cópia.</param>
        ''' <returns>Retorna a quantidade de itens copiados.</returns>
        ''' <remarks></remarks>
        Shared Function CopiaItens(ByRef Destino As Object, ByRef Origem As Object) As Integer
            Dim Qtd As Integer = 0
            For Each Item As Object In Origem
                Destino.Add(Item)
                Qtd += 1
            Next
            Return Qtd
        End Function

        ''' <summary>
        ''' Mediante um conteúdo, apresenta ou não paineis.
        ''' </summary>
        ''' <param name="Container">Container onde ocorrerá a busca dos controles.</param>
        ''' <param name="Prefixo">Prefixo dos paineis que serão ocultados.</param>
        ''' <param name="Escolha">Sufixo do painel que será apresentado.</param>
        ''' <remarks></remarks>
        Shared Sub SelecionaDivisaoPainel(ByVal Container As Object, ByVal Prefixo As String, ByVal Escolha As String)
            If Escolha.StartsWith("[") And Escolha.EndsWith("]") Then
                Escolha = StrStr(Escolha, 1, -1)
            End If

            For Each Ctl As Control In Form.Controles(Container, Prefixo)
                Dim item As String = Mid(Prop(Ctl, "ID"), Len(Prefixo) + 1)
                If item <> "" Then
                    Ctl.Visible = (item = Escolha)
                End If
            Next
        End Sub

        ''' <summary>
        ''' Retorna número aleatório para ser utilizado como arquivo temporário.
        ''' </summary>
        ''' <param name="Dir">Diretório onde será criado o arquivo. Vazio para obter o diretório default configurado em web.config.</param>
        ''' <returns>Retorna diretório e arquivo temporário.</returns>
        ''' <remarks></remarks>
        Shared Function TemporaryFile(Optional ByVal Dir As String = "", Optional ByVal Extensao As String = "tmp") As String
            Dim DirArq As String = ""
            If Dir = "" Then
                Dir = TemporaryDir()
            End If
            Dim Arq As String = ""
            Dim Vezes As Integer = 0
            Do While Arq = ""
                For z As Integer = 0 To 12
                    Arq &= Int(Rnd(Now.Millisecond) * 10)
                Next
                Arq &= "." & Extensao
                DirArq = FileExpr(Dir, Arq)
                If System.IO.File.Exists(DirArq) Then
                    Arq = ""
                End If
                Vezes += 1
                If Vezes > 500 Then
                    Throw New Exception("Tentativa de busca de arquivo temporário falho (máximo de 500 tentativas atingido).")
                    Exit Function
                End If
            Loop
            Return DirArq
        End Function

        ''' <summary>
        ''' Insere tabuladores no início de cada linha.
        ''' </summary>
        ''' <param name="Texto">Texto a ser tratado.</param>
        ''' <param name="Tabulador">Texto que será utilizado como tabulador (default são quatro espaços).</param>
        ''' <param name="QuebradeLinha">Marcador de final de linha. Default é vbcrlf.</param>
        ''' <returns>Retorna texto tratado.</returns>
        ''' <remarks></remarks>
        Shared Function InsereTab(ByVal Texto As String, Optional ByVal Tabulador As String = "    ", Optional ByVal QuebradeLinha As String = vbCrLf) As String
            If Texto = "" Then
                Return Texto
            End If
            Return Tabulador & Replace(Texto, QuebradeLinha, QuebradeLinha & Tabulador)
        End Function

        ''' <summary>
        ''' Mostra uma mensagem alerta Javascript e realiza o redirecionamento cliente para uma URL especificada.
        ''' </summary>
        ''' <param name="objPage">Objeto página aspx.</param>
        ''' <param name="Mensagem">Mensagem a ser mostrada.</param>
        ''' <param name="URL">URL para onde o cliente será redirecionado após apresentação da mensagem.</param>
        ''' <remarks></remarks>
        Public Shared Sub ShowJSMessage(ByRef ObjPage As Page, ByVal Mensagem As String, Optional ByVal URL As String = "")
            Dim conteudo As New StringBuilder
            conteudo.Append("<script>")
            conteudo.Append("   alert(""" & Mensagem.Replace("""", "").Replace(vbCrLf, "\n").Replace(Chr(10), "\n") & """);")
            If URL = "" Then
                conteudo.Append("   setTimeout('__doPostBack()', 0);")
            Else
                conteudo.Append("   window.location.href = """ & ObjPage.ResolveUrl(URL) & """;")
            End If
            conteudo.Append("</script>")
            ObjPage.ClientScript.RegisterClientScriptBlock(ObjPage.GetType(), "ShowJSMessageAndRedirect", conteudo.ToString)
        End Sub

        ''' <summary>
        ''' Rotina que cria texto para submissão de form contendo evento em ASP.NET.
        ''' </summary>
        ''' <param name="ObjPage">Página que receberá o evento.</param>
        ''' <param name="Alvo">Alvo.</param>
        ''' <param name="Argumento">Argumento.</param>
        ''' <remarks></remarks>
        Public Shared Sub ExecPostBack(ByVal ObjPage As Page, Optional ByVal Alvo As String = "", Optional ByVal Argumento As String = "")
            Dim conteudo As New StringBuilder
            conteudo.Append("<script>")
            conteudo.Append("   setTimeout('__doPostBack(""" & Alvo & """, """ & Argumento & """)', 0);")
            conteudo.Append("</script>")
            ObjPage.ClientScript.RegisterClientScriptBlock(ObjPage.GetType(), "ShowJSMessageAndRedirect", conteudo.ToString)
        End Sub

        ''' <summary>
        ''' Obtém a URL de um arquivo de imagem de acordo com o diretório especificado.
        ''' </summary>
        ''' <param name="Page">Página que precisa da URL.</param>
        ''' <param name="Arquivo">O nome do arquivo de imagem.</param>
        ''' <param name="Diretorio">Vazio para o diretório padrão. public para o diretório de imagens públicas e priv para o diretório de imagens privadas.</param>
        ''' <returns>Retorna a URL do arquivo de imagem requerido de acordo com o diretório especificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ImageURL(ByVal Page As Page, ByVal Arquivo As String, Optional ByVal Diretorio As String = "") As String
            Diretorio = NZ(Diretorio, "")

            Select Case LCase(Diretorio)
                Case ""
                    Diretorio = "~/img/"
                Case "public"
                    Diretorio = "~/img_public/"
                Case "priv"
                    Diretorio = URLExpr("~/img_priv", Logon(Page).Usuario, "/")
                Case Else
                    Diretorio = "~/img_" & Diretorio & "/"
            End Select
            Return Page.ResolveUrl(URLExpr(Diretorio, Arquivo))
        End Function

        ''' <summary>
        ''' Obtém o endereço físico do arquivo de imagem especificado.
        ''' </summary>
        ''' <param name="Page">Página que precisa do endereço da imagem.</param>
        ''' <param name="Arquivo">O nome do arquivo de imagem.</param>
        ''' <param name="Diretorio">Vazio para o diretório padrão. public para o diretório de imagens públicas e priv para o diretório de imagens privadas.</param>
        ''' <returns>Retorna o endereço físico do arquivo de imagem requerido de acordo com o diretório especificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ImageArq(ByVal Page As Page, ByVal Arquivo As String, Optional ByVal Diretorio As String = "") As String
            Return Page.MapPath(ImageURL(Page, Arquivo, Diretorio))
        End Function

        ''' <summary>
        ''' Converte componentes Imagem em bitmap.
        ''' </summary>
        ''' <param name="Imagem">Imagem que será convertida.</param>
        ''' <returns>Retorna Imagem em Bitmap.</returns>
        ''' <remarks></remarks>
        Shared Function ImageToBitMap(ByVal Imagem As System.Drawing.Image) As Bitmap
            Dim dest As New Bitmap(Imagem.Width, Imagem.Height)
            Dim gr As Graphics = Graphics.FromImage(dest)
            gr.DrawImage(Imagem, 0, 0, Imagem.Width, Imagem.Height)
            gr = Nothing
            Return dest
        End Function

        ''' <summary>
        ''' Transformação de imagem extensão Bitmap para System.Drawing.Image.
        ''' </summary>
        ''' <param name="Bmp">Imagem.</param>
        ''' <param name="Capacidade">Capacidade da imagem em bytes.</param>
        ''' <returns>Mudança de Bitmap para System.Drawing.Image.</returns>
        ''' <remarks></remarks>
        Public Shared Function BitMapToImage(ByVal Bmp As Bitmap, Optional ByVal Capacidade As Long = 60000) As System.Drawing.Image
            Dim ST As New System.IO.MemoryStream(Capacidade)
            Bmp.Save(ST, System.Drawing.Imaging.ImageFormat.Jpeg)
            Dim IMG As System.Drawing.Image = System.Drawing.Image.FromStream(ST)
            ST.Close()
            Return IMG
        End Function

        ''' <summary>
        ''' Sobrepõe uma Imagem na outra.
        ''' </summary>
        ''' <param name="Imagem">Imagem que será encaixada.</param>
        ''' <param name="Largura">Largura da imagem.</param>
        ''' <param name="Altura">Altura da imagem.</param>
        ''' <param name="Fundo">cor de fundo da imagem.</param>
        ''' <param name="CorDaBorda">Tipo de borda da imagem.</param>
        ''' <returns>Retorna a imagem Modificada.</returns>
        ''' <remarks></remarks>
        Shared Function ParaCaber(ByVal Imagem As Bitmap, ByVal Largura As Integer, ByVal Altura As Integer, Optional ByVal Fundo As String = "white", Optional ByVal CorDaBorda As String = Nothing) As Bitmap

            Dim dest As New Bitmap(Largura, Altura)
            Dim gr As Graphics = Graphics.FromImage(dest)
            gr.Clear(ObtemCor(Fundo))

            Dim rimagem As Double = Imagem.Width / Imagem.Height
            Dim rquadro As Double = Largura / Altura

            Dim posx As Integer = 0
            Dim posy As Integer = 0

            If rimagem > rquadro Then
                Altura = Altura * rquadro / rimagem
                posy = Int(dest.Height - Altura) / 2
            Else
                Largura = Largura * rimagem / rquadro
                posx = Int(dest.Width - Largura) / 2
            End If

            gr.DrawImage(Imagem, posx, posy, Largura, Altura)
            If Not IsNothing(CorDaBorda) Then
                Dim bd As New Pen(ObtemCor(CorDaBorda))
                gr.DrawLine(bd, posx, posy, posx + Largura - 1, posy)
                gr.DrawLine(bd, posx + Largura - 1, posy, posx + Largura - 1, posy + Altura - 1)
                gr.DrawLine(bd, posx + Largura - 1, posy + Altura - 1, posx, posy + Altura - 1)
                gr.DrawLine(bd, posx, posy, posx, posy + Altura - 1)
            End If

            gr = Nothing
            Return dest
        End Function


        ''' <summary>
        ''' Obtém texto html codificado transformando quebras de linha em parágrafos.
        ''' </summary>
        ''' <param name="Page">Página que pediu o texto codificado.</param>
        ''' <param name="Texto">Texto que será codificado.</param>
        ''' <returns>Retorna a string passada em Texto com codificação HTML.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeHTMLEnc(ByVal Page As Page, ByVal Texto As String) As String
            Dim Ret As New StringBuilder

            For Each L1 As String In Regex.Split(Texto, "(\\\\{[^}]*\\\\})")
                If L1.StartsWith("\\{") And L1.EndsWith("\\}") Then
                    Ret.Append(StrStr(L1, 3, -3))
                Else
                    For Each L2 As String In Split(L1, vbCrLf)
                        Ret.AppendLine("<p>")
                        Ret.Append("    ")
                        Ret.AppendLine(HttpUtility.HtmlEncode(L2))
                        Ret.AppendLine("</p>")
                    Next
                End If
            Next
            Return Ret.ToString
        End Function

        ''' <summary>
        ''' Transforma texto comum em texto html.
        ''' </summary>
        ''' <param name="Page">Objeto page que está requisitando o texto.</param>
        ''' <param name="Texto">Texto que será transformado em html.</param>
        ''' <returns>Retorna o texto transformado em html ou o próprio texto caso este esteja entre &lt;html&gt; e &lt;/html&gt;</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeHTML(ByVal Page As Page, ByVal Texto As String) As String
            Dim Tag As String = RegexMascTags(".+?", 1)
            ' If Regex.Match(Texto, "(?is)<(.+?/|(?<tag>.+?)( .*?)?>(?<inner>.*?)</\<tag>)>").Success Then
            If Regex.Match(Texto, "(?is)<(?<tag>.+)( .*?)?>").Success Then
                Return Texto
            End If

            Dim ex As New Exibe(Page)
            Dim mev As New MatchEvaluator(AddressOf ex.HTMLReplLink)
            Texto = Regex.Replace(Texto, "\[link:(.*)\|(.*)\]", mev)

            mev = New MatchEvaluator(AddressOf ex.HTMLReplImg)
            Texto = Regex.Replace(Texto, "\[img:(.*)\|(.*)\]", mev)

            mev = New MatchEvaluator(AddressOf ex.HTMLReplImgBut)
            Texto = Regex.Replace(Texto, "\[imgbut:(.*)\|(.*)\|(.*)\]", mev)

            Texto = Regex.Replace(Texto, "//{([^}]*)//}", "$1")

            Return ExibeHTMLEnc(Page, Texto)
        End Function

        ''' <summary>
        ''' Formatos possíveis de data.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum ExibeDataOpc
            p
            dd_de_mmmm_de_yyyy
            c
            dd_de_mmmm_de_yyyy_c
            i
            a
            dd_mmm_yyyy
            ai
            dd_mmm_yyyy_i
            ac
            dd_mmm_yyyy_c
            mmmm_dth_yyyy
            mmm_dd_yyyy
            mmm_dd_yyyy_i
            mmm_dd_yyyy_c
            mmmm_yyyy
            mmmm_yyyy_i
            mmmm_yyyy_c
            mmm
            mmm_i
            mmm_c
            mmmm_yy
            yyyy_mm_dd_hh_mm_ss
            yyyy_mm
        End Enum

        ''' <summary>
        ''' Formata data para exibição correta.
        ''' </summary>
        ''' <param name="Momento">Data para ser formatada.</param>
        ''' <param name="Opc">ExibeDataOpc que será utilizado na apresentação.</param>
        ''' <returns>~Data formatada.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeData(ByVal Momento As Object, ByVal Opc As ExibeDataOpc) As String
            Return ExibeData(Momento, Replace(Opc.ToString, "_", " "))
        End Function

        ''' <summary>
        ''' Mostra apenas texto eliminando aspas ou apóstrofos externos.
        ''' </summary>
        ''' <param name="Conteudo">Texto a ser apresentado.</param>
        ''' <returns>Texto sem aspas ou apóstrofos.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeTexto(ByVal Conteudo As String) As String
            Conteudo = Trim(Conteudo)
            If Conteudo.StartsWith("'") And Conteudo.EndsWith("'") Then
                Conteudo = StrStr(Conteudo, 1, -1)
            ElseIf Conteudo.StartsWith("""") And Conteudo.EndsWith("""") Then
                Conteudo = StrStr(Conteudo, 1, -1)
            End If
            Return Conteudo
        End Function

        ''' <summary>
        ''' Formata data para exibição correta.
        ''' </summary>
        ''' <param name="Momento">Data para ser formatada.</param>
        ''' <param name="Formato">Formato a ser apresentado. Padrão é dd/MM/yyyy HH:mm:ss.</param>
        ''' <returns>Retorna a data formatada.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeData(ByVal Momento As Object, Optional ByVal Formato As String = "") As String
            Try
                Momento = CType(Momento, Date)
            Catch
                Momento = CDate(Nothing)
            End Try

            If Momento = CDate(Nothing) Then
                Return ""
            End If

            If Formato = "yyyy_mm_dd_hh_mm_ss" Then
                Return Format(Momento, "yyyy-MM-dd HH:mm:ss")
            End If
            If Formato = "" Then
                Return Format(Momento, "dd/MM/yyyy HH:mm:ss")
            End If
            If Formato = "yyyy mm dd hh mm ss" Then
                Return Format(Momento, "yyyy-MM-dd HH:mm:ss")
            End If
            Dim MMP() As String = {"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"}
            Dim MMI() As String = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
            Dim MMC() As String = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"}

            Dim DIA As Integer = Microsoft.VisualBasic.Day(Momento)
            Dim MES As Integer = Month(Momento) - 1
            Dim ANO As Integer = Year(Momento)
            Dim SUF As Integer = DIA Mod 10
            Dim IDI As String = ""

            Select Case (Formato)
                Case "p", "dd de mmmm de yyyy"
                    'portugues (dia de mês de ano)
                    Return DIA & " de " & MMP(MES) & " de " & ANO
                Case "c", "dd de mmmm de yyyy c"
                    'espanhol (dia de mês de ano)
                    Return DIA & " de " & MMC(MES) & " de " & ANO
                Case "i", "mmmm dth, yyyy", "mmmm dth yyyy", "mmmm_dth_yyyy"
                    'ingles (mês, dia, ano)
                    Return MMI(MES) & " " & DIA & Microsoft.VisualBasic.Switch(DIA > 10 And DIA < 14, "th", SUF = 1, "st", SUF = 2, "nd", SUF = 3, "rd", True, "th") & ", " & Format(ANO, "0000")
                Case "a", "dd mmm yyyy", "dd mmm yyyy"
                    'portugues (dia, mês(abrev, maiusc), ano)
                    Return Format(DIA, "00") & " " & UCase(Microsoft.VisualBasic.Left(MMP(MES), 3)) & " " & ANO
                Case "ai", "dd mmm yyyy i ", "dd mmm yyyy i"
                    'ingles (dia, mês, ano)
                    Return Format(DIA, "00") & " " & UCase(Microsoft.VisualBasic.Left(MMI(MES), 3)) & " " & Format(ANO, "0000")
                Case "ac", "dd mmm yyyy c", "dd mmm yyyy c"
                    'ingles (dia, mês, ano)
                    Return Format(DIA, "00") & " " & UCase(Microsoft.VisualBasic.Left(MMC(MES), 3)) & " " & Format(ANO, "0000")
                Case "mmm dd, yyyy", "mmm dd yyyy"
                    'portugues (mês(abrev, maiusc), dia, ano
                    Return UCase(Microsoft.VisualBasic.Left(MMP(MES), 3)) & " " & DIA & ", " & Format(ANO, "0000")
                Case "mmm dd, yyyy i", "mmm dd yyyy i"
                    'ingles (mês(abrev, maiusc), dia, ano
                    Return UCase(Microsoft.VisualBasic.Left(MMI(MES), 3)) & " " & DIA & ", " & Format(ANO, "0000")
                Case "mmm dd, yyyy c", "mmm dd yyyy c"
                    'espanhol (mês(abrev, maiusc), dia, ano
                    Return UCase(Microsoft.VisualBasic.Left(MMC(MES), 3)) & " " & DIA & ", " & Format(ANO, "0000")
                Case "mmmm/yy", "mmmm yy"
                    'portugues (mês/ano)
                    Return MMP(MES) & "/" & Format(Momento, "yy")
                Case "mmmm, yyyy", "mmmm yyyy"
                    'portugues (mês,ano)
                    Return MMP(MES) & ", " & Format(ANO, "0000")
                Case "mmmm, yyyy i", "mmmm yyyy i"
                    'ingles (mês, ano)
                    Return MMI(MES) & ", " & Format(ANO, "0000")
                Case "mmmm, yyyy c", "mmmm yyyy c"
                    'Espanhol (mês, ano) 
                    Return MMC(MES) & ", " & Format(ANO, "0000")
                Case "mmm"
                    'portugues (mês)
                    Return UCase(Microsoft.VisualBasic.Left(MMP(MES), 3))
                Case "mmm i"
                    'ingles (mês)
                    Return UCase(Microsoft.VisualBasic.Left(MMI(MES), 3))
                Case "mmm c"
                    'espanhol (mês)
                    Return UCase(Microsoft.VisualBasic.Left(MMC(MES), 3))
                Case "yyyy-mm", "yyyy mm"
                    'portugues (ano-mês)
                    Return Format(Momento, "yyyy") & "-" & Format(Momento, "MM")
                Case "yyyy-mm-dd", "yyyy mm dd"
                    Return Format(Momento, "yyyy-MM-dd")

            End Select
            Return Format(Momento, Formato)
        End Function

        ''' <summary>
        ''' Formata data para gravação correta de acordo com o banco de dados.
        ''' </summary>
        ''' <param name="data">Data para ser formatada.</param>
        ''' <param name="banco">Nome do banco de destino da data.</param>
        ''' <returns>Data formatada para gravar no banco.</returns>
        ''' <remarks></remarks>
        Public Shared Function GravaData(ByVal data As Date, ByVal banco As TipoBaseSQL) As String
            Dim data_destino As String = Now
            Select Case banco
                Case TipoBaseSQL.MSAccess Or TipoBaseSQL.Oracle
                    data_destino = data.Year.ToString("0000") & "/" & data.Month.ToString("00") & "/" & data.Day.ToString("00")
                Case TipoBaseSQL.MySQL
                    data_destino = data.Year.ToString("0000") & "-" & data.Month.ToString("00") & "-" & data.Day.ToString("00")
            End Select
            Return data_destino
        End Function

        ''' <summary>
        ''' Retorna o primeiro item do array procurado pelo objeto ou atributo.
        ''' </summary>
        ''' <param name="LISTA">Array a ser pesquisado.</param>
        ''' <param name="Conteudo">Conteúdo que será procurado ou no índice do array ou em algum atributo.</param>
        ''' <param name="Atributo">Vazio para procurar na posição ou nome para pesquisa pela propriedade attribute.</param>
        ''' <param name="Inicio">Zero para procurar do início ou posição inicial do array.</param>
        ''' <returns>Retorna o item do array encontrado.</returns>
        ''' <remarks></remarks>
        Shared Function ArrayFindByAtt(ByVal Lista As Array, ByVal Conteudo As Object, Optional ByVal Atributo As String = "", Optional ByVal Inicio As Integer = 0) As Object
            Dim pos As Integer = ArrayIndexFindByAtt(Lista, Conteudo, Atributo, Inicio)
            If pos = -1 Then
                Return Nothing
            End If
            Return Lista(pos)
        End Function

        ''' <summary>
        ''' Retorna posição do primeiro item no array pelo objeto ou atributo.
        ''' </summary>
        ''' <param name="LISTA">Array a ser pesquisado.</param>
        ''' <param name="Conteudo">Conteúdo que será procurado ou no índice do array ou em algum atributo.</param>
        ''' <param name="Atributo">Vazio para procurar na posição ou nome para pesquisa pela propriedade attribute.</param>
        ''' <param name="Inicio">Zero para procurar do início ou posição inicial do array.</param>
        ''' <returns>Retorna posição do item do array encontrado.</returns>
        ''' <remarks></remarks>
        Shared Function ArrayIndexFindByAtt(ByVal Lista As Array, ByVal Conteudo As String, Optional ByVal Atributo As String = "", Optional ByVal Inicio As Integer = 0) As Integer
            Dim z As Integer, item As Object = Nothing
            For z = 0 To Lista.Length - 1
                If Atributo = "" Then
                    item = Lista(z)
                Else
                    item = Lista(z).Attributes(Atributo)
                End If
                If Compare(item, Conteudo) Then
                    Exit For
                End If
            Next
            If z >= Lista.Length Then
                Return -1
            End If
            Return z
        End Function

        ''' <summary>
        ''' Carrega qualquer script no corpo da página.
        ''' </summary>
        ''' <param name="Pag">Página onde será carregado o script.</param>
        ''' <param name="NomeScript">Nome que o script terá no corpo.</param>
        ''' <param name="SegScript">Pode ser um nome de arquivo '~/dir/arquivo.js' ou um bloco '&lt;script&gt;....&lt;/script&gt;'.</param>
        ''' <remarks></remarks>
        Shared Sub IncluiScript(ByRef Pag As Object, ByVal NomeScript As String, Optional ByVal SegScript As String = "")
            If SegScript = "" Then
                SegScript = Pag.resolveUrl("~\inc\" & NomeScript)
            End If
            Dim cs As ClientScriptManager = Pag.ClientScript
            If (Not cs.IsClientScriptIncludeRegistered(Pag.GetType(), NomeScript)) Then
                If SegScript.IndexOf("<script") <> -1 Then
                    cs.RegisterClientScriptBlock(Pag.GetType(), NomeScript, SegScript)
                Else
                    cs.RegisterClientScriptInclude(Pag.GetType(), NomeScript, Pag.ResolveUrl(SegScript))
                End If
            End If
        End Sub

        ''' <summary>
        ''' Compara dois parâmetros com base em critério específicos para cada tipo.
        ''' </summary>
        ''' <param name="Param1">Primeiro parâmetro.</param>
        ''' <param name="Param2">Segundo parâmetro.</param>
        ''' <param name="IgnoreCase">Para ignorar diferença entre maiúsculo e minúsculo em comparações de strings.</param>
        ''' <returns>Retorna verdadeiro caso os itens sejam considerados iguais ou o contrário.</returns>
        ''' <remarks></remarks>
        Shared Function Compare(ByVal Param1 As Object, ByVal Param2 As Object, Optional ByVal IgnoreCase As Boolean = True) As Boolean
            If IsNothing(Param1) And IsNothing(Param2) Then
                Return True
            ElseIf IsNothing(Param1) Or IsNothing(Param2) Then
                Return False
            Else
                If Param1.GetType.ToString = Param2.GetType.ToString Then
                    If Param1.GetType.ToString = "System.String" Then
                        Return String.Compare(Param1, Param2, IgnoreCase) = 0
                    Else
                        Err.Raise(20000, "IcraftBase", "Compare com tipo não previsto " & Param1.GetType.ToString & ".")
                    End If
                End If
            End If
            Return False
        End Function

        ''' <summary>
        ''' Rotina que é executada quando qualquer CONTROLE é atualizado. Responsável pela atualização de outros CONTROLES dependentes.
        ''' </summary>
        ''' <param name="Controle">Controle que foi atualizado.</param>
        ''' <param name="e">Argumento padrão do sistema.</param>
        ''' <remarks></remarks>
        Shared Sub AtualizouControle(ByVal Controle As Object, Optional ByVal e As System.EventArgs = Nothing)
            Dim Trata As String = CtlProp(Controle, "Atualizar") & ";" & Prop(Controle, "Atualizar")
            If Trata <> "" Then
                For Each Campo As String In Split(Trata, ";")
                    If Campo <> "" Then
                        Dim CampoRel As Object = Form.FindGeral(Controle.Parent, Campo)
                        If Not IsNothing(CampoRel) Then
                            If TypeOf CampoRel Is DropDownList Then
                                CarregaCombo(CampoRel)
                            ElseIf TypeOf CampoRel Is System.Windows.Forms.ComboBox Then
                                CarregaComboAssinc(CampoRel)
                            Else
                                CampoRel.DataBind()
                            End If
                        End If
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' Obtém diretório temporário, que corresponde ao param dir_temp do web.config.
        ''' </summary>
        ''' <returns>Retorna diretório para arquivos temporários sem a barra no final (ex: c:\inetpub\temp).</returns>
        ''' <remarks></remarks>
        Shared Function TemporaryDir(Optional ByVal Dir As String = "") As String
            If Dir <> "" Then
                Dim DirCompl As String = ""
                Dim Vezes As Integer = 0
                Do While DirCompl = ""
                    For z As Integer = 0 To 12
                        DirCompl &= Int(Rnd(Now.Millisecond) * 10)
                    Next
                    DirCompl = FileExpr(Dir, DirCompl)
                    If System.IO.Directory.Exists(DirCompl) Then
                        DirCompl = ""
                    End If
                    Vezes += 1
                    If Vezes > 100 Then
                        Throw New Exception("Tentativa de busca de diretório temporário falhou (máximo de 100 tentativas atingido).")
                        Exit Function
                    End If
                Loop
                Return DirCompl
            End If
            Return FileExpr(WebConf("dir_temp"))
        End Function

        ''' <summary>
        ''' Retorna parâmetro específico do webconfig > appsetings.
        ''' </summary>
        ''' <param name="param">Identificação do connectionstring desejado.</param>
        ''' <returns>Objeto connectionstringsettings obtido a partir do configurationmanager.</returns>
        ''' <remarks></remarks>
        Public Shared Function WebConf(ByVal param As String) As String
            If Compare(param, "SITE_DIR") Then
                Return FileExpr("~/")
            ElseIf Compare(param, "SITE_URL") Then
                Return URLExpr("~/")
            End If
            Return System.Configuration.ConfigurationManager.AppSettings(param)
        End Function

        ''' <summary>
        ''' Procura um controle em um determinado panel. Criada por CTL.FINDCONTROL não conseguir encontrar obj em PANEL.
        ''' </summary>
        ''' <param name="Origem">Objeto onde será feita a procura.</param>
        ''' <param name="Controle">Nome do controle a ser procurado.</param>
        ''' <returns>Retorna controle ou nothing caso não encontre. A procura é feita somente naquele nível. Utilize FORM.FINDCONTROL para encontrar controles entre os filhos e FORM.FINDGERAL para procurar entre filhos e pais.</returns>
        ''' <remarks></remarks>
        Public Shared Function FindControlEspecial(ByVal Origem As Object, ByVal Controle As String) As Object
            ' procura somente no primeiro nível
            ' rotina igual ao findcontrol original, mas resolvendo a questão de busca em painel
            ' >> painel tinha o conteúdo e findcontrol não retornava de forma alguma!!
            Dim ctl As Object = Nothing
            If TypeOf Origem Is ContentPlaceHolder Then
                ' busca direta no contentplace e caso não encontre, procura especial
                ctl = CType(Origem, ContentPlaceHolder).FindControl(Controle)
                If Not IsNothing(ctl) Then
                    Return ctl
                End If
                Return FindControlEspecial(CType(Origem, ContentPlaceHolder).Controls, Controle)
            ElseIf TypeOf Origem Is Panel Then
                ' busca direta e caso não funcione, busca por item
                ctl = CType(Origem, Panel).FindControl(Controle)
                If Not IsNothing(ctl) Then
                    Return ctl
                End If
                Return FindControlEspecial(CType(Origem, Panel).Controls, Controle)
            ElseIf TypeOf Origem Is System.Windows.Forms.Panel Then
                ctl = CType(Origem, System.Windows.Forms.Panel).Controls.Find(Controle, True)
                If ctl.LENGTH > 0 Then
                    Return ctl(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is System.Windows.Forms.GroupBox Then
                Dim Busca() As System.Windows.Forms.Control = CType(Origem, System.Windows.Forms.GroupBox).Controls.Find(Controle, True)
                If Busca.Length > 0 Then
                    Return Busca(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is System.Windows.Forms.TabControl Then
                Dim Busca() As System.Windows.Forms.Control = CType(Origem, System.Windows.Forms.TabControl).Controls.Find(Controle, True)
                If Busca.Length > 0 Then
                    Return Busca(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is System.Windows.Forms.SplitContainer Then
                Dim Busca() As System.Windows.Forms.Control = CType(Origem, System.Windows.Forms.SplitContainer).Controls.Find(Controle, True)
                If Busca.Length > 0 Then
                    Return Busca(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is System.Windows.Forms.TableLayoutPanel Then
                Dim Busca() As System.Windows.Forms.Control = CType(Origem, System.Windows.Forms.TableLayoutPanel).Controls.Find(Controle, True)
                If Busca.Length > 0 Then
                    Return Busca(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is System.Windows.Forms.FlowLayoutPanel Then
                Dim Busca() As System.Windows.Forms.Control = CType(Origem, System.Windows.Forms.FlowLayoutPanel).Controls.Find(Controle, True)
                If Busca.Length > 0 Then
                    Return Busca(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is System.Windows.Forms.Form Then
                Dim Busca() As System.Windows.Forms.Control = CType(Origem, System.Windows.Forms.Form).Controls.Find(Controle, True)
                If Busca.Length > 0 Then
                    Return Busca(0)
                End If
                Return Nothing
            ElseIf TypeOf Origem Is Web.UI.ControlCollection Or TypeOf Origem Is System.Windows.Forms.Form.ControlCollection Then
                ' aproveitei e implementei procura na coleção também
                For Each SubCtl As Control In Origem
                    If Compare(Prop(SubCtl, "ID"), Controle) Then
                        Return SubCtl
                    End If
                Next
                Return Nothing
            End If

            ' para qualquer outro objeto, faz busca com findcontrol
            ' caso ocorra erro, retorna nothing mesmo...
            Try
                If IsContainer(Origem) Then
                    ctl = Origem.findcontrol(Controle)
                End If
            Catch
            End Try
            Return ctl
        End Function

        ''' <summary>
        ''' Carrega qualquer script no corpo da página.
        ''' </summary>
        ''' <param name="Pag">Página onde será carregado o script.</param>
        ''' <param name="href">Caminho do css Ex:(~/diretorio/estilo.css)</param>    
        ''' <remarks></remarks>
        Shared Sub IncluiStyleSheet(ByVal Pag As Page, ByVal id As String, Optional ByVal href As String = "")
            If IsNothing(Pag.Header.FindControl(id)) Then
                If href = "" Then
                    href = Pag.ResolveUrl("~\inc\" & id)
                End If

                Dim link As New System.Web.UI.HtmlControls.HtmlLink
                link.ID = id
                link.Href = Pag.ResolveUrl(href)
                link.Attributes("rel") = "stylesheet"
                link.Attributes("type") = "text/css"
                Pag.Header.Controls.Add(link)
            End If
        End Sub

        ''' <summary>
        ''' Retira um caracter de uma string.
        ''' </summary>
        ''' <param name="Texto">Texto para retirar caracter.</param>
        ''' <returns>Texto transformado.</returns>
        ''' <remarks></remarks>
        Shared Function AbstrCarac(ByVal Texto As String) As String
            Dim result As Integer = 0
            Dim ll As Integer = Len(Texto)
            For z = 0 To ll - 1
                For z1 = 0 To ll - 1
                    result += Asc(Texto.Substring(z1, 1)) + Asc(Texto.Substring(ll - z1 - 1, 1)) + ll
                Next
                Mid(Texto, ll - z, 1) = Base36Alga(result Mod 36)
            Next
            Return Texto
        End Function

        ''' <summary>
        ''' Transforma um número qualquer em caracteres utilizando Base36.
        ''' </summary>
        ''' <param name="NUM">O número que será transformado.</param>
        ''' <param name="NumCasas">A quantidade de casas que a string de retorno conterá. O número tem precedência sobre o resultado.</param>
        ''' <returns>Retorna uma string com o tamanho de NumCasas contendo o número passado em NUM convertido através de Base36.</returns>
        ''' <remarks></remarks>
        Shared Function Base36(ByVal NUM As Integer, Optional ByVal NumCasas As Integer = 0) As String
            Dim TOT As Integer = NUM
            Dim RET As String = ""
            Do While TOT > 0 And (NumCasas = 0 OrElse Len(RET) < NumCasas)
                Dim REST As Integer = TOT Mod 36
                RET = Base36Alga(REST) & RET
                TOT = Int(TOT / 36)
            Loop
            For z = Len(RET) To NumCasas - 1
                RET = "0" & RET
            Next
            Return RET
        End Function

        ''' <summary>
        ''' Converte um número de base 10 para uma base qualquer.
        ''' </summary>
        ''' <param name="NumBase10">Número na base 10.</param>
        ''' <param name="BaseDest">Base para qual será convertido.</param>
        ''' <returns>Retorna o número convertido para a base desejada.</returns>
        ''' <remarks></remarks>
        Shared Function ConvBase(ByVal NumBase10 As Integer, ByVal BaseDest As Integer) As String
            Return ConvBase(Str(NumBase10), BaseDest)
        End Function

        ''' <summary>
        ''' Converte de uma base qualquer para outra base qualquer.
        ''' </summary>
        ''' <param name="NumBase">Número que será convertido.</param>
        ''' <param name="BaseDest">Base de destino.</param>
        ''' <param name="BaseOrigem">Base de origem.</param>
        ''' <returns>Retorna o número convertido na base desejada.</returns>
        ''' <remarks></remarks>
        Shared Function ConvBase(ByVal NumBase As String, ByVal BaseDest As Integer, Optional ByVal BaseOrigem As Integer = 10) As String
            If Not (BaseDest >= 2 And BaseDest <= 36) Then
                Throw New Exception("Base origem precisa estar entre 2 e 36 (0-9 e A-Z).")
            End If
            If Not (BaseOrigem >= 2 And BaseOrigem <= 36) Then
                Throw New Exception("Base destino precisa estar entre 2 e 36 (0-9 e A-Z).")
            End If
            NumBase = UCase(Trim(NumBase))
            Dim Cond As String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Dim Algas As String = Microsoft.VisualBasic.Left(Cond, BaseOrigem)
            If System.Text.RegularExpressions.Regex.Match(NumBase, "[^" & Algas & "]").Success Then
                Throw New Exception("Representação em base " & BaseOrigem & " precisa conter apenas " & Algas & ".")
            End If

            Dim Tot As Long = 0
            If BaseOrigem <> 10 Then
                For z As Integer = 0 To Len(NumBase) - 1
                    Dim Alga As String = Mid(NumBase, Len(NumBase) - z, 1)
                    Tot += IIf(Alga <= "9", Val(Alga), Asc(Alga) - Asc("A") + 10) * BaseOrigem ^ z
                Next
            Else
                Tot = Val(NumBase)
            End If
            Dim Result As String = ""
            For z As Integer = (Int(Math.Log10(Tot))) To 0 Step -1
                Dim Mult As Long = BaseDest ^ z
                If Tot <> 0 AndAlso Tot >= Mult Then
                    Dim Alga As Integer = Int(Tot / Mult)
                    Result &= IIf(Alga < 10, Alga, Chr(Alga - 10 + Asc("A")))
                    Tot -= Alga * Mult
                Else
                    Result &= "0"
                End If
            Next
            Return Result
        End Function

        ''' <summary>
        ''' Transforma um número entre 0 e 35 em um caractere utilizando Base36.
        ''' </summary>
        ''' <param name="IDP">O número que será transformado.</param>
        ''' <returns>Retorna o caractere para o qual o número foi transformado.</returns>
        ''' <remarks></remarks>
        Shared Function Base36Alga(ByVal IDP As Integer) As String
            If IDP < 0 Then
                Return "0"
            ElseIf IDP <= 9 Then
                Return Chr(IDP + Asc("0"))
            ElseIf IDP <= 34 Then
                Return Chr((IDP - 10) + Asc("A"))
            End If
            Return "Z"
        End Function

        ''' <summary>
        ''' Apaga arquivos temporários ignorando erros.
        ''' </summary>
        ''' <param name="Tmps">Arraylist contendo arquivos temporários.</param>
        ''' <remarks></remarks>
        Shared Sub ApagaTemps(ByVal Tmps As ArrayList)
            If Not IsNothing(Tmps) Then
                For Each tmp As String In Tmps
                    Try
                        System.IO.File.Delete(tmp)
                    Catch
                    End Try
                Next
            End If
        End Sub

        ''' <summary>
        ''' Retorna lista de arquivos contidos no diretório.
        ''' </summary>
        ''' <param name="Diretorio">Caminho para disco onde será feita a pesquisa.</param>
        ''' <returns>Arraylist contendo os arquivos pesquisados.</returns>
        ''' <remarks></remarks>
        Public Shared Function ListaDir(ByVal Diretorio As String, Optional ByVal Criterio As String = "*.*", Optional ByVal SubDir As Boolean = True) As ArrayList
            Try
                Dim ret As New ArrayList
                Diretorio = FileExpr(Diretorio)
                If Diretorio <> "" Then
                    For Each fl As String In System.IO.Directory.GetFiles(Diretorio, Criterio)
                        ret.Add(fl)
                    Next
                    If SubDir Then
                        For Each dr As String In System.IO.Directory.GetDirectories(Diretorio)
                            ret.AddRange(ListaDir(dr, Criterio))
                        Next
                    End If
                End If
                Return ret
            Catch ex As Exception
                Throw ex
            End Try
        End Function

        ''' <summary>
        ''' Retorna connectionstring específico do webconfig > connectionstring.
        ''' </summary>
        ''' <param name="param">Identificação do connectionstring desejado.</param>
        ''' <returns>Objeto connectionstringsettings obtido a partir do configurationmanager.</returns>
        ''' <remarks></remarks>
        Shared Function WebConn(ByVal Param As String) As System.Configuration.ConnectionStringSettings
            Return System.Configuration.ConfigurationManager.ConnectionStrings(Param)
        End Function

        ''' <summary>
        ''' Retorna um connectionstring a partir da informação de um connectionstring ou string indicativa da conexão no WebConfig.
        ''' </summary>
        ''' <param name="STRCONN">Connectionstring ou nome da conexao no webconfig (ex: "STRTAREFA", "ProviderName:MySQL.Data.MySQLClient;Server:127.0.0.1;Database:data;Uid:usuario;Pwd:senha;" ou "STRTAREFA;USER:usuario;PASSWORD:senha").</param>
        ''' <returns>Objeto connectionstring instanciado.</returns>
        ''' <remarks>Caso seja passada string, programador poderá fazer uso de complementos do tipo: "strGerador;user:estagiario;password:estag".
        ''' Isso corresponde a obter os dados da conexão do WebConfig com nome de strGerador e substituir nesta user e password.</remarks>
        Shared Function StrConnObj(ByVal StrConn As Object, ByVal ParamArray Params() As Object) As System.Configuration.ConnectionStringSettings
            If TypeOf (StrConn) Is System.Configuration.ConnectionStringSettings Then
                Return CType(StrConn, System.Configuration.ConnectionStringSettings)
            End If

            Dim Param As String = CType(StrConn, String)
            If Param = "" Then
                Return DefaultFormStrConn()
            End If

            If Param.IndexOf(";") = -1 Then
                If Regex.Match(Param, "(?is)\.mdb$").Success Then
                    Return StrConnObj("ProviderName:System.Data.OleDb;Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & FileExpr(Param), Params)
                End If
                Return WebConn(Param)
            End If

            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Try
                MacroSubstSQL(Param, Nothing, ListaParametros)
            Catch
            End Try


            Dim Elem As New ElementosStr(Param, ";")
            Dim Conn As New System.Configuration.ConnectionStringSettings

            If Elem.Items("").Conteudo <> "" Then
                Dim ConnAnt As System.Configuration.ConnectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings(Elem.Items("").Conteudo)
                Conn.ProviderName = ConnAnt.ProviderName
                Conn.ConnectionString = ConnAnt.ConnectionString
            End If

            If Elem.Exists("ProviderName") Then
                Conn.ProviderName = Elem.Items("ProviderName").Conteudo
                Elem.Items("ProviderName").Conteudo = Nothing
            End If

            If Compare(Conn.ProviderName, Oracle) Then
                If Elem.Exists("User") Then
                    Elem.Items("User").Nome = "User ID"
                End If
            ElseIf Compare(Conn.ProviderName, MySQL) Then
                If Elem.Exists("User") Then
                    Elem.Items("User").Nome = "Uid"
                End If
                If Elem.Exists("Password") Then
                    Elem.Items("Password").Nome = "Pwd"
                End If
            ElseIf Compare(Conn.ProviderName, MSAccess) Then
                If Elem.Exists("Data Source") Then
                    Dim Caminho As String = Elem.Items("Data Source").Conteudo
                    If Caminho.StartsWith("~/") Or Caminho.StartsWith("~\") Then
                        Caminho = HttpContext.Current.Server.MapPath(Caminho)
                    End If
                    Elem.Items("Data Source").Conteudo = Caminho
                End If
            End If

            Dim ElemNovo As New ElementosStr(Conn.ConnectionString, ";", "=")
            ElemNovo.AddStr(Elem.ToStyleStr(";", "="))
            Param = ElemNovo.ToStyleStr
            Conn.ConnectionString = Param

            Return Conn
        End Function

        ''' <summary>
        ''' Obtém string formatada considerando SELECT e DELETE ref à tabela a ser consultada, filtro e expressão de ordenação.
        ''' </summary>
        ''' <param name="Expressao">Expressão a ser consultada.</param>
        ''' <param name="TabelaouSQL">Tabela ou SQL a ser executado para obtenção da expressão.</param>
        ''' <param name="Filtro">Filtro no formato WHERE SQL.</param>
        ''' <returns>Retorna string contendo SELECT EXPRESSÃO FROM TABELAOUSQL WHERE FILTRO.</returns>
        ''' <remarks></remarks>
        Shared Function ExprSQL(ByVal TabelaouSQL As String, Optional ByVal Expressao As String = "*", Optional ByVal Filtro As String = "", Optional ByVal Ordem As String = "", Optional ByVal Tipo As ExprSQLTipo = ExprSQLTipo.Sel) As String
            Dim Pos As Integer = InStr(TabelaouSQL, " FROM ", CompareMethod.Text)
            Dim Sql As String = ""
            If Pos = 0 Then
                Sql = "FROM " & TabelaouSQL
            Else
                Sql = Mid(TabelaouSQL, Pos + 1)
            End If
            If Sql.EndsWith(")") Then
                Sql = Sql.Substring(0, Sql.Length - 1)
            End If
            If Sql.Contains("WHERE") Then
                Sql &= IIf(Filtro <> "", " AND " & Filtro, "")
            Else
                Sql &= IIf(Filtro <> "", " WHERE " & Filtro, "")
            End If

            Sql &= IIf(Ordem <> "", " ORDER BY " & Ordem, "")
            Return Microsoft.VisualBasic.Switch(Tipo = ExprSQLTipo.Del, "DELETE " & Sql, Tipo = ExprSQLTipo.Sel, "SELECT " & Expressao & " " & Sql, True, Nothing)
        End Function

        ''' <summary>
        ''' Carrega estrutura de um dataset baseado em SQL em ORACLE, MySQL ou MSAccess.
        ''' </summary>
        ''' <param name="SQL">Select para obtenção da estrutura.</param>
        ''' <param name="STRCONN">Identificador da connexão ou string da configuração no web.config.</param>
        ''' <returns>Retorna um dataset contendo somente a estrutura.</returns>
        ''' <remarks></remarks>
        Shared Function DSCarregaEstrut(ByVal SQL As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As DataSet
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

            Dim ds As DataSet = New DataSet
            If Compare(ConnW.ProviderName, MySQL) Then
                ' mysql
                Dim c As New CriadorDeObjetos("MySql.Data.dll")

                Dim Conexao As Object = c.Criar("MySqlConnection", ConnW.ConnectionString)
                Dim comm As Object = c.Criar("MySqlCommand")
                comm = DSCriaComandoMySQL(SQL, Conexao, ListaParametros)

                Dim Adapt As Object = c.Criar("MySqlDataAdapter", comm)
                Adapt.FillSchema(ds, SchemaType.Mapped)
                comm.Connection.Close()
            ElseIf Compare(ConnW.ProviderName, MSAccess) Then
                ' msaccess
                Dim Conexao As OleDbConnection = New OleDbConnection(ConnW.ConnectionString)
                Dim comm As OleDbCommand = DSCriaComandoAccess(SQL, Conexao, ListaParametros)
                Dim Adapt As OleDbDataAdapter = New OleDbDataAdapter(comm)
                Adapt.FillSchema(ds, SchemaType.Mapped)
                comm.Connection.Close()
            ElseIf Compare(ConnW.ProviderName, Oracle) Then
                ' oracle
                Dim conexao As New OracleClient.OracleConnection(ConnW.ConnectionString)
                Dim comm As OracleClient.OracleCommand
                comm = DSCriaComandoOracle(SQL, conexao, Nothing, ListaParametros)
                Dim Adapt As New OracleClient.OracleDataAdapter(comm)
                Adapt.FillSchema(ds, SchemaType.Mapped)
                comm.Connection.Close()
            End If
            Return ds
        End Function

        ''' <summary>
        ''' Carrega dados de um select considerando uma quantidade máxima de registros.
        ''' </summary>
        ''' <param name="Top">Número de registros a serem carregados a partir do topo.</param>
        ''' <param name="SQL">Expressão sql.</param>
        ''' <param name="STRCONN">Identificador da conexão ou string de configuração no web.config.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <returns>Retorna um dataset contendo os dados dos registros selecionados.</returns>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Function DSCarregaTop(ByVal Top As Integer, ByVal SQL As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As DataSet
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
            If Top > 0 Then
                If String.Compare(ConnW.ProviderName, MySQL, True) = 0 Then
                    SQL = "SELECT * FROM (" & SQL & ") as b LIMIT " & Top
                ElseIf String.Compare(ConnW.ProviderName, MSAccess, True) = 0 Then
                    SQL = "SELECT TOP " & Top & " * FROM (" & SQL & ")"
                ElseIf String.Compare(ConnW.ProviderName, Oracle, True) = 0 Then
                    SQL = "SELECT * FROM (" & SQL & ") WHERE ROWNUM <= " & Top
                End If
            End If
            Return DSCarrega(SQL, ConnW, ListaParametros)
        End Function

        ''' <summary>
        ''' Carrega dados de um select.
        ''' </summary>
        ''' <param name="SQL">Expressão sql.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <returns>Retorna um dataset contendo os dados dos registros selecionados.</returns>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Function DSCarrega(ByVal SQL As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As DataSet
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Return DSCarrega(ListaParametros, Nothing, Nothing, SQL, StrConn)
        End Function

        ''' <summary>
        ''' Carrega um DataSet através de uma Lista de Parâmetros.
        ''' </summary>
        ''' <param name="ListaParametros">Lista de Parâmetros.</param>
        ''' <param name="Conexao">Conexão</param>
        ''' <param name="Comm"></param>
        ''' <param name="SQL">String de SQL a ser executada.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <returns>DataSet.</returns>
        ''' <remarks></remarks>
        Shared Function DSCarrega(ByVal ListaParametros As ArrayList, ByVal Conexao As Object, ByVal Comm As Object, ByVal SQL As String, ByVal StrConn As Object) As DataSet

            'Icraft.IcftBase.GravaLog(FileExpr("~/CONSULTAS.TXT"), Format(Now, "yyyy-MM-dd HH:mm:ss") & " -> " & SQL)

            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
            Dim ds As DataSet = New DataSet

            If String.Compare(ConnW.ProviderName, MySQL, True) = 0 Then
                ' mysql
                Dim c As New CriadorDeObjetos("MySql.Data.dll")

                If IsNothing(Conexao) Then
                    Conexao = c.Criar("MySqlConnection", ConnW.ConnectionString)
                End If
                Dim pref As String = New String("")

                ' inclui variáveis de sessão caso estejam definidas

                If Not Ambiente() = AmbienteTipo.Windowsforms Then
                    Dim Ctx As HttpContext = HttpContext.Current

                    pref = "SET @CONN_IP = " & SqlExpr(Ctx.Request.UserHostAddress) & ";"

                    pref &= "SET @CONN_MACHINE = " & SqlExpr(Ctx.Request.UserHostName) & ";"
                    If Ctx.Session("CONN_USER") <> "" Then
                        pref &= "SET @CONN_USER = " & SqlExpr(Ctx.Session("CONN_USER")) & ";"
                    End If

                End If

                If IsNothing(Comm) Then
                    Comm = c.Criar("MySqlCommand")
                End If
                Comm = DSCriaComandoMySQL(pref & SQL, Conexao, ListaParametros)

                Dim Adapt As Object = c.Criar("MySqlDataAdapter", Comm)
                Comm.CommandTimeout = 60000
                Adapt.Fill(ds)
                Comm.Connection.Close()

            ElseIf String.Compare(ConnW.ProviderName, SQLServer, True) = 0 Then
                'sqlserver

                If IsNothing(Conexao) Then
                    Conexao = New SqlConnection(ConnW.ConnectionString)
                End If

                If IsNothing(Comm) Then
                    Comm = DSCriaComandoSQLServer(SQL, Conexao, ListaParametros)
                End If
                Dim Adapt As SqlDataAdapter = New SqlDataAdapter(Comm)
                Adapt.Fill(ds)
                Comm.Connection.Close()

            ElseIf String.Compare(ConnW.ProviderName, MSAccess, True) = 0 Then
                ' msaccess

                If IsNothing(Conexao) Then
                    Conexao = New OleDbConnection(ConnW.ConnectionString)
                End If

                If IsNothing(Comm) Then
                    Comm = DSCriaComandoAccess(SQL, Conexao, ListaParametros)
                End If
                Dim Adapt As OleDbDataAdapter = New OleDbDataAdapter(Comm)
                Adapt.Fill(ds)
                Comm.Connection.Close()
            ElseIf String.Compare(ConnW.ProviderName, Oracle, True) = 0 Then
                'oracle
                Dim Agora As Boolean = False
                If IsNothing(Conexao) Then
                    Conexao = New OracleClient.OracleConnection(ConnW.ConnectionString)
                    Agora = True
                End If

NovaLeitura:
                If IsNothing(Comm) Then
                    Comm = New OracleClient.OracleCommand
                End If

                Try
                    Comm = DSCriaComandoOracle(SQL, Conexao, Comm, ListaParametros)
                    Dim Adapt As New OracleClient.OracleDataAdapter(Comm)
                    Adapt.Fill(ds)
                Catch ex As System.Data.OracleClient.OracleException
                    If TemNaString(ex.Message, "ORA-03135") Then
                        Dim CRet As MsgBoxResult = MsgBox("Erro de conexão com a base de dados. Deseja cancelar, repetir ou ignorar?", MsgBoxStyle.AbortRetryIgnore)
                        If CRet = MsgBoxResult.Retry Then
                            Try
                                Comm.close
                            Catch
                            End Try
                            Comm = Nothing
                            GoTo NovaLeitura
                        ElseIf CRet = MsgBoxResult.Abort Then
                            Throw ex
                        Else
                            Return Nothing
                        End If
                    Else
                        Throw ex
                    End If
                Catch ex As Exception
                    Throw ex
                End Try

                If Agora Then
                    Conexao.close()
                End If

            ElseIf String.Compare(ConnW.ProviderName, Odbc, True) = 0 Then

                If IsNothing(Conexao) Then
                    Conexao = New Odbc.OdbcConnection(ConnW.ConnectionString)
                End If

                If IsNothing(Comm) Then
                    Comm = DSCriaComandoOdbc(SQL, Conexao, ListaParametros)
                End If
                Dim Adapt As New Odbc.OdbcDataAdapter(Comm)
                Adapt.Fill(ds)
                Comm.Connection.Close()

            End If
            Return ds
        End Function


        ''' <summary>
        ''' Executa um comando de gravação conforme sql e parâmetros.
        ''' </summary>
        ''' <param name="SQL">Expressão sql.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config.</param>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Sub DSGrava(ByVal ListaParametros As ArrayList, ByVal Conexao As Object, ByVal Comm As Object, ByVal SQL As String, ByVal StrConn As Object)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

            If String.Compare(ConnW.ProviderName, MySQL, True) = 0 Then
                ' mysql
                Dim c As New CriadorDeObjetos("MySql.Data.dll")

                If IsNothing(Conexao) Then
                    Conexao = c.Criar("MySqlConnection", ConnW.ConnectionString)
                End If
                Dim Pref As String = New String("")

                ' inclui variáveis de sessão caso estejam definidas
                If Ambiente() = AmbienteTipo.WEB Then
                    Dim Ctx As HttpContext = HttpContext.Current
                    Pref = "SET @CONN_IP = " & SqlExpr(Ctx.Request.UserHostAddress) & ";"
                    Pref &= "SET @CONN_MACHINE = " & SqlExpr(Ctx.Request.UserHostName) & ";"
                    Try
                        If Ctx.Session("CONN_USER") <> "" Then
                            Pref &= "SET @CONN_USER = " & SqlExpr(Ctx.Session("CONN_USER")) & ";"
                        End If
                    Catch
                    End Try
                End If

                If IsNothing(Comm) Then
                    Comm = DSCriaComandoMySQL(Pref & SQL, Conexao, ListaParametros)
                End If

                Conexao.Open()
                Comm.CommandTimeout = 60000
                Comm.ExecuteNonQuery()
                Conexao.Close()

            ElseIf String.Compare(ConnW.ProviderName, MSAccess, True) = 0 Then
                ' msaccess
                If IsNothing(Conexao) Then
                    Conexao = New OleDbConnection(ConnW.ConnectionString)
                End If

                If IsNothing(Comm) Then
                    Comm = DSCriaComandoAccess(SQL, Conexao, ListaParametros)
                End If

                Try
                    Conexao.Open()
                    Comm.ExecuteNonQuery()
                    Conexao.Close()
                Catch ex As Exception
                    Dim txterr As String = ""
                    For Each param As OleDbParameter In Comm.Parameters
                        txterr &= param.ParameterName & " = " & NZ(param.Value, "") & " (" & param.DbType & ")" & vbCrLf
                    Next
                    txterr &= "(" & ex.Message & ")"
                    Throw New Exception("Erro ao tentar gravar " & Comm.CommandText & vbCrLf & txterr)
                End Try

            ElseIf String.Compare(ConnW.ProviderName, Odbc, True) = 0 Then
                ' msaccess
                If IsNothing(Conexao) Then
                    Conexao = New Odbc.OdbcConnection(ConnW.ConnectionString)
                End If

                If IsNothing(Comm) Then
                    Comm = DSCriaComandoOdbc(SQL, Conexao, ListaParametros)
                End If

                Try
                    Conexao.Open()
                    Comm.ExecuteNonQuery()
                    Conexao.Close()
                Catch ex As Exception
                    Dim txterr As String = ""
                    For Each param As Odbc.OdbcParameter In Comm.Parameters
                        txterr &= param.ParameterName & " = " & NZ(param.Value, "") & "(" & param.DbType & ")" & vbCrLf
                    Next
                    txterr &= "(" & ex.Message & ")"
                    Throw New Exception("Erro ao tentar gravar " & Comm.CommandText & vbCrLf & txterr)
                End Try


            ElseIf String.Compare(ConnW.ProviderName, Oracle, True) = 0 Then
                ' oracle
                Dim Agora As Boolean = False
                If IsNothing(Conexao) Then
                    Conexao = New OracleClient.OracleConnection(ConnW.ConnectionString)
                    Agora = True
                End If

                If Ambiente() = AmbienteTipo.WEB Then
                    Dim pref As New StringBuilder("BEGIN ")


                    Dim ctx As HttpContext = HttpContext.Current

                    Dim conn_machine As String = SqlExpr(ctx.Request.UserHostName)
                    Dim conn_ip As String = SqlExpr(ctx.Request.UserHostAddress)
                    Dim conn_user As String = "''" 'Por enquanto vazio para garantir preenchimento

                    Try
                        If ctx.Session("CONN_USER") <> "" Then
                            conn_user = SqlExpr(ctx.Session("CONN_USER"))
                        End If
                    Catch
                    End Try

                    pref.Append("dbms_application_info.set_module(module_name => " & NZV(conn_machine, "''") & ", action_name => " & conn_user & ");")
                    pref.Append("dbms_application_info.set_client_info(client_info => " & NZV(conn_ip, "''") & ");")

                    pref.Append(IIf(SQL.EndsWith(";"), SQL, SQL & ";") & " END;")
                    SQL = pref.ToString
                End If


NovaGravacao:
                If IsNothing(Comm) Then
                    Comm = New OracleClient.OracleCommand()
                End If

                Try
                    Comm = DSCriaComandoOracle(SQL, Conexao, Comm, ListaParametros)
                    If Conexao.State <> ConnectionState.Open Then
                        Conexao.Open()
                    End If
                    Comm.ExecuteNonQuery()
                Catch ex As System.Data.OracleClient.OracleException
                    If TemNaString(ex.Message, "ORA-03135") Then
                        Dim CRet As MsgBoxResult = MsgBox("Erro de conexão com a base de dados. Deseja cancelar, repetir ou ignorar?", MsgBoxStyle.AbortRetryIgnore)
                        If CRet = MsgBoxResult.Retry Then
                            Try
                                Comm.close
                            Catch
                            End Try
                            Comm = Nothing
                            GoTo NovaGravacao
                        ElseIf CRet = MsgBoxResult.Abort Then
                            Throw ex
                        Else
                            Exit Sub
                        End If
                    Else
                        Throw ex
                    End If
                Catch ex As Exception
                    Throw ex
                End Try

                If Agora Then
                    Conexao.CLOSE()
                End If
            End If
        End Sub

        ''' <summary>
        ''' Executa um comando de gravação conforme sql e parâmetros.
        ''' </summary>
        ''' <param name="SQL">Expressão sql.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Sub DSGrava(ByVal SQL As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object)
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            DSGrava(ListaParametros, Nothing, Nothing, SQL, StrConn)
        End Sub

        ''' <summary>
        ''' Executa comandos de gravação conforme lista de sql e parâmetros.
        ''' </summary>
        ''' <param name="listaSql">Lista de instruções sql.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <remarks></remarks>
        Shared Sub DSGrava(ByVal listaSql As IList, ByVal StrConn As Object, ByVal ParamArray Params() As Object)
            Dim comandos As String = Join(listaSql.OfType(Of String).ToArray, ";").Replace(";;", ";")
            DSGrava(comandos, StrConn, Params)
        End Sub

        ''' <summary>
        ''' Obtém ou define parâmetro padronizado em tabela.
        ''' </summary>
        ''' <param name="STRCONN">Indicador de conexão (connection string).</param>
        ''' <param name="Chave">Chave para leitura ou gravação.</param>
        ''' <param name="Tabela">Tabela de parâmetros. Por default é SYS_CONFIG_GLOBAL.</param>
        ''' <param name="CampoChave">Campo da tabela que armazena a chave.</param>
        ''' <param name="CampoConteudo">Campo da tabela que armazena o conteúdo.</param>
        ''' <value>Conteúdo do parâmetro para gravação.</value>
        ''' <returns>Conteúdo do parâmetro lido.</returns>
        ''' <remarks></remarks>
        Shared Property DSConfig(ByVal StrConn As Object, ByVal Chave As String, Optional ByVal Tabela As Object = Nothing, Optional ByVal CampoChave As String = "PARAM", Optional ByVal CampoConteudo As String = "CONFIG", Optional ByVal Params As Object = Nothing, Optional ByVal Params2 As Object = Nothing, Optional ByVal Formato As String = Nothing, Optional ByVal PropExtend As String = Nothing) As Object
            Get
                If IsNothing(Tabela) Then
                    Tabela = TabEspec(TabEspecOpc.SYS_CONFIG_GLOBAL)
                End If

                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params, Params2)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
                Return NZ(DSValor(CampoConteudo, Tabela, ConnW, CampoChave & "=:PARAM", ":PARAM", Chave), "")
            End Get

            Set(ByVal value As Object)
                If IsNothing(Tabela) Then
                    Tabela = TabEspec(TabEspecOpc.SYS_CONFIG_GLOBAL)
                End If
                If IsNothing(Params) Then
                    Params = New ArrayList
                End If
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params, Params2)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

                Dim compl As String = ""
                If NZ(Formato, "") <> "" Then
                    compl &= ", FORMATO"
                    Params.ADD(":FORMATO")
                    Params.ADD(Formato)
                End If
                If NZ(PropExtend, "") <> "" Then
                    compl &= ", PROP_EXTEND"
                    Params.ADD(":PROP_EXTEND")
                    Params.ADD(PropExtend)
                End If

                If DSValor("COUNT(*)", Tabela, ConnW, CampoChave & "=:PARAM", ":PARAM", Chave) > 0 Then
                    DSGrava("UPDATE " & Tabela & " SET " & CampoConteudo & "=:CONTEUDO" & Regex.Replace(compl, ", ([^,]*)", ", $1=:$1") & " WHERE " & CampoChave & "=:PARAM", ConnW, ":CONTEUDO", NZ(value, ""), ":PARAM", Chave, Params)
                Else
                    DSGrava("INSERT INTO " & Tabela & " (" & CampoChave & ", " & CampoConteudo & compl & ") values(:CHAVE, :CONTEUDO" & compl.Replace(", ", ", :") & ")", ConnW, ":CHAVE", Chave, ":CONTEUDO", NZ(value, ""), Params)
                End If
            End Set
        End Property

        ''' <summary>
        ''' Obtém ou define parâmetro de usuário específico em tabela de configuração.
        ''' </summary>
        ''' <param name="STRCONN">Indicador de conexão (connection string).</param>
        ''' <param name="Usuario">Nome do usuário para o qual será atribuído ou obtido o parâmetro.</param>
        ''' <param name="Chave">Chave para leitura ou gravação.</param>
        ''' <param name="Tabela">Tabela de parâmetros. Por default é SYS_CONFIG_USUARIO.</param>
        ''' <param name="CampoChave">Campo da tabela que armazena a chave.</param>
        ''' <param name="CampoConteudo">Campo da tabela que armazena o conteúdo.</param>
        ''' <value>Conteúdo do parâmetro para gravação.</value>
        ''' <returns>Conteúdo do parâmetro lido.</returns>
        ''' <remarks></remarks>
        Shared Property DSConfigUsuario(ByVal StrConn As Object, ByVal Usuario As String, ByVal Chave As String, Optional ByVal Tabela As String = "SYS_CONFIG_USUARIO", Optional ByVal CampoUsuario As String = "USUARIO", Optional ByVal CampoChave As String = "PARAM", Optional ByVal CampoConteudo As String = "CONFIG", Optional ByVal Params As Object = Nothing, Optional ByVal Params2 As Object = Nothing) As Object
            Get
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params, Params2)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
                If DSValor("COUNT(*)", Tabela, ConnW, CampoChave & "=:PARAM  AND USUARIO =:USUARIO", ":PARAM", Chave, ":USUARIO", Usuario) > 0 Then
                    Return NZ(DSValor(CampoConteudo, Tabela, ConnW, CampoChave & "=:PARAM AND " & CampoUsuario & "=:USUARIO", ":PARAM", Chave, ":USUARIO", Usuario), "")
                End If
                Return NZ(DSValor(CampoConteudo, Tabela, ConnW, CampoChave & "=:PARAM AND " & CampoUsuario & "=:USUARIO", ":PARAM", Chave, ":USUARIO", Usuario), "")
            End Get
            Set(ByVal value As Object)
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params, Params2)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
                If DSValor("COUNT(*)", Tabela, ConnW, CampoChave & "=:PARAM AND USUARIO =:USUARIO", ":PARAM", Chave, ":USUARIO", Usuario) > 0 Then
                    DSGrava("UPDATE " & Tabela & " SET " & CampoConteudo & "=:CONTEUDO WHERE " & CampoChave & "=:PARAM AND " & CampoUsuario & "=:USUARIO", ConnW, ":CONTEUDO", NZ(value, ""), ":PARAM", Chave, ":USUARIO", Usuario)
                Else
                    If Usuario <> "" Then
                        DSGrava("INSERT INTO " & Tabela & " (" & CampoUsuario & ", " & CampoChave & ", " & CampoConteudo & ") VALUES(:USUARIO, :CHAVE, :CONTEUDO)", ConnW, ":USUARIO", Usuario, ":CHAVE", Chave, ":CONTEUDO", NZ(value, ""))
                    End If
                End If
            End Set
        End Property

        ''' <summary>
        ''' Obtem um valor em uma tabela do tipo max(seq) ou count(seq), por exemplo.
        ''' </summary>
        ''' <param name="Expressao">Expressão como min(campo), max(campo) ou count(campo), por exemplo.</param>
        ''' <param name="TabelaouSQL">Tabela ou consulta a ser pesquisada.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config ou a própria conexão.</param>
        ''' <param name="Condicao">Filtro a ser aplicado na cláusula where da expressão select.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <returns>Retorna o valor de uma expressão na primeira linha do dataset resultante.</returns>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Function DSValor(ByVal Expressao As String, ByVal TabelaouSQL As String, ByVal StrConn As Object, ByVal Condicao As String, ByVal ParamArray Params() As Object) As Object
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

            Dim SQL As String = ExprSQL(TabelaouSQL, Expressao & " AS VRESULT", Condicao)
            Dim DS As DataSet = DSCarrega(SQL, ConnW, ListaParametros)
            If DS.Tables(0).Rows.Count = 1 Then

                ' RETORNA VALOR
                Return DS.Tables(0).Rows(0)("VRESULT")
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Retorna próxima sequência de um campo numérico ou referencial.
        ''' </summary>
        ''' <param name="Campo">Campo de auto-sequenciação.</param>
        ''' <param name="TabelaouSQL">Nome da tabela.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config ou a própria conexão.</param>
        ''' <param name="Condicao">Filtro a ser aplicado na cláusula where da expressão select.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <returns>Retorna o próxima sequência.</returns>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Function DSProxSeq(ByVal Campo As String, ByVal TabelaouSQL As String, ByVal StrConn As Object, ByVal Condicao As String, ByVal ParamArray Params() As Object) As Object
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

            Dim SQL As String = ExprSQL(TabelaouSQL, " MAX(" & Campo & ") AS VRESULT", Condicao)
            Dim DS As DataSet = DSCarrega(SQL, ConnW, ListaParametros)
            If DS.Tables(0).Rows.Count = 1 Then

                ' RETORNA VALOR
                Return NZ(DS.Tables(0).Rows(0)("VRESULT"), 0) + 1
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Retorna o próximo sequencial da etiqueta que estava sendo visualizada atualmente.
        ''' </summary>
        ''' <param name="Campo">Campo da tabela.</param>
        ''' <param name="TabelaouSQL">Tabela.</param>
        ''' <param name="Param">Parâmetro referente a etiqueta.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Shared Function DSProxSeqEtiq(ByVal Campo As String, ByVal TabelaouSQL As String, ByVal Param As String, ByVal StrConn As Object) As Object
            Dim Etiq As String = ""
            Dim NewEtiq As String = ""
            Dim AnoEtiq As String = ""
            Dim MesEtiq As String = ""
            Dim Data As Date = Now
            Dim Ini As String = ""
            Dim Seq As String = ""
            Dim DSVerifica As DataSet
            Dim DS As DataSet = New DataSet


            If Len(Param) = 2 Then
                AnoEtiq = Param
            ElseIf Len(Param) = 5 Then
                AnoEtiq = NZ(Param.Substring(0, 2), "")
                MesEtiq = NZ(Param.Substring(3, 2), "")
            ElseIf Len(Param) > 5 Then
                AnoEtiq = NZ(Param.Substring(0, 2), "")
                MesEtiq = NZ(Param.Substring(3, 2), "")
                Seq = NZ(Param.Substring(6), "")
            ElseIf Len(Param) = 0 Then
                DSVerifica = DSCarrega("SELECT COUNT (*) AS COUNT FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & Microsoft.VisualBasic.Right(Data.Year, 2) & "." & Microsoft.VisualBasic.Right("00" & Data.Month, 2) & "%'" & ")", StrConn)
                If DSVerifica.Tables(0).Rows(0)("COUNT") = 0 Then
                    Dim X As Integer
                    For X = Len(Seq) To 4 Step 1
                        Seq &= 0
                    Next
                    Etiq = Microsoft.VisualBasic.Right(Data.Year, 2) & "." & Microsoft.VisualBasic.Right("00" & Data.Month, 2) & "." & Seq
                    Return Etiq
                End If
            Else
                MsgBox("Insira apenas o ano, Ex: 99 ou Ano e Mes, Ex: 99.99")
                Return Nothing
            End If
            If AnoEtiq <> "" And MesEtiq = "" And Seq = "" Then
                DSVerifica = DSCarrega("SELECT COUNT (*) AS COUNT FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & AnoEtiq & "%'" & ")", StrConn)
                If DSVerifica.Tables(0).Rows(0)("COUNT") = 0 Then
                    MsgBox("Referência Inexistente.")
                    Return Nothing
                Else
                    DS = DSCarrega("SELECT MAX (" & Campo & ") AS ETIQ FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & AnoEtiq & "%'" & ")", StrConn)
                    Etiq = NZ(DS.Tables(0).Rows(0)("ETIQ").Substring(6, 5), "") + 1
                    Etiq = Microsoft.VisualBasic.Right("00000" & Etiq, 5)
                End If
            ElseIf AnoEtiq <> "" And MesEtiq <> "" And Seq = "" Then
                DSVerifica = DSCarrega("SELECT COUNT (*) AS COUNT FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & AnoEtiq & "." & MesEtiq & "%'" & ")", StrConn)
                If DSVerifica.Tables(0).Rows(0)("COUNT") = 0 Then
                    MsgBox("Referência Inexistente.")
                    Return Nothing
                Else
                    DS = DSCarrega("SELECT MAX (" & Campo & ") AS ETIQ FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & AnoEtiq & "." & MesEtiq & "%'" & ")", StrConn)
                    Etiq = NZ(DS.Tables(0).Rows(0)("ETIQ").Substring(6, 5), "") + 1
                    Etiq = Microsoft.VisualBasic.Right("00000" & Etiq, 5)
                End If
            ElseIf AnoEtiq <> "" And MesEtiq <> "" And Seq <> "" Then
                DSVerifica = DSCarrega("SELECT COUNT (*) AS COUNT FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & AnoEtiq & "." & MesEtiq & "." & Seq & "%'" & ")", StrConn)
                If DSVerifica.Tables(0).Rows(0)("COUNT") = 0 Then
                    If DSVerifica.Tables(0).Rows(0)("COUNT") = 0 Then
                        Dim X As Integer
                        For X = Len(Seq) To 4 Step 1
                            Seq &= 0
                        Next
                        Etiq = AnoEtiq & "." & MesEtiq & "." & Seq
                        Return Etiq
                    End If
                Else
                    DS = DSCarrega("SELECT MAX(" & Campo & ") AS ETIQ FROM (" & TabelaouSQL & ") WHERE (" & Campo & ") LIKE (" & "'" & AnoEtiq & "." & MesEtiq & "." & Seq & "%'" & ")", StrConn)
                    Etiq = NZ(DS.Tables(0).Rows(0)("ETIQ").Substring(6, 5), "") + 1
                    Etiq = Microsoft.VisualBasic.Right("00000" & Etiq, 5)
                End If
            ElseIf Param = "" Then
                DS = DSCarrega("SELECT MAX (" & Campo & ") AS ETIQ FROM (" & TabelaouSQL & ")WHERE (" & Campo & ") LIKE (" & "'" & Param & "%'" & ")", StrConn)
                Etiq = NZ(DS.Tables(0).Rows(0)("ETIQ").Substring(6, 5), "") + 1
                Etiq = Microsoft.VisualBasic.Right("00000" & Etiq, 5)
            End If
            Ini = NZ(DS.Tables(0).Rows(0)("ETIQ").Substring(0, 2), "")
            Ini &= "." & NZ(DS.Tables(0).Rows(0)("ETIQ").Substring(3, 2), "") & "."
            NewEtiq = Ini & Etiq
            Return NewEtiq
            Return Nothing
        End Function

        ''' <summary>
        ''' Constrói arraylist com base em expressão selecionada na tabela.
        ''' </summary>
        ''' <param name="Expressao">Campo ou expressão</param>
        ''' <param name="TabelaouSQL">Tabela ou SQL onde será a consulta.</param>
        ''' <param name="STRCONN">Identificador da string de conexão configurada no web.config ou a própria conexão.</param>
        ''' <param name="Condicao">Filtro a ser aplicado na cláusula where da expressão select.</param>
        ''' <param name="Ordem">Campos para ordenação separados por vírgula.</param>
        ''' <param name="Params">Sequência e parâmetros do tipo ":campo1", conteudo1, ":campo2", conteudo2.</param>
        ''' <returns>Retorna um arraylist contendo como item o resultado da expressão por registro.</returns>
        ''' <remarks>Primeiro parâmetro da lista também poderá conter um paramarray contendo todos os parâmetros.</remarks>
        Shared Function DSConcat(ByVal Expressao As String, ByVal TabelaouSQL As String, ByVal StrConn As Object, ByVal Condicao As String, ByVal Ordem As String, ByVal ParamArray Params() As Object) As ArrayList
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

            Dim SQL As String = ExprSQL(TabelaouSQL, Expressao & " AS VRESULT", Condicao, Ordem)
            Dim DS As DataSet = DSCarrega(SQL, ConnW, ListaParametros)
            Return ItemsToArrayList(DS.Tables(0).Rows, "VRESULT")
        End Function

        ''' <summary>
        ''' Cria comando para MySQL.
        ''' </summary>
        ''' <param name="SQL">SQL a ser configurado com parâmetros.</param>
        ''' <param name="Conexao">Conexão para acesso ao banco de dados.</param>
        ''' <param name="ListaParametros">Lista de parâmetros tipo ParamArray.</param>
        ''' <returns>Retorna comando a ser executado.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSCriaComandoMySQL(ByRef SQL As String, ByRef Conexao As Object, ByRef ListaParametros As ArrayList) As Object
            Dim c As New CriadorDeObjetos("MySql.Data.dll")
            MacroSubstSQL(SQL, ListaParametros)
            Dim Comando As Object = c.Criar("MySqlCommand", SQL, Conexao)
            Dim Param As String
            Dim gexmatch As MatchCollection = Regex.Matches(SQL, "[:@\?](\w+)", RegexOptions.Multiline)
            For Each m As Match In gexmatch
                Param = m.Value
                Dim pos As Integer = ListaParametros.IndexOf(m.Value)
                If pos <> -1 Then
                    Mid(Comando.CommandText, m.Groups(1).Index, 1) = "?"
                    Mid(Param, 1, 1) = "?"
                    Dim P As Object
                    P = c.Criar("MySqlParameter", Param, ListaParametros(pos + 1))
                    Comando.Parameters.Add(P)
                End If
            Next
            Return Comando
        End Function

        ''' <summary>
        ''' Constrói comando para Microsoft Access.
        ''' </summary>
        ''' <param name="SQL">SQL a ser executado com parâmetros.</param>
        ''' <param name="Conexao">Conexão com a base de dados.</param>
        ''' <param name="ListaParametros">Lista de parâmetros tipo ParamArray.</param>
        ''' <returns>Retorna comando a ser executado.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSCriaComandoAccess(ByRef SQL As String, ByRef Conexao As OleDbConnection, ByRef ListaParametros As ArrayList) As OleDbCommand
            MacroSubstSQL(SQL, ListaParametros)
            SQL = SQL.Replace(" || ", " & ")
            SQL = SQL.Replace(" UPPER(", " UCASE(")
            SQL = SQL.Replace(" LOWER(", " LCASE(")

            Dim Comando As OleDbCommand = New OleDbCommand(SQL, Conexao)
            Dim Param As String
            Dim gexmatch As MatchCollection = Regex.Matches(SQL, "[:@\?](\w+)", RegexOptions.Multiline)
            For Each m As Match In gexmatch
                Param = m.Groups(1).Value
                Dim pos As Integer = ListaParametros.IndexOf(m.Value)
                If pos <> -1 Then
                    Mid(Comando.CommandText, m.Groups(1).Index, 1) = "@"
                    Param = "@" & Param
                    Dim P As OleDbParameter
                    If IsNothing(ListaParametros(pos)) Then
                        P = New OleDbParameter(Param, ListaParametros(pos + 1))
                    ElseIf ListaParametros(pos + 1).GetType.ToString = "System.Decimal" Then
                        P = New OleDbParameter(Param, OleDb.OleDbType.Double)
                        P.Value = ListaParametros(pos + 1)
                    ElseIf ListaParametros(pos + 1).GetType.ToString = "System.DateTime" Then
                        P = New OleDbParameter(Param, OleDb.OleDbType.Date)
                        P.Value = ListaParametros(pos + 1)
                    Else
                        P = New OleDbParameter(Param, ListaParametros(pos + 1))
                    End If
                    Comando.Parameters.Add(P)
                End If
            Next

            Return Comando
        End Function


        ''' <summary>
        ''' Cria comando para ODBC.
        ''' </summary>
        ''' <param name="SQL">Comando SQL a ser executado com parâmetros.</param>
        ''' <param name="Conexao">Conexão com a base de dados.</param>
        ''' <param name="ListaParametros">Lista de parâmetros no formato ParamArray.</param>
        ''' <returns>Retorna comando a ser executado no adapter.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSCriaComandoOdbc(ByRef SQL As String, ByRef Conexao As Odbc.OdbcConnection, ByRef ListaParametros As ArrayList) As Odbc.OdbcCommand
            MacroSubstSQL(SQL, ListaParametros)
            SQL = SQL.Replace(" || ", " & ")
            SQL = SQL.Replace(" UPPER(", " UPPER(")
            SQL = SQL.Replace(" LOWER(", " LOWER(")

            Dim Comando As New Odbc.OdbcCommand(SQL, Conexao)
            Dim Param As String
            Dim gexmatch As MatchCollection = Regex.Matches(SQL, "[:@\?](\w+)", RegexOptions.Multiline)
            For Each m As Match In gexmatch
                Param = m.Groups(1).Value
                Dim pos As Integer = ListaParametros.IndexOf(m.Value)
                If pos <> -1 Then
                    Mid(Comando.CommandText, m.Groups(1).Index, 1) = "@"
                    Param = "@" & Param
                    Dim P As Odbc.OdbcParameter
                    If IsNothing(ListaParametros(pos)) Then
                        P = New System.Data.Odbc.OdbcParameter(Param, ListaParametros(pos + 1))
                    ElseIf ListaParametros(pos + 1).GetType.ToString = "System.DateTime" Then
                        P = New System.Data.Odbc.OdbcParameter(Param, OleDb.OleDbType.Date)
                        P.Value = ListaParametros(pos + 1)
                    Else
                        P = New System.Data.Odbc.OdbcParameter(Param, ListaParametros(pos + 1))
                    End If
                    Comando.Parameters.Add(P)
                End If
            Next

            Return Comando
        End Function


        ''' <summary>
        ''' Cria comando para Oracle.
        ''' </summary>
        ''' <param name="SQL">Comando SQL a ser executado com parâmetros.</param>
        ''' <param name="Conexao">Conexão com a base de dados.</param>
        ''' <param name="ListaParametros">Lista de parâmetros no formato ParamArray.</param>
        ''' <returns>Retorna comando a ser executado no adapter.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSCriaComandoOracle(ByRef SQL As String, ByRef Conexao As Object, ByVal Comando As Object, ByRef ListaParametros As ArrayList) As Object
            MacroSubstSQL(SQL, ListaParametros)

            If IsNothing(Comando) Then
                Comando = New OracleClient.OracleCommand(SQL, Conexao)
            Else
                Comando.COMMANDTEXT = SQL
                Comando.CONNECTION = Conexao
                Comando.PARAMETERS.CLEAR()
            End If

            Dim Param As String
            Dim gexmatch As MatchCollection = Regex.Matches(SQL, "[:@\?](\w+)", RegexOptions.Multiline)

            ' DEIXEI ESTE CÓDIGO AQUI PARA PRÓXIMO PASSO.
            ' VOU INCLUIR TRATAMENTO LOB AQUI MESMO
            ' FAVOR NÃO APAGAR POR ENQUANTO...
            '            Dim DECL As String = ""
            '            Dim COD As String = ""


            For Each m As Match In gexmatch
                Param = m.Value
                Dim pos As Integer = ListaParametros.IndexOf(m.Value)
                If pos <> -1 Then
                    Mid(Comando.CommandText, m.Groups(1).Index, 1) = ":"
                    Mid(Param, 1, 1) = ":"
                    Dim P As OracleClient.OracleParameter
                    If TypeOf ListaParametros(pos + 1) Is Array Then
                        P = New OracleClient.OracleParameter()
                        P.ParameterName = Param
                        P.OracleType = OracleClient.OracleType.Blob
                        P.Value = ListaParametros(pos + 1)
                    Else
                        P = New OracleClient.OracleParameter(Param, ListaParametros(pos + 1))
                    End If
                    Comando.Parameters.Add(P)
                End If
            Next

            Return Comando
        End Function

        ''' <summary>
        ''' Cria comando para SQL Server.
        ''' </summary>
        ''' <param name="SQL">Comando SQL a ser executado com parâmetros.</param>
        ''' <param name="Conexao">Conexão com a base de dados.</param>
        ''' <param name="ListaParametros">Lista de parâmetros no formato ParamArray.</param>
        ''' <returns>Retorna comando a ser executado no adapter.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSCriaComandoSQLServer(ByRef SQL As String, ByRef Conexao As SqlConnection, ByRef ListaParametros As ArrayList) As SqlCommand
            MacroSubstSQL(SQL, ListaParametros)
            Dim Comando As SqlCommand = New SqlCommand(SQL, Conexao)
            Dim Param As String
            Dim gexmatch As MatchCollection = Regex.Matches(SQL, "[:@\?](\w+)", RegexOptions.Multiline)

            For Each m As Match In gexmatch
                Param = m.Value
                Dim pos As Integer = ListaParametros.IndexOf(m.Value)
                If pos <> -1 Then
                    Mid(Comando.CommandText, m.Groups(1).Index, 1) = "@"
                    Mid(Param, 1, 1) = "@"
                    Dim P As SqlParameter
                    P = New SqlParameter(Param, ListaParametros(pos + 1))
                    Comando.Parameters.Add(P)
                End If
            Next
            Return Comando
        End Function

        ''' <summary>
        ''' Retorna tipo da base de dados.
        ''' </summary>
        ''' <param name="STRCONN">Identificador do connection.</param>
        ''' <param name="Params">Parâmetros para serem utilizados por macrosubst.</param>
        ''' <returns>Retorna enum TipoBaseSQL.MSAccess, MySQL ou Oracle.</returns>
        ''' <remarks></remarks>
        Shared Function DSTipoBaseSQL(ByVal StrConn As Object, ByVal ParamArray Params() As Object) As TipoBaseSQL
            Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
            If Compare(ConnW.ProviderName, MySQL) Then
                Return TipoBaseSQL.MySQL
            ElseIf Compare(ConnW.ProviderName, MSAccess) Then
                Return TipoBaseSQL.MSAccess
            ElseIf Compare(ConnW.ProviderName, Oracle) Then
                Return TipoBaseSQL.Oracle
            ElseIf Compare(ConnW.ProviderName, SQLServer) Then
                Return TipoBaseSQL.SQLServer
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Obtém um DataColumn com base em um DataTable.
        ''' </summary>
        ''' <param name="DSTab">DataTable que será utilizado como base para se obter as colunas.</param>
        ''' <param name="CamposTxt">Campos desejados do DataTable separados por ;.</param>
        ''' <returns>Retorna um DataColumn contendo os campos passados em CamposTxt que existam dentro de DSTab.</returns>
        ''' <remarks></remarks>
        Shared Function DSDataColumns(ByVal DSTab As DataTable, ByVal CamposTxt As String) As DataColumn()
            Dim Campos As Array = Split(CamposTxt, ";")
            Dim Cols() As DataColumn = New DataColumn(Campos.Length) {}
            For z As Integer = 0 To Campos.Length - 1
                Cols(z) = DSTab.Columns(Campos(z))
            Next
            Return Cols
        End Function

        ''' <summary>
        ''' Retorna um dataset filtrado.
        ''' </summary>
        ''' <param name="DSCompleto">Dataset que se deseja filtrar.</param>
        ''' <param name="Filtro">String correspondente ao filtro.</param>
        ''' <returns>DataSet com o conjunto de registro correspondentes ao filtro passado.</returns>
        ''' <remarks></remarks>
        Shared Function DSFiltra(ByVal DSCompleto As DataSet, ByVal Filtro As String) As DataSet
            Return DSFiltra(DSCompleto, Filtro, "")
        End Function

        ''' <summary>
        ''' Retorna um dataset filtrado.
        ''' </summary>
        ''' <param name="DSCompleto">Dataset que se deseja filtrar.</param>
        ''' <param name="Filtro">String correspondente ao filtro.</param>
        ''' <param name="Classifica">Coluna pela qual o DataSet será ordernado.</param>
        ''' <returns>DataSet com o conjunto de registro correspondentes ao filtro passado.</returns>
        ''' <remarks></remarks>
        Shared Function DSFiltra(ByVal DSCompleto As DataSet, ByVal Filtro As String, ByVal Classifica As String) As DataSet

            Dim DrFiltrada() As DataRow = DSCompleto.Tables(0).Select(Filtro, Classifica)
            Dim DsFiltrado As DataSet
            DsFiltrado = DSCompleto.Clone

            For r As Integer = 0 To DrFiltrada.Length - 1
                DsFiltrado.Tables(0).ImportRow(DrFiltrada(r))
            Next

            Return DsFiltrado

        End Function
        ''' <summary>
        ''' Retorna um dataset com uma tabela filtrada.
        ''' </summary>
        ''' <param name="Tabela">Tabela a ser filtrada.</param>
        ''' <param name="Filtro">O filtro que será utilizado.</param>
        ''' <param name="Classifica">Coluna pela qual a tabela será ordenada.</param>
        ''' <returns>Uma nova tabela contendo o filtro especificado.</returns>
        ''' <remarks></remarks>
        Shared Function DSFiltraTab(ByVal Tabela As System.Data.DataTable, ByVal Filtro As String, ByVal Classifica As String) As System.Data.DataTable
            Dim DrFiltrada() As DataRow = Tabela.Select(Filtro, Classifica)
            Dim TB As System.Data.DataTable = Tabela.Clone
            TB.Rows.Clear()
            For r As Integer = 0 To DrFiltrada.Length - 1
                TB.ImportRow(DrFiltrada(r))
            Next
            Return TB
        End Function

        ''' <summary>
        ''' Conversão de estrutura recursiva em tabela para hierarquia em texto tipo arraylist.
        ''' </summary>
        ''' <param name="DS">Dataset contendo recursividade.</param>
        ''' <param name="Chave">Campo chave da tabela.</param>
        ''' <param name="CampoVinc">Campo vinculado que caracteriza recursividade.</param>
        ''' <param name="MascNode">Campo que será apresentado como texto do node.</param>
        ''' <param name="Filtro">Filtro para pesquisa.</param>
        ''' <returns>Arraylist contendo hierarquia.</returns>
        ''' <remarks></remarks>
        Shared Function TabHierarqParaMenu(ByVal DS As DataSet, ByVal Chave As String, ByVal CampoVinc As String, ByVal MascNode As String, Optional ByVal Filtro As Object = Nothing) As ArrayList
            Dim Itens As ArrayList = New ArrayList
            Dim DV As DataView = New DataView(DS.Tables(0), CampoVinc & IIf(IsNothing(Filtro), " IS NULL", " = " & Filtro), "ORDEM, SEQ", DataViewRowState.CurrentRows)
            For Each Row As DataRowView In DV

                Dim Str As String = "'" & Row("DESCR") & "'"
                For Each Campo As String In Split("Objeto;URL;Prefix;Tip;Seq;Super_Seq", ";")
                    If NZ(Row(Campo), "") <> "" Then
                        Str &= " " & Campo & ":" & NZ(Row(Campo), "")
                    End If
                Next
                Itens.Add(Str)

                Dim SubItens As ArrayList = TabHierarqParaMenu(DS, Chave, CampoVinc, MascNode, Row("SEQ"))
                If SubItens.Count <> 0 Then
                    Itens.Add(SubItens)
                End If
            Next
            Return Itens
        End Function

        ''' <summary>
        ''' Concatena um conjunto de strings separadas ou não por um separador.
        ''' </summary>
        ''' <param name="Sep">Separador que será colocado entre as strings que serão concatenadas.</param>
        ''' <param name="Segmentos">Conjunto de strings que serão concatenadas.</param>
        ''' <returns>Retorna uma string única contendo todas as Strings presentes em Segmentos concatenadas e separadas por Sep.</returns>
        ''' <remarks></remarks>
        Public Shared Function StrExpr(ByVal Sep As String, ByVal ParamArray Segmentos() As Object) As String
            Dim Ret As String = ""
            For Each Item As String In Segmentos
                If Item <> "" Then
                    If Ret <> "" AndAlso Not (Ret.EndsWith(Sep) Or Item.StartsWith(Sep)) Then
                        Ret &= Sep
                    End If
                    Ret &= Item
                End If
            Next
            Do While Ret.StartsWith(Sep)
                Ret = Ret.Substring(Len(Sep))
            Loop
            Do While Ret.EndsWith(Sep)
                Ret = Ret.Substring(0, Len(Ret) - Len(Sep) - 1)
            Loop
            Return Ret
        End Function

        ''' <summary>
        ''' Busca na string formato de emailstr apenas o trecho com o email.
        ''' </summary>
        ''' <param name="Email">Email a ser analisado.</param>
        ''' <returns>Trecho contendo somente o email.</returns>
        ''' <remarks></remarks>
        Public Shared Function SoEmailStr(ByVal Email As String) As String
            Return RegexGroup(Email, "(^|[ \t\[\<\>\""]*)([\w-.]+@[\w-]+(\.[\w-]+)+)(($|[ \t\<\>\""]*))", 2).Value
        End Function

        ''' <summary>
        ''' Formata email conforme exigência dos servidores smtp, baseando-se no formato 'nome' [email@dominio.com.br].
        ''' </summary>
        ''' <param name="Email">Email a ser formatado.</param>
        ''' <returns>Retorna email no formato 'nome' &lt;email@dominio.com.br&gt;</returns>
        ''' <remarks></remarks>
        Public Shared Function EmailStr(ByVal Email As String) As String
            Email = Trim(Email)
            Email = Email.Replace("[", "<").Replace("]", ">").Replace(Chr(160), " ")
            If Email.StartsWith("'") Then
                Email = Regex.Replace(Email, "'(.*)'", """$1""")
            End If

            Email = Email.Replace("'", "`")

            Dim SoEmail As String = ""
            If Email.IndexOf("<") = -1 Then
                SoEmail = SoEmailStr(Email)
                If SoEmail <> "" Then
                    Email = ReplRepl(Email, SoEmail, "")
                End If
            Else
                SoEmail = Regex.Match(Email, "<(.*?)>").Groups(1).Value
                Email = ReplRepl(Email, "<" & SoEmail & ">", "")
            End If

            Email = ReplRepl(Email, Chr(9), "")
            Email = TrimCarac(Trim(ReplRepl(Email, "  ", " ")), New String() {Chr(34), "'"})
            Email = Regex.Replace(Email, "`(.*)`", "$1")

            If Email <> "" Then
                Email = SqlExpr(Email, """")
            End If
            Email = ExprExpr(" ", "", Email, "<" & SoEmail & ">")
            Return Email
        End Function

        ''' <summary>
        ''' Trata string transformando-a em arraylist de emails no formato 'nome'(email@dominio.com.br).
        ''' </summary>
        ''' <param name="Email">Email a ser tratado contendo lista separada por ponto e vírgula.</param>
        ''' <returns>Retorna arraylist contendo emails.</returns>
        ''' <remarks></remarks>
        Public Shared Function TermosStrToLista(ByVal Email As Object) As ArrayList
            If TypeOf (Email) Is ArrayList Then
                Email = Join(CType(Email, ArrayList).ToArray, ";")
            End If
            Dim Lista As New ArrayList
            If NZ(Email, "") <> "" Then

                Email = ReplRepl(Email, vbCrLf, ";")
                Email = ReplRepl(Email, Chr(10), ";")
                Email = ReplRepl(Email, Chr(13), ";")

                Dim Emails As Array = Split(Email, ";")
                For Each Item As String In Emails
                    Item = Trim(Item)
                    If Item <> "" Then
                        Dim pref As String
                        If Item.StartsWith("bcc:", StringComparison.OrdinalIgnoreCase) Then
                            pref = "bcc:"
                            Item = Item.Substring(4)
                        Else
                            pref = ""
                        End If
                        If Item.StartsWith("conf.", StringComparison.OrdinalIgnoreCase) Then
                            Dim Result As ArrayList = TermosStrToLista(WebConf(Item.Substring(5)))
                            If pref <> "" Then
                                For Each ResultItem As String In Result
                                    Lista.Add(pref & ResultItem)
                                Next
                            Else
                                Lista.AddRange(Result)
                            End If
                        Else
                            Lista.Add(pref & Item)
                        End If
                    End If
                Next
            End If
            Return Lista
        End Function

        ''' <summary>
        ''' Transforma texto em conteúdo cripto reversível com base em chave e algorítmo próprio.
        ''' </summary>
        ''' <param name="Texto">Texto a ser criptografado.</param>
        ''' <param name="Chave">Chave opcional. Na falta desta, default da biblioteca será utilizada.</param>
        ''' <returns>Retorna texto criptografado que representa conteúdo inicial, podendo ser revertido mediante chave.</returns>
        ''' <remarks></remarks>
        Shared Function EncrypB(ByVal Texto As String, Optional ByVal Chave As String = EncrypBChavePadrao) As String
            If Chave = "" Then
                Chave = EncrypBChavePadrao
            End If
            Dim Result As New List(Of Byte)
            For z As Integer = 0 To Len(Texto) - 1
                Dim pos As Integer = z Mod Len(Chave)
                Result.Add((Asc(Texto.Substring(z, 1)) + Asc(Chave.Substring(pos, 1))) Mod 256)
            Next
            Return Convert.ToBase64String(Result.ToArray)
        End Function

        ''' <summary>
        ''' Reversão de conteúdo criptografado com base em chave.
        ''' </summary>
        ''' <param name="Texto">Texto criptografado para reversão.</param>
        ''' <param name="Chave">Chave opcional. Na falta desta, default da biblioteca será considerada.</param>
        ''' <returns>Retorna conteúdo original, caso chave esteja correta.</returns>
        ''' <remarks></remarks>
        Shared Function DecrypB(ByVal Texto As String, Optional ByVal Chave As String = EncrypBChavePadrao) As String
            If Chave = "" Then
                Chave = EncrypBChavePadrao
            End If
            If IsNothing(Texto) OrElse IsDBNull(Texto) Then
                Texto = ""
            End If
            Dim Result As String = ""
            Dim Bytes() As Byte = Convert.FromBase64String(Texto)
            For z As Integer = 0 To Bytes.Length - 1
                Dim pos As Integer = z Mod Len(Chave)
                Dim Num As Integer = Bytes(z) - Asc(Chave.Substring(pos, 1))
                If Num < 0 Then
                    Num += 256
                End If
                Result &= Chr(Num)
            Next
            Return Result
        End Function

        ''' <summary>
        ''' Reverte texto convertido por URLJSEncode, que tem finalidade de ocultar códigos especiais não tratáveis por GET.
        ''' </summary>
        ''' <param name="Texto">Texto codificado a ser revertido em original.</param>
        ''' <returns>Retorna texto revertido.</returns>
        ''' <remarks></remarks>
        Public Shared Function URLJSDecode(ByVal Texto As String) As String
            Dim pos As Integer = InStr(Texto, "_")
            Do While pos <> 0
                Texto = Microsoft.VisualBasic.Left(Texto, pos - 1) & Uri.HexUnescape("%" & Mid(Texto, pos + 1, 2), 0) & Mid(Texto, pos + 3)
                pos = InStr(pos + 1, Texto, "_")
            Loop
            Return Texto
        End Function

        ''' <summary>
        ''' Converte texto em codificação capaz de ocultar caracteres especiais com objetivo de passar entre JAVASCRIPT e ASP.NET.
        ''' </summary>
        ''' <param name="Texto">Texto original a ser convertido.</param>
        ''' <returns>Retorna texto codificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function URLJSEncode(ByVal Texto As String, Optional ByVal SoEspeciais As Boolean = False) As String
            Dim ret As String = ""
            If Not SoEspeciais Then
                For z As Integer = 1 To Len(Texto)
                    ret &= "_" & Mid(Uri.HexEscape(Mid(Texto, z, 1)), 2)
                Next
            Else
                ret = Regex.Replace(Texto, "(?is)[^a-z0-9]", New System.Text.RegularExpressions.MatchEvaluator(AddressOf Exibe.JSEncod))
            End If
            Return ret
        End Function

        ''' <summary>
        ''' Obtém formato extendido, armazenado em texto contínuo e prepara arraylist com as variáveis seguidas de conteúdo (:var, :conteudo, :var2, conteudo2...).
        ''' </summary>
        ''' <param name="Extend">Texto a ser analisado.</param>
        ''' <returns>Arraylist contendo variáveis no formato :var1, conteudo1, :var2, conteudo2...</returns>
        ''' <remarks></remarks>
        Shared Function ExtendToArrayList(ByVal Extend As String) As ArrayList
            Dim Lista As New ArrayList
            If Extend.StartsWith("<<") Then
                Dim Var As String = ""
                Dim Conteudo As String = ""
                For Each linha As String In Split(Extend, vbCrLf)
                    If linha.StartsWith("<<") And linha.EndsWith(">>") Then
                        If Var <> "" Then
                            Lista.Add(Var)
                            Lista.Add(Conteudo)
                            Conteudo = ""
                        End If
                        Var = StrStr(linha, 2, -2)
                    Else
                        Conteudo &= IIf(Conteudo <> "", vbCrLf, "") & linha
                    End If
                Next
                If Var <> "" Then
                    Lista.Add(Var)
                    Lista.Add(Conteudo)
                End If
            Else
                Dim Elems As New ElementosStr(Extend, "|", ":")
                For Each Elem As ElementoStr In Elems.Elementos
                    Lista.Add(Elem.Nome)
                    Lista.Add(Elem.Conteudo)
                Next
            End If
            Return Lista
        End Function

        ''' <summary>
        ''' Transforma objeto em array de bytes pronto para gravar em blob.
        ''' </summary>
        ''' <param name="obj">Objeto a ser convertido em array de bytes.</param>
        ''' <returns>Retorna array de bytes.</returns>
        ''' <remarks></remarks>
        Shared Function ObjectToByteArray(ByVal obj As Object) As Byte()
            Dim Bytes() As Byte = Nothing
            Try
                Dim fs As System.IO.MemoryStream = New System.IO.MemoryStream
                Dim formatter As System.Runtime.Serialization.Formatters.Binary.BinaryFormatter = New System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
                formatter.Serialize(fs, obj)
                Bytes = fs.ToArray
            Catch
            End Try
            Return Bytes
        End Function




        ''' <summary>
        ''' Retorna SQL traduzido conforme retorno de MACROSUBSTSQL não prevendo a utilização de variáveis bind (tudo no texto).
        ''' </summary>
        ''' <param name="SQLRef">SQL a ser tratado, podendo o mesmo possuir referências :VARIAVEL, [:CAMPO] ou [:valor.CAMPO] para macrosubstituição.</param>
        ''' <param name="ListaDeOrigens">Lista de origens podendo ser LOGON, CONTAINER ou parâmetros nominais por exemplo: VARIAVEL, "CONTEUDO", :OUTRAVAR, 10.</param>
        ''' <returns>Retorna SQL tratado, com variáveis convertidas em texto.</returns>
        ''' <remarks></remarks>
        Shared Function MacroSubstSQLText(ByVal SQLRef As String, ByVal ParamArray ListaDeOrigens() As Object) As String
            Dim SQL As String = SQLRef
            MacroSubstSQL(SQL, Nothing, ListaDeOrigens)
            Return SQL
        End Function

        ''' <summary>
        ''' Obsoleta: Rotina de macrosubstituição de variáveis conforme fontes especificadas como lista de parâmetros, formulários, logon, etc. Esta função será descontinuada.
        ''' </summary>
        ''' <param name="SQLRef">Texto a ser tratado, onde será efetuada a busca por parâmetros como [:variavel].</param>
        ''' <param name="ListaOrigens">Origens possíveis para pesquisa das variáveis.</param>
        ''' <remarks></remarks>
        <Obsolete("Esta função será descontinuada.")>
        Shared Sub MacroSubst(ByRef SQLRef As String, ByVal ParamArray ListaOrigens() As Object)
            ' se não tem campo sai imediatamente
            Dim _gex_expr As String = "\[:([^\]]*)\]"
            Dim resultG As Match = Regex.Match(SQLRef, _gex_expr)
            If resultG.Captures.Count = 0 Then
                Exit Sub
            End If

            ' identifica possíveis origens
            Dim Origens As ArrayList = ParamArrayToArrayList(ListaOrigens)

            ' seleciona origens complexas
            Dim OrigensObj As ArrayList = New ArrayList
            For Each Item As Object In Origens
                If Not TypeOf (Item) Is String Then
                    OrigensObj.Add(Item)
                End If
            Next


            ' procura os parâmetros
            While resultG.Captures.Count <> 0
                Dim Param As String = resultG.Groups(1).Value
                Dim TrocarPara As String = ":" & Param
                Dim Conteudo As Object = Nothing

                ' procura string
                Dim Pos As Integer = Origens.IndexOf(":" & Param)
                If Pos <> -1 Then
                    Conteudo = Origens.Item(Pos + 1)
                Else

                    ' procura nas origens especificadas
                    For Each Origem As Object In OrigensObj
                        Conteudo = OrigemParam(Origem, Param)
                        If Not IsNothing(Conteudo) Then
                            Exit For
                        End If
                    Next
                End If

                ' ocorre um erro caso conteúdo não seja encontrado
                If IsNothing(Conteudo) Then
                    Throw New Exception("Em MacroSubst, variável não identificada " & resultG.Value & ".")
                End If

                ' atualiza termo conforme parâmetro encontrado
                SQLRef = SQLRef.Substring(0, resultG.Index) & Conteudo & SQLRef.Substring(resultG.Index + resultG.Length)

                resultG = Regex.Match(SQLRef, _gex_expr)
            End While
        End Sub

        ''' <summary>
        ''' Troca em TEXTO variáveis a partir de fontes LOGON e CONTAINERS, podendo retornar em variáveis bind ou no próprio SQL (PARAMS = Nothing).
        ''' </summary>
        ''' <param name="SQLRef">Texto SQL contendo variáveis: SELECT [:valor.CAMPO], * FROM TABELA WHERE CAMPO=[:CAMPO]...</param>
        ''' <param name="Params">Lista de parâmetros conhecidos passados e retorno de variáveis bind para submissão ao interpretador SQL.</param>
        ''' <param name="ListaOrigens">Lista de origens podendo ser LOGON ou CONTAINERS, sendo a busca realizada por FINDGERAL (filhos e em seguida pais).</param>
        ''' <remarks></remarks>
        Shared Sub MacroSubstSQL(ByRef SQLRef As String, ByRef Params As ArrayList, ByVal ParamArray ListaOrigens() As Object)
            ' se não tem campo sai imediatamente
            If IsNothing(SQLRef) OrElse SQLRef = "" Then
                Exit Sub
            End If
            Dim _gex_expr As String = "\[:([^\]]*)\]"
            Dim resultG As Match = Regex.Match(SQLRef, _gex_expr)
            If resultG.Captures.Count = 0 Then
                Exit Sub
            End If

            ' identifica possíveis origens
            Dim Origens As ArrayList = ParamArrayToArrayList(ListaOrigens, Params)

            ' seleciona origens complexas
            Dim OrigensObj As ArrayList = New ArrayList
            For Each Item As Object In Origens
                If Not TypeOf (Item) Is String Then
                    OrigensObj.Add(Item)
                End If
            Next

            ' procura os parâmetros
            While resultG.Captures.Count <> 0
                Dim Param As String = resultG.Groups(1).Value
                Dim Tipo As String = "exprsql"
                ' vazio corresponde à exprsql
                ' possíveis valores... [:tipo.campo]
                '   TIPO = ...
                '    "[:campo]" ou  "[:exprsql.campo]", converte campo conforme tipo utilizando SQLEXPR, fazendo uso dos params ou caso vazio, na string sql;
                '    "[:valor.campo]", faz substituição diretamente no sql, colocando exatamente o conteúdo, utilizado para declaração de nomes etc...
                With Split(Param, ".")
                    If .Length > 1 Then
                        Tipo = .GetValue(0)
                        Param = .GetValue(1)
                    End If
                End With
                Dim TrocarPara As String = ":" & Param
                Dim Conteudo As Object = Nothing

                ' procura string
                Dim Pos As Integer = Origens.IndexOf(":" & Param)
                If Pos <> -1 Then
                    Conteudo = Origens.Item(Pos + 1)
                Else

                    ' procura nas origens especificadas
                    For Each Origem As Object In OrigensObj
                        Conteudo = OrigemParam(Origem, Param)
                        If IsDBNull(Conteudo) Or Not IsNothing(NZ(Conteudo, Nothing)) Then
                            Exit For
                        End If
                    Next
                End If

                ' ocorre um erro caso conteúdo não seja encontrado
                If IsNothing(Conteudo) Then
                    Throw New Exception("Em MacroSubstSQL, variável não identificada " & resultG.Value & ".")
                End If

                ' atualiza termo conforme parâmetro encontrado
                If Compare(Tipo, "Valor") Then

                    ' valor direto sem aspas ou qq tratamento.
                    SQLRef = SQLRef.Substring(0, resultG.Index) & Conteudo & SQLRef.Substring(resultG.Index + resultG.Length)
                ElseIf Compare(Tipo, "Nivel") Then
                    ' id posição inicial
                    Dim Niv As Integer = 0
                    If resultG.Index > 0 Then
                        Niv = InStrRev(SQLRef, vbCrLf, resultG.Index)
                    End If
                    Niv = Math.Max(resultG.Index - Niv - 1, 0)
                    SQLRef = SQLRef.Substring(0, resultG.Index) & Replace(Conteudo, vbCrLf, vbCrLf & New String(" ", Niv)) & SQLRef.Substring(resultG.Index + resultG.Length)
                ElseIf IsNothing(Params) Then

                    ' valor direto com utilização sqlexpr
                    SQLRef = SQLRef.Substring(0, resultG.Index) & SqlExpr(Conteudo) & SQLRef.Substring(resultG.Index + resultG.Length)

                Else

                    ' atualiza conteúdo como parâmetro
                    Params.Add(TrocarPara)
                    Params.Add(Conteudo)
                    SQLRef = SQLRef.Substring(0, resultG.Index) & TrocarPara & SQLRef.Substring(resultG.Index + resultG.Length)
                End If

                resultG = Regex.Match(SQLRef, _gex_expr)
            End While
        End Sub

        ''' <summary>
        ''' Intepreta parâmetro solicitado com base nas possibilidades de pesquisa, sendo logon e continentes em geral as fontes.
        ''' </summary>
        ''' <param name="Origem">Origem de pesquisa.</param>
        ''' <param name="Param">Parâmetro a ser procurado na origem.</param>
        ''' <returns>Retorna o parâmetro como valor.</returns>
        ''' <remarks></remarks>
        Shared Function OrigemParam(ByVal Origem As Object, ByVal Param As String) As Object
            Try
                If Origem.GetType.ToString = "Icraft+LogonSession" Then
                    Return Prop(Origem, Param)
                ElseIf TypeOf Origem Is System.Windows.Forms.DataGridViewCellCollection Then
                    Return CType(Origem, System.Windows.Forms.DataGridViewCellCollection).Item(Mid(Param, 4)).Value
                Else
                    Dim Ctl As Object = Form.FindGeral(Origem, Param)
                    If Not IsNothing(Ctl) Then
                        Return Controle.ValorAtual(Ctl)
                    End If
                End If
            Catch
            End Try
            Return Nothing
        End Function

        ''' <summary>
        ''' Coloca Conteudo no formato de uma expressão JavaScript Válida.
        ''' </summary>
        ''' <param name="Conteudo">O conteúdo a ser convertido.</param>
        ''' <returns>Retorna Conteudo convertido em uma expressão JavaScript válida.</returns>
        ''' <remarks></remarks>
        Shared Function JSExpr(ByVal Conteudo As String) As String
            Return "'" & Conteudo.Replace("'", "\'") & "'"
        End Function

        ''' <summary>
        ''' Retorna um conteúdo formatado de acordo com seu tipo para sua utilização em expressões SQL.
        ''' </summary>
        ''' <param name="Conteudo">Conteúdo a ser formatado.</param>
        ''' <returns>Texto para concatenação em expressões sql.</returns>
        ''' <remarks>Nem todos os tipos estão tratados. Serão configurados conforme a necessidade.</remarks>
        Shared Function SqlExpr(ByVal Conteudo As Object, Optional ByVal CaracAbreFechaString As String = "'") As String
            If TypeOf (Conteudo) Is String Then
                Return CaracAbreFechaString & Replace(Conteudo, CaracAbreFechaString, CaracAbreFechaString & CaracAbreFechaString) & CaracAbreFechaString
            ElseIf TypeOf (Conteudo) Is DBNull Then
                Return "NULL"
            ElseIf TypeOf Conteudo Is Decimal OrElse TypeOf Conteudo Is Double OrElse TypeOf Conteudo Is Single OrElse TypeOf Conteudo Is Int32 OrElse TypeOf Conteudo Is Byte OrElse TypeOf Conteudo Is Int16 Then
                Return Str(Conteudo)
            ElseIf TypeOf (Conteudo) Is Boolean Then
                Return IIf(Conteudo, Boolean.TrueString, Boolean.FalseString)
            ElseIf TypeOf (Conteudo) Is Date Then
                Return "#" & Format(Conteudo, "yyyy-MM-dd HH:mm:ss") & "#"
            Else
                Throw New Exception("Tipo desconhecido " & Conteudo.GetType.ToString & " para obtenção de expressão para sql.")
            End If
        End Function

        ''' <summary>
        ''' Retorna valor padrão se for Nothing, Nulo ou Vazio (ou zero no caso de tipo numérico).
        ''' </summary>
        ''' <param name="Valor">Valor a ser checado.</param>
        ''' <param name="Def">Default a ser retornado caso seja Nothing, Nulo ou vazio.</param>
        ''' <returns>Valor checado ou valor default caso Nothing, Nulo ou vazio (zero se o tipo for numérico).</returns>
        ''' <remarks></remarks>
        Shared Function NZV(ByVal Valor As Object, Optional ByVal Def As Object = Nothing) As Object
            Dim Result As Object = NZ(Valor, Def)
            If TypeOf Result Is String AndAlso Result = "" Then
                Return Def
            ElseIf TypeOf Result Is Decimal AndAlso Result = 0 Then
                Return Def
            ElseIf TypeOf Result Is Double AndAlso Result = 0 Then
                Return Def
            ElseIf TypeOf Result Is Single AndAlso Result = 0 Then
                Return Def
            ElseIf TypeOf Result Is Int32 AndAlso Result = 0 Then
                Return Def
            ElseIf TypeOf Result Is Integer AndAlso Result = 0 Then
                Return Def
            ElseIf TypeOf Result Is Byte AndAlso Result = 0 Then
                Return Def
            End If
            Return Result
        End Function



        Shared Function ByteArrayToHexString(ByVal B() As Byte) As String
            Dim Ret As String = ""
            For z As Integer = 0 To B.Length - 1
                Ret &= Microsoft.VisualBasic.Right("0" & Hex(B(z)), 2)
            Next
            Return Ret
        End Function



        ''' <summary>
        ''' Caso o objeto inicial não exista (ismissing) ou seja nulo (dbnull), retorna o segundo parâmetro.
        ''' </summary>
        ''' <param name="Valor">Parâmetro a ser analisado.</param>
        ''' <param name="Def">Parâmetro default caso o primeiro parâmetro não exista ou seja nulo.</param>
        ''' <returns>Retorna primeiro parâmetro ou segundo caso o primeiro não exista ou seja nulo, sempre convertendo para o tipo do segundo parâmetro.</returns>
        ''' <remarks></remarks>
        Shared Function NZ(ByVal Valor As Object, Optional ByVal Def As Object = Nothing) As Object
            Dim tipo As String

            If Not IsNothing(Def) Then
                tipo = Def.GetType.ToString
            ElseIf IsNothing(Valor) Then
                Return Nothing
            Else
                tipo = Valor.GetType.ToString.Trim
            End If

            If IsNothing(Valor) OrElse IsDBNull(Valor) OrElse ((tipo = "System.DateTime" Or Valor.GetType.ToString = "System.DateTime") AndAlso Valor = CDate(Nothing)) Then
                Valor = Def
            End If

            Select Case tipo
                Case "System.Decimal"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return CType(0, Decimal)
                    End If
                    Return CType(Valor, Decimal)
                Case "System.String"
                    If Valor.GetType.ToString = "System.Byte[]" Then
                        Return CType(ByteArrayToObject(Valor), String)
                    End If
                    If Valor.GetType.ToString = "Icraft.IcftBase+LogonSession" Then
                        Return CType(Valor, LogonSession).ToString
                    ElseIf Valor.GetType.IsEnum Then
                        Return Valor.ToString
                    End If
                    Return CType(Valor, String)
                Case "System.Double"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return CType(0, Double)
                    End If
                    Return CType(Valor, Double)
                Case "System.Boolean"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return False
                    End If
                    Return CType(Valor, Boolean)
                Case "System.DateTime"
                    Return CType(Valor, System.DateTime)
                Case "System.Single"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return CType(0, Single)
                    End If
                    Return CType(Valor, System.Single)
                Case "System.Byte"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return CType(0, Byte)
                    End If
                    Return CType(Valor, System.Byte)
                Case "System.Char"
                    Return CType(Valor, System.Char)
                Case "System.SByte"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return CType(0, SByte)
                    End If
                    Return CType(Valor, System.SByte)
                Case "System.Int32"
                    If Valor.GetType.ToString = "System.String" AndAlso Valor = "" Then
                        Return CType(0, Int32)
                    End If
                    Return CType(Valor, Int32)
                Case "System.DBNull"
                    Return Valor
                Case "System.Collections.ArrayList"
                    Return ParamArrayToArrayList(Valor)
                Case "System.Data.DataSet"
                    If IsNothing(Valor) Then
                        Return Def
                    End If
                    Return Valor
            End Select

            Return CType(Valor, String)
        End Function

        ''' <summary>
        ''' Transforma um paramarray em arraylist.
        ''' </summary>
        ''' <param name="PARAMS">Lista de parâmetros podendo ser um arraylist ou paramarray.</param>
        ''' <returns>Retornará um arraylist contendo a lista de parâmetros.</returns>
        ''' <remarks></remarks>
        Shared Function ParamArrayToArrayList(ByVal ParamArray Params() As Object) As Object

            ' caso não existam parâmetros
            If IsNothing(Params) OrElse Params.Length = 0 Then
                Return New ArrayList
            End If

            ' caso já seja um arraylist
            If Params.Length = 1 And TypeOf (Params(0)) Is ArrayList Then
                Return Params(0)
            End If

            ' caso tenha que juntar
            Dim ListaParametros As ArrayList = New ArrayList
            For Each Item As Object In Params
                If Not IsNothing(Item) Then

                    ' >> TIPOS PREVISTOS EM ARRAYLIST...
                    ' array
                    ' arraylist
                    ' string
                    ' dataset
                    ' datarowcollection

                    If TypeOf Item Is Array Then
                        For Each SubItem As Object In Item
                            ListaParametros.AddRange(ParamArrayToArrayList(SubItem))
                        Next
                    ElseIf TypeOf Item Is ArrayList OrElse Item.GetType.ToString.StartsWith("System.Collections.Generic.List") Then
                        ListaParametros.AddRange(Item)
                    ElseIf TypeOf Item Is String Then
                        ListaParametros.Add(Item)
                    ElseIf TypeOf Item Is DataTable Then
                        For Each Row As DataRow In Item.rows
                            For Each Campo As Object In Row.ItemArray
                                ListaParametros.Add(Campo)
                            Next
                        Next
                    ElseIf TypeOf Item Is DataSet Then
                        For Each Row As DataRow In Item.Tables(0).rows
                            For Each Campo As Object In Row.ItemArray
                                ListaParametros.Add(Campo)
                            Next
                        Next
                    ElseIf TypeOf Item Is DataRow Then
                        For Each Campo As Object In CType(Item, DataRow).ItemArray
                            ListaParametros.Add(Campo)
                        Next
                    ElseIf TypeOf Item Is System.IO.FileInfo Then
                        ListaParametros.Add(Item.name)
                    Else
                        ListaParametros.Add(Item)
                    End If
                End If
            Next
            Return ListaParametros
        End Function

        ''' <summary>
        ''' Transforma array de bytes em objeto.
        ''' </summary>
        ''' <param name="Bytes">Array de bytes a ser transferida para objeto.</param>
        ''' <returns>Objeto criado a partir do array de bytes.</returns>
        ''' <remarks></remarks>
        Shared Function ByteArrayToObject(ByVal Bytes() As Byte) As Object
            Dim Obj As Object = Nothing
            Try
                Dim fs As System.IO.MemoryStream = New System.IO.MemoryStream
                Dim formatter As System.Runtime.Serialization.Formatters.Binary.BinaryFormatter = New System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
                fs.Write(Bytes, 0, Bytes.Length)
                fs.Seek(0, IO.SeekOrigin.Begin)

                Obj = formatter.Deserialize(fs)
            Catch
            End Try
            Return Obj
        End Function

        ''' <summary>
        ''' Converte para outro tipo (ctype) especificado por uma string. 
        ''' </summary>
        ''' <param name="Obj">Objeto original.</param>
        ''' <param name="Tipo">String que especifica o tipo ex: System.String, System.Int32, etc.</param>
        ''' <returns>Retorna o objeto no tipo especificado.</returns>
        ''' <remarks></remarks>
        Shared Function CTypeStr(ByVal Obj As Object, ByVal Tipo As String) As Object
            If String.Compare(Tipo, "System.String", True) = 0 OrElse String.Compare(Tipo, "System.Byte[]", True) = 0 Then
                Return CType(Obj, String)
            ElseIf String.Compare(Tipo, "System.SByte", True) = 0 Then
                Try
                    Return CType(Obj, System.SByte)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para SByte")
                End If

            ElseIf String.Compare(Tipo, "System.UInt32", True) = 0 Then
                Try
                    Return CType(Obj, UInt32)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para UInt32")
                End If
            ElseIf String.Compare(Tipo, "System.Int32", True) = 0 Then
                Try

                    If TypeOf Obj Is String Then
                        If Icraft.IcftBase.Compare(Obj, "TRUE") Then
                            Obj = "1"
                        ElseIf Icraft.IcftBase.Compare(Obj, "FALSE") Then
                            Obj = "0"
                        End If
                    End If

                    Return CType(Obj, Int32)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para UInt32")
                End If
            ElseIf String.Compare(Tipo, "System.Int16", True) = 0 Then
                Try
                    Return CType(Obj, Int16)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para int16")
                End If
            ElseIf String.Compare(Tipo, "System.Int64", True) = 0 Then
                Try
                    Return CType(Obj, Int64)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para int64")
                End If
            ElseIf String.Compare(Tipo, "System.Integer", True) = 0 Then
                Try
                    Return CType(Obj, Integer)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para integer")
                End If
            ElseIf String.Compare(Tipo, "System.Boolean", True) = 0 Then
                Try
                    Return CType(Obj, Boolean)
                Catch
                End Try
                If TypeOf Obj Is String Then
                    If Obj = "on" Then
                        Return True
                    End If
                End If
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para boolean")
                End If
            ElseIf String.Compare(Tipo, "System.Date", True) = 0 Then
                Try
                    Return CType(Obj, Date)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para date")
                End If
            ElseIf String.Compare(Tipo, "System.DateTime", True) = 0 Then
                Try
                    Return CType(Obj, DateTime)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para datetime")
                End If
            ElseIf String.Compare(Tipo, "System.Decimal", True) = 0 Then
                Try
                    Return CType(Obj, Decimal)
                Catch
                End Try
                If TypeOf (Obj) Is String Then
                    If Compare(Obj, Boolean.TrueString) Then
                        Return CType(True, Decimal)
                    ElseIf Compare(Obj, Boolean.FalseString) Then
                        Return CType(False, Decimal)
                    End If
                End If
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para decimal")
                End If
            ElseIf String.Compare(Tipo, "System.Double", True) = 0 Then
                Try
                    Return CType(Obj, Double)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para Double")
                End If
            ElseIf String.Compare(Tipo, "System.Single", True) = 0 Then
                Try
                    Return CType(Obj, Single)
                Catch
                End Try
                If CType(Obj, String).Trim = "" Then
                    Return Convert.DBNull
                Else
                    Err.Raise(20000, , "ctypestr falhou ao converter obj para Single")
                End If
            ElseIf IsNothing(Tipo) Then
                Return ""
            Else
                Err.Raise(20000, , "ctypestr tipo não previsto: " & Tipo)
            End If
            Return Obj
        End Function

        ''' <summary>
        ''' Extrai atributos de registros ou itess do objeto. Utilizada para obter campo de um determinado dataset ou dataview.
        ''' </summary>
        ''' <param name="Obj">Objeto a ser explorado como por exemplo: Dataset.Tables(0).Rows.</param>
        ''' <param name="PropRel">Propriedade relacionada existente em todos os registros como nome ou número de um campo.</param>
        ''' <returns>Retorna o campo de cada registro como um índice de ArrayList.</returns>
        ''' <remarks>Exemplo: ItemsToArrayList(Dataset.Tables(0).Rows, "MeuCampo")</remarks>
        Shared Function ItemsToArrayList(ByVal Obj As Object, ByVal PropRel As Object) As ArrayList
            Dim Lista As ArrayList = New ArrayList
            For Each Item As Object In Obj
                Try
                    Lista.Add(Atrib(Item, PropRel))
                Catch
                    Try
                        Lista.Add(Item(PropRel))
                    Catch
                        Try
                            Lista.Add(Item.Attributes(PropRel))
                        Catch
                            Lista.Add(Prop(Item, PropRel))
                        End Try
                    End Try
                End Try
            Next
            Return Lista
        End Function



        Public Shared Function NomeArqObfusca(ByVal NomeComExtensao As String, Optional ByVal QtdCaracAleatorio As Integer = 10) As String
            NomeComExtensao = TiraAcento(NomeComExtensao)
            Dim NomeSemExtensao As String = Microsoft.VisualBasic.Left(System.IO.Path.GetFileNameWithoutExtension(NomeComExtensao), 20)
            NomeSemExtensao = ReplRepl(Regex.Replace(NomeSemExtensao.ToLower(), "[^a-z0-9_]", "_"), "__", "_")
            Dim Extensao As String = System.IO.Path.GetExtension(NomeComExtensao).ToLower()
            Dim Rand As String = Icraft.IcftBase.RandText(QtdCaracAleatorio).ToLower()
            Return ExprExpr("_", "", NomeSemExtensao, Rand) & Extensao
        End Function











        ''' <summary>
        ''' Obtém itens de um objeto considerando uma propriedade específica.
        ''' </summary>
        ''' <param name="Obj">Objeto que contém a lista de itens (rows por exemplo).</param>
        ''' <param name="PropRel">Nome da propriedade ou campo a ser obtido para cada linha.</param>
        ''' <returns>Retorna uma lista, que poderá ser atribuída ao datasource para preenchimento automático de combox.</returns>
        ''' <remarks></remarks>
        Shared Function ItemsToObject(ByVal Obj As Object, ByVal PropRel As Object) As List(Of Object)
            Dim Lista As List(Of Object) = New List(Of Object)
            For Each Item As Object In Obj
                Try
                    Lista.Add(Atrib(Item, PropRel))
                Catch
                    Try
                        Lista.Add(Item(PropRel))
                    Catch
                        Lista.Add(Item.Attributes(PropRel))
                    End Try
                End Try
            Next
            Return Lista
        End Function

        ''' <summary>
        ''' Retorna url anterior à página informada considerando sitemap.
        ''' </summary>
        ''' <param name="DiretorioMap">Diretório onde pode ser encontrado o sitemap.</param>
        ''' <param name="Pag">Página atual.</param>
        ''' <returns>Retorna página anterior caso a atual seja encontrada ou a primeira caso não seja encontrada.</returns>
        ''' <remarks>Para compatibilidade, melhor utilizar mappath.</remarks>
        Shared Function MapPathAntes(ByVal DiretorioMap As String, ByVal Pag As String) As String
            Dim _map As MapPath = New MapPath(DiretorioMap)
            Return _map.Anterior(Pag.ToLower())
        End Function

        ''' <summary>
        ''' Retorna url posterior à página informada considerando sitemap.
        ''' </summary>
        ''' <param name="DiretorioMap">Diretório onde pode ser encontrado o sitemap.</param>
        ''' <param name="Pag">Página atual.</param>
        ''' <returns>Retorna página posterior caso a atual seja encontrada ou a última caso não seja encontrada.</returns>
        ''' <remarks>Para compatibilidade, melhor utilizar mappath.</remarks>
        Shared Function MapPathDepois(ByVal DiretorioMap As String, ByVal Pag As String) As String
            Dim _map As MapPath = New MapPath(DiretorioMap)
            Return _map.Proximo(Pag.ToLower())
        End Function

        ''' <summary>
        ''' Retorna expressão com página atual e total de páginas.
        ''' </summary>
        ''' <param name="DiretorioMap">Diretório onde pode ser encontrado o sitemap.</param>
        ''' <param name="Pag">Página atual.</param>
        ''' <returns>Retorna uma expressão que mostra página atual e quantidade de páginas.</returns>
        ''' <remarks></remarks>
        Shared Function Paginas(ByVal DiretorioMap As String, ByVal Pag As String) As String
            Dim _map As MapPath = New MapPath(DiretorioMap)
            Return _map.Expressao(Pag.ToLower())
        End Function

        ''' <summary>
        ''' Prepara response com especificações padronizadas para download.
        ''' </summary>
        ''' <param name="Pagina">Página com response.</param>
        ''' <param name="Tamanho">Tamanho ou ZERO para não incluir parâmetro de tamanho.</param>
        ''' <param name="NomeDeDownload">Nome do arquivo de download.</param>
        ''' <param name="Encoding">Codificação utilizada para criação do fluxo sendo UTF8 como padrão.</param>
        ''' <param name="ContentType">Contenttype sendo application octet como default.</param>
        ''' <param name="Cache">False se não deseja cache ou true se deseja.</param>
        ''' <param name="DataCria">Data de criação deste arquivo.</param>
        ''' <param name="DataAltera">Data de alteração do arquivo.</param>
        ''' <param name="DataLeitura">Data da última leitura deste arquivo.</param>
        ''' <remarks></remarks>
        Shared Sub DownloadPrep(ByVal Pagina As Page, ByVal Tamanho As Integer, ByVal NomeDeDownload As String, ByVal Encoding As System.Text.Encoding, Optional ByVal ContentType As String = "application/octet-stream", Optional ByVal Cache As Boolean = False, Optional ByVal DataCria As Date = Nothing, Optional ByVal DataAltera As Date = Nothing, Optional ByVal DataLeitura As Date = Nothing)
            DownloadPrep(Pagina, Tamanho, NomeDeDownload, ContentType, Cache, DataCria, DataAltera, DataLeitura)
            Pagina.Response.Charset = Encoding.WebName
            Pagina.Response.ContentEncoding = Encoding.UTF8
        End Sub

        ''' <summary>
        ''' Baixa uma sequência de bytes.
        ''' </summary>
        ''' <param name="pagina">Página.</param>
        ''' <param name="Conteudo">Sequência de bytes a serem baixados.</param>
        ''' <param name="NomeDeDownload">Nome que o arquivo receberá no cliente.</param>
        ''' <param name="Encoding">Codificação a ser utilizada para interpretar esse conteúdo. O default é UTF8.</param>
        ''' <remarks></remarks>
        Shared Sub DownLoadBytes(ByVal pagina As Page, ByVal Conteudo() As Byte, ByVal NomeDeDownload As String, ByVal Encoding As System.Text.Encoding)
            DownloadPrep(pagina, Conteudo.Length, NomeDeDownload, Encoding, , False, Now, Now, Now)
            If Conteudo.Length > 0 Then
                pagina.Response.BinaryWrite(Conteudo)
            End If
            pagina.Response.Flush()
            pagina.Response.End()
        End Sub

        ''' <summary>
        ''' Baixa um conteúdo texto em uma codificação específica para máquina do cliente.
        ''' </summary>
        ''' <param name="Pagina">Página com response.</param>
        ''' <param name="Conteudo">Texto a ser baixado.</param>
        ''' <param name="NomeDeDownload">Nome do arquivo como download.</param>
        ''' <param name="Encoding">Encoding sendo o padrão UTF8.</param>
        ''' <remarks></remarks>
        Shared Sub DownloadConteudo(ByVal Pagina As Page, ByVal Conteudo As String, Optional ByVal NomeDeDownload As String = "", Optional ByVal Encoding As System.Text.Encoding = Nothing)
            If IsNothing(Encoding) Then
                Encoding = System.Text.Encoding.UTF8
            End If
            DownLoadBytes(Pagina, Encoding.GetBytes(Conteudo), NomeDeDownload, Encoding)
        End Sub

        ''' <summary>
        ''' Baixa um conteúdo em XML para máquina do cliente.
        ''' </summary>
        ''' <param name="Pagina">Página com response.</param>
        ''' <param name="XML">Texto de XML. Caso não tenha header ?xml, este será incluído.</param>
        ''' <param name="NomeDeDownload">Nome que receberá no cliente.</param>
        ''' <param name="Encoding">Codificação sendo padrão UTF8.</param>
        ''' <remarks></remarks>
        Public Shared Sub DownloadXML(ByVal Pagina As Page, ByVal XML As String, Optional ByVal NomeDeDownload As String = "", Optional ByVal Encoding As System.Text.Encoding = Nothing)
            If IsNothing(Encoding) Then
                Encoding = System.Text.Encoding.UTF8
            End If
            If Not XML.StartsWith("<?xml ") Then
                XML = "<?xml version=""1.0"" encoding=""" & Encoding.WebName & """ ?>" & XML
            End If
            DownLoadBytes(Pagina, Encoding.GetBytes(XML), NomeDeDownload, Encoding)
        End Sub

        ''' <summary>
        ''' Baixa um stream para máquina do cliente.
        ''' </summary>
        ''' <param name="Pagina">Página com response.</param>
        ''' <param name="Stream">Stream contendo o dado.</param>
        ''' <param name="NomeDeDownload">Nome do arquivo no cliente.</param>
        ''' <param name="Encoding">Codificação a ser utilizada sendo default UTF8.</param>
        ''' <remarks></remarks>
        Shared Sub DownloadConteudo(ByVal Pagina As Page, ByVal Stream As System.IO.BinaryReader, Optional ByVal NomeDeDownload As String = "", Optional ByVal Encoding As System.Text.Encoding = Nothing)
            DownloadPrep(Pagina, Stream.BaseStream.Length, NomeDeDownload, Encoding, , False, Now, Now, Now)
            Do While Stream.BaseStream.Position < Stream.BaseStream.Length
                Pagina.Response.BinaryWrite(Stream.ReadBytes(16384))
            Loop
            Pagina.Response.Flush()
            Pagina.Response.End()
        End Sub

        ''' <summary>
        ''' Baixa uma parte de um arquivo qualquer.
        ''' </summary>
        ''' <param name="Pagina">Página com response.</param>
        ''' <param name="Arquivo">Arquivo podendo ser ~/... ou c:\...</param>
        ''' <param name="NomeDeDownload">Nome do arquivo que receberá no cliente.</param>
        ''' <param name="Deslocamento">Início sendo primeira posição 0.</param>
        ''' <param name="Tamanho">Tamanho sendo 0 todo arquivo.</param>
        ''' <remarks></remarks>
        Shared Sub DownloadArquivoTam(ByVal Pagina As Page, ByVal Arquivo As String, Optional ByVal NomeDeDownload As String = "", Optional ByVal Deslocamento As Integer = 0, Optional ByVal Tamanho As Integer = 0)
            Arquivo = FileExpr(Arquivo)
            If NomeDeDownload = "" Then
                NomeDeDownload = System.IO.Path.GetFileName(Arquivo)
            End If
            Dim TamArq As Integer = (New IO.FileInfo(Arquivo)).Length
            If Tamanho = 0 OrElse Tamanho > (TamArq - Deslocamento) Then
                Tamanho = TamArq - Deslocamento
            End If
            DownloadPrep(Pagina, TamArq, NomeDeDownload, , False, Now, Now, Now)

            Dim Arq As New StreamReader(Arquivo, False)
            Dim Stream As Stream = Arq.BaseStream
            Stream.Position = Deslocamento
            Dim StreamB As New BinaryReader(Stream)

            Dim z As Integer = 0
            Do While z < Tamanho
                Dim B() As Byte
                B = StreamB.ReadBytes(Math.Min(16384, Tamanho - z))
                Pagina.Response.BinaryWrite(B)
                z += B.Length
            Loop
            Pagina.Response.Flush()
            Pagina.Response.End()
        End Sub

        ''' <summary>
        ''' Baixa arquivo na íntegra para máquina do cliente.
        ''' </summary>
        ''' <param name="Pagina">Página com response.</param>
        ''' <param name="Arquivo">Nome do arquivo sendo possível ~/... ou c:\...</param>
        ''' <param name="NomeDeDownload">Nome que receberá no cliente.</param>
        ''' <remarks></remarks>
        Shared Sub DownloadArquivo(ByVal Pagina As Page, ByVal Arquivo As String, Optional ByVal NomeDeDownload As String = "")
            Arquivo = FileExpr(Arquivo)
            If NomeDeDownload = "" Then
                NomeDeDownload = System.IO.Path.GetFileName(Arquivo)
            End If
            Dim TamArq As Integer = (New IO.FileInfo(Arquivo)).Length
            DownloadPrep(Pagina, TamArq, NomeDeDownload, , False, Now, Now, Now)
            Pagina.Response.TransmitFile(Arquivo)
            Pagina.Response.Flush()
            Pagina.Response.End()
        End Sub

        ''' <summary>
        ''' Acessa parâmetros armazenados sobre o login do usuário em uma determinada tela de autenticação. Utilize LOGIN para logar e LOGOFF para "deslogar".
        ''' </summary>
        ''' <param name="Pagina">Página do requisitante ('me' ou 'page').</param>
        ''' <value>LogonSession, que contém informações de usuário, momento de logon entre outras.</value>
        ''' <returns>LogonSession, que contém informações de usuário, momento de logon entre outras.</returns>
        ''' <remarks></remarks>
        Shared Property Logon(ByVal Pagina As Page) As LogonSession
            Get
                If Not IsNothing(Pagina) Then
                    Dim Area As String = "logon_" & WebConf("site_nome")
                    Dim LL As LogonSession = Pagina.Session(Area)
                    If IsNothing(LL) Then
                        LL = New LogonSession(Pagina, "", "")
                        Logon(Pagina) = LL
                    End If
                    Return LL
                End If
                Return Nothing
            End Get
            Set(ByVal value As LogonSession)
                If Not IsNothing(Pagina) Then
                    Dim Area As String = "logon_" & WebConf("site_nome")
                    If IsNothing(value) Then
                        Dim NaSessao As LogonSession = Pagina.Session(Area)
                        If Not IsNothing(NaSessao) Then
                            Pagina.Session.Remove(Area)
                        End If
                    Else
                        Pagina.Session(Area) = value
                    End If
                End If
            End Set
        End Property

        ''' <summary>
        ''' Efetua login fazendo registro dos dados de usuário.
        ''' </summary>
        ''' <param name="Pagina">Passa a página em questão (me ou page)</param>
        ''' <param name="Usuario">Usuário que está sendo submetido.</param>
        ''' <param name="Senha">Senha do usuário.</param>
        ''' <param name="STRCONN">Nome da conexão no webconfig para consulta de usuário.</param>
        ''' <param name="TabelaUsuario">Tabela onde são armazenados os usuários.</param>
        ''' <param name="CampoUsuario">Campo que armazena o nome do usuário.</param>
        ''' <param name="CampoSenha">Campo que armazena a senha.</param>
        ''' <param name="RedirAuto">Redireciona automaticamente para a página.</param>
        ''' <returns>Retorna true caso ocorra o logon sendo LOGON(SESSION) 
        ''' registrada corretamente e false caso ocorra algum erro.</returns>
        ''' <remarks>A função permite busca mediante o acesso a base. Para isso, 
        ''' utilizar como senha na base: [PROVIDER:strconexao], onde conexão corresponde
        ''' à conexão no webconfig.</remarks>
        Public Shared Function Login(ByVal Pagina As Page, ByVal Usuario As String, ByVal Senha As String, ByVal StrConn As Object, Optional ByVal TabelaUsuario As String = "SYS_CONFIG_USUARIO", Optional ByVal CampoUsuario As String = "USUARIO", Optional ByVal CampoSenha As String = "SENHA", Optional ByVal RedirAuto As Boolean = True, Optional ByVal Grupo As String = "") As Boolean
            Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn)

            If Not IsNothing(Logon(Pagina)) Then
                Logoff(Pagina)
            End If

            ' valida usuário
            Dim SenhaDB As String = NZ(DSValor(CampoSenha, TabelaUsuario, ConnW, CampoUsuario & "=:CAMPOUSUARIO", ":CAMPOUSUARIO", Usuario), "")
            Dim OutroProv As String = RegexGroup(SenhaDB, "\[PROVIDER:([^\]]+)\]", 1).Value
            If OutroProv <> "" Then
                If WebConn(OutroProv).ProviderName = Oracle Then
                    TabelaUsuario = "ALL_TABLES"
                Else
                    Throw New Exception("Login, necessária definição provider para pesquisa.")
                End If

                Try
                    Dim TestaAcesso As Integer = DSValor("COUNT(*)", TabelaUsuario, OutroProv & ";USER:[:USER];PASSWORD:[:PASSWORD]", "", ":USER", Usuario, ":PASSWORD", Senha)
                Catch
                    Return False
                End Try
            Else
                If NZ(Senha, "<<vazio>>") <> NZ(SenhaDB, "<<vazio>>") Then
                    Return False
                End If
            End If

            LoginCertifica(Pagina, Usuario, Senha, RedirAuto, Grupo)
            Return True
        End Function

        ''' <summary>
        ''' Cancela sessão existente.
        ''' </summary>
        ''' <param name="Pagina">Objeto da página atual (me ou page).</param>
        ''' <remarks></remarks>
        Public Shared Sub Logoff(ByVal Pagina As Page, Optional ByVal UrlLogin As String = "WebConfig")
            RaiseEvent AntesDeLogoff()

            ' limpa authenticações
            FormsAuthentication.SignOut()

            ' registra um usuário vazio
            Dim TckNome As String = ""
            Dim TckAuth As New FormsAuthenticationTicket(1, TckNome, Now, Now.AddHours(2), False, TckNome)
            Dim TckEncr As String = FormsAuthentication.Encrypt(TckAuth)
            Dim HttpC As HttpCookie = New HttpCookie(FormsAuthentication.FormsCookieName, TckEncr)
            Pagina.Response.Cookies.Add(HttpC)
            Pagina.Session.Timeout = 120

            ' apaga registro de usuário
            Dim NaSessao As LogonSession = Logon(Pagina)
            If Not IsNothing(NaSessao) Then
                Logon(Pagina) = Nothing
            End If

            ' volta para tela de login
            If Compare(UrlLogin, "WebConfig") Then
                FormsAuthentication.RedirectToLoginPage()
                Pagina.Response.Redirect(FormsAuthentication.LoginUrl())
            End If
            If UrlLogin <> "" Then
                Pagina.Response.Redirect(URLExpr(UrlLogin))
            End If

            Try
                HttpContext.Current.Session.Remove("CONN_USER")
            Catch
            End Try
            Pagina.Response.Redirect(URLExpr(Pagina.Request.Url.PathAndQuery))
        End Sub

        ''' <summary>
        ''' Retira da url parâmetro de returnurl.
        ''' </summary>
        ''' <param name="Url">Url a ser tratada.</param>
        ''' <returns>Url tratada sem returnurl.</returns>
        ''' <remarks></remarks>
        Shared Function RetiraReturnUrl(ByVal Url As String, Optional ByVal Retira As String = "ReturnUrl") As String
            For Each DestinoCompl As Match In Regex.Matches(Url, "(?is)[?&](" & Retira & "=.*?(&|$))")
                Url = Replace(Url, DestinoCompl.Groups(1).Value, "")
            Next
            Url = Trim(Url)
            If Regex.IsMatch(Url, "[?&]$") Then
                Url = StrStr(Url, 0, -1)
            End If
            Return Url
        End Function

        ''' <summary>
        ''' Retorna mensagem tratada evitando dados técnicos em apresentação para usuário.
        ''' </summary>
        ''' <param name="Ex">Exceção a ser tratada.</param>
        ''' <param name="MensagemCompl">Texto de introdução. Será incluído no início da mensagem.</param>
        ''' <returns>Retorna texto a ser apresentado para o usuário, considerando o tratamento de erros previstos.</returns>
        ''' <remarks>Veja o padrão. A substituição ocorre sem ponto no final, por favor.</remarks>
        Public Shared Function MessageEx(ByVal Ex As Exception, Optional ByVal MensagemCompl As String = "") As String

            ' mensagem padrão
            Dim Mensagem As String = Ex.Message

            If Not IsNothing(Ex.InnerException) AndAlso NZ(Ex.InnerException.Message, "") <> "" Then
                Mensagem &= ". " & Ex.InnerException.Message
            End If
            Dim Param As String

            ' mensagens específicas
            Param = RegexGroup(Mensagem, "Cannot update (.*); field not updateable", 1).Value
            If Param <> "" Then
                Mensagem = "Por restrições da base de dados, campo " & Param & " não pode ser atualizado"
            End If

            Param = RegexGroup(Mensagem, "create duplicate values in the").Value
            If Param <> "" Then
                Mensagem = "Tentativa de registro de chave duplicada"
            End If

            Param = RegexGroup(Mensagem, "Cannot set column (.*). The value violates the MaxLength.*", 1).Value
            If Param <> "" Then
                Mensagem = "Tamanho do campo " & Param & " excede o limite"
            End If

            Param = RegexGroup(Mensagem, "The path is not of a legal").Value
            If Param <> "" Then
                Mensagem = "Caminho de arquivo inexistente ou ilegal"
            End If

            Param = RegexGroup(Mensagem, "Duplicate entry (.*) for key .*", 1).Value
            If Param <> "" Then
                Mensagem = "Tentativa de gravação de registro duplicado - " & Param
            End If

            Param = RegexGroup(Mensagem, "Empty path name is not legal").Value
            If Param <> "" Then
                Mensagem = "Nome de arquivo incorreto"
            End If

            Param = RegexGroup(Mensagem, "Could not find file '(.*?)'", 1).Value
            If Param <> "" Then
                Mensagem = "Arquivo não encontrado: " & Param
            End If

            Param = RegexGroup(Mensagem, "Thread was being aborted|O thread estava sendo anulado").Value
            If Param <> "" Then
                Mensagem = "É necessário logar-se ou sua sessão foi encerrada."
            End If


            ' ------------------------------------------------
            ' TRATAMENTO DE ERROS DO ORACLE
            If InStr(Mensagem, "ORA-01400:") <> 0 Then
                Mensagem = "Campo de identificação do registro não pode estar nulo"
            End If

            Param = RegexGroup(Mensagem, "ORA-00372:").Value
            If Param <> "" Then
                Mensagem = "Base de dados em condição de apenas para leitura ou parada para manutenção. Informe sua necessidade ao suporte"
            End If

            Param = RegexGroup(Mensagem, "ORA-02291: .*\((.*)\)", 1).Value
            If Param <> "" Then
                Mensagem = "Falta de registro relacionado em " & Param
            End If

            Param = RegexGroup(Mensagem, "ORA-00001: .*\((.*)\)", 1).Value
            If Param <> "" Then
                Mensagem = "Tentativa de registro de chave duplicada em " & Param
            End If

            Param = RegexGroup(Mensagem, "ORA-01017:").Value
            If Param <> "" Then
                Mensagem = "Logon incorreto. Usuário ou senha inválidos ou sessão expirada"
            End If

            Param = RegexGroup(Mensagem, "ORA-00942:").Value
            If Param <> "" Then
                Mensagem = "Tabela ou visão inexistente"
            End If

            Param = RegexGroup(Mensagem, "ORA-12541:|ORA-12170:").Value
            If Param <> "" Then
                Mensagem = "Banco de dados indisponível no momento. Suporte já foi contactado"
            End If

            ' ------------------------------------------------
            ' TRATAMENTO DE ERROS DO MYSQL

            Param = RegexGroup(Mensagem, "Access denied for user (.*)", 1).Value
            If Param <> "" Then
                Mensagem = "Acesso não autorizado para " & Param & ". Verifique usuário e senha e tente novamente"
            End If

            Mensagem = IIf(MensagemCompl <> "", MensagemCompl & ". ", "") & Mensagem & "."
            Return Mensagem
        End Function

        ''' <summary>
        ''' Retorna a quantidade de estruturas regex encontradas na procura do select.
        ''' </summary>
        ''' <param name="Campos">Lista de campos onde os critérios serão procurados.</param>
        ''' <param name="Criterios">Critérios regex separados por ponto e vírgula.</param>
        ''' <returns>Retorna uma expressão capaz de mencionar quantidade de ocorrências do critério no campo.</returns>
        ''' <remarks></remarks>
        Shared Function RegExpCount(ByVal Campos As String, ByVal Criterios As String) As String
            Dim Campo As String = Split(Campos, ";")(0)
            Dim Expr As String = "(" & Criterios.Replace(" ", "|") & ")"
            Return "(SELECT COUNT(LEVEL) AS QTD FROM DUAL CONNECT BY REGEXP_INSTR(" & Campo & ", " & SqlExpr(Expr) & ",1,LEVEL)>0)"
        End Function

        ''' <summary>
        ''' Retorna posição de texto em campo com base em cláusula select preparado para cláusula select.
        ''' </summary>
        ''' <param name="Campos">Nome do campo de pesquisa.</param>
        ''' <param name="Criterios">Critério regex a ser aplicado.</param>
        ''' <returns>Retorna texto pronto para ser colocado como campo do select.</returns>
        ''' <remarks></remarks>
        Shared Function RegExpInstr(ByVal Campos As String, ByVal Criterios As String) As String
            Dim Campo As String = Split(Campos, ";")(0)
            Dim Criterio As String = Criterios.Replace(" ", "|")
            Return "REGEXP_INSTR(" & Campo & ",'" & Criterio & "')"
        End Function

        ''' <summary>
        ''' Retorna campo pronto para cláusula select com amostra do registro encontrado baseada em código regex.
        ''' </summary>
        ''' <param name="Campos">Nome do campo de pesquisa.</param>
        ''' <param name="Criterios">Critério regex a ser aplicado.</param>
        ''' <param name="Destaque">Formato da string de retorno considerando "\1" para grupo 1 e assim por diante.</param>
        ''' <returns>Retorna texto pronto para ser colocado como campo do select.</returns>
        ''' <remarks></remarks>
        Shared Function RegExpAmostra(ByVal Campos As String, ByVal Criterios As String, Optional ByVal Destaque As String = "<span style='background-color:yellow'>\1</span>\2", Optional ByVal QtdAntesouDepois As Integer = 15) As String
            Dim Campo As String = Split(Campos, ";")(0)
            Dim Criterio As String = Criterios.Replace(" ", "|")
            Return "REGEXP_REPLACE(TRANSLATE(SUBSTR(" & Campo & ", GREATEST(" & RegExpInstr(Campos, Criterios) & "-" & QtdAntesouDepois & ",1), " & QtdAntesouDepois + Destaque.Length & "),'<>','  '),'(" & Criterio & ")(.{0," & QtdAntesouDepois & "}).*', '" & Destaque.Replace("'", "''") & "')"
        End Function

        ''' <summary>
        ''' Cria expressão para procura por ocorrência de expressão regex entre os campos informados. 
        ''' </summary>
        ''' <param name="Campos">Campos a serem tratados.</param>
        ''' <param name="Criterios">Critérios regex a serem aplicados ao mesmo tempo. Ex: "[cC][aA][sS][aA] [vV][eE][lL][hH][aA]" (texto com os dois ao mesmo tempo).</param>
        ''' <returns>Retorna sequência de select para pesquisa considerando condições regex.</returns>
        ''' <remarks></remarks>
        Shared Function RegExpLike(ByVal Campos As String, ByVal Criterios As String) As String
            Dim CondOr As String = ""
            For Each Campo As String In Split(Campos, ";")
                Dim CondAnd As String = ""
                For Each Pedaco As String In Split(Criterios, " ")
                    CondAnd &= IIf(CondAnd <> "", " AND ", "") & "REGEXP_LIKE(" & Campos & ", " & SqlExpr(Pedaco) & ")"
                Next
                CondOr &= IIf(CondOr <> "", " OR ", "") & "(" & CondAnd & ")"
            Next
            Return CondOr
        End Function

        ''' <summary>
        ''' Retorna expressão de pesquisa REGEX baseando-se na string passada.
        ''' </summary>
        ''' <param name="TEXTO">Texto para origem da expressão.</param>
        ''' <returns>Código de pesquisa desconsiderando os acentos.</returns>
        ''' <remarks></remarks>
        Shared Function RegExpSemAcento(ByVal TEXTO As String) As String
            Dim Ret As String = ""
            For i As Integer = 1 To Len(TEXTO)
                Dim Letra As String = Mid(TEXTO, i, 1)
                Select Case Letra
                    Case "a", "A", "á", "Á", "à", "À", "ã", "Ã", "â", "Â", "â", "ä", "Ä"
                        Letra = "[áÁàÀãÃâÂâäÄaA]"
                    Case "e", "E", "é", "É", "ê", "Ê", "Ë", "ë", "È", "è"
                        Letra = "[éÉêÊËëÈèeE]"
                    Case "i", "I", "í", "Í", "ï", "Ï", "Ì", "ì"
                        Letra = "[íÍïÏÌìiI]"
                    Case "o", "O", "ó", "Ó", "ô", "Ô", "õ", "Õ", "ö", "Ö", "ò", "Ò"
                        Letra = "[óÓôÔõÕöÖòÒoO]"
                    Case "u", "U", "ú", "Ú", "Ù", "ù", "ú", "û", "ü", "Ü", "Û"
                        Letra = "[úÚÙùúûüÜÛuU]"
                    Case "c", "C", "ç", "Ç"
                        Letra = "[çÇcC]"
                    Case "n", "N", "ñ", "Ñ"
                        Letra = "[nNñÑ]"
                    Case Else
                        If LCase(Letra) <> UCase(Letra) Then
                            Letra = "[" & LCase(Letra) & UCase(Letra) & "]"
                        End If
                End Select
                Ret &= Letra
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Capitaliza um string levando em consideração exceções como sigla de Estados.
        ''' </summary>
        ''' <param name="value">O valor a ser capitalizado.</param>
        ''' <returns>Retorna a string capitalizada.</returns>
        ''' <remarks></remarks>
        Public Shared Function PrimLetraMaius(ByVal value As String) As String
            Dim maiusc As String() = "AC;AL;AM;AP;BA;CE;DF;ES;GO;MA;MG;MS;MT;PA;PB;PE;PI;PR;RJ;RN;RO;RR;RS;SC;SE;SP;TO;IASERJ;HSE;UNIRIO;UERJ;UFRJ;UFF;UFSP;SBD;ABC;UFJF;INAMPS;SUS;UNICAMP;UFS;CEDER;UNOESTE;PUC;UFES;FMUSP;UFRGS;UFPR;FMJ;HUSC;UFP;HUT;CEDEM;HUCFF;EPM;HC;FFFCM;UNIFESP".Split(";")
            Dim minusc As String() = "da;de;di;do;du;das;des;dis;dos;dus;na;nas;no;nos;em;aos;ao".Split(";")

            Dim tempValue As Collections.IEnumerator = Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(LCase(value.Replace("'", " "))).Split(" ", ".", "/", "-").GetEnumerator

            Dim gen As New System.Text.StringBuilder()

            While tempValue.MoveNext
                If maiusc.Contains(UCase(tempValue.Current)) Then
                    gen.Append(UCase(tempValue.Current))
                ElseIf minusc.Contains(LCase(tempValue.Current)) Then
                    gen.Append(LCase(tempValue.Current))
                Else
                    gen.Append(tempValue.Current)
                End If

                If gen.Length < value.Length Then
                    gen.Append(value.Chars(gen.Length))
                End If
            End While

            Return gen.ToString()
        End Function

        ''' <summary>
        ''' Formas possíveis de entificar um texto.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum TipoEntifica
            Tudo
            SoAcentos
            MenosHTML
        End Enum

        ''' <summary>
        ''' Transforma caracteres especiais em seus respectivos códigos Asc, preparados para HTML.
        ''' </summary>
        ''' <param name="Texto">O texto que será entificado.</param>
        ''' <param name="Tipo">O tipo de entificação.</param>
        ''' <returns>Retorna o texto passado com caracteres preparados para HTML de acordo com Tipo.</returns>
        ''' <remarks></remarks>
        Shared Function Entifica(ByVal Texto As String, Optional ByVal Tipo As TipoEntifica = TipoEntifica.Tudo) As String
            Dim G1() As String = {"&", "¡", "¢", "£", "¤", "¥", "¦", "§", "¨", "©", "ª", "«", "¬", "¬", "®", "¯", "°", "±", "²", "³", "´", "µ", "¶", "•", "¸", "¹", "º", "»", "¼", "½", "¾", "¿", "×", "÷", "Æ", "Ð", "Ø", "Þ", "ß", "æ", "ø", "þ"}
            Dim G2() As String = {"À", "Á", "Â", "Ã", "Ä", "Å", "Ç", "È", "É", "Ê", "Ë", "Ì", "Í", "Î", "Ï", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "Ù", "Ú", "Û", "Ü", "Ý", "à", "á", "â", "ã", "ä", "å", "ç", "è", "é", "ê", "ë", "ì", "í", "î", "ï", "ð", "ñ", "ò", "ó", "ô", "õ", "ö", "ù", "ú", "û", "ü", "ý", "ÿ"}
            Dim G3() As String = {"""", "'", "<", ">"}

            If Tipo = TipoEntifica.Tudo Then
                For Each IT As String In G1
                    Texto = Texto.Replace(IT, "&#" & Asc(IT) & ";")
                Next
            End If

            If Tipo = TipoEntifica.Tudo Or Tipo = TipoEntifica.SoAcentos Then
                For Each IT As String In G2
                    Texto = Texto.Replace(IT, "&#" & Asc(IT) & ";")
                Next
            End If

            If Tipo = TipoEntifica.Tudo And Not Tipo = TipoEntifica.MenosHTML Then
                For Each IT As String In G3
                    Texto = Texto.Replace(IT, "&#" & Asc(IT) & ";")
                Next
            End If

            Return Texto
        End Function

        ''' <summary>
        ''' Monta variável para armazenamento padronizado na sessão, viewstate ou condição correspondente a página em questão.
        ''' </summary>
        ''' <param name="PageMasterOuControle">Página ou master ou controle onde será obtido request para acesso à url da página.</param>
        ''' <param name="Bloco">Bloco ou condição específica na página. Utilizado para diferenciar controles, mas pode ser deixado em branco.</param>
        ''' <param name="Params">Parâmetros de complemento da variável desejada.</param>
        ''' <value>String contendo variável de registro.</value>
        ''' <returns>String contendo variável de registro.</returns>
        ''' <remarks></remarks>
        Public Shared ReadOnly Property VarDeSessao(ByVal PageMasterOuControle As Object, ByVal Bloco As String, ByVal ParamArray Params() As String) As String
            Get
                Dim NomeArq As String = ""
                If Not IsNothing(PageMasterOuControle) Then
                    NomeArq = System.IO.Path.ChangeExtension(AppRelative(PageMasterOuControle), "")
                    If Not (TypeOf (PageMasterOuControle) Is MasterPage Or TypeOf (PageMasterOuControle) Is Page) Then
                        NomeArq = IIf(NomeArq <> "", "_", "") & PageMasterOuControle.UniqueId
                    End If
                End If
                If Bloco <> "" Then
                    NomeArq &= IIf(NomeArq <> "", "_", "") & Bloco
                End If
                For Each Param As String In Params
                    If Param <> "" Then
                        NomeArq &= IIf(NomeArq <> "", "_", "") & Param
                    End If
                Next
                Return NomeArq.ToUpper
            End Get
        End Property

        ''' <summary>
        ''' Pega titulo da página entre as tags title.
        ''' </summary>
        ''' <param name="Arquivo">Nome do arquivo de página (pode conter ~/).</param>
        ''' <returns>Retorna o texto entre as tags title da página.</returns>
        ''' <remarks></remarks>
        Shared Function PegaTituloPagWeb(ByVal Arquivo As String) As String
            Return PegaHtmlEmArquivo(FileExpr(Arquivo), "title").Inner
        End Function

        ''' <summary>
        ''' Pegar título da página web a partir do cabeçalho.
        ''' </summary>
        ''' <param name="Arquivo">Arquivo de página web (pode conter ~/).</param>
        ''' <returns>Retorna trecho de título do cabeçalho.</returns>
        ''' <remarks></remarks>
        Shared Function PegaTituloPagWebDoCabeca(ByVal Arquivo As String) As String
            Dim Txt As String = CarregaArqTxt(Arquivo)
            Dim Txt2 As String = RegexGroup(Txt, "(?is)title=""(.*?)""", 1).Value
            Return Txt2
        End Function

        ''' <summary>
        ''' Pega um regexhtml de uma página.
        ''' </summary>
        ''' <param name="Arquivo">Arquivo a ser pesquisado (pode conter ~/).</param>
        ''' <param name="Tag">Tag que será pesquisada.</param>
        ''' <returns>Retorna regexhtml daquele trecho.</returns>
        ''' <remarks></remarks>
        Shared Function PegaHtmlEmArquivo(ByVal Arquivo As String, ByVal Tag As String) As RegexHtml
            Dim Txt As String = CarregaArqTxt(Arquivo)
            Return PegaHtmlEmTexto(Txt, Tag)
        End Function

        ''' <summary>
        ''' Transforma um objeto com seus atributos em uma tabela.
        ''' </summary>
        ''' <param name="Objeto">Objeto contendo os atributos.</param>
        ''' <param name="Filtro">Regex contendo termos de seleção dos atributos ex.: não começado por... (?is)^(?!teste).</param>
        ''' <returns>Datatable contendo os atributos.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoComoTabela(ByVal NomeTab As String, ByVal Objeto As Object, Optional ByVal Filtro As String = "", Optional ByVal TB As DataTable = Nothing) As DataTable
            If IsNothing(TB) Then
                TB = New DataTable(NomeTab)
            End If

            Try
                For Each Linha As Object In Objeto
                    If Not IsNothing(Linha) Then
                        TipoComoTabela(NomeTab, Linha, Filtro, TB)
                    End If
                Next
                Return TB
            Catch ex As Exception
            End Try

            If Not IsNothing(Objeto) Then
                Dim Vals As New ArrayList
                Dim Estrut As Boolean = TB.Columns.Count <> 0
                For Each Item As System.Reflection.FieldInfo In Objeto.GetType.GetFields
                    If Filtro = "" OrElse Regex.Match(Item.Name, Filtro).Success Then
                        If Not Estrut Then
                            TB.Columns.Add(Item.Name)
                        End If
                        Vals.Add(Item.GetValue(Objeto))
                    End If
                Next
                TB.Rows.Add(Vals.ToArray)
            End If
            Return TB
        End Function

        ''' <summary>
        ''' Transforma texto em stream.
        ''' </summary>
        ''' <param name="Texto">Texto a ser colocado em stream.</param>
        ''' <returns>Stream.</returns>
        ''' <remarks></remarks>
        Public Shared Function TextoEmStream(ByVal Texto As String, Optional ByVal Encoding As System.Text.Encoding = Nothing) As Stream
            Dim Memo As New IO.MemoryStream
            Dim MemoGrava As IO.StreamWriter
            If Encoding Is Nothing Then
                MemoGrava = New IO.StreamWriter(Memo)
            Else
                MemoGrava = New IO.StreamWriter(Memo, Encoding)
            End If
            MemoGrava.Write(Texto)
            MemoGrava.Flush()
            Memo.Position = 0
            Return Memo
        End Function

        ''' <summary>
        ''' Inclui uma variável get na url de página, já considerando interrogação ou ecomercial conforme primeiro ou próximos parâmetros.
        ''' </summary>
        ''' <param name="Pag">Expressão de página url.</param>
        ''' <param name="Param">Parâmetro que será incluído.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function PagAtribParam(ByVal Pag As String, ByVal Param As String) As String
            If InStr(Pag, "?") <> 0 Then
                Pag &= "&"
            Else
                Pag &= "?"
            End If
            Pag &= Param
            Return Pag
        End Function

        ''' <summary>
        ''' Rotina para obter dataset informando como texto a conexão e o sql separados por pipe |.
        ''' </summary>
        ''' <param name="StrConnSQL">SqlConn podendo conter parâmetros como: strconn;user:[:user];password:[:password].</param>
        ''' <param name="Params">Params que podem ser utilizados tanto pela resolução de strconn quanto pelo dataset.</param>
        ''' <param name="PosFiltro">Critério que será utilizado apenas com os campos extraídos: select * from (select usuario,senha,grupo from ger_usuario) where filtro.</param>''' 
        ''' <returns>Retorna Dataset resultante da pesquisa do sql na conexão.</returns>
        ''' <remarks></remarks>
        Public Shared Function StrConnDSCarrega(ByVal StrConnSQL As String, ByVal PosFiltro As String, ByVal ParamArray Params() As Object) As System.Data.DataSet
            Dim StrConn As String = ""
            Dim Pos As Integer = InStr(StrConnSQL, "|")
            If Pos > 0 Then
                StrConn = Microsoft.VisualBasic.Left(StrConnSQL, Pos - 1)
                StrConnSQL = Mid(StrConnSQL, Pos + 1)
            End If
            If PosFiltro <> "" Then
                StrConnSQL = "select * from (" & StrConnSQL & ") SUB_G where " & PosFiltro
            End If
            Dim Conn As ConnectionStringSettings = StrConnObj(StrConn, Params)
            Return DSCarrega(StrConnSQL, Conn, Params)
        End Function

        ''' <summary>
        ''' Transforma entradas acessoorigemtipo ou texto em todas origemtipotexto.
        ''' </summary>
        ''' <param name="ParamsTratar">São entradas origemtipo ou origemtipotexto contendo nesta ordem: pesquisa|grupo|strconn|select ou listaaberta|grupo|usuariosesenhas.</param>
        ''' <returns>Retorna acessoorigemtipos apenas daqueles que pudessem ser convertidos.</returns>
        ''' <remarks>
        ''' Formatos válidos:
        '''     pesquisa|grupodefault|strconn|select usuario, senha, grupo from... ou
        '''     pesquisa|grupo|strconn|select usuario, senha, grupo from... ou
        '''     pesquisa|grupo|strconn|select usuario, senhaaberta, grupo from...
        '''     listaaberta|grupo|usuário1;senha1;usuario2;senha2;usuario3;senha3...
        '''     conexao|grupo|strconn|esquema
        ''' </remarks>
        Public Shared Function AcessoOKOrigemTrata(ByVal ParamArray ParamsTratar() As Object) As ArrayList
            Dim Params As ArrayList = ParamArrayToArrayList(ParamsTratar)
            Dim Ret As New ArrayList
            Dim Tratar As New ArrayList
            For Each Item As Object In Params
                If TypeOf (Item) Is AcessoOKOrigem Then
                    Tratar.Add(Item)
                ElseIf TypeOf (Item) Is String AndAlso Item <> "" Then

                    Dim Pos As Integer = InStr(Item, "|SELECT ")
                    Dim SQL As String = ""
                    If Pos <> 0 Then
                        SQL = Mid(Item, Pos + 1)
                        Item = Microsoft.VisualBasic.Left(Item, Pos)
                    End If
                    Dim ParamsLoc() As String = Split(Item, "|")
                    If SQL <> "" Then
                        ParamsLoc(ParamsLoc.Count - 1) = SQL
                    End If

                    Dim z As Integer = 0
                    Do While z < ParamsLoc.Length
                        Dim Tipo As AcessoOKOrigemTipo = Nothing
                        Tipo = System.Enum.Parse(GetType(AcessoOKOrigemTipo), ParamsLoc(z + 0), True)
                        If Tipo = AcessoOKOrigemTipo.ListaAberta Then
                            Ret.Add(New AcessoOKOrigem(Tipo, ParamsLoc(z + 1), ParamsLoc(z + 2)))
                            z += 3
                        ElseIf Tipo = AcessoOKOrigemTipo.Pesquisa Then
                            Ret.Add(New AcessoOKOrigem(Tipo, ParamsLoc(z + 1), ParamsLoc(z + 2) & "|" & ParamsLoc(z + 3)))
                            z += 4
                        ElseIf Tipo = AcessoOKOrigemTipo.Conexao Then
                            Dim Acc As AcessoOKOrigem = New AcessoOKOrigem(Tipo, ParamsLoc(z + 1), ParamsLoc(z + 2))
                            Acc.Esquema = ParamsLoc(z + 3)
                            Ret.Add(Acc)
                            z += 4
                        End If
                    Loop
                End If
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Retorna parâmetro protegido eliminando riscos de interceptação de base de dados.
        ''' </summary>
        ''' <param name="Conteudo">Conteúdo a ser tratado (retorno de querystring ou param).</param>
        ''' <returns>Texto validado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ParamP(ByVal Conteudo As String) As String
            Return Trim(Conteudo)
        End Function

        ''' <summary>
        ''' Calcula código de segurança para recurso de internet.
        ''' </summary>
        ''' <param name="RequestOuUrlAbsoluta">Pode ser uma string vazia '', alguma urlabsoluta como http://www.sbd.org.br/urlabsoluta.asmx ou um httprequest como httpcontext.current.request.</param>
        ''' <param name="QtdCaracs">Número de caracteres sendo o default 5 (caso passe nothing).</param>
        ''' <param name="Params">Parâmetros complementares como número da chave, pedido, item, etc...</param>
        ''' <value>Retorno de uma string abstraida da concatenação da página mais parâmetros.</value>
        ''' <returns>Retorno de uma string abstraida da concatenação da página mais parâmetros.</returns>
        ''' <remarks></remarks>
        Public Shared ReadOnly Property SegCalc(ByVal RequestOuUrlAbsoluta As Object, ByVal QtdCaracs As Integer, ByVal ParamArray Params() As String) As String
            Get
                Dim UrlAbsoluta As String = ""
                If TypeOf RequestOuUrlAbsoluta Is HttpRequest Then
                    UrlAbsoluta = RequestOuUrlAbsoluta.Url.AbsolutePath
                ElseIf TypeOf RequestOuUrlAbsoluta Is String Then
                    UrlAbsoluta = RequestOuUrlAbsoluta
                Else
                    UrlAbsoluta = HttpContext.Current.Request.Url.AbsolutePath
                End If

                Dim Termo As String = Regex.Match(UriRaizRecurso(UrlAbsoluta), "(?is)\/(.*?)\.asmx(\/|$)").Groups(1).Value.ToLower
                Termo = VarDeSessao(Nothing, Termo, Params)
                Return Microsoft.VisualBasic.Left(AbstrCarac(Termo), NZV(QtdCaracs, 5))
            End Get
        End Property

        ''' <summary>
        ''' Substitui um grupo regex no texto.
        ''' </summary>
        ''' <param name="Texto">Texto que será avaliado.</param>
        ''' <param name="Mascara">Expressão regex para grupos.</param>
        ''' <param name="TrocarPara">Texto que substituirá o grupo regex encontrado.</param>
        ''' <param name="Grupo">Grupo regex a ser substituído.</param>
        ''' <returns>Retorna texto com grupo substituído por trocarpara com base na expressão regex.</returns>
        ''' <remarks></remarks>
        Shared Function RegexGroupReplace(ByVal Texto As String, ByVal Mascara As String, ByVal TrocarPara As String, Optional ByVal Grupo As Object = 0) As String
            Dim Result As String = Texto
            Dim Menos As Integer = 0
            For Each m As Match In System.Text.RegularExpressions.Regex.Matches(Result, Mascara)
                Result = Result.Substring(0, m.Groups(Grupo).Index - Menos) & TrocarPara & Result.Substring(m.Groups(Grupo).Index + m.Groups(Grupo).Length - Menos)
                Menos += m.Groups(Grupo).Length
            Next
            Return Result
        End Function

        ''' <summary>
        ''' Retorna um grupo regex.
        ''' </summary>
        ''' <param name="Texto">Texto de onde será extraído o grupo.</param>
        ''' <param name="Mascara">Expressão regex para análise do texto.</param>
        ''' <param name="Grupo">Grupo regex a ser extraído.</param>
        ''' <returns>Retorna grupo regex conforme análise do texto com base na máscara.</returns>
        ''' <remarks></remarks>
        Shared Function RegexGroup(ByVal Texto As String, ByVal Mascara As String, Optional ByVal Grupo As Object = 0) As System.Text.RegularExpressions.Group
            Return System.Text.RegularExpressions.Regex.Match(NZ(Texto, ""), Mascara).Groups(Grupo)
        End Function

        ''' <summary>
        ''' Retorna MATCHES de uma consulta regex (apenas para simplificar código).
        ''' </summary>
        ''' <param name="Texto">Texto a ser pesquisado.</param>
        ''' <param name="Mascara">Máscara utilizada para pesquisa.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Shared Function RegexMatches(ByVal Texto As String, ByVal Mascara As String) As Match
            Return System.Text.RegularExpressions.Regex.Match(NZ(Texto, ""), Mascara)
        End Function

        ''' <summary>
        ''' Interpreta uma string utiliza regex retornando um arraylist mediante a escolha de um grupo.
        ''' </summary>
        ''' <param name="Texto">Texto a ser interpretado.</param>
        ''' <param name="Mascara">Máscara regex utilizada para interpretar o texto.</param>
        ''' <param name="Grupo">Grupo desejado sendo grupo zero o padrão (todo o texto).</param>
        ''' <returns>Retorna um arraylist contendo como índice cada ocorrência no formato da máscara no texto.</returns>
        ''' <remarks></remarks>
        Shared Function RegexToArrayList(ByVal Texto As String, ByVal Mascara As String, Optional ByVal Grupo As Integer = 0, Optional ByVal prop As String = "") As ArrayList
            Dim conjunto As ArrayList = New ArrayList
            For Each Item As Match In System.Text.RegularExpressions.Regex.Matches(Texto, Mascara, RegexOptions.Multiline)
                If prop = "" Then
                    conjunto.Add(Item.Groups(Grupo))
                ElseIf Compare(prop, "value") Then
                    conjunto.Add(Item.Groups(Grupo).Value)
                Else
                    Throw New Exception("Prop " & prop & " inválida para grupo em regextoarraylist.")
                End If
            Next
            Return conjunto
        End Function

        ''' <summary>
        ''' Rotina recursiva para regex.match de tags. Apenas retorna a máscara. Informe níveis possíveis para aquela tag.
        ''' </summary>
        ''' <param name="Tag">Tag inicial que também é utilizada como texto recursivo.</param>
        ''' <param name="Niveis">Níveis possíveis para primeira tag.</param>
        ''' <param name="NivelAtual">Indicador de nível para chave recursiva.</param>
        ''' <returns>Texto contendo máscara.</returns>
        ''' <remarks></remarks>
        Shared Function RegexMascTags(Optional ByVal Tag As String = "", Optional ByVal Niveis As Integer = 1, Optional ByVal NivelAtual As Integer = 1) As String
            Dim Texto As String = ""
            If NivelAtual > Niveis Then
                Return ""
            ElseIf NivelAtual > 1 And NivelAtual <= Niveis Then
                Texto = RegexMascTags(Tag, Niveis, NivelAtual + 1)
                Return "<\<tag>( .*?)?>" & IIf(Texto <> "", "(" & Texto & "|.)", ".") & "*?</\<tag>>"
            End If
            Texto = RegexMascTags(Tag, Niveis, NivelAtual + 1)
            Return "(?is)<(?<tag>" & IIf(Tag <> "", Tag, "[^ >]*") & ")( .*?)?>(?<inner>" & IIf(Texto <> "", "(" & Texto & "|.)", ".") & "*?)</\<tag>>"
        End Function

        ''' <summary>
        ''' Converte as propriedades públicas de um objeto para um DataSet Tipado.
        ''' </summary>
        ''' <param name="obj">O objeto do qual as propriedades públicas serão convertidas.</param>
        ''' <param name="criarLinha">Se true, os valores das propriedades do objeto serão convertidos em uma linha do DataSet.</param>
        ''' <returns>Retorna um DataSet tipado de acordo com as propriedades públicas do objeto passado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ObjToDs(ByVal obj As Object, Optional ByVal criarLinha As Boolean = True, Optional ByVal flags As ObjToDsFlags = ObjToDsFlags.FProperty Or ObjToDsFlags.FPublic) As System.Data.DataSet
            Dim t As Type = obj.GetType()
            Dim ds As New System.Data.DataSet()

            ds.Tables.Add(New System.Data.DataTable())

            Dim l As New List(Of Object)
            Dim b As Reflection.BindingFlags = Reflection.BindingFlags.Default

            If FlagSetado(flags, ObjToDsFlags.FPublic) Then
                b = Reflection.BindingFlags.Public
            End If

            If FlagSetado(flags, ObjToDsFlags.FShared) Then
                If b = Reflection.BindingFlags.Default Then
                    b = Reflection.BindingFlags.Static
                Else
                    b = b Or Reflection.BindingFlags.Static
                End If
            End If

            If FlagSetado(flags, ObjToDsFlags.FNonPublic) Then
                b = b Or Reflection.BindingFlags.NonPublic
            End If

            If b = Reflection.BindingFlags.Default Then
                b = Reflection.BindingFlags.Public
            End If

            If FlagSetado(flags, ObjToDsFlags.FProperty) Then
                For Each p As Reflection.PropertyInfo In t.GetProperties(Reflection.BindingFlags.Instance Or b)
                    If Not p.GetGetMethod(True) Is Nothing AndAlso Not p.GetSetMethod(True) Is Nothing Then
                        If p.CanRead AndAlso p.CanWrite Then
                            Try
                                Dim dc As New System.Data.DataColumn(p.Name, p.PropertyType)
                                ds.Tables(0).Columns.Add(dc)

                                If criarLinha Then
                                    l.Add(p.GetValue(obj, New Object() {}))
                                End If
                            Catch
                                If criarLinha Then
                                    l.Add(DBNull.Value)
                                End If
                            End Try
                        End If
                    End If
                Next
            End If

            If FlagSetado(flags, ObjToDsFlags.FFunction) OrElse FlagSetado(flags, ObjToDsFlags.FSub) Then
                For Each m As Reflection.MethodInfo In t.GetMethods((Reflection.BindingFlags.Instance Or b) Or Not Reflection.BindingFlags.GetProperty Or Not Reflection.BindingFlags.SetProperty)
                    If m.ReturnType Is GetType(Void) AndAlso FlagSetado(flags, ObjToDsFlags.FSub) Then
                        Dim dc As New System.Data.DataColumn(m.Name)
                        ds.Tables(0).Columns.Add(dc)

                        If criarLinha Then
                            l.Add(DBNull.Value)
                        End If
                    End If

                    If Not m.ReturnType Is GetType(Void) AndAlso FlagSetado(flags, ObjToDsFlags.FFunction) Then
                        Dim dc As New System.Data.DataColumn(m.Name, m.ReturnType)
                        ds.Tables(0).Columns.Add(dc)

                        If criarLinha Then
                            l.Add(DBNull.Value)
                        End If
                    End If
                Next
            End If

            If FlagSetado(flags, ObjToDsFlags.FAttribute) Then
                For Each a As Reflection.FieldInfo In t.GetFields(Reflection.BindingFlags.Instance Or b)
                    Try
                        Dim dc As New System.Data.DataColumn(a.Name, a.DeclaringType)
                        ds.Tables(0).Columns.Add(dc)

                        If criarLinha Then
                            l.Add(a.GetValue(obj))
                        End If
                    Catch ex As Exception
                        If criarLinha Then
                            l.Add(DBNull.Value)
                        End If
                    End Try
                Next
            End If

            If criarLinha Then
                ds.Tables(0).Rows.Add(l.ToArray)
            End If

            Return ds
        End Function

        ''' <summary>
        ''' Inicia dataset com estrutura ou caso já tenha sido especificada, carrega da variável de sessão.
        ''' </summary>
        ''' <param name="PageOuMaster">Page ou master para obtenção da sessão.</param>
        ''' <param name="VarSessao">Nome para vardesessao na página. Vazio significa criar sempre.</param>
        ''' <param name="CamposEValores">TabCols para especificação das colunas.</param>
        ''' <returns>Retorna dataset com table única contendo a estrutura especificada.</returns>
        ''' <remarks></remarks>
        Shared Property DSTabCols(ByVal PageOuMaster As Object, ByVal VarSessao As String, ByVal ParamArray CamposEValores() As Object) As System.Data.DataSet
            Get
                If Not IsNothing(PageOuMaster) Then
                    Dim Ret As System.Data.DataSet = DSTabReg(PageOuMaster, VarSessao)
                    If Not IsNothing(Ret) Then
                        Return Ret
                    End If
                End If
                Dim DS As New System.Data.DataSet
                Dim TB As New System.Data.DataTable
                Dim Params As ArrayList = ParamArrayToArrayList(CamposEValores)
                Dim z As Integer = 0
                Do While z < Params.Count
                    Dim Param As TabCol
                    If TypeOf Params(z) Is TabCol Then
                        Param = Params(z)
                        z += 1
                    Else
                        Param = New TabCol(Params(z), Params(z + 1))
                        z += 2
                    End If
                    TB.Columns.Add(Param.Nome, Param.Tipo)
                Loop
                DS.Tables.Add(TB)
                If Not IsNothing(PageOuMaster) Then
                    PageOuMaster.Session(VarDeSessao(PageOuMaster, "", VarSessao)) = DS
                End If
                Return DS
            End Get
            Set(ByVal value As System.Data.DataSet)
                DSTabReg(PageOuMaster, VarSessao) = value
            End Set
        End Property

        ''' <summary>
        ''' Opções para tipo de ambiente onde a dll está rodando.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum AmbienteTipo
            Windowsforms
            WEB
        End Enum

        ''' <summary>
        ''' Retorna ambiente no qual o programa (ou dll) está rodando.
        ''' </summary>
        ''' <returns>Ambiente podendo ser WindowsForm ou WEB.</returns>
        ''' <remarks>Caso programa seja uma console, retornará ambiente WindowsForm.</remarks>
        Public Shared Function Ambiente() As AmbienteTipo
            Try
                If Not IsNothing(HttpContext.Current) Then
                    Return AmbienteTipo.WEB
                End If
            Catch
            End Try
            Return AmbienteTipo.Windowsforms
        End Function

        ''' <summary>
        ''' Obtem um tipo de midia do arquivo expecificado.
        ''' </summary>
        ''' <param name="filepath"></param>
        ''' <returns></returns>
        Public Shared Function GetMIMEType(ByVal filepath As String) As String
            Dim regPerm As System.Security.Permissions.RegistryPermission = New System.Security.Permissions.RegistryPermission(System.Security.Permissions.RegistryPermissionAccess.Read, "\\HKEY_CLASSES_ROOT")
            Dim classesRoot As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.ClassesRoot
            Dim fi = New System.IO.FileInfo(filepath)
            Dim dotExt As String = LCase(fi.Extension)
            Dim typeKey As Microsoft.Win32.RegistryKey = classesRoot.OpenSubKey("MIME\Database\Content Type")
            Dim keyname As String

            For Each keyname In typeKey.GetSubKeyNames()
                Dim curKey As Microsoft.Win32.RegistryKey = classesRoot.OpenSubKey("MIME\Database\Content Type\" & keyname)
                If LCase(curKey.GetValue("Extension")) = dotExt Then
                    Return keyname
                End If
            Next
            Return ""
        End Function



        ''' <summary>
        ''' Função que envia email para um destinatário especifico com o formato De: / Para: / Assunto: / Corpo:.
        ''' </summary>
        ''' <param name="Mail"></param>
        ''' <param name="Enviar">Parâmetros de configuração de protocolos utilizados no envio da mensagem.</param>
        ''' <param name="De">Nome e email do remetente no formato: 'nome' [email@dominio.com.br].</param>
        ''' <param name="Para">Nome e email dos destinatários no formato: 'nome1' [email1@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="Assunto">Texto de assunto da mensagem.</param>
        ''' <param name="Corpo">Conteúdo da mensagem.</param>
        ''' <param name="ReplyTo">Indica um endereço diferente do From para a mensagem.</param>
        ''' <param name="Prioridade">Nível de prioridade entre alta, normal e baixa.</param>
        ''' <param name="SmtpHost">Servidor de smtp. Na sua ausência, smtp_host do webconfig será considerado.</param>
        ''' <param name="SmtpPort">Porta de smtp. Na sua ausência, smtp_host do webconfig será considerada.</param>
        ''' <param name="CC">Com cópia. Deve conter lista 'nome' [email@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="BCC">Com cópia oculta. Também pode ser informado com BCC na frente de qualquer destinatário. Deve conter lista 'nome' [email@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="SMTPUsuario">Usuário de autenticação no SMTP.</param>
        ''' <param name="SMTPSenha">Senha de autenticação no SMTP.</param>
        ''' <param name="IncorporaImagens">Ordena incorporação das imagens ao invés de seguirem links para elas.</param>
        ''' <param name="CIDS">retornará cids caso imagens incorporadas.</param>
        ''' <param name="TMPS">retornará arquivos temporários caso sejam utilizados.</param>
        ''' <param name="UrlsLocais">Parâmetros contendo url e dir correspondente para redirecionamento, podendo ser mais de um par.</param>
        ''' <param name="Attachs">Lista de arquivos a seguirem attachados.</param>
        ''' <returns>Se conseguir enviar com sucesso retorna "" Senão retorna mensagem de erro.</returns>
        ''' <remarks></remarks>
        Public Shared Function EnviaEmail(ByRef Mail As MailMessage, ByVal Enviar As System.Net.Mail.SmtpClient, ByVal De As String, ByVal Para As Object, ByVal Assunto As String, ByVal Corpo As String, ByVal ReplyTo As String, Optional ByVal Prioridade As System.Net.Mail.MailPriority = Nothing, Optional ByVal SmtpHost As String = Nothing, Optional ByVal SmtpPort As Integer = Nothing, Optional ByVal CC As Object = Nothing, Optional ByVal BCC As Object = Nothing, Optional ByVal SMTPUsuario As String = Nothing, Optional ByVal SMTPSenha As String = Nothing, Optional ByVal IncorporaImagens As Boolean = False, Optional ByRef CIDS As ArrayList = Nothing, Optional ByRef TMPS As ArrayList = Nothing, Optional ByVal UrlsLocais As ArrayList = Nothing, Optional ByVal Attachs As ArrayList = Nothing) As String
            Try
                ' cada param só é definido caso esteja mencionado
                If IsNothing(Mail) Then
                    Mail = New MailMessage
                End If

                If Not IsNothing(De) Then
                    Dim DeLista As ArrayList = TermosStrToLista(De)
                    Mail.From = New MailAddress(EmailStr(DeLista(0)))
                End If

                If Not IsNothing(ReplyTo) Then
                    Dim ReplyToLista As ArrayList = TermosStrToLista(ReplyTo)
                    If ReplyToLista.Count > 0 Then
                        Mail.ReplyTo = (New MailAddress(EmailStr(ReplyToLista(0))))
                    End If
                End If

                If Not IsNothing(Para) Or Not IsNothing(CC) Or Not IsNothing(BCC) Then
                    Mail.Bcc.Clear()
                    Mail.CC.Clear()
                    Mail.To.Clear()
                End If

                If Not IsNothing(Para) Then
                    Dim ParaLista As ArrayList = TermosStrToLista(Para)
                    For Each ParaItem As String In ParaLista
                        If ParaItem.StartsWith("bcc:", StringComparison.OrdinalIgnoreCase) Then
                            Dim M As New Email(ParaItem.Substring(4))
                            Mail.Bcc.Add(New MailAddress("<" & M.SoEndereco & ">"))
                        Else
                            Mail.To.Add(New MailAddress(EmailStr(ParaItem)))
                        End If
                    Next
                End If

                If Not IsNothing(CC) Then
                    Dim CCLista As ArrayList = TermosStrToLista(CC)
                    For Each ParaItem As String In CCLista
                        If ParaItem.StartsWith("bcc:", StringComparison.OrdinalIgnoreCase) Then
                            Dim M As New Email(ParaItem.Substring(4))
                            Mail.Bcc.Add(New MailAddress("<" & M.SoEndereco & ">"))
                        Else
                            Mail.CC.Add(New MailAddress(EmailStr(ParaItem)))
                        End If
                    Next
                End If

                If Not IsNothing(BCC) Then
                    Dim BCCLista As ArrayList = TermosStrToLista(BCC)
                    For Each ParaItem As String In BCCLista
                        If ParaItem.StartsWith("bcc:", StringComparison.OrdinalIgnoreCase) Then
                            Dim M As New Email(ParaItem.Substring(4))
                            Mail.Bcc.Add(New MailAddress("<" & M.SoEndereco & ">"))
                        Else
                            Dim M As New Email(ParaItem)
                            Mail.Bcc.Add(New MailAddress("<" & M.SoEndereco & ">"))
                        End If
                    Next
                End If

                If Not IsNothing(Prioridade) Then
                    Mail.Priority = Prioridade
                End If

                If Not IsNothing(Assunto) Then
                    Mail.Subject = Assunto
                End If

                SmtpHost = NZV(SmtpHost, WebConf("smtp_host"))
                SmtpPort = NZV(NZV(SmtpPort, Val(WebConf("smtp_port"))), 25)
                SMTPUsuario = NZV(SMTPUsuario, WebConf("smtp_usuario"))
                SMTPSenha = NZV(SMTPSenha, WebConf("smtp_senha"))

                If Not IsNothing(Corpo) Then
                    Mail.AlternateViews.Clear()


                    If Not IncorporaImagens Then
                        Mail.IsBodyHtml = True
                        Mail.SubjectEncoding = System.Text.Encoding.GetEncoding("UTF-8")
                        Mail.BodyEncoding = System.Text.Encoding.GetEncoding("UTF-8")
                        Mail.Body = Corpo
                    Else
                        Dim MsgRes As String = LCase(Icraft.IcftBase.RandText(6))

                        ' inicia variávies de retorno caso não estejam definidas
                        If IsNothing(TMPS) Then
                            TMPS = New ArrayList
                        End If
                        If IsNothing(CIDS) Then
                            CIDS = New ArrayList
                        End If

                        ' visão alternativa
                        Dim alt As AlternateView = AlternateView.CreateAlternateViewFromString("", System.Text.Encoding.UTF8, "text/plain")
                        Mail.AlternateViews.Add(alt)

                        Dim arrImagens As New ArrayList
                        Dim listaImagens As String = "|"

                        For Each src As Match In Regex.Matches(Corpo, "url\(['|\""]+.*['|\""]\)|src=[""|'][^""']+[""|']", RegexOptions.IgnoreCase)
                            If InStr(1, listaImagens, "|" & src.Value & "|") = 0 Then
                                arrImagens.Add(src.Value)
                                listaImagens &= src.Value & "|"
                            End If
                        Next

                        CIDS.Clear()

                        For indx As Integer = 0 To arrImagens.Count - 1
                            Dim cid As String = "cid:embres" & MsgRes & (indx + 1)
                            Corpo = Corpo.Replace(arrImagens(indx), "src=""" & cid & """")
                            Dim img As String = Regex.Replace(arrImagens(indx), "url\(['|\""]", "")
                            img = Regex.Replace(img, "src=['|\""]", "")
                            img = Regex.Replace(img, "['|\""]\)", "").Replace("""", "")

                            arrImagens(indx) = img

                            ' redirecionamentos
                            If Not IsNothing(UrlsLocais) Then
                                For Z = 0 To UrlsLocais.Count - 1 Step 2
                                    Dim urlcomp As String = UrlsLocais(Z)
                                    If img.StartsWith(urlcomp, StringComparison.OrdinalIgnoreCase) Then
                                        img = img.Replace(urlcomp, UrlsLocais(Z + 1))
                                    End If
                                Next
                            End If

                            Dim URL As New System.Uri(img)
                            If URL.Scheme = "http" Or URL.Scheme = "ftp" Then
                                ' carrega imagens caso remotas

                                Try
                                    Dim request As HttpWebRequest = WebRequest.Create(URL)

                                    request.Timeout = 5000 ' cinco segundo de carga, senão erro...
                                    Dim response As HttpWebResponse = request.GetResponse()
                                    Dim bmp As New Bitmap(response.GetResponseStream)

                                    Dim DirTemp As String = NZV(WebConf("dir_temp"), "")
                                    If DirTemp <> "" Then
                                        img = NomeArqLivre(DirTemp, "EnviaEmail")
                                    Else
                                        img = System.IO.Path.GetTempFileName()
                                    End If

                                    If Not TMPS.Contains(img) Then
                                        TMPS.Add(img)
                                    End If
                                    bmp.Save(img)
                                Catch EX As Exception
                                    Throw New Exception(EX.Message & " ao tentar obter conteúdo """ & URL.OriginalString & """")
                                End Try



                            End If
                            CIDS.Add(img)

                        Next

                        ' incorpora imagens
                        alt = AlternateView.CreateAlternateViewFromString(Corpo, System.Text.Encoding.UTF8, "text/html")

                        For z = 0 To CIDS.Count - 1
                            Dim res As New LinkedResource(CType(CIDS(z), String))
                            res.ContentId = "embres" & MsgRes & (z + 1)
                            Dim Mime As String = ""
                            Try
                                Mime = GetMIMEType(System.IO.Path.GetFileName(arrImagens(z)))
                            Catch
                            End Try
                            If Mime <> "" Then
                                res.ContentType = New System.Net.Mime.ContentType(Mime)
                            End If
                            alt.LinkedResources.Add(res)
                        Next
                        Mail.AlternateViews.Add(alt)
                    End If
                End If

                ' inclui attachados
                If Not IsNothing(Attachs) Then
                    For Each attach As Object In Attachs
                        Try

                            If TypeOf attach Is String AndAlso attach <> "" Then
                                Mail.Attachments.Add(New Attachment(FileExpr(attach)))
                            ElseIf TypeOf attach Is ListItem Then
                                Dim IT As ListItem = attach
                                Dim ITA As New System.Net.Mail.Attachment(FileExpr(IT.Value))
                                ITA.Name = IT.Text
                                Mail.Attachments.Add(ITA)
                            End If
                        Catch
                        End Try
                    Next
                End If

                If IsNothing(Enviar) Then
                    Enviar = New System.Net.Mail.SmtpClient(SmtpHost, SmtpPort)
                End If

                If Not IsNothing(SMTPUsuario) Then
                    Enviar.Credentials = New System.Net.NetworkCredential(SMTPUsuario, CType(NZ(SMTPSenha, ""), String))
                    'Enviar.EnableSsl = True
                    'ConnectType = SmtpConnectType.ConnectSSLAuto
                End If

                Enviar.Timeout = NZV(Val(WebConf("smtp_timeout")), 100000)
                Enviar.Send(Mail)
                Return ""
            Catch ex As Exception
                Return MessageEx(ex, "Erro ao tentar enviar email")
            End Try
        End Function

        ''' <summary>
        ''' Função que envia email num formato simplificado sem verificações.
        ''' </summary>
        ''' <param name="Mail"></param>
        ''' <param name="Enviar">Parâmetros de configuração de protocolo para envio de email, neste caso é opcional.</param>
        ''' <param name="De">Nome e email do remetente no formato: 'nome' [email@dominio.com.br].</param>
        ''' <param name="Para">Nome e email dos destinatários no formato: 'nome1' [email1@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="Assunto">Texto de assunto da mensagem.</param>
        ''' <param name="Corpo">Conteúdo da mensagem.</param>
        ''' <param name="Prioridade">Nível de prioridade entre alta, normal e baixa.</param>
        ''' <param name="SmtpHost">Servidor de smtp. Na sua ausência, smtp_host do webconfig será considerado.</param>
        ''' <param name="SmtpPort">Porta de smtp. Na sua ausência, smtp_host do webconfig será considerada.</param>
        ''' <param name="CC">Com cópia. Deve conter lista 'nome' [email@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="BCC">Com cópia oculta. Também pode ser informado com BCC na frente de qualquer destinatário. Deve conter lista 'nome' [email@dominio.com.br];'nome2' [email2@dominio.com.br].</param>
        ''' <param name="SMTPUsuario">Usuário de autenticação no SMTP.</param>
        ''' <param name="SMTPSenha">Senha de autenticação no SMTP.</param>
        ''' <param name="IncorporaImagens">Ordena incorporação das imagens ao invés de seguirem links para elas.</param>
        ''' <param name="CIDS">Cids caso imagens incorporadas.</param>
        ''' <param name="TMPS">Arquivos temporários caso sejam utilizados.</param>
        ''' <param name="UrlsLocais">Parâmetros contendo url e dir correspondente para redirecionamento, podendo ser mais de um par.</param>
        ''' <param name="Attachs">Lista de arquivos a seguirem attachados.</param>
        ''' <returns>Retorna a mensagem enviada.</returns>
        ''' <remarks></remarks>
        Public Shared Function EnviaEmail(ByRef Mail As MailMessage, Optional ByRef Enviar As System.Net.Mail.SmtpClient = Nothing, Optional ByVal De As String = Nothing, Optional ByVal Para As Object = Nothing, Optional ByVal Assunto As String = Nothing, Optional ByRef Corpo As String = Nothing, Optional ByVal Prioridade As System.Net.Mail.MailPriority = Nothing, Optional ByVal SmtpHost As String = Nothing, Optional ByVal SmtpPort As Integer = Nothing, Optional ByVal CC As Object = Nothing, Optional ByVal BCC As Object = Nothing, Optional ByVal SMTPUsuario As String = Nothing, Optional ByVal SMTPSenha As String = Nothing, Optional ByVal IncorporaImagens As Boolean = False, Optional ByRef CIDS As ArrayList = Nothing, Optional ByRef TMPS As ArrayList = Nothing, Optional ByVal UrlsLocais As ArrayList = Nothing, Optional ByVal Attachs As ArrayList = Nothing) As String
            Return EnviaEmail(Mail, Enviar, De, Para, Assunto, Corpo, Nothing, Prioridade, SmtpHost, SmtpPort, CC, BCC, SMTPUsuario, SMTPSenha, IncorporaImagens, CIDS, TMPS, UrlsLocais, Attachs)
        End Function

        ''' <summary>
        ''' Busca a raiz do recurso de um determinado URI.
        ''' </summary>
        ''' <param name="Compl">Complemento da URI.</param>
        ''' <param name="TraduzCompl">Transfere para o padrão de raiz.</param>
        ''' <param name="Recarregar">Busca informações de rescursos já existentes na memória.</param>
        ''' <returns>Retorna raiz do recurso.</returns>
        ''' <remarks></remarks>
        Public Shared Function UriRaizRecurso(Optional ByVal Compl As String = "", Optional ByVal TraduzCompl As String = "", Optional ByVal Recarregar As Boolean = False) As String
            Static Uri As String = ""
            If Uri = "" Or Recarregar Then
                Dim Ret As String = UriRaiz("", Recarregar)
                Ret = TraduzUrl(Ret, TraduzCompl, Recarregar)
                If IsNothing(Ret) OrElse Ret = "~/" Then
                    Dim Pos As Integer = InStrRev(HttpContext.Current.Request.Url.AbsoluteUri, HttpContext.Current.Request.Url.LocalPath)
                    Ret = URLExpr(Microsoft.VisualBasic.Left(HttpContext.Current.Request.Url.AbsoluteUri, Pos), HttpContext.Current.Request.ApplicationPath, "/")
                End If
                Uri = Ret
            End If
            Return RaizCompl(Uri, TraduzUrl(Compl, TraduzCompl, Recarregar))
        End Function

        ''' <summary>
        ''' Retorna a URL a partir de uma URI inserida.
        ''' </summary>
        ''' <param name="Uri">Recebe a URI completa.</param>
        ''' <param name="TraduzCompl">Complementos da URL.</param>
        ''' <param name="Recarregar">Busca as informações de recursos já existentes na memória.</param>
        ''' <returns>Retorna a URL no padrão definido.</returns>
        ''' <remarks></remarks>
        Public Shared Function TraduzUrl(ByVal Uri As String, ByVal TraduzCompl As String, ByVal Recarregar As Boolean) As String
            Static UriTraduz() As String = {}
            If UriTraduz.Length = 0 Then
                UriTraduz = Split(NZ(WebConf("recurso_uri_traduz"), ""), ";")
            End If
            Dim z As Integer = 0

            ' busca nas opções do webconfig...
            For z = 0 To UriTraduz.Count - 1 Step 2
                If UriTraduz(z) <> "" Then
                    If Uri.StartsWith(UriTraduz(z)) Then
                        Uri = URLExpr(UriTraduz(z + 1), RetiraAppDeUrl(New Uri(Uri).PathAndQuery))
                        Exit For
                    End If
                End If
            Next

            ' só busca em traduz compl se não achar no webconfig...
            If z >= UriTraduz.Count Then
                If TraduzCompl <> "" Then
                    Dim UriTraduzCompl() As String = Split(TraduzCompl, ";")
                    For z = 0 To UriTraduzCompl.Count - 1 Step 2
                        If UriTraduzCompl(z) <> "" Then
                            If Uri.StartsWith(UriTraduzCompl(z)) Then
                                Uri = URLExpr(UriTraduzCompl(z + 1), New Uri(Uri).PathAndQuery)
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If
            Return Uri
        End Function

        ''' <summary>
        ''' Busca a raiz de um URI.
        ''' </summary>
        ''' <param name="Compl">Complemento da raiz para formar a URI.</param>
        ''' <param name="Recarregar">Busca informações de recursos já existentes na memória.</param>
        ''' <returns>Retorna a URI completa com a raiz.</returns>
        ''' <remarks></remarks>
        Public Shared Function UriRaiz(Optional ByVal Compl As String = "", Optional ByVal Recarregar As Boolean = False) As String
            Static Uri As String = ""
            If Uri = "" Or Recarregar Then
                Dim Ret As String = WebConf("site_url")
                If IsNothing(Ret) OrElse Ret = "~/" Then
                    If Ambiente() = AmbienteTipo.WEB Then
                        Dim Pos As Integer = InStrRev(HttpContext.Current.Request.Url.AbsoluteUri, HttpContext.Current.Request.Url.LocalPath)
                        Ret = URLExpr(Microsoft.VisualBasic.Left(HttpContext.Current.Request.Url.AbsoluteUri, Pos), HttpContext.Current.Request.ApplicationPath, "/")
                    Else
                        Ret = URLExpr(WebConf("url_raiz_site"), "/")
                    End If
                End If
                Uri = Ret
            End If
            Return RaizCompl(Uri, Compl)
        End Function

        ''' <summary>
        ''' Traduz endereço web ou app para endereço a partir da raiz que para WEB é o domínio e para APP diretório de execução.
        ''' </summary>
        ''' <param name="Raiz">Raiz quando queremos assumir ponto relativo diferente do padrão.</param>
        ''' <param name="Compl">Complemento que será acrescentado.</param>
        ''' <returns>Nome completo com raiz e complemento.</returns>
        ''' <remarks></remarks>
        Public Shared Function RaizCompl(ByVal Raiz As String, ByVal Compl As String) As String
            If Compl = "" Then
                Return Raiz
            End If
            Compl = New Label().ResolveUrl(Compl)
            If Ambiente() = AmbienteTipo.WEB Then
                If Compl.StartsWith(HttpContext.Current.Request.ApplicationPath & "/") Then
                    Compl = Mid(Compl, Len(HttpContext.Current.Request.ApplicationPath) + 1)
                End If
                If Compl.StartsWith("/") Then
                    Compl = URLExpr(Raiz, Compl)
                End If
            Else
                Compl = Compl.Replace("~/", Raiz)
            End If
            Return Compl
        End Function

        ''' <summary>
        ''' Retira os APPs da URL.
        ''' </summary>
        ''' <param name="Url">URL que será usada na função.</param>
        ''' <returns>Retorna a URL sem os APPs.</returns>
        ''' <remarks></remarks>
        Public Shared Function RetiraAppDeUrl(ByVal Url As String) As String
            Url = URLExpr("\", Url)
            If Url.StartsWith(HttpContext.Current.Request.ApplicationPath) Then
                Url = Mid(Url, Len(HttpContext.Current.Request.ApplicationPath) + 1)
            End If
            Return Url
        End Function

        ''' <summary>
        ''' Concatena um diretório passado por parâmetro ao diretório raiz.
        ''' </summary>
        ''' <param name="Segmentos">Diretório que será adicionado a raiz.</param>
        ''' <returns>Retorna o caminho da raiz e adiciona o diretório passado no "Segmentos"</returns>
        ''' <remarks></remarks>
        Shared Function FileExpr(ByVal ParamArray Segmentos() As String) As String
            Dim Raiz As String = New System.Web.UI.Control().ResolveUrl("~/").Replace("/", "\")
            Dim Arq As String = ExprExpr("\", "/", "", Segmentos)
            If Arq.StartsWith(Raiz) Then
                Arq = "~\" & Mid(Arq, Len(Raiz) + 1)
            End If

            If Arq.StartsWith("~\") Then
                If Ambiente() = AmbienteTipo.WEB Then
                    Arq = HttpContext.Current.Server.MapPath(Arq)
                Else
                    Dim DirExec As String = FileExpr(WebConf("dir_raiz_site"), "\")
                    If DirExec = "" Or DirExec = "\" Then
                        DirExec = System.Windows.Forms.Application.ExecutablePath
                    End If
                    Arq = Arq.Replace("~\", System.IO.Path.GetDirectoryName(DirExec) & "\")
                End If
            End If
            Return Arq
        End Function

        ''' <summary>
        ''' Trata endereço considerando a barra de WEB como sendo delimitador de elementos evitando que se repitam.
        ''' </summary>
        ''' <param name="Segmentos">Termos a serem concatenados.</param>
        ''' <returns>Endereço tipo web.</returns>
        ''' <remarks></remarks>
        Shared Function URIExpr(ByVal ParamArray Segmentos() As Object) As String
            Dim URL As String = (New System.Web.UI.Control).ResolveUrl(URLExpr(Segmentos))
            If Not URL.StartsWith("/") Then
                Return URL
            End If
            Dim Pag As String = HttpContext.Current.Request.Url.AbsoluteUri
            Pag = Pag.Replace(HttpContext.Current.Request.Url.PathAndQuery, "")
            Pag = Pag & URL
            Return Pag
        End Function

        ''' <summary>
        ''' Formato do match de troca para link [link:descrição|url]:
        ''' link:url|descrição;
        ''' img:url|legenda;
        ''' imgbut:urlimagem|urllink|descrição;
        ''' arquivo:url:descrição [[[[continuar]]]][[[[continuar]]]][[[[continuar]]]];
        ''' arvore;
        ''' tabela(col,lin):itens.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Exibe
            Private _page As Page

            ''' <summary>
            ''' Atribui uma página a _page.
            ''' </summary>
            ''' <param name="Page">Página que será atribuída.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Page As Page)
                _page = Page
            End Sub


            ''' <summary>
            ''' Traduz valor encontrado para formato protegido JS.
            ''' </summary>
            ''' <param name="m">Valor encontrado.</param>
            ''' <returns>Texto correspondente já protegido em JS.</returns>
            ''' <remarks></remarks>
            Public Shared Function JSEncod(ByVal m As Match) As String
                Return "_" & Mid(Uri.HexEscape(m.Value), 2)
            End Function

            ''' <summary>
            ''' Pesquisa os ImgButton no padrão "imgbut:urlimagem|urllink|descrição" existentes na página atribuída a _page.
            ''' </summary>
            ''' <param name="m">Valor que será utilizado na consulta.</param>
            ''' <returns>Retorna uma consulta em Regex que resultará os ImgButton da página que foi atribuída a _page.</returns>
            ''' <remarks></remarks>
            Public Function HTMLReplImgBut(ByVal m As Match) As String
                Return "\\{<a href=""" & _page.ResolveUrl(m.Groups(2).Value) & """><img src=""" & ImageURL(_page, m.Groups(1).Value) & """ alt=""" & HttpUtility.HtmlEncode(m.Groups(3).Value) & """/></a>\\}"
            End Function

            ''' <summary>
            ''' Pesquisa os Links no padrão "link:url|descrição" existentes na página atribuída a _page.
            ''' </summary>
            ''' <param name="m">Valor que será utilizado na consulta.</param>
            ''' <returns>Retorna uma consulta em Regex que resultará os Links da página que foi atribuída a _page.</returns>
            ''' <remarks></remarks>
            Public Function HTMLReplLink(ByVal m As Match) As String
                Return "\\{<a href=""" & _page.ResolveUrl(m.Groups(1).Value) & """>" & HttpUtility.HtmlEncode(m.Groups(2).Value) & "</a>\\}"
            End Function

            ''' <summary>
            ''' Pesquisa as Imagens no padrão "img:url|legenda" existentes na página atribuída a _page.
            ''' </summary>
            ''' <param name="m">Valor que será utilizado na consulta.</param>
            ''' <returns>Retorna uma consulta em Regex que resultará as Imagens da página que foi atribuída a _page.</returns>
            ''' <remarks></remarks>
            Public Function HTMLReplImg(ByVal m As Match) As String
                Return "\\{<img src=""" & _page.ResolveUrl(m.Groups(1).Value) & """ alt=""" & HttpUtility.HtmlEncode(m.Groups(2).Value) & """ />\\}"
            End Function
        End Class

        ''' <summary>
        ''' Retorna chave concatenada.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class RetornaChaveConcatStr

            Shared _RetornaChaveConcat As String

            ''' <summary>
            ''' Propriedade que retorna a chave visualizada concatenada.
            ''' </summary>
            ''' <value>Valor a ser retornado.</value>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Shared Property RetornaChaveConcat() As String
                Get
                    Return _RetornaChaveConcat
                End Get
                Set(ByVal value As String)
                    _RetornaChaveConcat = value
                End Set
            End Property

            ''' <summary>
            ''' Retorna chaves de acordo com a tabela passada.
            ''' </summary>
            ''' <param name="TableName">Tabela a ser pesquisada.</param>
            ''' <param name="ID">Identificação do campo.</param>
            ''' <param name="STRCONN">String de conexão.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Shared Function PKey(ByVal TableName As String, ByVal ID As Integer, ByVal StrConn As Object) As Object
                If TableName = "" Then
                    Return MsgBox("É necessário entrar no formulário que deseja visualizar o histórico antes de efetuar esta operação.")
                Else
                    Dim DSPKey As DataSet = DSCarrega("SELECT COLUMN_NAME AS PKEY FROM (SELECT * FROM ALL_TAB_COLUMNS WHERE COLUMN_ID = " & "'" & ID & "'" & " AND TABLE_NAME = " & "'" & TableName & "'" & ")", StrConn)
                    Dim RetColumn As String = DSPKey.Tables(0).Rows(0)("PKEY")
                    Return RetColumn
                End If
            End Function

        End Class

        ''' <summary>
        ''' Determina padrões de formatação para tempo.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum ExibeSegsOpc
            xh_ymin_zseg
            hh_mm_ss
            x_horas_y_minutos_e_z_segundos
            z_segundos
            hh_mm
            d_dias_x_horas_y_minutos_e_z_segundos
            mm_ss
        End Enum

        ''' <summary>
        ''' Converte uma quantidade de segundos determinada para um padrão escolhido.
        ''' </summary>
        ''' <param name="QtdSegundos">Recebe a quantidade de segundos que será convertida para o padrão.</param>
        ''' <param name="Opc">Determina o padrão que será usada para a conversão.</param>
        ''' <returns>Retorna a quantidade de segundos convertida para o padrão escolhido.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeSegs(ByVal QtdSegundos As Integer, ByVal Opc As ExibeSegsOpc) As String
            Dim Segs As Integer = QtdSegundos
            Dim Horas As Integer = Int(Segs / 3600)
            Segs -= Horas * 3600
            Dim Mins As Integer = Int(Segs / 60)
            Segs -= Mins * 60

            Select Case Opc
                Case ExibeSegsOpc.hh_mm_ss
                    Return Format(Horas, "00") & ":" & Format(Mins, "00") & ":" & Format(Segs, "00")
                Case ExibeSegsOpc.x_horas_y_minutos_e_z_segundos
                    Return Horas & Pl(Horas, " Hora") & ", " & Mins & Pl(Mins, " Minuto") & " e " & Segs & Pl(Segs, " Segundo")
                Case ExibeSegsOpc.xh_ymin_zseg
                    Return Horas & "h " & Mins & "min " & Segs & "seg"
                Case ExibeSegsOpc.hh_mm
                    Return Format(Horas, "00") & ":" & Format(Mins, "00")
                Case ExibeSegsOpc.d_dias_x_horas_y_minutos_e_z_segundos

                    Dim dia As Integer = Int(Horas / 24)
                    Dim hora As Integer = (Horas Mod 24)

                    Return dia & Pl(dia, " Dia") & ", " & hora & Pl(hora, " Hora") & ", " & Mins & Pl(Mins, " Minuto") & " e " & Segs & Pl(Segs, " Segundo")

                Case ExibeSegsOpc.mm_ss
                    Dim seg As Integer = QtdSegundos
                    Dim Min As Integer = (seg / 60)
                    Return Min & " min" & ", " & Segs & " seg"
            End Select
            Return QtdSegundos & Pl(QtdSegundos, " Segundo")

        End Function

        ''' <summary>
        ''' Converte qualquer valor nulo para o formato de null de determinado objeto, incluindo combobox.
        ''' </summary>
        ''' <param name="Valor">Valor a ser convertido.</param>
        ''' <param name="Def">Objeto que contém o valor a ser convertido.</param>
        ''' <returns>Retorna o valor convertido para o tipo null de determinado objeto.</returns>
        ''' <remarks></remarks>
        Shared Function NZN(ByVal Valor As Object, Optional ByVal Def As Object = Nothing) As Object
            Dim Obj As Object = NZ(Valor, Def)
            If TypeOf Obj Is String AndAlso Obj = ComboNull Then
                Obj = Def
            End If
            Return Obj
        End Function

        ''' <summary>
        ''' Converte qualquer valor nulo para o formato de null de determinado objeto considerando os tipos de valores.
        ''' </summary>
        ''' <param name="Valor">Valor que será convertido.</param>
        ''' <param name="Def">Objeto que contém o valor que será convertido.</param>
        ''' <returns>Retorna o valor convertido para o tipo null de determinado objeto.</returns>
        ''' <remarks></remarks>
        Shared Function NZVN(ByVal Valor As Object, Optional ByVal Def As Object = Nothing) As Object
            Dim Obj As Object = NZV(Valor, Def)
            If TypeOf Obj Is String Then
                Obj = Trim(Obj)
                If Obj = "" OrElse Obj = ComboNull Then
                    Obj = Def
                End If
            End If
            Return Obj
        End Function

        ''' <summary>
        ''' Tratamento de idioma padronizado para condicionamento de ambiente.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Idioma
            ''' <summary>
            ''' Idioma definido para o ambiente.
            ''' </summary>
            ''' <param name="Page">Página a ser avaliada.</param>
            ''' <value>Valor TipoIdioma a ser definido para contexto do ambiente.</value>
            ''' <returns>Valor definido TipoIdioma no contexto do ambiente.</returns>
            ''' <remarks></remarks>
            Shared Property DoAmbiente(ByVal Page As Page, Optional Padrao As TipoIdioma = TipoIdioma.PT_BR) As TipoIdioma
                Get
                    Dim Termo As String = Page.Session("IdiomaDoAmbiente")
                    If Not IsNothing(Termo) Then
                        Return CType(Termo, TipoIdioma)
                    End If
                    Return Padrao
                End Get
                Set(ByVal value As TipoIdioma)
                    Page.Session("IdiomaDoAmbiente") = value
                End Set
            End Property

            ''' <summary>
            ''' Verifica especificação da página para definição de contexto do ambiente.
            ''' </summary>
            ''' <param name="Page">Página a ser tratada.</param>
            ''' <remarks></remarks>
            Shared Sub Verifica(ByVal Page As Page)
                If Page.Request.Form("__EVENTTARGET") = "DEFINE_IDIOMA" Then
                    Dim Param As String = Page.Request.Form("__EVENTARGUMENT")
                    If Compare(Param, "EN") Then
                        DoAmbiente(Page) = TipoIdioma.EN
                    ElseIf Compare(Param, "ES") Then
                        DoAmbiente(Page) = TipoIdioma.ES
                    ElseIf Compare(Param, "PT_BR") Then
                        DoAmbiente(Page) = TipoIdioma.PT_BR
                    End If
                End If
            End Sub
        End Class

        ''' <summary>
        ''' Classe para registro de logon de usuário e variáveis relacionadas.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class LogonSession
            Private _id As String = Nothing
            Private _usuario As String = Nothing
            Private _momento As Date = Nothing
            Private _site As String = Nothing
            Private _senha As String = Nothing
            Private _grupo As String = Nothing
            Private _outros As New ArrayList

            ''' <summary>
            ''' Converte as informações de login da seção para uma string.
            ''' </summary>
            ''' <returns>Retorna a string contendo as informações.</returns>
            ''' <remarks></remarks>
            Public Shadows Function ToString() As String
                Dim txt As New StringBuilder
                txt.Append("LogonSession(")
                txt.Append("id=" & NZ(_id, "") & ";")
                txt.Append("_usuario=" & NZ(_usuario, "") & ";")
                txt.Append("_momento=" & Format(NZV(_momento, Nothing), "dd/MM/yyyy HH:mm:ss") & ";")
                For z As Integer = 0 To _outros.Count - 1 Step 2
                    txt.Append(_outros(z) & "=")
                    txt.Append(NZ(_outros(z + 1), ""))
                    txt.Append(";")
                Next
                txt.Append("_site=" & NZ(_site, ""))
                txt.Append("_grupo=" & NZ(_grupo, ""))
                txt.Append(")")
                Return txt.ToString
            End Function


            ''' <summary>
            ''' Identificação para armazenamento de logon do tipo 'GERAL' ou algum específico para múltiplos logons.
            ''' </summary>
            ''' <value>Especificação do tipo de logon.</value>
            ''' <returns>Especificação do tipo de logon.</returns>
            ''' <remarks></remarks>
            Public Property Id() As String
                Get
                    Return _id
                End Get
                Set(ByVal value As String)
                    _id = value
                End Set
            End Property

            ''' <summary>
            ''' Usuário que efetuou logon.
            ''' </summary>
            ''' <value>Login do usuário que efetuou logon.</value>
            ''' <returns>Login do usuário que efetuou logon.</returns>
            ''' <remarks></remarks>
            Public Property Usuario() As String
                Get
                    Return _usuario
                End Get
                Set(ByVal value As String)
                    _usuario = value
                End Set
            End Property

            ''' <summary>
            ''' Momento de logon.
            ''' </summary>
            ''' <value>Momento (data e hora) de logon.</value>
            ''' <returns>Momento (data e hora) de logon.</returns>
            ''' <remarks></remarks>
            Public Property Momento() As Date
                Get
                    Return _momento
                End Get
                Set(ByVal value As Date)
                    _momento = value
                End Set
            End Property

            ''' <summary>
            ''' Grupo do usuário que efetuou logon.
            ''' </summary>
            ''' <value>Nome do grupo do usuário que efetuou logon.</value>
            ''' <returns>Nome do grupo do usuário que efetuou logon.</returns>
            ''' <remarks></remarks>
            Public Property Grupo() As String
                Get
                    Return _grupo
                End Get
                Set(ByVal value As String)
                    _grupo = value
                End Set
            End Property

            ''' <summary>
            ''' Nome do site.
            ''' </summary>
            ''' <value></value>
            ''' <returns>Nome do site.</returns>
            ''' <remarks>Nome do site.</remarks>
            Public Property Site() As String
                Get
                    Return _site
                End Get
                Set(ByVal value As String)
                    _site = value
                End Set
            End Property

            ''' <summary>
            ''' Senha de acesso.
            ''' </summary>
            ''' <value>Senha de acesso.</value>
            ''' <returns>Senha de acesso.</returns>
            ''' <remarks></remarks>
            Public Property Senha() As String
                Get
                    Return _senha
                End Get
                Set(ByVal value As String)
                    _senha = value
                End Set
            End Property

            ''' <summary>
            ''' Outras propriedades a serem armazenadas pelo Logon.
            ''' </summary>
            ''' <param name="Propriedade">Nome da propriedade.</param>
            ''' <value>Valor da propriedade.</value>
            ''' <returns>Valor da propriedade armazenada.</returns>
            ''' <remarks></remarks>
            Public Property ExtendedProps(ByVal Propriedade As String) As Object
                Get
                    Dim Pos As Integer = _outros.IndexOf(":" & Propriedade)
                    If Pos >= 0 Then
                        Return _outros(Pos + 1)
                    End If
                    Return Nothing
                End Get
                Set(ByVal value As Object)
                    Dim Pos As Integer = _outros.IndexOf(":" & Propriedade)
                    If Pos >= 0 Then
                        _outros(Pos + 1) = value
                        Exit Property
                    End If
                    _outros.Add(":" & Propriedade)
                    _outros.Add(value)
                End Set
            End Property

            ''' <summary>
            ''' Acesso aos atributos e propriedades expandidas.
            ''' </summary>
            ''' <param name="Nome">Nome da propriedade tratada.</param>
            ''' <value>Valor da propriedade tratada.</value>
            ''' <returns>Valor da propriedade solicitada.</returns>
            ''' <remarks></remarks>
            Default Property Attributes(ByVal Nome As String) As String
                Get
                    If Compare(Nome, "Id") Then
                        Return _id
                    ElseIf Compare(Nome, "Usuario") Then
                        Return _usuario
                    ElseIf Compare(Nome, "Momento") Then
                        Return _momento
                    ElseIf Compare(Nome, "Site") Then
                        Return _site
                    ElseIf Compare(Nome, "Senha") Then
                        Return _senha
                    ElseIf Compare(Nome, "Grupo") Then
                        Return _grupo
                    Else
                        Dim Prop As Object = ExtendedProps(Nome)
                        If IsNothing(Prop) Then
                            Throw New Exception("Em Attributes de Logon, atributo '" & Nome & "' inválido para objeto " & Me.GetType.ToString & ".")
                        Else
                            Return Prop
                        End If
                    End If
                    Return Nothing
                End Get

                Set(ByVal value As String)
                    If Compare(Nome, "Id") Then
                        _id = value
                    ElseIf Compare(Nome, "Usuario") Then
                        _usuario = value
                    ElseIf Compare(Nome, "Momento") Then
                        _momento = value
                    ElseIf Compare(Nome, "Site") Then
                        _site = value
                    ElseIf Compare(Nome, "Senha") Then
                        _senha = value
                    ElseIf Compare(Nome, "Grupo") Then
                        _grupo = value
                    Else
                        Throw New Exception("Em Attributes de Logon, atributo " & value & " inválido para objeto " & Me.GetType.ToString & ".")
                    End If
                End Set
            End Property

            ''' <summary>
            ''' Criação de login para registro de acesso de usuário.
            ''' </summary>
            ''' <param name="Pagina">Página na qual é efetuado o login.</param>
            ''' <param name="Usuario">Usuário que efetua acesso.</param>
            ''' <param name="Senha">Senha do usuário.</param>
            ''' <remarks></remarks>
            Public Sub New(ByVal Pagina As System.Web.UI.Page, ByVal Usuario As String, ByVal Senha As String)
                ' cria chave com area e usuario
                Try
                    _id = Pagina.Session.SessionID
                    _usuario = Usuario
                    _momento = Now
                    _site = WebConf("site_nome")
                    _senha = Senha
                Catch
                    _id = Nothing
                    _usuario = Nothing
                    _momento = Nothing
                    _site = Nothing
                    _senha = Nothing
                End Try
            End Sub

        End Class

        ''' <summary>
        ''' Classe para tratamento de form icraft.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Form

            ''' <summary>
            ''' Carrega definições obtidas através do gerador.
            ''' </summary>
            ''' <param name="ds">Lista de definições de campos que será retornada.</param>
            ''' <param name="StrGerador">String de conexão com gerador.</param>
            ''' <param name="Sistema">Nome do sistema.</param>
            ''' <param name="Tabela">Nome da tabela desejada.</param>
            ''' <param name="Params">Parâmetros de filtro.</param>
            ''' <remarks></remarks>
            Shared Sub CarregaDef(ByRef ds As DataSet, ByVal StrGerador As String, ByVal Sistema As String, ByVal Tabela As String, ByVal ParamArray Params() As Object)
                If StrGerador <> "" And Sistema <> "" And Tabela <> "" Then
                    Dim Pos As Integer = InStr(Tabela, ".")
                    If Pos <> 0 Then
                        Tabela = Mid(Tabela, Pos + 1)
                    End If


                    ' lendo também definições de tabela
                    Try
                        Dim dstab As DataSet = DSCarrega("SELECT ETIQ, DESCR, PROP_EXTEND, CHAVE_PRIMA, CLASSE, CHAVE_APRES, DEPENDE, INTERFERE, CHAVE_FILTRO FROM GER_TABELA WHERE SISTEMA=:SISTEMA AND TABELA=:TABELA", StrGerador, ":SISTEMA", Sistema, ":TABELA", Tabela, Params)
                        Dim dstabr As DataRow = dstab.Tables(0).Rows(0)
                        ds.ExtendedProperties("Etiq") = NZ(dstabr("ETIQ"), "")
                        ds.ExtendedProperties("Descr") = NZ(dstabr("DESCR"), "")
                        ds.ExtendedProperties("Props") = NZ(dstabr("PROP_EXTEND"), "")
                        ds.ExtendedProperties("Classe") = NZ(dstabr("CLASSE"), "")
                        ds.ExtendedProperties("Depende") = NZ(dstabr("DEPENDE"), "0")
                        ds.ExtendedProperties("Interfere") = NZ(dstabr("INTERFERE"), "0")
                        ds.ExtendedProperties("ChaveFiltro") = NZ(dstabr("CHAVE_FILTRO"), "")
                    Catch ex As Exception
                    End Try


                    Dim dsgera As DataSet = DSCarrega("SELECT CAMPO,ETIQ,DESCR,PROP_EXTEND,FORMATO,TIPO_ORACLE,TIPO_ACCESS,TIPO_MYSQL,AUTO,VALOR_PADRAO,ORDEM FROM GER_CAMPO WHERE SISTEMA=:SISTEMA AND TABELA=:TABELA", StrGerador, ":SISTEMA", Sistema, ":TABELA", Tabela, Params)
                    If dsgera.Tables.Count > 0 AndAlso dsgera.Tables(0).Rows.Count > 0 Then
                        For Each row As DataRow In dsgera.Tables(0).Rows
                            Pos = ds.Tables(0).Columns.IndexOf(row("CAMPO"))
                            If Pos <> -1 Then
                                ds.Tables(0).Columns(Pos).ExtendedProperties("Etiq") = NZ(row("ETIQ"), "")
                                ds.Tables(0).Columns(Pos).ExtendedProperties("Descr") = NZ(row("DESCR"), "")
                                ds.Tables(0).Columns(Pos).ExtendedProperties("Props") = NZ(row("PROP_EXTEND"), "")
                                ds.Tables(0).Columns(Pos).ExtendedProperties("Formato") = NZ(row("FORMATO"), "")
                                ds.Tables(0).Columns(Pos).ExtendedProperties("Auto") = NZ(row("AUTO"), "")
                                ds.Tables(0).Columns(Pos).ExtendedProperties("ValorPadrao") = NZ(row("VALOR_PADRAO"), "")
                                ds.Tables(0).Columns(Pos).ExtendedProperties("Ordem") = NZ(row("ORDEM"), 0)

                                ds.Tables(0).Columns(Pos).ExtendedProperties("Conjunto") = NZ(DSValor("CONJUNTO", "GER_CAMPO", StrGerador, "SISTEMA=:SISTEMA AND TABELA=:TABELA AND CAMPO=:CAMPO", ":SISTEMA", Sistema, ":TABELA", Tabela, ":CAMPO", row("CAMPO")), "")

                                Dim Tipo As String = Microsoft.VisualBasic.Switch(NZ(row("TIPO_ORACLE"), "") <> "", row("TIPO_ORACLE"), NZ(row("TIPO_ACCESS"), "") <> "", row("TIPO_ACCESS"), True, row("TIPO_MYSQL"))
                                Dim Tam As Integer = 0
                                If Tipo <> "" Then
                                    ds.Tables(0).Columns(Pos).ExtendedProperties("Tamanho") = RegexGroup(Tipo, ".*(VARCHAR2|VARCHAR|CHAR|TEXT).*\((.*)\)", 2).Value
                                Else
                                    ds.Tables(0).Columns(Pos).ExtendedProperties("Tamanho") = ""
                                End If
                            End If
                        Next
                    End If
                End If
            End Sub

            ''' <summary>
            ''' Uma das formas de carga de registro, considerando seu conteúdo.
            ''' </summary>
            ''' <param name="ListaControles">Lista de controles a serem tratados.</param>
            ''' <param name="Prefixo">Prefixo dos campos a serem preenchidos.</param>
            ''' <param name="Registros">Dataset contendo registros a serem pesquisados.</param>
            ''' <param name="Registro">Número do registro a ser apresentado.</param>
            ''' <param name="SomenteEstrut">Obtenção somente da estrutura.</param>
            ''' <param name="Params">Parâmetros para filtro das opções de registro.</param>
            ''' <remarks></remarks>
            Overloads Shared Sub CarregaReg(ByRef ListaControles As Object, ByVal Prefixo As String, ByRef Registros As Object, ByRef Registro As Object, ByVal SomenteEstrut As Boolean, ByVal ParamArray Params() As Object)
                If Not Registros Is Nothing Then

                    ' trata origem
                    Dim DV As DataView = Nothing

                    If Registros.GetType.ToString = "System.Data.DataSet" AndAlso CType(Registros, DataSet).Tables.Count = 1 Then
                        DV = CType(Registros, DataSet).Tables(0).DefaultView
                    ElseIf Registros.GetType.ToString = "System.Data.DataView" Then
                        DV = CType(Registros, DataView)
                    End If

                    ' busca registro
                    Dim Row As DataRowView = Nothing
                    If Not IsNothing(Registro) Then
                        If Registro.GetType.ToString = "System.Data.DataRowView" Then
                            Row = CType(Registro, DataRowView)
                        ElseIf Registro.GetType.ToString = "System.Int32" AndAlso Not IsNothing(DV) AndAlso DV.Count > CType(Registro, Integer) Then
                            Row = DV.Item(CType(Registro, Integer))
                        End If
                    End If

                    ' atualiza controles na tela
                    For Each Ctl As Object In Controles(ListaControles, Prefixo)
                        Dim NomeControle As String = NZ(Controle.Origem(Ctl), "")
                        If NomeControle = "" Then
                            NomeControle = ObtemIdentif(Ctl).Substring(Len(Prefixo))
                        End If

                        If Not IsNothing(DV) AndAlso NZ(Controle.Tipo(Ctl), "") = "" Then
                            Controle.Tipo(Ctl) = DV.Table.Columns(NomeControle).DataType.ToString
                        End If
                        If Not SomenteEstrut Then

                            If IsNothing(Row) Then
                                Controle.ValorAtual(Ctl, True) = ""
                                Controle.ValorAnterior(Ctl) = Controle.ValorAtual(Ctl)
                            Else
                                Try
                                    Dim Formato As String = Controle.Mascara(Ctl)
                                    Controle.ValorAtual(Ctl) = Row(NomeControle)
                                    Controle.ValorAnterior(Ctl) = Row(NomeControle)
                                Catch ex As ArgumentException
                                    Controle.ValorAtual(Ctl, True) = ""
                                    Controle.ValorAnterior(Ctl) = Controle.ValorAtual(Ctl)
                                End Try
                            End If
                        End If
                    Next

                End If
            End Sub

            ''' <summary>
            ''' Uma das opções de carga de registros em campos.
            ''' </summary>
            ''' <param name="ListaControles">Lista de controles.</param>
            ''' <param name="Prefixo">Prefixo dos controles desejados.</param>
            ''' <param name="SelectOuTabela">Select ou nome da tabela a ser pesquisa.</param>
            ''' <param name="Filtro">Filtro para composição do SQL de pesquisa.</param>
            ''' <param name="STRCONN">Conexão para pesquisa das informações.</param>
            ''' <param name="Params">Parâmetros de filtro para pesquisa.</param>
            ''' <returns>Dataset obtido mediante SQL resultante do SelectouTabela, Filtro e Params.</returns>
            ''' <remarks></remarks>
            Public Overloads Shared Function CarregaReg(ByVal ListaControles As Object, ByVal Prefixo As String, ByVal SelectOuTabela As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As DataSet
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)

                Dim Ignora As String = ";" & MacroSubstSQLText("[:VALOR.IGNORA_CAMPOS]", ListaParametros, ":IGNORA_CAMPOS", "") & ";"

                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)
                Dim SQL As String
                If Not SelectOuTabela.StartsWith("SELECT", StringComparison.OrdinalIgnoreCase) Then
                    SQL = ""
                    For Each campo As String In Campos(ListaControles, Prefixo)
                        If InStr(Ignora, ";" & campo & ";") = 0 Then
                            SQL &= IIf(SQL <> "", ", ", "") & campo
                        End If
                    Next
                    SQL = "SELECT " & SQL & " FROM " & SelectOuTabela & IIf(Filtro <> "", " WHERE " & Filtro, "")
                Else
                    SQL = SelectOuTabela & IIf(Filtro <> "", " WHERE " & Filtro, "")
                End If

                Dim ds As DataSet = DSCarrega(SQL, ConnW, ListaParametros)
                If ds.Tables(0).Rows.Count = 0 Then
                    ds = DSCarregaEstrut(SQL, ConnW)
                ElseIf ds.Tables(0).Rows.Count > 1 Then
                    Dim sqlerr As String = ""
                    For Each row As DataRow In ds.Tables(0).Rows
                        Try
                            sqlerr &= vbCrLf
                            sqlerr &= row(1) & " "
                            sqlerr &= row(2) & " "
                            sqlerr &= row(3) & " "
                        Catch
                        End Try
                    Next
                    Err.Raise(20000, "Icraft.CarregaReg", "edição de registro único chamada com recordset contendo mais uma linha" & sqlerr)
                End If

                CarregaReg(ListaControles, Prefixo, ds, 0, False)
                Return ds
            End Function

            ''' <summary>
            ''' Exclusão de registro.
            ''' </summary>
            ''' <param name="ListaControles">Lista de controles.</param>
            ''' <param name="Prefixo">Prefixo dos controles considerados.</param>
            ''' <param name="DeleteOuTabela">SQL de deleção ou tabela.</param>
            ''' <param name="Filtro">Filtro adicional caso exista.</param>
            ''' <param name="STRCONN">Nome da conexão.</param>
            ''' <param name="Params">Parâmetros para filtro.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Shared Function ExcluiReg(ByVal ListaControles As Object, ByVal Prefixo As String, ByVal DeleteOuTabela As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As Integer
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

                ' pega string a partir do FROM
                Dim SQLTot As String = ExprSQL(DeleteOuTabela, "", Filtro, , ExprSQLTipo.Sel)
                Dim SQLDel As String = ExprSQL(DeleteOuTabela, "", Filtro, , ExprSQLTipo.Del)
                Dim TOT As Integer = DSValor("COUNT(*)", SQLTot, ConnW, "", ListaParametros)
                DSGrava(SQLDel, ConnW, ListaParametros)
                Return TOT - DSValor("COUNT(*)", SQLTot, ConnW, "", ListaParametros)
            End Function



            ''' <summary>
            ''' Gravação de registro para formulário.
            ''' </summary>
            ''' <param name="ListaControles">Opções de campos a serem pesquisados.</param>
            ''' <param name="Prefixo">Prefixo dos campos a serem pesquisados.</param>
            ''' <param name="SqlOuTabela">SQL ou tabela onde ocorrerá o registro.</param>
            ''' <param name="Filtro">Filtro adicional caso necessário.</param>
            ''' <param name="STRCONN">Nome de conexão para registro.</param>
            ''' <param name="Params">Parâmetros adicionais para registro.</param>
            ''' <returns>TRUE caso registro ocorra satisfatoriamente ou FALSE caso contrário.</returns>
            ''' <remarks></remarks>
            Public Shared Function GravaReg(ByVal ListaControles As Object, ByVal Prefixo As String, ByVal SqlOuTabela As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As Boolean
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

                Dim ListaParametrosTextosGrandes As ArrayList = New ArrayList
                Dim ParametrosCamposChaves As ArrayList = ParamArrayToArrayList(Params)
                Dim VerificaTextoGrande As Boolean = False
                Dim GravaTextoGrande As Boolean = False

                Dim SQL As String = ""
                Dim UPD_SETS As String = "", INS_CAMPOS As String = "", INS_VALS As String = ""

                If Not (SqlOuTabela.StartsWith("INSERT", StringComparison.OrdinalIgnoreCase) Or SqlOuTabela.StartsWith("UPDATE", StringComparison.OrdinalIgnoreCase) Or SqlOuTabela.StartsWith("DELETE", StringComparison.OrdinalIgnoreCase)) Then

                    ' caso não seja sql, é tabela e precisamos complementar com campos
                    For Each ctl As Control In Controles(ListaControles, Prefixo)
                        If NZV(Prop(ctl, "GRAVAR"), True) Then

                            Dim NomeControle As String = ctl.ID.Substring(Len(Prefixo))
                            Try
                                If Not ListaParametros.Contains(":" & NomeControle) Then
                                    VerificaTextoGrande = False
                                    Dim Conteudo As Object = Controle.ValorAtual(ctl)

                                    If Conteudo.GetType.ToString <> "System.DBNull" Then
                                        If Regex.Match(ctl.ToString, "(?is)icfttextarea|icftfwebbrow").Success Then
                                            If Controle.ValorAtual(ctl).Length > ClobBufferTamMax Then
                                                'Valor
                                                ListaParametrosTextosGrandes.Add(Conteudo)
                                                'Campo
                                                ListaParametrosTextosGrandes.Add(NomeControle)
                                                VerificaTextoGrande = True
                                                GravaTextoGrande = True
                                            Else
                                                ListaParametros.Add(":" & NomeControle)
                                                ListaParametros.Add(Conteudo)
                                            End If
                                        Else
                                            ListaParametros.Add(":" & NomeControle)
                                            ListaParametros.Add(Conteudo)
                                        End If
                                    Else
                                        ListaParametros.Add(":" & NomeControle)
                                        ListaParametros.Add(Conteudo)
                                    End If

                                    ' prepara para qualquer operação padrão em tabela insert update ou delete
                                    If Not VerificaTextoGrande Then
                                        UPD_SETS &= IIf(UPD_SETS <> "", ", ", "") & NomeControle & " = :" & NomeControle
                                    End If

                                End If
                                If Not VerificaTextoGrande Then
                                    INS_CAMPOS &= IIf(INS_CAMPOS <> "", ", ", "") & NomeControle
                                    INS_VALS &= IIf(INS_VALS <> "", ", ", "") & ":" & NomeControle
                                End If
                            Catch EX As Exception
                                Throw New Exception(EX.Message & " em " & NomeControle)
                            End Try
                        End If
                    Next

                    ' se não exista, inclui. caso contrário, altera
                    If DSValor("COUNT(*)", SqlOuTabela, ConnW, Filtro, Params) > 0 Then
                        SQL = "UPDATE " & SqlOuTabela & " SET " & UPD_SETS & " " & IIf(Filtro <> "", " WHERE " & Filtro, "")
                    Else
                        SQL = "INSERT INTO " & SqlOuTabela & " (" & INS_CAMPOS & ") VALUES (" & INS_VALS & ")"
                    End If
                Else
                    SQL = SqlOuTabela & IIf(Filtro <> "", " WHERE " & Filtro, "")
                End If


                DSGrava(SQL, ConnW, ListaParametros)

                If GravaTextoGrande Then
                    If String.Compare(ConnW.ProviderName, Oracle, True) = 0 Then
                        ClobGrava(ListaParametrosTextosGrandes.Item(0), ListaParametrosTextosGrandes.Item(1), SqlOuTabela, Filtro, StrConn, ParametrosCamposChaves)
                    End If
                End If

                Return True
            End Function

            ''' <summary>
            ''' Gravação de registro sem estrutura para formulário.
            ''' </summary>
            ''' <param name="ConnStr">String de Conexão.</param>
            ''' <param name="EsquemaTabela">Esquema do banco de dados das tabelas.</param>
            ''' <param name="Filtro">Filtro desejado.</param>
            ''' <param name="Ar">Array com parâmetros.</param>
            ''' <remarks></remarks>
            Public Shared Sub GravaRegSemEstrut(ByVal ConnStr As Object, ByVal EsquemaTabela As String, ByVal Filtro As String, ByVal ParamArray Ar As Object())
                Dim QtdCampos As Integer = 0
                Dim Estrut As System.Data.DataSet = Nothing

                Try
NOVAMENTE:
                    If Filtro = "" Then
                        Filtro = "1=2"
                    End If
                    Dim Ar2 As ArrayList = Icraft.IcftBase.ParamArrayToArrayList(Ar)
                    Dim Qtd As Integer = Icraft.IcftBase.DSValor("COUNT(*)", EsquemaTabela, ConnStr, Filtro, Ar)
                    Dim CAMPOS As String = ""
                    Dim VALORES As String = ""
                    Dim DEFS As String = ""
                    Dim PARAMS As New ArrayList
                    For z As Integer = 0 To Ar2.Count - 1 Step 2
                        Dim CAMPO As String = Mid(Ar2(z), 2)
                        CAMPOS &= IIf(CAMPOS <> "", ", ", "") & CAMPO
                        VALORES &= IIf(VALORES <> "", ", ", "") & ":" & CAMPO
                        DEFS &= IIf(DEFS <> "", ", ", "") & CAMPO & " = :" & CAMPO
                    Next
                    Dim Coma As String = ""
                    If Qtd = 0 Then
                        Coma = "INSERT INTO " & EsquemaTabela & "(" & CAMPOS & ") VALUES (" & VALORES & ")"
                    Else
                        Coma = "UPDATE " & EsquemaTabela & " SET " & DEFS & " WHERE " & Filtro
                    End If
                    Icraft.IcftBase.DSGrava(Coma, ConnStr, Ar2)
                    If QtdCampos <> 0 AndAlso QtdCampos < Estrut.Tables(0).Columns.Count Then
                        QtdCampos += 1
                        GoTo NOVAMENTE
                    End If
                Catch EX As Exception
                    If QtdCampos = 0 Then
                        QtdCampos = 2
                        GoTo NOVAMENTE
                    End If
                    Dim ColN As String = ""
                    Try
                        If Not IsNothing(Estrut) Then
                            ColN = Estrut.Tables(0).Columns(QtdCampos - 1).ColumnName
                        End If
                    Catch
                    End Try
                    Throw New Exception(EX.Message & IIf(ColN <> "", " - " & ColN, ""))
                End Try
            End Sub

            ''' <summary>
            ''' Inclusão de registro com base em formulário.
            ''' </summary>
            ''' <param name="ListaControles">Opções de campos a serem pesquisados.</param>
            ''' <param name="Prefixo">Prefixo dos campos a serem pesquisados.</param>
            ''' <param name="SqlOuTabela">SQL ou tabela onde ocorrerá o registro.</param>
            ''' <param name="Filtro">Filtro adicional caso necessário.</param>
            ''' <param name="STRCONN">Nome de conexão para registro.</param>
            ''' <param name="Params">Parâmetros adicionais para registro.</param>
            ''' <returns>TRUE caso registro ocorra satisfatoriamente ou FALSE caso contrário.</returns>
            ''' <remarks></remarks>
            Public Shared Function IncluiReg(ByVal ListaControles As Object, ByVal Prefixo As String, ByVal SqlOuTabela As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As Boolean
                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)
                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)

                Dim SQL As String = ""
                Dim INS_CAMPOS As String = "", INS_VALS As String = ""

                ' caso não seja sql, é tabela e precisamos complementar com campos
                For Each ctl As Control In Controles(ListaControles, Prefixo)
                    Dim NomeControle As String = ctl.ID.Substring(Len(Prefixo))
                    If Not ListaParametros.Contains(":" & NomeControle) Then
                        ListaParametros.Add(":" & NomeControle)
                        ListaParametros.Add(Controle.ValorAtual(ctl))

                        ' prepara para qualquer operação padrão em tabela insert update ou delete
                    End If
                    INS_CAMPOS &= IIf(INS_CAMPOS <> "", ", ", "") & NomeControle
                    INS_VALS &= IIf(INS_VALS <> "", ", ", "") & ":" & NomeControle
                Next

                SQL = "INSERT INTO " & SqlOuTabela & " (" & INS_CAMPOS & ") VALUES (" & INS_VALS & ")"
                DSGrava(SQL, ConnW, ListaParametros)
                Return True
            End Function

            ''' <summary>
            ''' Alteração de registro com base em formulário.
            ''' </summary>
            ''' <param name="ListaControles">Opções de campos a serem pesquisados.</param>
            ''' <param name="Prefixo">Prefixo dos campos a serem pesquisados.</param>
            ''' <param name="SqlOuTabela">SQL ou tabela onde ocorrerá o registro.</param>
            ''' <param name="Chave">Especificação de chave anterior para troca.</param>
            ''' <param name="Filtro">Filtro adicional caso necessário.</param>
            ''' <param name="STRCONN">Nome de conexão para registro.</param>
            ''' <param name="Params">Parâmetros adicionais para registro.</param>
            ''' <returns>TRUE caso registro ocorra satisfatoriamente ou FALSE caso contrário.</returns>
            ''' <remarks></remarks>
            Public Shared Function AlteraReg(ByVal ListaControles As Object, ByVal Prefixo As String, ByVal SqlOuTabela As String, ByVal Chave As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As Boolean

                Dim ListaParametrosTextosGrandes As ArrayList = New ArrayList

                Dim ListaParametros As ArrayList = ParamArrayToArrayList(Params)

                Dim ConnW As System.Configuration.ConnectionStringSettings = StrConnObj(StrConn, ListaParametros)



                Dim SQL As String = ""

                Dim UPD_SETS As String = ""



                Dim NovoFiltro As String = ""



                ' caso não seja sql, é tabela e precisamos complementar com campos

                For Each ctl As Control In Controles(ListaControles, Prefixo)

                    Dim NomeControle As String = ctl.ID.Substring(Len(Prefixo))

                    Dim Grava As Boolean = False

                    If Array.IndexOf(Chave.Split(";"), NomeControle) <> -1 Then

                        If Controle.ValorAtual(ctl) <> Controle.ValorAnterior(ctl) Then

                            Grava = True

                        End If

                    ElseIf Not ListaParametros.Contains(":" & NomeControle) Then

                        Grava = True

                    End If



                    If Grava Then

                        Dim Dados As Object = Controle.ValorAtual(ctl)

                        If TypeOf Dados Is String AndAlso Len(Dados) > ClobBufferTamMax Then

                            'Valor

                            ListaParametrosTextosGrandes.Add(Dados)

                            'Campo

                            ListaParametrosTextosGrandes.Add(NomeControle)

                        Else

                            NovoFiltro &= IIf(NovoFiltro <> "", " AND ", "") & NomeControle & " = :" & NomeControle

                            UPD_SETS &= IIf(UPD_SETS <> "", ", ", "") & NomeControle & " = :" & NomeControle

                            ListaParametros.Add(":" & NomeControle)

                            ListaParametros.Add(Dados)

                        End If

                    End If

                Next

                SQL = "UPDATE " & SqlOuTabela & " SET " & UPD_SETS & " " & IIf(Filtro <> "", " WHERE " & Filtro, "")

                DSGrava(SQL, ConnW, ListaParametros)

                If ListaParametrosTextosGrandes.Count > 0 Then

                    For z As Integer = 0 To ListaParametrosTextosGrandes.Count - 1 Step 2

                        ClobGrava(ListaParametrosTextosGrandes.Item(z), ListaParametrosTextosGrandes.Item(z + 1), SqlOuTabela, Filtro, StrConn, ListaParametros)

                    Next

                End If

                Return True

            End Function
            ''' <summary>
            ''' Busca por controles em um container.
            ''' </summary>
            ''' <param name="Container">Recebe o container que será efetuada a busca.</param>
            ''' <param name="Prefixos">Tipos de prefixos que serão utilizados na busca.</param>
            ''' <param name="JaVerificado">Armazena os itens que já foram verificados.</param>
            ''' <returns>Retorna os controles a partir de um container</returns>
            ''' <remarks></remarks>
            Public Shared Function Controles(ByVal Container As Object, ByVal Prefixos As String, ByRef JaVerificado As ArrayList) As Object
                Dim Lista As New ArrayList
                If IsNothing(JaVerificado) Then
                    JaVerificado = New ArrayList
                End If
                If Not TemNaLista(JaVerificado, Container.UniqueID) Then
                    JaVerificado.Add(Container.UniqueId)
                    Dim Id As String = NZ(Container.ID, "")

                    Dim Achou As Boolean = False
                    For Each Item As String In Split(Prefixos, ";")
                        If Id.StartsWith(Item, StringComparison.OrdinalIgnoreCase) Then
                            Achou = True
                            Exit For
                        End If
                    Next
                    If Achou Then
                        Lista.Add(Container)
                    End If
                    Dim SubControls As Integer = 0
                    Try
                        SubControls = Container.controls.count
                    Catch
                    End Try
                    If SubControls > 0 Then
                        For Each Ctl As Object In Container.Controls
                            If Not TemNaLista(JaVerificado, Ctl.UNIQUEID) Then
                                CopiaItens(Lista, Controles(Ctl, Prefixos, JaVerificado))
                            End If
                        Next
                    End If
                End If
                Return Lista
            End Function

            ''' <summary>
            ''' Busca os controles do container pelo nome.
            ''' </summary>
            ''' <param name="Container">Recebe o container que será utilizado na busca.</param>
            ''' <param name="Prefixo">Recebe o prefixo nome</param>
            ''' <returns>Retorna os controles do container baseando-se no prefixo do nome.</returns>
            ''' <remarks></remarks>
            Public Shared Function Controles(ByVal Container As Object, ByVal Prefixo As String) As Object
                Dim Lista As New ArrayList
                For Each Opcoes As Object In Containers(Container)
                    Dim Opc As Object = Nothing
                    If TypeOf Opcoes Is Web.UI.ControlCollection Or TypeOf Opcoes Is System.Windows.Forms.Form.ControlCollection Then
                        Opc = Opcoes
                    Else
                        Opc = Opcoes.Controls
                    End If
                    For Each Controle As Object In Opc
                        For Each Pref As String In Split(Prefixo, ";")
                            If NZ(Prop(Controle, "ID"), "").StartsWith(Pref, StringComparison.OrdinalIgnoreCase) Then
                                Lista.Add(Controle)
                            End If
                        Next
                    Next
                Next
                Return Lista
            End Function

            ''' <summary>
            ''' Conteúdo dos controles para registro em texto em algum local.
            ''' </summary>
            ''' <param name="Container">Container onde está os controles.</param>
            ''' <param name="Prefixo">Prefixo a ser pesquisado.</param>
            ''' <param name="Atribs">Atributos adicionais.</param>
            ''' <value>Definição de conteúdo a ser atribuída aos controles.</value>
            ''' <returns>Definição de conteúdo obtida a partir dos controles.</returns>
            ''' <remarks></remarks>
            Public Shared Property Conteudo(ByVal Container As Object, ByVal Prefixo As String, Optional ByVal Atribs As String = "") As Object
                Get
                    Dim Elems As ElementosStr
                    Elems = New ElementosStr("")
                    For Each Pref As String In Split(Prefixo, ";")
                        For Each ctl As Object In Form.Controles(Container, Pref)
                            Elems.Items(-1) = New ElementoStr(Prop(ctl, "ID") & ":" & ItemEncode(NZ(Prop(ctl), "")))
                            If Atribs <> "" Then
                                For Each Atrib As String In Split(Atribs, ";")
                                    Elems.Items(-1) = New ElementoStr(Prop(ctl, "ID") & "|" & Atrib & ":" & ItemEncode(Prop(ctl, Atrib)))
                                Next
                            End If
                        Next
                    Next
                    Return Elems.ToString
                End Get
                Set(ByVal value As Object)
                    Dim Elems As ElementosStr
                    Elems = New ElementosStr(NZ(value, ""))
                    For Each Pref As String In Split(Prefixo, ";")
                        For Each ctl As Object In Form.Controles(Container, Pref)
                            Prop(ctl) = ItemDecode(Elems(Prop(ctl, "ID")).Conteudo)
                            If Atribs <> "" Then
                                For Each Atrib As String In Split(Atribs, ";")
                                    Dim conteudo As Object = Elems(Prop(ctl, "ID") & "|" & Atrib).Conteudo
                                    Prop(ctl, Atrib) = ItemDecode(conteudo)
                                Next
                            End If
                        Next
                    Next
                End Set
            End Property

            ''' <summary>
            ''' Retorna Numero em Hexadecimal
            ''' </summary>
            ''' <param name="B">Vetor de bytes.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Shared Function Hexa(ByVal B() As Byte) As String
                Dim Ret As String = ""
                For z As Integer = 0 To B.Count - 1
                    Ret &= Microsoft.VisualBasic.Right("00" & Hex(B(z)), 2)
                Next
                Return LCase(Ret)
            End Function

            ''' <summary>
            ''' Criptografa usando MD5 um texto.
            ''' </summary>
            ''' <param name="Texto">Texto a ser criptografado.</param>
            ''' <returns>Texto criptografado.</returns>
            ''' <remarks></remarks>
            Public Shared Function MD5(ByVal Texto As String) As String
                Return Hexa(System.Security.Cryptography.MD5.Create().ComputeHash(System.Text.Encoding.UTF8.GetBytes(Texto)))
            End Function

            ''' <summary>
            ''' Busca Controle a partir do container informado, procurando também em todos os filhos. Utilizar FINDCONTROLESPECIAL para encontrar controle também em Paineis.
            ''' </summary>
            ''' <param name="Container">Objeto a partir do qual a busca será iniciada.</param>
            ''' <param name="Nome">Nome do contrle a ser procurado.</param>
            ''' <returns>Retorna o controle caso seja encontrado entre as dependências do CONTAINER ou NOTHING se o contrário.</returns>
            ''' <remarks>Utilizar FINDGERAL para buscar entre os filhos e pais do container.</remarks>
            Shared Function FindControl(ByVal Container As Object, ByVal Nome As String, Optional ByVal NaoProcurarEm As ArrayList = Nothing) As Object
                For Each Opcao As Object In Containers(Container)
                    ' findcontrol comum não encontrava itens em paineis
                    ' troquei por findcontrolespecial <<

                    If Not IsNothing(NaoProcurarEm) AndAlso NaoProcurarEm.Contains(NaoProcurarEm) Then
                        ' se existe a lista e obj está nesta lista, não procurar neste objeto
                    Else
                        Dim Ctl As Object = FindControlEspecial(Opcao, Nome)
                        If Not IsNothing(Ctl) Then
                            Return Ctl
                        End If
                    End If
                Next
                Return Nothing
            End Function

            ''' <summary>
            ''' Busca controle tanto nos filhos como nos pais. Começa procurando entre os filhos e, depois, vai subindo até o topo.
            ''' </summary>
            ''' <param name="Container">Objeto a partir do qual a procura se inicia. Filhos deste terão a prioridade.</param>
            ''' <param name="Nome">Nome do controle a ser procurado.</param>
            ''' <param name="NaoProcurarEm">Lista negra. Objetos que estiverem esta lista serão evitados.</param>
            ''' <returns>Retorna controle ou NOTHING caso a busca não tenha sucesso.</returns>
            ''' <remarks></remarks>
            Shared Function FindGeral(ByVal Container As Object, ByVal Nome As String, Optional ByVal NaoProcurarEm As ArrayList = Nothing) As Object
                Dim Obj As Object = Container
                Dim JaProcurados As ArrayList = New ArrayList
                Do While Not IsNothing(Obj)
                    Dim Ctl As Object = Form.FindControl(Obj, Nome, JaProcurados)
                    If Not IsNothing(Ctl) Then
                        Return Ctl
                    End If
                    JaProcurados.Add(Obj)
                    Obj = Obj.Parent
                Loop
                Return Nothing
            End Function

            ''' <summary>
            ''' Busca por um tipo específico em uma Raiz.
            ''' </summary>
            ''' <param name="Raiz">A raiz que será utilizada na busca.</param>
            ''' <param name="Tipos">O tipo que será pesquisado.</param>
            ''' <returns>Retorna o resultado da busca.</returns>
            ''' <remarks></remarks>
            Shared Function BuscaTipo(ByVal Raiz As Object, ByVal ParamArray Tipos() As Object) As Object
                Return BuscaTipo(Raiz, False, Nothing, Tipos)
            End Function

            ''' <summary>
            ''' Busca por um tipo específico em uma Raiz, considerando apenas o primeiro tipo.
            ''' </summary>
            ''' <param name="Raiz">A raiz que será utilizada na busca.</param>
            ''' <param name="Tipos">O tipo que será pesquisado.</param>
            ''' <returns>Retorna o resultado da busca.</returns>
            ''' <remarks></remarks>
            Shared Function BuscaPrimeiroTipo(ByVal Raiz As Object, ByVal ParamArray Tipos() As Object) As Object
                Dim Obj As Object = BuscaTipo(Raiz, True, Nothing, Tipos)
                If Obj.count > 0 Then
                    Return Obj(0)
                End If
                Return Nothing
            End Function

            ''' <summary>
            ''' Busca por um tipo específico a partir da Raiz.
            ''' </summary>
            ''' <param name="Raiz">Recebe a raiz que será utilizada na busca.</param>
            ''' <param name="PararNoPrimeiro">Define onde a busca deverá parar.</param>
            ''' <param name="JaVerificado">Guarda informação sobre itens já verificados.</param>
            ''' <param name="Tipos">Define os tipos de controle.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Shared Function BuscaTipo(ByVal Raiz As Object, ByVal PararNoPrimeiro As Boolean, ByRef JaVerificado As ArrayList, ByVal ParamArray Tipos() As Object) As Object
                Dim TiposG As ArrayList = ParamArrayToArrayList(Tipos)
                Dim Lista As New ArrayList
                If IsNothing(JaVerificado) Then
                    JaVerificado = New ArrayList
                End If

                If Not TemNaLista(JaVerificado, Raiz.UNIQUEID) Then
                    JaVerificado.Add(Raiz.UNIQUEID)
                    ' caso seja uma coleção
                    Dim Controles As Object = Nothing
                    Dim Achou As Boolean = False
                    For Each Tipo As Object In TiposG
                        If TypeOf Tipo Is String Then
                            If Raiz.GetType.ToString = Tipo Then
                                Achou = True
                                Exit For
                            End If
                        Else
                            If Raiz.GetType Is Tipo Then
                                Achou = True
                                Exit For
                            End If
                        End If
                    Next
                    If Achou Then
                        Lista.Add(Raiz)
                        If PararNoPrimeiro Then
                            Return Lista
                        End If

                    End If

                    ' caso tenha subcontroles
                    Dim SubControls As Integer = 0
                    Try
                        SubControls = Raiz.controls.count
                    Catch
                    End Try
                    If SubControls > 0 Then
                        For Each Ctl As Object In Raiz.Controls
                            If Not TemNaLista(JaVerificado, Ctl.UNIQUEID) Then
                                CopiaItens(Lista, BuscaTipo(Ctl, PararNoPrimeiro, JaVerificado, Tipos))
                                If Lista.Count > 0 And PararNoPrimeiro Then
                                    Return Lista
                                End If
                            End If
                        Next
                    End If
                End If
                Return Lista
            End Function


            ''' <summary>
            ''' Obtém lista de controlcollections existentes entre as dependências da Raíz.
            ''' </summary>
            ''' <param name="Raiz">Objeto a partir da qual a busca se iniciará.</param>
            ''' <returns>Retorna uma coleção de Controles ou ControlCollections existentes a partir da raíz sendo a busca recursiva.</returns>
            ''' <remarks></remarks>
            Shared Function Containers(ByVal Raiz As Object) As Object
                Dim Lista As New ArrayList

                ' caso seja uma coleção
                Dim Controles As Object = Nothing
                If TypeOf Raiz Is Web.UI.ControlCollection OrElse TypeOf Raiz Is System.Windows.Forms.Form.ControlCollection Then
                    If Raiz.Count > 0 Then
                        Lista.Add(Raiz)

                        For Each ctl As Control In Raiz
                            CopiaItens(Lista, Containers(ctl))
                        Next
                    End If
                Else

                    ' caso tenha subcontroles
                    Dim SubControls As Integer = 0
                    Try
                        SubControls = Raiz.controls.count
                    Catch
                    End Try
                    If SubControls > 0 Then
                        Lista.Add(Raiz) 'controlcollection 
                        For Each Ctl As Object In Raiz.Controls
                            CopiaItens(Lista, Containers(Ctl))
                        Next
                    End If
                End If
                Return Lista
            End Function

            ''' <summary>
            ''' Obtenção de arraylist contendo nomes dos campos conforme prefixo.
            ''' </summary>
            ''' <param name="Container">Container onde ocorre a pesquisa.</param>
            ''' <param name="Prefixo">Prefixo pesquisado.</param>
            ''' <returns>Arraylist contendo nomes dos campos.</returns>
            ''' <remarks></remarks>
            Shared Function Campos(ByVal Container As Object, ByVal Prefixo As String) As ArrayList
                Dim Lista As ArrayList = New ArrayList
                For Each Ctl As Control In Controles(Container, Prefixo)
                    Lista.Add(Prop(Ctl, "ID").Substring(Len(Prefixo)))
                Next
                Return Lista
            End Function
        End Class

        ''' <summary>
        ''' Classe para facilitar acesso aos controles.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Controle

            ''' <summary>
            ''' Verifica se valor do controle mudou comparando antigo com atual.
            ''' </summary>
            ''' <param name="Controle">Controle.</param>
            ''' <returns>True caso tenha sido alterado e false caso contrário.</returns>
            ''' <remarks></remarks>
            Shared Function Mudou(ByVal Controle As Control) As Boolean
                Return NZV(ValorAnterior(Controle), "") <> NZV(CampoParaControle(ValorAtual(Controle), Controle), "")
            End Function


            ''' <summary>
            ''' Avalia se controle possui conteúdo vazio/nulo/nothing ou similar.
            ''' </summary>
            ''' <param name="Ctl">Controle pesquisado.</param>
            ''' <value>TRUE se conteúdo vazio ou FALSE caso não.</value>
            ''' <returns>TRUE se conteúdo vazio ou FALSE caso não.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property EraNulo(ByVal Ctl As Object) As Boolean
                Get
                    Return IsDBNull(ValorAnterior(Ctl))
                End Get
            End Property

            ''' <summary>
            ''' Armazena os Valores de controle que poderão ser utilizados posteriormente.
            ''' </summary>
            ''' <param name="Ctl">Objetos de controle.</param>
            ''' <value>Valores que serão armazenados.</value>
            ''' <remarks></remarks>
            Shared WriteOnly Property Valores(ByVal Ctl As Object) As Object
                Set(ByVal value As Object)
                    ValorAnterior(Ctl) = value
                    ValorAtual(Ctl) = value
                    ValorPadrao(Ctl) = value
                End Set
            End Property

            ''' <summary>
            ''' Acesso ao valor anterior daquele controle, registrado como atributo.
            ''' </summary>
            ''' <param name="Ctl">Controle pesquisado.</param>
            ''' <value>Valor anterior a ser definido.</value>
            ''' <returns>Valor anterior obtido.</returns>
            ''' <remarks></remarks>
            Shared Property ValorAnterior(ByVal Ctl As Object) As Object
                Get
                    Return Prop(Ctl, "ValorAnterior")
                End Get
                Set(ByVal value As Object)
                    Prop(Ctl, "ValorAnterior") = CampoParaControle(value, Ctl)
                End Set
            End Property

            ''' <summary>
            ''' Pesquisa de valor atual do controle.
            ''' </summary>
            ''' <param name="ctl">Controle pesquisado.</param>
            ''' <param name="RegNovo">TRUE caso seja registro novo (conteúdo anterior inexistente, é claro!).</param>
            ''' <value>Valor atual do controle pesquisado.</value>
            ''' <returns>Valor atual do controle pesquisado.</returns>
            ''' <remarks></remarks>
            Shared Property ValorAtual(ByVal ctl As Object, Optional ByVal RegNovo As Boolean = False) As Object
                Get
                    If (TypeOf (ctl) Is DropDownList OrElse ctl.GetType.ToString = "ASP.uc_icftcombobox_icftcombobox_ascx") AndAlso ctl.text = ComboNull Then
                        Return Convert.DBNull
                    ElseIf TypeOf (ctl) Is System.Windows.Forms.ComboBox AndAlso ctl.text = ComboNull Then
                        Return Convert.DBNull
                    ElseIf Compare(Controle.Auto(ctl), "AUTONUM") And NZV(Prop(ctl, "TEXT"), "[auto]") = "[auto]" Then
                        Return Convert.DBNull
                    ElseIf Compare(Controle.Auto(ctl), "PROXSEQ") And NZV(Prop(ctl, "TEXT"), "[auto]") = "[auto]" Then
                        Return DSProxSeq(Prop(ctl, "campo"), Prop(ctl, "tabela"), Prop(ctl, "STRCONN"), Nothing)
                    ElseIf Compare(Controle.Formato(ctl), "SENHA") Then
                        Return EncrypB(Prop(ctl, "TEXT"))
                    ElseIf TypeOf (ctl) Is RadioButtonList AndAlso CType(ctl, RadioButtonList).SelectedValue = "..." Then
                        Dim Outro As TextBox = Form.FindControl(ctl, ctl.id & "_OUTROS_")
                        If Not IsNothing(Outro) Then
                            Return Outro.Text
                        End If
                    End If
                    Return Valor(ctl, Prop(ctl))
                End Get
                Set(ByVal value As Object)
                    Dim Conteudo As Object = CampoParaControle(value, ctl)

                    ' combobox, tratamento especial: ComboNull, inclui caso não exista e atualiza dependências
                    If TypeOf (ctl) Is DropDownList Then
                        ' se for nulo ou vazio, considera --
                        If NZ(value, "") = "" Then
                            value = ComboNull
                        End If
                        Dim Lista As DropDownList = ctl

                        ' atualiza
                        Prop(Lista) = Conteudo

                        ' caso não tenha na lista, inclui
                        If NZ(Prop(Lista), "") <> NZ(Conteudo, "") Then
                            Lista.Items.Add(value)
                            Prop(Lista) = Conteudo
                        End If

                        ' verifica se existem dependências
                        AtualizouControle(Lista)
                    End If


                    ' para demais controles, atualiza
                    Try
                        If Controle.Auto(ctl) <> "" And NZ(Conteudo, "") = "" Then
                            Prop(ctl) = "[auto]"
                        ElseIf RegNovo And NZ(Conteudo, "") = "" Then
                            Prop(ctl) = OpcPadrao(ctl)
                        Else
                            Prop(ctl) = Conteudo
                        End If
                    Catch
                    End Try
                End Set
            End Property

            ''' <summary>
            ''' Busca por controles baseando-se em hora/data "NOW" ou "IP".
            ''' </summary>
            ''' <param name="Ctl">Controle pesquisado.</param>
            ''' <returns>Retorna os controles com o valor padrão pesquisado, hora/data ou IP.</returns>
            ''' <remarks></remarks>
            Public Shared Function OpcPadrao(ByVal Ctl As Control) As String
                If Compare(Controle.ValorPadrao(Ctl), "[:NOW]") Then
                    Return Format(Now, Controle.Formato(Ctl))
                ElseIf Compare(Controle.ValorPadrao(Ctl), "[:IP]") Then
                    Dim Ret As String = Ctl.Page.Request.UserHostAddress
                    Try
                        Ret &= " (" & Logon(Ctl.Page).Usuario & ")"
                    Catch
                    End Try
                    Return Ret
                End If
                Return Controle.ValorPadrao(Ctl)
            End Function

            ''' <summary>
            ''' Conteúdo atual do controle.
            ''' </summary>
            ''' <param name="Ctl">Controle pesquisado.</param>
            ''' <param name="Texto">Conteúdo caso campo esteja vazio (valor default).</param>
            ''' <value>Valor atual do campo lido ou para definição.</value>
            ''' <returns>Valor atual do campo lido ou para definição.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property Valor(ByVal Ctl As Object, ByVal Texto As Object) As Object
                Get
                    If NZ(Texto, "") = "" Then
                        Return Convert.DBNull
                    End If
                    Dim Tipo As String = NZ(Controle.Tipo(Ctl), "System.String")
                    If Compare(Tipo, "System.Byte[]") Then
                        Return ObjectToByteArray(Texto)
                    ElseIf Compare(Tipo, "System.DateTime") Then

                        ' planejamento de formato das datas
                        ' cada formato deve ser previsto para garantia de retorno correto
                        Dim m As Match = RegexGroup(Texto, "(?<dia>\d{1,2})/(?<mes>\d{1,2})/(?<ano>\d{2,4})(?<compl>$|.*)")
                        If m.Captures.Count > 0 Then
                            Return CType(m.Groups("ano").Value & "-" & m.Groups("mes").Value & "-" & m.Groups("dia").Value & " " & m.Groups("compl").Value, DateTime)
                        End If
                        m = RegexGroup(Texto, "(?<ano>\d{1,4})$")
                        If m.Captures.Count > 0 Then
                            Return CType(m.Groups("ano").Value & "-01-01", DateTime)
                        End If
                        Return CType(Texto, DateTime)
                    ElseIf TypeOf (Ctl) Is DropDownList AndAlso Texto = ComboNull Then
                        Return Convert.DBNull
                    ElseIf TypeOf (Ctl) Is System.Windows.Forms.ComboBox AndAlso Texto = ComboNull Then
                        Return Convert.DBNull
                    End If
                    Return CTypeStr(Texto, Tipo)
                End Get
            End Property

            ''' <summary>
            ''' Prepara conteúdo a ser definido em campo (não define, apenas prepara).
            ''' </summary>
            ''' <param name="Valor">Valor a ser atribuído ao controle.</param>
            ''' <param name="Ctl">Controle que receberá a definição.</param>
            ''' <returns>Conteúdo definido para o controle.</returns>
            ''' <remarks></remarks>
            Shared Function CampoParaControle(ByVal Valor As Object, ByVal Ctl As Object) As String
                If NZ(Valor, "") = "" Then
                    Return ""
                End If
                Dim Tipo As String = Controle.Tipo(Ctl)
                If Compare(Tipo, "System.DateTime") Then
                    Return Format(Valor, Controle.Formato(Ctl))
                ElseIf Compare(Tipo, "System.Byte[]") Then
                    Return NZ(Valor, "")
                ElseIf Compare(Tipo, "System.Boolean") Then
                    Valor = NZ(Valor, "")
                    Return CType(Valor, Boolean)
                End If
                Return CType(Valor, String)
            End Function

            ''' <summary>
            ''' Definição de valor padrão para controle.
            ''' </summary>
            ''' <param name="ctl">Controle tratado para valor padrão.</param>
            ''' <value>Valor padrão do controle.</value>
            ''' <returns>Valor padrão do controle.</returns>
            ''' <remarks></remarks>
            Shared Property ValorPadrao(ByVal ctl As Object) As Object
                Get
                    Return Prop(ctl, "ValorPadrao")
                End Get
                Set(ByVal value As Object)
                    Prop(ctl, "ValorPadrao") = value
                End Set
            End Property

            ''' <summary>
            ''' Onde aquele componente foi localizado.
            ''' </summary>
            ''' <param name="Ctl">Componente a relacionado com a origem.</param>
            ''' <value>Valor da origem.</value>
            ''' <returns>Valor da origem.</returns>
            ''' <remarks></remarks>
            Shared Property Origem(ByVal Ctl As Object) As Object
                Get
                    Return Prop(Ctl, "Origem")
                End Get
                Set(ByVal value As Object)
                    Prop(Ctl, "Origem") = value
                End Set
            End Property

            ''' <summary>
            ''' Definição de tipo do controle.
            ''' </summary>
            ''' <param name="Ctl">Controle.</param>
            ''' <value>Tipo do controle.</value>
            ''' <returns>Tipo do controle.</returns>
            ''' <remarks></remarks>
            Shared Property Tipo(ByVal Ctl As Object) As Object
                Get
                    Return Prop(Ctl, "tipo")
                End Get
                Set(ByVal value As Object)
                    Prop(Ctl, "tipo") = value
                End Set
            End Property

            ''' <summary>
            ''' Definição automática para controle.
            ''' </summary>
            ''' <param name="ctl">Controle.</param>
            ''' <value>Definição de forma automática a ser considerada.</value>
            ''' <returns>Definição de forma automática a ser considerada.</returns>
            ''' <remarks></remarks>
            Shared Property Auto(ByVal ctl As Object) As Object
                Get
                    Return Prop(ctl, "Auto")
                End Get
                Set(ByVal value As Object)
                    Prop(ctl, "Auto") = value
                End Set
            End Property

            ''' <summary>
            ''' Formato do controle.
            ''' </summary>
            ''' <param name="Ctl">Controle tratado.</param>
            ''' <value>Formato registrado para aquele controle.</value>
            ''' <returns>Formato registrado para aquele controle.</returns>
            ''' <remarks></remarks>
            Shared Property Formato(ByVal Ctl As Object) As Object
                ' não esquecer de prever formato em formato, mascara
                ' ver no javascript validaentrada também
                Get
                    Dim Forma As String = NZ(Prop(Ctl, "Formato"), "")
                    If Forma = "" Then
                        Dim Tipo As String = NZ(Controle.Tipo(Ctl), "")
                        If Compare(Tipo, "System.Int32") Or Compare(Tipo, "System.Int16") Then
                            Forma = "INTEIRO"
                        ElseIf Compare(Tipo, "System.DateTime") Then
                            Forma = "dd\/MM\/yyyy"
                        ElseIf Compare(Tipo, "System.Double") Or Compare(Tipo, "System.Single") Then
                            Forma = "REAL"
                        End If
                    End If
                    Return Forma
                End Get
                Set(ByVal value As Object)
                    Prop(Ctl, "Formato") = value
                End Set
            End Property

            ''' <summary>
            ''' Definição de máscara de preenchimento para controle.
            ''' </summary>
            ''' <param name="Ctl">Controle tratado.</param>
            ''' <value>Conteúdo da máscara do controle.</value>
            ''' <returns>Conteúdo da máscara do controle.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property Mascara(ByVal Ctl As Object) As String
                ' não esquecer de prever formato em formato, mascara e mascaraprogress
                ' ver no javascript validaentrada também
                Get
                    Dim Forma As String = NZ(Prop(Ctl, "Formato"), "")

                    If Forma = "" Then
                        Dim Tipo As String = Controle.Tipo(Ctl)
                        If Compare(Tipo, "System.Int32") Or Compare(Tipo, "System.Int16") Then
                            Forma = "0"
                        ElseIf Compare(Tipo, "System.DateTime") Then
                            Forma = "dd\/MM\/yyyy"
                        ElseIf Compare(Tipo, "System.Double") Or Compare(Tipo, "System.Single") Then
                            Forma = "0.#########"
                        End If
                    ElseIf Forma = "INTEIRO" Then
                        Forma = "0"
                    ElseIf Forma = "REAL" Then
                        Forma = "0.#########"
                    ElseIf Compare(Forma, "HTML") Or Compare(Forma, "MEMO") Then
                        Forma = ""
                    End If

                    Return Forma
                End Get
            End Property

            ''' <summary>
            ''' Definição de máscara para entrada progressiva, que formata campo e valida mediante entrada de caracter.
            ''' </summary>
            ''' <param name="Ctl">Controle tratado.</param>
            ''' <value>Valor para máscara de entrada.</value>
            ''' <returns>Valor da máscara de entrada.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property MascaraProgress(ByVal Ctl As Object) As String
                ' não esquecer de prever formato em formato, mascara
                ' mascaramento progressivo deve ser obrigatoriamente previsto
                ' ver no javascript validaentrada também
                Get
                    Dim Forma As String = Mascara(Ctl)

                    ' tratamento especial do campo inteiro
                    Dim Espec As String = ""
                    If Microsoft.VisualBasic.Left(Forma, 1) = ">" Then ' tudo maiúsculo
                        Espec = Microsoft.VisualBasic.Left(Forma, 1)
                        Forma = Mid(Forma, 2)
                    End If

                    If Forma = "0" Or Forma = "INTEGER" Then
                        Return Espec & "[-+]{0,1}[0-9]*"
                    ElseIf Forma = "dd\/MM\/yyyy" Then
                        Return Espec & "[0-9]{1,2}($|/($|[0-9]{1,2}($|/($|[0-9]{0,4}))))"
                    ElseIf Forma = "0.#########" Or Forma = "REAL" Then
                        Return Espec & "[-+]{0,1}[0-9]*[\\.,]{0,1}[0-9]*"
                    ElseIf Forma = "CURRENCY" Or Forma = "MOEDA" Then
                        Return Espec & "[-+]{0,1}[0-9]*($|[\\.,]{0,1}($|[0-9]{1,2}))"
                    ElseIf Forma = "MM\/yyyy" Then
                        Return Espec & "[0-9]{1,2}($|/($|[0-9]{0,4}))"
                    ElseIf Forma = "dd\/MM\/yyyy HH:mm:ss" Then
                        Return Espec & "[0-9]{1,2}($|/($|[0-9]{1,2}($|/($|[0-9]{0,4}($| ($|[0-9]{1,2}($|:($|[0-9]{1,2}($|:($|[0-9]{1,2}))))))))))"
                    ElseIf Forma = "dd\/MM\/yyyy HH:mm" Then
                        Return Espec & "[0-9]{1,2}($|/($|[0-9]{1,2}($|/($|[0-9]{0,4}($| ($|[0-9]{1,2}($|:($|[0-9]{1,2}))))))))"
                    End If
                    Return Espec
                End Get
            End Property

            ''' <summary>
            ''' Retorna texto javascript para atribuição da máscara, considerando funções em Icraft.js.
            ''' </summary>
            ''' <param name="Ctl">Controle tratado.</param>
            ''' <remarks></remarks>
            Shared Sub AplicaMascara(ByVal Ctl As Object)
                Prop(Ctl, "OnKeyPress") = "return EntraMasc(this,'" & Controle.MascaraProgress(Ctl).Replace("\", "\\") & "',event)"
                Prop(Ctl, "OnBlur") = "return ValidaMasc(this,'" & Controle.Formato(Ctl).ToString.ToLower & "',event)"

                Dim Expr As String = Controle.Mascara(Ctl)
                Expr = Replace(Expr, "\", "")
                Expr = Replace(Expr, ".", ",")
                Expr = Replace(Expr, ">", "letras maiúsculas")
                Expr = Replace(Expr, ";CAMINHO:", " em ")
                Expr = Replace(Expr, ";SALVASEMCAMINHO:TRUE", "")
                Expr = Replace(Expr, ";MASCARA:", "/")
                Prop(Ctl, "ToolTip") = Prop(Ctl, "ToolTip") & " [" & Expr & "]"
                IncluiScript(Ctl.Page, "Icraft.js")
            End Sub
        End Class

        ''' <summary>
        ''' Classe que armazena detalhes sobre elemento de estilo do tipo "height:300px".
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ElementoStr
            Private _nome As String = ""
            Private _conteudo As String = ""
            Private _separador As String
            Private _gex_valor_unid As String = "([-0-9.]+)(px|PX)?"
            Private _opera As ElementoStrOpera = ElementoStrOpera.Atribui

            ''' <summary>
            ''' Retorna string representando a forma de estilo.
            ''' </summary>
            ''' <returns>String representando a forma de estilo.</returns>
            ''' <remarks></remarks>
            Overrides Function ToString() As String
                Return _nome & _separador & _conteudo
            End Function

            ''' <summary>
            ''' Cria nova forma de estilo.
            ''' </summary>
            ''' <param name="AtributoStr">Atributo.</param>
            ''' <param name="Separador">Separador.</param>
            ''' <remarks></remarks>
            Sub New(ByVal AtributoStr As String, Optional ByVal Separador As String = ":")
                _separador = Separador
                AtributoStr = NZ(AtributoStr, "")
                Dim pos As Integer = AtributoStr.IndexOf(_separador)
                If pos = -1 Then
                    Conteudo = AtributoStr.Trim
                Else
                    Nome = AtributoStr.Substring(0, pos).Trim
                    Conteudo = AtributoStr.Substring(pos + 1).Trim
                End If
            End Sub

            ''' <summary>
            ''' Nome do atributo, parte à esquerda na definição.
            ''' </summary>
            ''' <value></value>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Property Nome() As String
                Get
                    Return _nome
                End Get
                Set(ByVal value As String)
                    If value.StartsWith("+") Then
                        Operador = ElementoStrOpera.Aumenta
                        _nome = value.Substring(1)
                    ElseIf value.StartsWith("-") Then
                        Operador = ElementoStrOpera.Diminui
                        _nome = value.Substring(1)
                    Else
                        Operador = ElementoStrOpera.Atribui
                        _nome = value
                    End If
                End Set
            End Property

            ''' <summary>
            ''' Conteúdo da definição, parte direita no termo.
            ''' </summary>
            ''' <value></value>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Property Conteudo() As String
                Get
                    Return _conteudo
                End Get
                Set(ByVal value As String)
                    _conteudo = value
                End Set
            End Property

            ''' <summary>
            ''' Extração de valor do conteúdo, quando for acompanhado de termos como "PX" (pixels).
            ''' </summary>
            ''' <value></value>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Property ConteudoValor() As String
                Get
                    Return RegexGroup(Conteudo, _gex_valor_unid, 1).Value
                End Get
                Set(ByVal value As String)
                    Conteudo = RegexGroupReplace(Conteudo, _gex_valor_unid, value, 1)
                End Set
            End Property

            ''' <summary>
            ''' Unidade do conteúdo, como "PX" (pixels).
            ''' </summary>
            ''' <value></value>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Property ConteudoUnidade() As String
                Get
                    Return RegexGroup(Conteudo, _gex_valor_unid, 2).Value
                End Get
                Set(ByVal value As String)
                    Conteudo = RegexGroupReplace(Conteudo, _gex_valor_unid, value, 2)
                End Set
            End Property

            ''' <summary>
            ''' Acesso ao atributo definido para a classe.
            ''' </summary>
            ''' <param name="Nome">Nome do atributo.</param>
            ''' <value>Valor do atributo.</value>
            ''' <returns>Valor do atributo.</returns>
            ''' <remarks></remarks>
            Default Property Attributes(ByVal Nome As String) As String
                Get
                    If Compare(Nome, "Nome") Then
                        Return Me.Nome
                    ElseIf Compare(Nome, "Conteudo") Then
                        Return Conteudo
                    ElseIf Compare(Nome, "ConteudoValor") Then
                        Return ConteudoValor
                    ElseIf Compare(Nome, "ConteudoUnidade") Then
                        Return ConteudoUnidade
                    Else
                        Err.Raise(20000, MyBase.GetType.ToString, "Atributo '" & Nome & "' inválido para objeto " & Me.GetType.ToString & ".")
                    End If
                    Return Nothing
                End Get

                Set(ByVal value As String)
                    If Compare(Nome, "Nome") Then
                        Nome = value
                    ElseIf Compare(Nome, "Conteudo") Then
                        Conteudo = value
                    ElseIf Compare(Nome, "ConteudoValor") Then
                        ConteudoValor = value
                    ElseIf Compare(Nome, "ConteudoUnidade") Then
                        ConteudoUnidade = value
                    Else
                        Err.Raise(20000, MyBase.GetType.ToString, "Atributo " & value & " inválido para objeto " & Me.GetType.ToString & ".")
                    End If
                End Set
            End Property

            ''' <summary>
            ''' Método de operação entre classes, para soma ou exclusão.
            ''' </summary>
            ''' <value>Tipo de operação.</value>
            ''' <returns>Tipo de operação.</returns>
            ''' <remarks></remarks>
            Property Operador() As ElementoStrOpera
                Get
                    Return _opera
                End Get
                Set(ByVal value As ElementoStrOpera)
                    _opera = value
                End Set
            End Property
        End Class

        ''' <summary>
        ''' Classe para armazenar e operar elementostr.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ElementosStr
            Private _atributosstr As List(Of ElementoStr) = New List(Of ElementoStr)
            Private _separador As String
            Private _separadorexpr As String
            Private _itemseparador As String
            Private _itemseparadorexpr As String

            ''' <summary>
            ''' Lista de elementos.
            ''' </summary>
            ''' <value>Lista de elementos.</value>
            ''' <returns>Lista de elementos.</returns>
            ''' <remarks></remarks>
            ReadOnly Property Elementos() As List(Of ElementoStr)
                Get
                    Return _atributosstr
                End Get
            End Property

            ''' <summary>
            ''' Especificação de separador.
            ''' </summary>
            ''' <value>Texto contendo separador.</value>
            ''' <returns>Texto contendo separador.</returns>
            ''' <remarks></remarks>
            Property Separador() As String
                Get
                    Return _separador
                End Get
                Set(ByVal value As String)
                    _separador = value
                    _separadorexpr = SeparaExpr(value)
                End Set
            End Property

            ''' <summary>
            ''' Separador de itens.
            ''' </summary>
            ''' <value>Separador de itens.</value>
            ''' <returns>Separador de itens.</returns>
            ''' <remarks></remarks>
            Property ItemSeparador() As String
                Get
                    Return _itemseparador
                End Get
                Set(ByVal value As String)
                    _itemseparador = value
                    _itemseparadorexpr = SeparaExpr(value)
                End Set
            End Property

            ''' <summary>
            ''' Separa parâmetros.
            ''' </summary>
            ''' <param name="Separador">Separador.</param>
            ''' <returns>String contendo itens separados.</returns>
            ''' <remarks></remarks>
            Private Function SeparaExpr(ByVal Separador As String) As String
                Dim Result As String = ""
                For z As Integer = 1 To Separador.Length
                    Dim Letra As String = Mid(Separador, z, 1)
                    If InStr(".\()^|[]+" + Chr(13) + Chr(10), Letra) <> 0 Then
                        Result &= "\" & Letra
                    Else
                        Result &= Letra
                    End If
                Next
                Return Result & "*(([^" & Result & "']|'((([^'])|\\')*)')+)" & Result & "*"
            End Function

            ''' <summary>
            ''' Criação da lista de parâmetros com base em texto e separador.
            ''' </summary>
            ''' <param name="AtributosStr">Lista de atributos.</param>
            ''' <param name="SeparadorTxt">Separador (ex.: border:1px  ; padding:1px).</param>
            ''' <param name="ItemSeparadorTxt">Separador de atributo (border  :  1px).</param>
            ''' <remarks></remarks>
            Sub New(ByVal AtributosStr As String, Optional ByVal SeparadorTxt As String = ";", Optional ByVal ItemSeparadorTxt As String = ":")
                Separador = SeparadorTxt
                ItemSeparador = ItemSeparadorTxt
                AddStr(AtributosStr)
            End Sub

            ''' <summary>
            ''' Transforma estilo em string.
            ''' </summary>
            ''' <param name="SeparadorTxt">Separador a ser utilizado.</param>
            ''' <param name="ItemSeparadorTxt">Atribuidor a ser utilizado.</param>
            ''' <returns>Texto representando estilo com separador e atribuidor escolhidos.</returns>
            ''' <remarks></remarks>
            Function ToStyleStr(Optional ByVal SeparadorTxt As String = Nothing, Optional ByVal ItemSeparadorTxt As String = Nothing) As String
                Dim result As String = ""
                For Each Item As ElementoStr In _atributosstr
                    If Item.Conteudo <> "" And Item.Nome <> "" Then
                        result &= IIf(result <> "", IIf(Not IsNothing(SeparadorTxt), SeparadorTxt, Separador), "")
                        result &= Item.Nome & IIf(Not IsNothing(ItemSeparadorTxt), ItemSeparadorTxt, ItemSeparador)
                        If Item.Conteudo.StartsWith("'") And Item.Conteudo.EndsWith("'") Then
                            result &= Item.Conteudo.Substring(1, Item.Conteudo.Length - 2)
                        Else
                            result &= Item.Conteudo
                        End If
                    End If
                Next
                Return result
            End Function

            ''' <summary>
            ''' Texto representando estilo considerando atributos de separação definidos previamente.
            ''' </summary>
            ''' <returns>Texto representando estilo.</returns>
            ''' <remarks></remarks>
            Overrides Function ToString() As String
                Dim result As String = ""
                For Each Item As ElementoStr In _atributosstr
                    If Item.Conteudo <> "" Then
                        result &= IIf(result <> "", Separador, "") & Item.ToString
                    End If
                Next
                Return result
            End Function

            ''' <summary>
            ''' Lista de itens do estilo.
            ''' </summary>
            ''' <param name="Indice">Índice numérico para acesso ao item do estilo.</param>
            ''' <value>Valor a ser definido.</value>
            ''' <returns>Valor obtido a partir do item consultado.</returns>
            ''' <remarks></remarks>
            Default Overloads Property Items(ByVal Indice As Integer) As ElementoStr
                Get
                    Try
                        Return _atributosstr(Indice)
                    Catch
                    End Try
                    Return New ElementoStr(Nothing, ItemSeparador)
                End Get
                Set(ByVal value As ElementoStr)
                    If Indice = -1 Then
                        _atributosstr.Add(value)
                    Else
                        If Indice >= _atributosstr.Count Then
                            For z As Integer = 0 To Indice
                                _atributosstr.Add(Nothing)
                            Next
                        End If
                        _atributosstr(Indice) = value
                    End If
                End Set
            End Property

            ''' <summary>
            ''' Pesquisa de itens por nome do termo em estilo.
            ''' </summary>
            ''' <param name="Nome">Termo pesquisado.</param>
            ''' <value>Valor a ser atribuído.</value>
            ''' <returns>Valor obtido a partir do termo.</returns>
            ''' <remarks></remarks>
            Default Overloads Property Items(ByVal Nome As String) As ElementoStr
                Get
                    Dim result As ElementoStr = ArrayFindByAtt(_atributosstr.ToArray, Nome, "Nome")
                    If IsNothing(result) Then
                        Dim Elem As ElementoStr = New ElementoStr("", ItemSeparador)
                        Elem.Nome = Nome
                        _atributosstr.Add(Elem)
                        Return _atributosstr(_atributosstr.IndexOf(Elem))
                    End If
                    Return result
                End Get
                Set(ByVal value As ElementoStr)
                    Dim pos As Integer = ArrayIndexFindByAtt(_atributosstr.ToArray, Nome, "Nome")
                    Dim Elem As ElementoStr
                    If pos = -1 Then
                        Elem = New ElementoStr(value.ToString, ItemSeparador)
                        _atributosstr.Add(Elem)
                    Else
                        Elem = _atributosstr(pos)
                        If value.Operador = ElementoStrOpera.Aumenta Then
                            Elem.ConteudoValor = Val(Elem.ConteudoValor) + Val(value.ConteudoValor)
                        ElseIf value.Operador = ElementoStrOpera.Diminui Then
                            Elem.ConteudoValor = Val(Elem.ConteudoValor) - Val(value.ConteudoValor)
                        Else
                            Elem.Conteudo = value.Conteudo
                        End If
                    End If
                End Set
            End Property

            ''' <summary>
            ''' Quantidade de itens no estilo.
            ''' </summary>
            ''' <value>Quantidade de itens no estilo.</value>
            ''' <returns>Quantidade de itens no estilo.</returns>
            ''' <remarks></remarks>
            ReadOnly Property Count() As Integer
                Get
                    Return _atributosstr.Count
                End Get
            End Property

            ''' <summary>
            ''' Itens a serem adicionados ao estilo.
            ''' </summary>
            ''' <param name="AtributosStr">Itens a serem adicionados no estilo.</param>
            ''' <remarks></remarks>
            Sub AddStr(ByVal AtributosStr As String)
                For Each Item As Match In Regex.Matches(AtributosStr, _separadorexpr, RegexOptions.Multiline)
                    Dim Elem As ElementoStr = New ElementoStr(Item.Groups(1).Value, ItemSeparador)
                    Items(Elem.Nome) = Elem
                Next
            End Sub

            ''' <summary>
            ''' Verifica a existência ou não do termo no estilo.
            ''' </summary>
            ''' <param name="Nome">Termo a ser pesquisado.</param>
            ''' <value>TRUE caso exista ou FALSE caso não seja encontrado.</value>
            ''' <returns>TRUE caso exista ou FALSE caso não seja encontrado.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Exists(ByVal Nome As String) As Boolean
                Get
                    Return ArrayIndexFindByAtt(_atributosstr.ToArray, Nome, "Nome") <> -1
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Classe para contagem de tempo. TempoDecorrido retorna o total de segundos passados desde o último registro.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ContaTempo
            Private _UltimoRegistro As Date

            ''' <summary>
            ''' Momento de último registro, que corresponde ao ponto de inicialização da contagem.
            ''' </summary>
            ''' <value></value>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public ReadOnly Property UltimoRegistro() As Date
                Get
                    Return _UltimoRegistro
                End Get
            End Property

            ''' <summary>
            ''' Registra momento atual como início da contagem.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub Registra()
                _UltimoRegistro = Now
            End Sub

            ''' <summary>
            ''' Quantidade de segundos passados desde o último registro.
            ''' </summary>
            ''' <param name="RegistraOutro">Obtém segundos e inicia nova contagem.</param>
            ''' <value>Segundos passados desde o último registro.</value>
            ''' <returns>Segundos passados desde o último registro.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property TempoDecorrido(Optional ByVal RegistraOutro As Boolean = True) As Double
                Get
                    Dim RegAnterior As Date = _UltimoRegistro
                    If RegistraOutro Then
                        Registra()
                    End If
                    Return (_UltimoRegistro.Ticks - RegAnterior.Ticks) / 10000000
                End Get
            End Property

            ''' <summary>
            ''' Cria contagem de tempo, registrado momento inicial como atual.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub New()
                Registra()
            End Sub

            ''' <summary>
            ''' Tempo em segundos que o procedimento deverá durar retornando true caso esteja ainda neste período.
            ''' </summary>
            ''' <param name="Segs">Segundos considerados normais (retorno de true).</param>
            ''' <returns>True caso ainda esteja dentro do tempo informado e false caso contrário.</returns>
            ''' <remarks></remarks>
            Public Function Durante(ByVal Segs As Double) As Boolean
                Dim Tot As Double = DateDiff(DateInterval.Second, _UltimoRegistro, Now)
                Return Tot < Segs
            End Function
        End Class

        ''' <summary>
        ''' Operação com estilos permitindo inclusão, exclusão e atualização de conteúdo.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Estilo

            ''' <summary>
            ''' Soma de estilos.
            ''' </summary>
            ''' <param name="Esse">Conjunto inicial de estilo "border:1px;padding:2px".</param>
            ''' <param name="MaisEsse">Adicional de estilos a serem incluídos no estilo inicial no mesmo formato "margin:1px;background-color:#f0f0f0".</param>
            ''' <returns>Retorna estilo resultante considerando a soma dos dois sendo eliminadas as redundâncias.</returns>
            ''' <remarks></remarks>
            Shared Function Soma(ByVal Esse As String, ByVal MaisEsse As String) As String
                Return Opera(Esse, MaisEsse, "+")
            End Function

            ''' <summary>
            ''' Retira um estilo específico do estilo inicial.
            ''' </summary>
            ''' <param name="Esse">Lista de estilos inicial.</param>
            ''' <param name="MenosEsse">Estilo a ser retirado do inicial.</param>
            ''' <returns>Estilo resultante, sem os termos solicitados para retirada.</returns>
            ''' <remarks></remarks>
            Shared Function Subtrai(ByVal Esse As String, ByVal MenosEsse As String) As String
                Return Opera(Esse, MenosEsse, "-")
            End Function

            ''' <summary>
            ''' Obtém valor do estilo, sendo eliminado o termo de unidade, por exemplo.
            ''' </summary>
            ''' <param name="Param">Termo do qual queremos o valor.</param>
            ''' <returns>Valor daquele termo.</returns>
            ''' <remarks></remarks>
            Shared Function ConteudoValor(ByVal Param As String) As String
                Dim ValUnid As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Param, "([-0-9.]+) ?(px|PX)?", RegexOptions.Multiline)
                Try
                    Return ValUnid(0).Groups(1).Value
                Catch
                End Try
                Return ""
            End Function

            ''' <summary>
            ''' Unidade do termo.
            ''' </summary>
            ''' <param name="Param">Termo desejado.</param>
            ''' <returns>Retorna unidade daquele termo.</returns>
            ''' <remarks></remarks>
            Shared Function ConteudoUnidade(ByVal Param As String) As String
                Dim ValUnid As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Param, "([-0-9.]+) ?(px|PX)?", RegexOptions.Multiline)
                Try
                    Return ValUnid(0).Groups(2).Value
                Catch
                End Try
                Return ""
            End Function

            ''' <summary>
            ''' Nome do termo solicitado.
            ''' </summary>
            ''' <param name="Param">Estilo solicitado.</param>
            ''' <returns>Nome da variável daquele estilo.</returns>
            ''' <remarks></remarks>
            Shared Function Variavel(ByVal Param As String) As String
                Dim ParamSep As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Param, "([^:]*):([^;]*)(;|$)", RegexOptions.Multiline)
                Try
                    Return ParamSep(0).Groups(1).Value
                Catch
                End Try
                Return ""
            End Function

            ''' <summary>
            ''' Conteúdo do termo solicitado.
            ''' </summary>
            ''' <param name="Param">Termo a ser tratado.</param>
            ''' <returns>Conteúdo definido para aquele termo.</returns>
            ''' <remarks></remarks>
            Shared Function Conteudo(ByVal Param As String) As String
                Dim ParamSep As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Param, "([^:]*):([^;]*)(;|$)", RegexOptions.Multiline)
                Try
                    Return ParamSep(0).Groups(2).Value
                Catch
                End Try
                Return ""
            End Function


            ''' <summary>
            ''' Opera dois estilos com base em um operador.
            ''' </summary>
            ''' <param name="Esse">Primeiro estilo.</param>
            ''' <param name="ComEsse">Segundo estilo.</param>
            ''' <param name="Operador">Tipo de operação.</param>
            ''' <returns>Estilo resultante.</returns>
            ''' <remarks></remarks>
            Shared Function Opera(ByVal Esse As String, ByVal ComEsse As String, ByVal Operador As String) As String
                Dim ValUnidEsse As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Esse, "([-0-9.]+) ?(px|PX)?", RegexOptions.Multiline)
                Dim ValUnidComEsse As MatchCollection = System.Text.RegularExpressions.Regex.Matches(ComEsse, "([-0-9.]+) ?(px|PX)?", RegexOptions.Multiline)

                If ValUnidEsse.Count = 0 Then
                    Return ComEsse
                ElseIf ValUnidEsse.Count = 0 Then
                    Return Esse
                Else
                    Dim ValResult As Integer = Val(ValUnidEsse(0).Groups(1).Value)
                    If String.Compare(ValUnidEsse(0).Groups(2).Value, "px", True) = 0 And String.Compare(ValUnidComEsse(0).Groups(2).Value, "px", True) = 0 Then
                        If Operador = "+" Then
                            ValResult = Val(ValUnidEsse(0).Groups(1).Value) + Val(ValUnidComEsse(0).Groups(1).Value)
                        ElseIf Operador = "-" Then
                            ValResult = Val(ValUnidEsse(0).Groups(1).Value) - Val(ValUnidComEsse(0).Groups(1).Value)
                        End If
                    End If
                    Return ValResult.ToString & ValUnidEsse(0).Groups(2).Value
                End If
            End Function

            ''' <summary>
            ''' Concatena estilos com base em um array de objetos.
            ''' </summary>
            ''' <param name="PARAM">Lista de estilos a serem concatenados.</param>
            ''' <returns>String consolidando todos os estilos concatenados.</returns>
            ''' <remarks></remarks>
            Shared Function Concatena(ByVal ParamArray PARAM() As Object) As String
                Dim result As New Dictionary(Of String, String)

                Dim estilos As ArrayList = ParamArrayToArrayList(PARAM)
                For Each estilo As String In estilos

                    For Each ParamEstilo As Match In System.Text.RegularExpressions.Regex.Matches(estilo, "([^:]*):([^;]*)(;|$)", RegexOptions.Multiline)
                        Dim conteudo As String = ParamEstilo.Groups(2).Value.Trim
                        Dim variav As String
                        Dim anterior As String
                        If ParamEstilo.Groups(1).Value.StartsWith("+") Then
                            variav = ParamEstilo.Groups(1).Value.Substring(1).Trim
                            If result.ContainsKey(variav) Then
                                anterior = result(variav)
                                result.Remove(variav)
                                result.Add(variav, Soma(anterior, conteudo))
                            Else
                                result.Add(variav, conteudo)
                            End If
                        ElseIf ParamEstilo.Groups(1).Value.StartsWith("-") Then
                            variav = ParamEstilo.Groups(1).Value.Substring(1).Trim
                            If result.ContainsKey(variav) Then
                                anterior = result(variav)
                                result.Remove(variav)
                                result.Add(variav, Subtrai(anterior, conteudo))
                            Else
                                result.Add(variav, conteudo)
                            End If
                        Else
                            variav = ParamEstilo.Groups(1).Value.Trim
                            If result.ContainsKey(variav) Then
                                result.Remove(variav)
                                result.Add(variav, conteudo)
                            Else
                                result.Add(variav, conteudo)
                            End If
                        End If
                    Next
                Next

                Dim retorno As String = ""
                For Each item As String In result.Keys
                    retorno &= IIf(retorno <> "", ";", "") & item & ":" & result.Item(item)
                Next
                Return retorno
            End Function
        End Class

        ' classe e funções para apresentação de páginas, controles etc.
        ''' <summary>
        ''' Classe para tratar sitemap como array de urls retornando anterior e próximo.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class MapPath
            Private _urls As ArrayList

            ''' <summary>
            ''' Criação de mappath a partir de um diretório.
            ''' </summary>
            ''' <param name="DiretorioMap">Local de pesquisa da lista de arquivos.</param>
            ''' <remarks></remarks>
            Sub New(ByVal DiretorioMap As String)
                Dim sm As DataSet = New DataSet
                sm.ReadXml(DiretorioMap & "web.sitemap")
                _urls = RegexToArrayList(sm.GetXml, "url=""([^""]*)""", 1, "value")
            End Sub

            ''' <summary>
            ''' Busca pelo próximo elemento da lista de sitemap.
            ''' </summary>
            ''' <param name="Pag">Página de referência atual.</param>
            ''' <param name="Circular">True caso após próximo queira automaticamente ir para primeiro.</param>
            ''' <value>Retorna próxima página.</value>
            ''' <returns>Retorna próxima página.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Proximo(ByVal Pag As String, Optional ByVal Circular As Boolean = True) As String
                Get
                    Dim pos As Integer = _urls.IndexOf(Pag)
                    If pos = -1 Then
                        pos = Count - 1
                    Else
                        pos = pos + 1
                        If pos >= Count Then
                            If Circular Then
                                pos = 0
                            Else
                                pos = Count - 1
                            End If
                        End If
                    End If
                    Return _urls(pos)
                End Get
            End Property

            ''' <summary>
            ''' Encontra condição match anterior.
            ''' </summary>
            ''' <param name="Pag">Página a ser pesquisada (origem).</param>
            ''' <param name="Circular">True caso antes do primeiro queira ir para o último.</param>
            ''' <value>Página encontrada antes daquela informada.</value>
            ''' <returns>Retorna página encontrada antes daquela informada.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Anterior(ByVal Pag As String, Optional ByVal Circular As Boolean = True) As String
                Get
                    Dim pos As Integer = _urls.IndexOf(Pag)
                    If pos = -1 Then
                        pos = 0
                    Else
                        pos = pos - 1
                        If pos < 0 Then
                            If Circular Then
                                pos = Count - 1
                            Else
                                pos = 0
                            End If
                        End If
                    End If
                    Return _urls(pos)
                End Get
            End Property

            ''' <summary>
            ''' Quantidade de tópicos disponíveis no mappath.
            ''' </summary>
            ''' <value>Quantidade de tópicos disponíveis no mappath.</value>
            ''' <returns>Quantidade de tópicos disponíveis no mappath.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Count() As Integer
                Get
                    Return _urls.Count
                End Get
            End Property

            ''' <summary>
            ''' Posição da página informada entre a sequência do mappath.
            ''' </summary>
            ''' <param name="Pag">Página que queremos saber a posição.</param>
            ''' <value>Item correspondente à posição sendo a primeira Um.</value>
            ''' <returns>Item correspondente à posição sendo a primeira Um.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property IndexOf(ByVal Pag As String) As Integer
                Get
                    Return _urls(Pag)
                End Get
            End Property

            ''' <summary>
            ''' Texto para apresentar página de total.
            ''' </summary>
            ''' <param name="Pag">Página que queremos informar.</param>
            ''' <value>Total caso não seja encontrada a página ou 1/10 caso a página seja a primeira.</value>
            ''' <returns>Total caso não seja encontrada a página ou 1/10 caso a página seja a primeira.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Expressao(ByVal Pag As String) As String
                Get
                    Dim pos As Integer = _urls.IndexOf(Pag)
                    If pos = -1 Then
                        Return "Total " & _urls.Count
                    End If
                    Return pos + 1 & "/" & _urls.Count
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Array valorado, para pesquisas de um modo geral, onde aplicamos um valor de atributo para substituição do termo predicado
        ''' IMPORTANTE: Termo iniciado, mas a conclusão final depende de testes de performance entre a utilização desta com resize e a utilização do PARAMTOARRAYLIST, já com todas as propriedades declaradas nativamente.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ArrayV
            Private ArrayOrigem() As Object
            Private Conteudo As Object

            ''' <summary>
            ''' Entrada capaz de verificar se objeto (cada um) é igual aquele informado.
            ''' </summary>
            ''' <param name="Obj">Objeto a ser comparado.</param>
            ''' <returns>True caso seja o objeto ou false caso contrário.</returns>
            ''' <remarks></remarks>
            Private Function PredExists(ByVal Obj As Object) As Boolean
                Return Obj = Conteudo
            End Function

            ''' <summary>
            ''' Procura objeto entre aqueles já carregados.
            ''' </summary>
            ''' <param name="Conteudo">Objeto a ser procurado.</param>
            ''' <param name="ArrayOrigem">Armazém de objetos.</param>
            ''' <returns>Retorna true caso encontre ou falso caso não seja encontrado.</returns>
            ''' <remarks></remarks>
            Public Function Exists(ByVal Conteudo As Object, Optional ByRef ArrayOrigem() As Object = Nothing) As Boolean
                If Not IsNothing(ArrayOrigem) Then
                    Me.ArrayOrigem = ArrayOrigem
                End If
                Me.Conteudo = Conteudo
                Return Array.Exists(ArrayOrigem, AddressOf PredExists)
            End Function

            ''' <summary>
            ''' Cria nova especificação de objeto.
            ''' </summary>
            ''' <param name="ArrayOrigem">Armazém a ser utilizado para guardar objetos.</param>
            ''' <remarks></remarks>
            Sub New(ByRef ArrayOrigem As Object)
                Me.ArrayOrigem = ArrayOrigem
            End Sub

            ' add resize
            ' ver outras em arraylist...
        End Class

        ''' <summary>
        ''' Classe utilizada para substituir mappath em web.config. Permite buscar no banco de dados os links e proceder com posicionamento e busca diretamente neste.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class SiteMapProviderGeral
            Inherits SiteMapProvider
            Private _Fonte As New TreeNodeCollection
            Private _HomeDescr As String
            Private _HomeURL As String
            Private _HomeToolTip As String
            Private _RetiraTags As Boolean

            ''' <summary>
            ''' Especificação de url para pesquisa.
            ''' </summary>
            ''' <param name="rawUrl">Trecho de pesquisa que será acrescido do ambiente (app exec ou url localpath).</param>
            ''' <returns>Trechos de pesquisa.</returns>
            ''' <remarks></remarks>
            Private Function Urls(Optional ByVal rawUrl As String = "") As String
                Dim Ret As String = rawUrl
                If rawUrl <> HttpContext.Current.Request.AppRelativeCurrentExecutionFilePath Then
                    Ret &= IIf(Ret <> "", ";", "") & HttpContext.Current.Request.AppRelativeCurrentExecutionFilePath
                End If
                If rawUrl <> HttpContext.Current.Request.Url.LocalPath Then
                    Ret &= IIf(Ret <> "", ";", "") & HttpContext.Current.Request.Url.LocalPath
                End If
                Return Ret
            End Function

            ''' <summary>
            ''' Classe SiteMapProviderGeral está preparada para ICFTMENU, TREEEVIEW ou TREENODE.
            ''' </summary>
            ''' <param name="Fonte">ICFTMENU, TREEEVIEW ou TREENODE.</param>
            ''' <remarks></remarks>
            Public Sub New(ByVal Fonte As Object, Optional ByVal IncluiHome As Boolean = True, Optional ByVal HomeDescr As String = "HOME", Optional ByVal HomeURL As String = "~/", Optional ByVal HomeToolTip As String = "Página principal.", Optional ByVal RetiraTags As Boolean = False)
                If IncluiHome = True Then
                    _HomeDescr = HomeDescr
                    _HomeURL = HomeURL
                    _HomeToolTip = HomeToolTip
                    _RetiraTags = RetiraTags
                Else
                    _HomeDescr = ""
                End If
                If Fonte.GetType.ToString = TipoTxtIcftMenu Then
                    _Fonte = Fonte.Arvore.Nodes
                ElseIf TypeOf Fonte Is TreeView Then
                    _Fonte = CType(Fonte, TreeView).Nodes
                ElseIf TypeOf Fonte Is TreeNode Then
                    _Fonte = New TreeNodeCollection(CType(Fonte, TreeNode))
                Else
                    _Fonte = Nothing
                End If
            End Sub

            ''' <summary>
            ''' Cria nó para sitemap.
            ''' </summary>
            ''' <returns>Nó criado.</returns>
            ''' <remarks></remarks>
            Private Function CriaNodeMapHome() As SiteMapNode
                If _HomeDescr <> "" Then
                    Return CriaNodeMap(New SiteMapNode(Me, "HOME", _HomeURL, _HomeDescr, _HomeToolTip))
                End If
                Return Nothing
            End Function

            ''' <summary>
            ''' Cria nó e inclui na árvore.
            ''' </summary>
            ''' <param name="Node">Nó a ser incluído na árvore.</param>
            ''' <param name="NodeMapFilhos">Nó de referência da árvore onde se quer incluir o novo filho.</param>
            ''' <param name="InsereFilhos">Insere como sub-item.</param>
            ''' <returns>Retorna a árvore criada.</returns>
            ''' <remarks></remarks>
            Private Function CriaNodeMapFromTreeNode(ByVal Node As TreeNode, Optional ByVal NodeMapFilhos As Object = Nothing, Optional ByVal InsereFilhos As Boolean = True) As SiteMapNode
                Dim Texto As String = Node.Text
                If _RetiraTags Then
                    Texto = Trim(RegexGroup(Texto, "( )*(<[^>]*>)*( )*([^<]*)", 4).Value)
                End If

                Dim NodeMap As SiteMapNode = CriaNodeMap(New SiteMapNode(Me, Node.ValuePath, Node.NavigateUrl, Texto, Node.ToolTip), NodeMapFilhos, InsereFilhos)
                Return NodeMap
            End Function

            ''' <summary>
            ''' Cria nó em posição de árvore já incluindo filhos.
            ''' </summary>
            ''' <param name="NodeMap">Posição na árvore.</param>
            ''' <param name="NodeMapFilhos">Filhos a serem incluídos.</param>
            ''' <param name="InsereFilhos">Se devem ser incluídos os filhos ou não.</param>
            ''' <returns>Retorna a árvore.</returns>
            ''' <remarks></remarks>
            Private Function CriaNodeMap(ByVal NodeMap As SiteMapNode, Optional ByVal NodeMapFilhos As Object = Nothing, Optional ByVal InsereFilhos As Boolean = True) As SiteMapNode
                ' nodemap vem com o tal

                ' isso permite que eu passe um ou uma coleção de sitemapnodes
                If Not IsNothing(NodeMapFilhos) Then
                    If TypeOf NodeMapFilhos Is SiteMapNode Then
                        NodeMapFilhos = New SiteMapNodeCollection(CType(NodeMapFilhos, SiteMapNode))
                    End If
                    NodeMap.ChildNodes = New SiteMapNodeCollection
                    NodeMap.ChildNodes.AddRange(NodeMapFilhos)
                End If

                Return NodeMap
            End Function

            ''' <summary>
            ''' Cria lista de nós para árvore.
            ''' </summary>
            ''' <param name="Nodes">Nós a serem colocados na lista.</param>
            ''' <returns>Lista (coleção) de nós.</returns>
            ''' <remarks></remarks>
            Private Function CriaNodes(ByVal Nodes As TreeNodeCollection) As SiteMapNodeCollection
                Dim NodeMaps As New SiteMapNodeCollection
                For Each Node As TreeNode In Nodes
                    NodeMaps.Add(CriaNodeMapFromTreeNode(Node))
                Next
                Return NodeMaps
            End Function

            ''' <summary>
            ''' Especificação da interface para busca do primeiro item na árvore de pesquisa.
            ''' </summary>
            ''' <param name="rawUrl">Ponto de referência.</param>
            ''' <returns>Primeiro nó a partir do ponto de referência.</returns>
            ''' <remarks></remarks>
            Public Overloads Overrides Function FindSiteMapNode(ByVal rawUrl As String) As System.Web.SiteMapNode
                If Not IsNothing(_Fonte) Then
                    Dim achou As TreeNode = ProcuraNode(_Fonte, NodeCampo.NavigateUrl, Urls(rawUrl))
                    If Not IsNothing(achou) Then
                        Return CriaNodeMapFromTreeNode(achou)
                    End If
                End If
                Return Nothing
            End Function

            ''' <summary>
            ''' Adiciona permissão a diretório e sub-diretórios.
            ''' </summary>
            ''' <param name="Diretorio">Diretório para o qual serão dadas as permissões.</param>
            ''' <param name="Usuario">Usuario.</param>
            ''' <param name="TipoControle">Tipo de Controle.</param>
            ''' <param name="TipoPermissao">Tipo de Permissão.</param>
            ''' <remarks></remarks>
            Public Shared Sub AdicionaPermissaoDiretorio(ByVal Diretorio As String, ByVal Usuario As String, ByVal TipoControle As System.Security.AccessControl.AccessControlType, ByVal ParamArray TipoPermissao As System.Security.AccessControl.FileSystemRights())
                If Diretorio <> "" Then
                    Dim Seguranca As System.Security.AccessControl.DirectorySecurity = Directory.GetAccessControl(Diretorio)
                    Dim Sid As New System.Security.Principal.SecurityIdentifier(System.Security.Principal.WellKnownSidType.WorldSid, Nothing)
                    Dim NT As System.Security.Principal.NTAccount = TryCast(Sid.Translate(GetType(System.Security.Principal.NTAccount)), System.Security.Principal.NTAccount)

                    Seguranca.PurgeAccessRules(NT)

                    For Each Perm As System.Security.AccessControl.FileSystemRights In TipoPermissao
                        Seguranca.SetAccessRule(New System.Security.AccessControl.FileSystemAccessRule(NT, Perm, System.Security.AccessControl.InheritanceFlags.ContainerInherit Or System.Security.AccessControl.InheritanceFlags.ObjectInherit, System.Security.AccessControl.PropagationFlags.None, TipoControle))
                    Next

                    Directory.SetAccessControl(Diretorio, Seguranca)
                End If
            End Sub

            ''' <summary>
            ''' Busca de filhos a partir de um nó.
            ''' </summary>
            ''' <param name="node">Nó onde queremos pesquisar os filhos.</param>
            ''' <returns>Filhos encontrados.</returns>
            ''' <remarks></remarks>
            Public Overrides Function GetChildNodes(ByVal node As System.Web.SiteMapNode) As System.Web.SiteMapNodeCollection
                If Not IsNothing(_Fonte) Then
                    If node.Key = "HOME" Then
                        Return CriaNodes(_Fonte)
                    Else
                        Dim achou As TreeNode = ProcuraNode(_Fonte, NodeCampo.ValuePath, node.Key)
                        If Not IsNothing(achou) Then
                            Return CriaNodes(achou.ChildNodes)
                        End If
                    End If
                End If
                Return Nothing
            End Function

            ''' <summary>
            ''' Busca parent (nó superior) do nó informado.
            ''' </summary>
            ''' <param name="node">Nó para o qual queremos buscar parente.</param>
            ''' <returns>Parente do nó caso exista.</returns>
            ''' <remarks></remarks>
            Public Overrides Function GetParentNode(ByVal node As System.Web.SiteMapNode) As System.Web.SiteMapNode
                If Not IsNothing(_Fonte) AndAlso Not node.Key = "HOME" Then
                    Dim achou As TreeNode = ProcuraNode(_Fonte, NodeCampo.ValuePath, node.Key)
                    If Not IsNothing(achou) AndAlso Not IsNothing(achou.Parent) Then
                        Return CriaNodeMapFromTreeNode(achou.Parent)
                    Else
                        Return CriaNodeMapHome()
                    End If
                End If
                Return Nothing
            End Function

            ''' <summary>
            ''' Busca raiz da árvore.
            ''' </summary>
            ''' <returns>Raiz da árvore.</returns>
            ''' <remarks></remarks>
            Protected Overrides Function GetRootNodeCore() As System.Web.SiteMapNode
                If Not IsNothing(_Fonte) Then
                    Return CriaNodeMapHome()
                End If
                Return Nothing
            End Function
        End Class

        ''' <summary>
        ''' Recurso para simplificar a criação de algumas tags html.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class HTML
            ''' <summary>
            ''' Orientação corresponde ao sentido inicial de preenchimento da tabela. Horizontal para preencher da esquerda para direita e vertical para preencher de cima para baixo.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum Table_Sentido
                Horizontal
                Vertical
            End Enum

            ''' <summary>
            ''' Função a href cria uma referência de link em um determinado código html.
            ''' </summary>
            ''' <param name="html">Código html que aparecerá sublinhado sendo o link para a execução desejada.</param>
            ''' <param name="link">URL ou código de execução desejada.</param>
            ''' <param name="ListaEstilos">Lista de estilos esperada podendo ser ":link", "border:1px solid red;background-color:#ff0000".</param>
            ''' <returns>Um html contendo o código com a referência.</returns>
            ''' <remarks></remarks>
            Shared Function A_HRef(ByVal html As String, ByVal link As String, ByVal ParamArray ListaEstilos() As Object) As String
                Dim Estilos As ArrayList = ParamArrayToArrayList(ListaEstilos)

                Dim Result As String = html
                If link <> "" Then
                    Result = "<a href=" & SqlExpr(link) & StrStyle("link", Estilos) & ">" & HttpUtility.HtmlEncode(html) & "</a>"
                End If
                Return Result
            End Function

            ''' <summary>
            ''' Cria uma janela de ajuda com informações sobre a página.
            ''' </summary>
            ''' <param name="Page">Página que será detalhada.</param>
            ''' <param name="LISTA">Informações que deverão ser mostradas em formato de tabela.</param>
            ''' <returns>Retorna uma tela de ajuda com informações sobre a página.</returns>
            ''' <remarks></remarks>
            Shared Function Help(ByVal Page As Page, ByVal ParamArray Lista() As Object) As String
                Dim RET As String = "<html>"
                RET &= "<head>" & vbCrLf
                RET &= "</head>" & vbCrLf
                RET &= "<body>" & vbCrLf
                RET &= "<h1>" & Page.Server.HtmlEncode("Detalhamento de parâmetros da página") & "</h1>"
                RET &= HTML.Table(ParamArrayToArrayList("Página", Page.Request.Url.AbsolutePath, "Versão", Versao, "-----------", "-----------", "Parâmetros", "...", Lista), HTML.Table_Sentido.Horizontal, 2, 0, Nothing)
                RET &= "</body>" & vbCrLf
                RET &= "</html>" & vbCrLf
                Return RET
            End Function

            ''' <summary>
            ''' Função privada para busca de estilo.
            ''' </summary>
            ''' <param name="Tipo">Tipo a ser pesquisado: row, col, cell, rowalt, colalt, tab, etc...</param>
            ''' <param name="Estilos">Lista de estilos no formato ":row", "background-color:#f8f8f8", ":rowalt", "background-color:#e8e8e8", ":cell", "padding:4px".</param>
            ''' <returns>Retorna a string contendo a formatação a ser inserida na tag contendo o estilo.</returns>
            ''' <remarks></remarks>
            Private Shared Function StrStyle(ByVal Tipo As String, ByVal Estilos As ArrayList) As String
                Dim Result As String = ""
                If Not IsNothing(Estilos) Then
                    Dim Ini As Integer = 0
                    Do While Ini < Estilos.Count
                        Dim Pos As Integer = Estilos.IndexOf(":" & Tipo, Ini)
                        If Pos >= 0 Then
                            Dim Achou As String = Estilos(Pos + 1)
                            If InStr(Achou, ":") = 0 Then
                                Result &= " class=" & SqlExpr(Achou)
                            ElseIf InStr(Achou, ":") <> 0 Then
                                Result &= " style=" & SqlExpr(Achou)
                            End If
                        Else
                            Pos = Estilos.Count
                        End If
                        Ini = Pos + 2
                    Loop
                End If
                Return Result
            End Function

            ''' <summary>
            ''' Simplifica o processo de obtenção do estilo para linhas alternadas pela inclusão de alt após o tipo.
            ''' </summary>
            ''' <param name="Tipo">Tipo que pode ser row, col, cell, tab etc...</param>
            ''' <param name="Estilos">Lista de estilos onde será procurado o tipo.</param>
            ''' <param name="Nr">Número da linha ou coluna que está sendo criada.</param>
            ''' <returns>Retorna string contendo estilo a ser aplicado no tag.</returns>
            ''' <remarks></remarks>
            Private Shared Function StrStyle(ByVal Tipo As String, ByVal Estilos As ArrayList, ByVal Nr As Integer) As String
                Dim Result As String = ""
                If Not IsNothing(Estilos) Then
                    If (Nr Mod 2) = 0 Then
                        Result = StrStyle(Tipo & "alt", Estilos)
                        If Result <> "" Then
                            Return Result
                        End If
                    End If
                    Return StrStyle(Tipo, Estilos)
                End If
                Return Result
            End Function

            ''' <summary>
            ''' Cria o código da tabela seguindo um sentido e considerando os valores passados, porém sem encode.
            ''' </summary>
            ''' <param name="LISTA">Array para receber parâmetros.</param>
            ''' <param name="Sentido">Sentido pode ser horizonta para preenchimento da tabela da esquerda para direita e vertical para preencher de cima para baixo.</param>
            ''' <param name="QTDCOLS">Quantidade de colunas. Será priorizada esta quantidade caso seja sentido horizontal.</param>
            ''' <param name="QtdLinhas">Quantidade de linhas. Será priorizada esta quantidade caso seja sentido vertical.</param>
            ''' <param name="ListaEstilos">Lista de estilos configurados para preenchimento dos tags table, tr e td.</param>
            ''' <returns>Retorna o código html da tabela de acordo com os parâmetros passados, não considerando encode.</returns>
            ''' <remarks></remarks>
            Shared Function TableSemEncode(ByVal Lista As ArrayList, ByVal Sentido As Table_Sentido, ByVal QtdCols As Integer, ByVal QtdLinhas As Integer, ByVal ParamArray ListaEstilos() As Object) As String
                Dim Estilos As ArrayList = ParamArrayToArrayList(ListaEstilos)

                ' estilos compreendem pré-disposições
                '   tab = tabela
                '   col = coluna
                '   colalt = coluna alterana (par)
                '   cell = célula
                '   row = linha
                '   rowalt = linha alternada (par)
                ' formato:
                '              ":row", "background-color:#f8f8f8", ":rowalt", "background-color:#e8e8e8", ":cell", "padding:4px" ...

                ' calcula itens no sentido escolhido
                ' sentido horizontal, prioridade para colunas
                ' sentido vertical, prioridade para linhas

                Dim QtdItensNoSentido As Integer
                If Sentido = Table_Sentido.Horizontal Then
                    QtdItensNoSentido = NZV(QtdCols, Int((Lista.Count - 1) / NZV(QtdLinhas, 1)) + 1)
                Else
                    QtdItensNoSentido = NZV(QtdLinhas, Int((Lista.Count - 1) / NZV(QtdCols, 1)) + 1)
                End If

                Dim Result As String = ""
                Result = "<table" & StrStyle("tab", Estilos) & "> " & vbCrLf

                Dim nl As Integer = 1
                For z As Integer = 0 To IIf(Sentido = Table_Sentido.Horizontal, Lista.Count - 1, QtdItensNoSentido - 1) Step IIf(Sentido = Table_Sentido.Horizontal, QtdItensNoSentido, 1)
                    Result &= "    <tr" & StrStyle("row", Estilos, nl) & ">" & vbCrLf

                    Dim nc As Integer = 1
                    For zz As Integer = 0 To IIf(Sentido = Table_Sentido.Horizontal, QtdItensNoSentido - 1, Lista.Count - 1) Step IIf(Sentido = Table_Sentido.Horizontal, 1, QtdItensNoSentido)
                        Result &= "        <td" & StrStyle("col", Estilos, nc) & StrStyle("cell", Estilos) & ">" & vbCrLf
                        If (z + zz) < Lista.Count Then
                            Result &= NZ(Lista.Item(z + zz), "") & vbCrLf
                        Else
                            Result &= "&nbsp" & vbCrLf
                        End If
                        Result &= "        </td>" & vbCrLf
                        nc += 1
                    Next
                    Result &= "    </tr>" & vbCrLf
                    nl += 1
                Next

                Result &= "</table>"
                Return Result
            End Function

            ''' <summary>
            ''' Cria o código da tabela seguindo um sentido e considerando os valores passados.
            ''' </summary>
            ''' <param name="LISTA">Array para receber parâmetros.</param>
            ''' <param name="Sentido">Sentido pode ser horizonta para preenchimento da tabela da esquerda para direita e vertical para preencher de cima para baixo.</param>
            ''' <param name="QTDCOLS">Quantidade de colunas. Será priorizada esta quantidade caso seja sentido horizontal.</param>
            ''' <param name="QtdLinhas">Quantidade de linhas. Será priorizada esta quantidade caso seja sentido vertical.</param>
            ''' <param name="ListaEstilos">Lista de estilos configurados para preenchimento dos tags table, tr e td.</param>
            ''' <returns>Retorna o código html da tablela de acordo com os parâmetros passados.</returns>
            ''' <remarks></remarks>
            Shared Function Table(ByVal Lista As Object, ByVal Sentido As Table_Sentido, ByVal QtdCols As Integer, ByVal QtdLinhas As Integer, ByVal ParamArray ListaEstilos() As Object) As String
                Dim AR As ArrayList = ParamArrayToArrayList(Lista)
                Return Table(AR, Sentido, QtdCols, QtdLinhas, ListaEstilos)
            End Function

            ''' <summary>
            ''' Cria código de tabela seguindo um determinado sentido considerando uma lista de valores sequenciados.
            ''' </summary>
            ''' <param name="LISTA">Lista de conteúdos sequenciados.</param>
            ''' <param name="Sentido">Sentido pode ser horizonta para preenchimento da tabela da esquerda para direita e vertical para preencher de cima para baixo.</param>
            ''' <param name="QTDCOLS">Quantidade de colunas. Será priorizada esta quantidade caso seja sentido horizontal.</param>
            ''' <param name="QtdLinhas">Quantidade de linhas. Será priorizada esta quantidade caso seja sentido vertical.</param>
            ''' <param name="ListaEstilos">Lista de estilos configurados para preenchimento dos tags table, tr e td.</param>
            ''' <returns>Retorna o código html da tabela contendo os valores.</returns>
            ''' <remarks></remarks>
            Shared Function Table(ByVal Lista As ArrayList, ByVal Sentido As Table_Sentido, ByVal QtdCols As Integer, ByVal QtdLinhas As Integer, ByVal ParamArray ListaEstilos() As Object) As String
                Dim Estilos As ArrayList = ParamArrayToArrayList(ListaEstilos)

                ' estilos compreendem pré-disposições
                '   tab = tabela
                '   col = coluna
                '   colalt = coluna alterana (par)
                '   cell = célula
                '   row = linha
                '   rowalt = linha alternada (par)
                ' para definir estilo, é só mencionar pré-disposições seguindo de ":" mais os itens conforme cláusula style
                ' exemplo: col:background-color:#F0F0F0;border:1px solid red

                ' calcula itens no sentido escolhido
                ' sentido horizontal, prioridade para colunas
                ' sentido vertical, prioridade para linhas

                For z As Integer = 0 To Lista.Count - 1
                    Lista.Item(z) = HttpUtility.HtmlEncode(NZV(Lista.Item(z), "--"))
                Next

                Return TableSemEncode(Lista, Sentido, QtdCols, QtdLinhas, ListaEstilos)
            End Function

            ''' <summary>
            ''' Protege a formatação do texto com encode.
            ''' </summary>
            ''' <param name="Texto">Texto que será protegido.</param>
            ''' <returns>Retorna o texto digitado mantendo o encode.</returns>
            ''' <remarks></remarks>
            Shared Function Protege(ByVal Texto As String) As String
                Dim HTTP As HttpContext = HttpContext.Current
                Dim Ret As String = ""

                ' preparação geral
                Ret = HTTP.Server.HtmlEncode(Texto)
                Ret = "<p>" & Ret.Replace(vbCrLf, "</p><p>") & "</p>"

                ' html permitido
                ' vou ativar quando necessário protegidotag, para permitir algumas cláusulas em tag
                Ret = Ret.Replace("&lt;b&gt;", "<strong>")
                Ret = Ret.Replace("&lt;/b&gt;", "</strong>")
                Ret = Ret.Replace("&lt;h1&gt;", "<h1>")
                Ret = Ret.Replace("&lt;/h1&gt;", "</h1>")
                Return Ret
            End Function

            'Shared FunctionXX ProtegidoTag(ByVal Texto As String, ByVal RegexTag As String) As String
            '    Dim Result As String = Texto
            '    Dim Menos As Integer = 0
            '    For Each m As Match In System.Text.RegularExpressions.Regex.Matches(Result, Mascara)
            '        Result = Result.Substring(0, m.Groups(Grupo).Index - Menos) & TrocarPara & Result.Substring(m.Groups(Grupo).Index + m.Groups(Grupo).Length - Menos)
            '        Menos += m.Groups(Grupo).Length
            '    Next
            '    Return Result
            'End Function
        End Class





        ''' <summary>
        ''' Objeto para manipulação de texto como html.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class RegexHtml

            ''' <summary>
            ''' Tipo de manuseio de regexhtml.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum TipoStatus
                OK
                ErroProx
                ErroDentro
                ErroItem
            End Enum

            ''' <summary>
            ''' Define variáveis que serão utilizadas na classe.
            ''' </summary>
            ''' <remarks></remarks>
            Dim _m As Match = Nothing
            Dim Trecho As String = ""
            Dim Niveis As Integer
            Dim Tag As String
            Dim Status As TipoStatus = TipoStatus.OK

            ''' <summary>
            ''' Obtem uma determinada tag em um texto respeitando o nível inserido.
            ''' </summary>
            ''' <param name="Texto">Texto que será buscada a tag.</param>
            ''' <param name="Tag">Tag que será buscada.</param>
            ''' <param name="Niveis">Nível que será o limite máximo de busca.</param>
            ''' <returns>Retorna a tag encontrada no texto.</returns>
            ''' <remarks></remarks>
            Public Shared Function Obtem(ByVal Texto As String, Optional ByVal Tag As String = "", Optional ByVal Niveis As Integer = 4) As RegexHtml
                Dim r As New RegexHtml(Texto, Tag, Niveis)
                Return r
            End Function

            ''' <summary>
            ''' Define status para a busca.
            ''' </summary>
            ''' <param name="Texto">Texto que será usado na busca.</param>
            ''' <param name="Tag">Tag que será buscada.</param>
            ''' <param name="Niveis">Nível de limitará a busca.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Texto As String, Optional ByVal Tag As String = "", Optional ByVal Niveis As Integer = 4)
                Me.Trecho = Texto
                Me.Niveis = Niveis
                Me.Tag = Tag
                Status = TipoStatus.OK
            End Sub

            ''' <summary>
            ''' Verifica o status da busca, se for OK envia o resultado do regex para a variável _m.
            ''' </summary>
            ''' <value>Passa o valor da consulta para a variável _m caso status não for igual a OK.</value>
            ''' <returns>Retorna o resultado da consulta em regex.</returns>
            ''' <remarks></remarks>
            Property M() As Match
                Get
                    Try
                        If Status = TipoStatus.OK Then
                            If IsNothing(_m) Then
                                _m = Regex.Match(Trecho, RegexMascTags(Tag, Me.Niveis))
                            End If
                        End If
                        Return _m
                    Catch
                    End Try
                    Return Nothing
                End Get
                Set(ByVal value As Match)
                    _m = value
                End Set
            End Property

            ''' <summary>
            ''' Buscar um objeto em específico através da biblioteca RegEx.
            ''' </summary>
            ''' <returns>O trecho encontrado de acordo com os filtros do RegEx.</returns>
            ''' <remarks></remarks>
            Function Ms() As System.Text.RegularExpressions.MatchCollection
                Return Regex.Matches(Trecho, RegexMascTags(Tag, Me.Niveis))
            End Function

            ''' <summary>
            ''' Avança a busca para o próximo.
            ''' </summary>
            ''' <returns>Retorna o resultado da busca. Caso ocorra erro, Status = ErroProx</returns>
            ''' <remarks></remarks>
            Function Prox() As RegexHtml
                Try
                    If Status = TipoStatus.OK Then
                        M = M.NextMatch()
                    End If
                Catch
                    Status = TipoStatus.ErroProx
                End Try
                Return Me
            End Function

            ''' <summary>
            ''' Busca por uma tag desejada em um texto a partir de uma consulta regex.
            ''' </summary>
            ''' <param name="TagDesejada">Tag que será buscada.</param>
            ''' <returns>Retorna o resultado da consulta e o status ErroDentro caso ocorra algum erro.</returns>
            ''' <remarks></remarks>
            Function Dentro(Optional ByVal TagDesejada As String = Nothing) As RegexHtml
                Try
                    If Status = TipoStatus.OK Then
                        Trecho = M.Groups("inner").Value
                        If Not IsNothing(TagDesejada) Then
                            Tag = TagDesejada
                        End If
                        M = Regex.Match(Trecho, RegexMascTags(Tag, Niveis))
                    End If
                Catch
                    Status = TipoStatus.ErroDentro
                End Try
                Return Me
            End Function

            ''' <summary>
            ''' Busca por um item específico em um texto.
            ''' </summary>
            ''' <param name="Indice">Índice que será buscado.</param>
            ''' <returns>Retorna o resultado da consulta. Em caso de erro, Status = ErroItem.</returns>
            ''' <remarks></remarks>
            Default ReadOnly Property Item(ByVal Indice As Integer) As RegexHtml
                Get
                    Try
                        If Status = TipoStatus.OK Then
                            Dim ms As System.Text.RegularExpressions.MatchCollection = Regex.Matches(Trecho, RegexMascTags(Tag, Me.Niveis))
                            M = ms.Item(Indice)
                        End If
                    Catch
                        Status = TipoStatus.ErroItem
                    End Try
                    Return Me
                End Get
            End Property

            ''' <summary>
            ''' Busca no interior.
            ''' </summary>
            ''' <returns>Retorna o resultado da busca.</returns>
            ''' <remarks></remarks>
            Function Inner() As String
                Try
                    If Status = TipoStatus.OK Then
                        Return M.Groups("inner").Value
                    End If
                Catch
                End Try
                Return Nothing
            End Function

            ''' <summary>
            ''' Busca fora.
            ''' </summary>
            ''' <returns>Retorna o resultado da busca.</returns>
            ''' <remarks></remarks>
            Function Outer() As String
                Try
                    If Status = TipoStatus.OK Then
                        Return M.Value
                    End If
                Catch
                End Try
                Return Nothing
            End Function
        End Class

        ''' <summary>
        ''' Comando de paginação para mover registros em data repeater.
        ''' </summary>
        ''' <param name="DataRep">Data repeater a ser controlado.</param>
        ''' <param name="Fonte">Fonte de dados.</param>
        ''' <param name="NumLinhas">Número de linhas a considerar.</param>
        ''' <param name="PagAtual">Item atual (ou página).</param>
        ''' <param name="Adicao">True se permitir adição ou false caso contrário.</param>
        ''' <param name="Chave">Chave do registro atual.</param>
        ''' <param name="SinalizaItem">True para marcar visualmente o item na tela.</param>
        ''' <param name="Comando">Que comando deseja executar?</param>
        ''' <param name="Paineis">Paineis a atualizar após a modificação.</param>
        ''' <returns>Datasource paginado.</returns>
        ''' <remarks></remarks>
        Shared Function PaginacaoComando(ByRef DataRep As Repeater, ByVal Fonte As Object, ByVal NumLinhas As Integer, ByVal PagAtual As Integer, ByVal Adicao As Boolean, ByVal Chave As String, ByRef SinalizaItem As Integer, ByVal Comando As String, ByVal ParamArray Paineis() As Object) As PagedDataSource
            Dim DV As DataView
            If TypeOf (Fonte) Is System.Data.DataView Then
                DV = CType(Fonte, DataView)
            Else
                DV = CType(Fonte, DataSet).Tables(0).DefaultView
            End If

            SinalizaItem = -1
            If Chave <> "" Then
                DV.Sort = Replace(Chave, ";", ",")
                If DV.Count > 0 Then
                    If IsDBNull(DV(DV.Count - 1)(0)) Then
                        DV.Delete(DV.Count - 1)
                    End If
                End If

                If Not IsNothing(Comando) Then
                    If Comando.StartsWith("CH=", StringComparison.OrdinalIgnoreCase) Then
                        Dim pos As Integer = DV.Find(Split(Mid(Comando, 4), "|"))
                        If pos <> -1 Then
                            PagAtual = Int(pos / NumLinhas) + 1  'pag um como inicial
                            SinalizaItem = pos Mod NumLinhas     'item zero como primeiro
                        End If
                    End If
                End If
            End If

            Return Paginacao(DataRep, DV, NumLinhas, PagAtual, Adicao, Paineis)
        End Function

        ''' <summary>
        ''' Comando de paginação para mover registros em data repeater.
        ''' </summary>
        ''' <param name="DataRep">Data repeater a ser controlado.</param>
        ''' <param name="Fonte">Fonte de dados.</param>
        ''' <param name="NumLinhas">Número de linhas a considerar.</param>
        ''' <param name="PagAtualouChave">Ponto onde paginação deverá se posicionar.</param>
        ''' <param name="Adicao">True se permitir adição ou false caso contrário.</param>
        ''' <param name="Paineis">Paineis a atualizar após a modificação.</param>
        ''' <returns>Datasource paginado.</returns>
        ''' <remarks></remarks>
        Shared Function Paginacao(ByRef DataRep As Object, ByVal Fonte As Object, ByVal NumLinhas As Integer, ByVal PagAtualouChave As Object, ByVal Adicao As Boolean, ByVal ParamArray Paineis() As Object) As PagedDataSource
            Dim Pag As PagedDataSource = New PagedDataSource

            Dim DV As DataView = Nothing
            If TypeOf (Fonte) Is System.Data.DataRowCollection OrElse IsNothing(Fonte) Then
                Pag.DataSource = Fonte
            ElseIf TypeOf (Fonte) Is System.Data.DataView OrElse TypeOf (Fonte) Is System.Data.DataSet OrElse TypeOf (Fonte) Is System.Data.DataTable Then
                If TypeOf (Fonte) Is System.Data.DataView Then
                    DV = CType(Fonte, DataView)
                ElseIf TypeOf (Fonte) Is System.Data.DataTable Then
                    DV = CType(Fonte, System.Data.DataTable).DefaultView
                Else
                    DV = CType(Fonte, DataSet).Tables(0).DefaultView
                End If
                If DV.Count > 0 Then
                    If IsDBNull(DV(DV.Count - 1)(0)) Then
                        DV.Delete(DV.Count - 1)
                    End If
                End If
                If Adicao Then
                    DV.AddNew()
                End If
                Pag.DataSource = DV
            ElseIf Fonte.GetType.GetInterfaces.Contains(GetType(Collections.IEnumerable)) Then
                Dim f As System.Collections.IEnumerable = Fonte
                Pag.DataSource = f
            End If

            Pag.AllowPaging = True
            Pag.PageSize = NumLinhas

            ' calcula última página
            Dim UltPag As Integer = Int((Pag.DataSourceCount - Pag.PageSize - IIf(Adicao, 1, 0)) / Pag.PageSize) + 1

            ' busca página atual
            ' ultpag está com num de 1..
            ' PagAtualouChave também.
            If TypeOf (PagAtualouChave) Is ArrayList AndAlso Not IsNothing(DV) Then
                ' busca pela chave
                PagAtualouChave = DV.Table.Rows.IndexOf(DV.Table.Rows.Find(CType(PagAtualouChave, ArrayList).ToArray)) + 1
            Else
                ' caso seja passado número, ocorre posicionamento por registro
                If PagAtualouChave = 0 Then
                    PagAtualouChave = UltPag
                ElseIf PagAtualouChave > Pag.PageCount Then
                    PagAtualouChave = 1
                ElseIf PagAtualouChave <= -1 Then
                    PagAtualouChave = UltPag + 1
                End If
            End If

            ' currentpageindex vai de zero em diante
            Pag.CurrentPageIndex = PagAtualouChave - 1

            ' currentpage < 0 sign um reg somente (vai para último sempre)
            If Pag.CurrentPageIndex < 0 Then
                Pag.CurrentPageIndex = 0
            End If


            If Not IsNothing(DataRep) Then
                ' se currentpageindex for maior que num pags, nothing
                If Pag.CurrentPageIndex >= Pag.PageCount Or Pag.CurrentPageIndex < 0 Then
                    DataRep.DataSource = Nothing
                Else
                    DataRep.DataSource = Pag
                End If
            End If

            ' ativa desativa botões
            Dim PaineisArr As ArrayList = ParamArrayToArrayList(Paineis)
            For Each painel As Object In PaineisArr
                If TypeOf (painel) Is Panel Then
                    CType(painel, Panel).Enabled = True
                    For Each ctl As Control In CType(painel, Panel).Controls
                        If InStr(ctl.ID, "Anterior") <> 0 Then
                            Prop(ctl, "Enabled") = Not Pag.IsFirstPage
                        ElseIf InStr(ctl.ID, "Proximo") <> 0 Then
                            Prop(ctl, "Enabled") = Not Pag.IsLastPage
                        ElseIf InStr(ctl.ID, "Primeiro") <> 0 Then
                            Prop(ctl, "Enabled") = Not Pag.IsFirstPage
                        ElseIf InStr(ctl.ID, "Ultimo") <> 0 Then
                            Prop(ctl, "Enabled") = Not Pag.IsLastPage
                        ElseIf InStr(ctl.ID, "QtdPags") <> 0 Then
                            Prop(ctl, "Text") = UltPag
                        ElseIf InStr(ctl.ID, "PagAtualouChave") <> 0 Then
                            Prop(ctl, "ValorAnterior") = Prop(ctl, "Text")
                            Prop(ctl, "Text") = PagAtualouChave
                        ElseIf InStr(ctl.ID, "Novo") <> 0 Then
                            Prop(ctl, "Enabled") = Adicao And (Pag.CurrentPageIndex < (Pag.PageCount - 1))
                        End If
                    Next
                End If
            Next

            Return Pag
        End Function

        ''' <summary>
        ''' Prepara response com especificações padronizadas para download.
        ''' </summary>
        ''' <param name="Pagina">Página de onde será feito o download.</param>
        ''' <param name="Tamanho">Tamanho ou ZERO para não incluir parâmetro de tamanho.</param>
        ''' <param name="NomeDeDownload">Nome do arquivo de download.</param>
        ''' <param name="ContentType"></param>
        ''' <param name="Cache">False se não deseja cache ou true se deseja.</param>
        ''' <param name="DataCria">Data de criação deste arquivo.</param>
        ''' <param name="DataAltera">Data de alteração do arquivo.</param>
        ''' <param name="DataLeitura">Data da última leitura deste arquivo.</param>
        ''' <remarks></remarks>
        Shared Sub DownloadPrep(ByVal Pagina As Page, ByVal Tamanho As Integer, ByVal NomeDeDownload As String, Optional ByVal ContentType As String = "application/octet-stream", Optional ByVal Cache As Boolean = False, Optional ByVal DataCria As Date = Nothing, Optional ByVal DataAltera As Date = Nothing, Optional ByVal DataLeitura As Date = Nothing)
            Pagina.Response.Clear()
            Pagina.Response.ClearContent()
            Pagina.Response.ClearHeaders()
            Pagina.Response.Cookies.Clear()
            Pagina.Response.Cache.SetCacheability(HttpCacheability.Private)
            Pagina.Response.CacheControl = "private"
            Pagina.Response.ContentType = ContentType
            If Not Cache Then
                Pagina.Response.Expires = 0
                Pagina.Response.AppendHeader("Pragma", "no-cache")
            End If
            Dim Dispo As String = "attachment; filename=""" & NomeDeDownload & """"
            If Tamanho <> 0 Then
                Pagina.Response.AddHeader("Content-Length", Tamanho)
                Dispo &= "; size=" & Tamanho
            End If
            If DataAltera <> CDate(Nothing) Then
                Pagina.Response.AddHeader("Last-Modified", DateTime.Now.ToString("R"))
            End If


            ' desabilitei por ter dado erro no chrome que mencionava ter reader duplicado - luciano
            ' If DataAltera <> CDate(Nothing) Then
            '  Dispo &= "; modification-date=" + DateTime.Now.ToString("R")
            ' End If
            ' If DataCria <> CDate(Nothing) Then
            '     Dispo &= "; creation-date=" & DataCria.ToString("R")
            ' End If
            ' If DataLeitura <> CDate(Nothing) Then
            '     Dispo &= "; read-date=" & DateTime.Now.ToString("R")
            ' End If
            '  ao invés disso, coloquei trecho como mencionado no superdownload

            ' HTTP/1.1 200 OK
            ' Server: XXXXXXXXXXXXXXX
            ' Date: Tue, 31 Jan 2012 00:24:50 GMT
            ' Content-Type: image/gif
            ' Content-Length: 35
            ' Last-Modified: Mon, 22 Nov 2010 21:57:50 GMT
            ' Connection: close()
            ' Cache-Control: "no-store, no-cache, must-revalidate, post-check=0, pre-check=0, false"
            ' Expires: "Sat, 26 Jul 1997 05:00:00 GMT"
            ' Accept(-Ranges) : bytes()

            Pagina.Response.AppendHeader("Content-Disposition", Dispo)
        End Sub


        ''' <summary>
        ''' Prepara especificações padronizadas para o download de arquivos PDF.
        ''' </summary>
        ''' <param name="Pagina">Página de onde será feito o download.</param>
        ''' <param name="PDF">Especifica o diretório como sendo PDF.</param>
        ''' <param name="NomeDeDownload">Nome do arquivo de download.</param>
        ''' <param name="Encoding">Codificação utilizada para criação do fluxo sendo UTF8 como padrão.</param>
        ''' <remarks></remarks>
        Public Shared Sub DownloadPDF(ByVal Pagina As Page, ByVal PDF As String, Optional ByVal NomeDeDownload As String = "", Optional ByVal Encoding As System.Text.Encoding = Nothing)
            PDF = FileExpr(PDF)
            If NomeDeDownload = "" Then
                NomeDeDownload = System.IO.Path.GetFileName(PDF)
            End If
            Dim TamArq As Integer = (New IO.FileInfo(PDF)).Length
            DownloadPrep(Pagina, TamArq, NomeDeDownload, "application/pdf", False, Now, Now, Now)
            Pagina.Response.TransmitFile(PDF)
            Pagina.Response.Flush()
            Pagina.Response.End()
        End Sub

        ''' <summary>
        ''' Certifica informações sobre o login.
        ''' </summary>
        ''' <param name="Pagina">Página que foi feito o login.</param>
        ''' <param name="Usuario">Usuário que efetuou o login.</param>
        ''' <param name="Senha">Senha do usuário que efetuou o login.</param>
        ''' <param name="RedirAuto">Redireciona para onde foi solicitado.</param>
        ''' <param name="Grupo">Grupo do usuário que efetuou o login.</param>
        ''' <remarks></remarks>
        Shared Sub LoginCertifica(ByVal Pagina As Page, ByVal Usuario As String, ByVal Senha As String, Optional ByVal RedirAuto As Boolean = True, Optional ByVal Grupo As String = "")

            ' certifica logon
            Dim l As New LogonSession(Pagina, Usuario, Senha)

            Dim TckNome As String

            If Grupo = "" Then
                TckNome = Usuario
            Else
                TckNome = Grupo
                l.Grupo = Grupo
            End If

            Dim TckAuth As New FormsAuthenticationTicket(1, TckNome, Now, Now.AddHours(2), False, TckNome)
            Dim TckEncr As String = FormsAuthentication.Encrypt(TckAuth)
            Dim HttpC As HttpCookie = New HttpCookie(FormsAuthentication.FormsCookieName, TckEncr)
            Pagina.Response.Cookies.Add(HttpC)
            Pagina.Session.Timeout = 120


            ' salva na sessão
            Logon(Pagina) = l
            HttpContext.Current.Session("CONN_USER") = Usuario

            ' redireciona para formulário solicitado
            If RedirAuto Then
                FormsAuthentication.RedirectFromLoginPage(TckNome, False)
            End If
        End Sub

        ''' <summary>
        ''' Evento que ocorre antes que usuário deslogue sua sessão.
        ''' </summary>
        ''' <remarks></remarks>
        Shared Event AntesDeLogoff()

        ''' <summary>
        ''' Redirecionamento condicional.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="Destino">Url destino. Vazio corresponde à página HOME.</param>
        ''' <param name="Retorno">Url de retorno caso exista.</param>
        ''' <remarks></remarks>
        Shared Sub RedirCond(ByVal Page As Page, ByVal Destino As String, Optional ByVal Retorno As String = "", Optional ByVal ParamReturnUrl As String = "ReturnUrl")
            If Destino <> "" Then
                Dim Redir As String = NZV(Destino, "")
                If Redir <> "" Then
                    Dim RedirA As String = Trim(Regex.Match(UriRaiz(Redir), "(.*?)(\?|$)").Groups(1).Value)
                    Dim LocalA As String = Trim(Regex.Match(UriRaiz(Page.Request.Url.AbsolutePath), "(.*?)(\?|$)").Groups(1).Value)
                    If Compare(RedirA, LocalA) Then
                        Exit Sub
                    End If
                End If

                Destino = RetiraReturnUrl(Redir, ParamReturnUrl)
                If NZ(Retorno, "") <> "" Then
                    Destino &= IIf(InStr(Destino, "?") = 0, "?", "&") & ParamReturnUrl & "=" & Page.Server.UrlEncode(Retorno)
                End If
                Page.Response.Redirect(Destino)
            End If
        End Sub

        ''' <summary>
        ''' Obtém a quantidade de registros existentes em determinada base.
        ''' </summary>
        ''' <param name="MyBaseInst">Controle que será usado para a pesquisa.</param>
        ''' <value></value>
        ''' <returns>Retorna a quantidade de linhas em determinada base.</returns>
        ''' <remarks></remarks>
        Public Shared Property LinhaQuantidade(ByVal MyBaseInst As Control) As Integer
            Get
                Return CtlProp(MyBaseInst, "LINHAS_QUANTIDADE")
            End Get
            Set(ByVal value As Integer)
                CtlProp(MyBaseInst, "LINHAS_QUANTIDADE") = value
            End Set
        End Property

        ''' <summary>
        ''' Verifica a quantidade de linhas invalidas dentro da base.
        ''' </summary>
        ''' <param name="MyBaseInst">Controle que será usado para a pesquisa.</param>
        ''' <remarks></remarks>
        Public Shared Sub LinhaInvalidaTodas(ByVal MyBaseInst As Control)
            For z As Integer = 1 To LinhaQuantidade(MyBaseInst)
                LinhaInvalida(MyBaseInst, z) = True
            Next
        End Sub

        ''' <summary>
        ''' Verifica as linhas e salva os registros no buffer.
        ''' </summary>
        ''' <param name="MyBaseInst">Base que será usada.</param>
        ''' <param name="Container">Container onde ocorrerá a busca.</param>
        ''' <param name="Prefixo">Prefixo dos controles.</param>
        ''' <param name="Tipo">Tipo de dado existente.</param>
        ''' <param name="NumLinha">Delimita de onde começará a salvar os registros.</param>
        ''' <remarks></remarks>
        Public Shared Sub LinhaSalvaRegNoBuffer(ByVal MyBaseInst As Control, ByVal Container As Object, ByVal Prefixo As String, Optional ByVal Tipo As String = "", Optional ByVal NumLinha As Integer = -1)
            Dim log As String = ""
            ' -1 para salvar todas as linhas
            Dim Ini As Integer = NumLinha, Fim As Integer = NumLinha
            If NumLinha = -1 Then
                Ini = 1
                Fim = LinhaQuantidade(MyBaseInst)
            End If
            For z As Integer = Ini To Fim
                Dim DS As DataSet = New DataSet
                For Each ctl As Object In Form.Controles(Container, Prefixo)
                    Dim NomeCtl As String = Mid(ctl.ID, 4)
                    If DS.Tables(0).Rows.Count = 0 Then
                        DS.Tables(0).Rows.Add()
                    End If
                    If Not DS.Tables(0).Columns.Contains(NomeCtl) Then
                        DS.Tables(0).Columns.Add(NomeCtl)
                    End If
                    DS.Tables(0).Rows(0).Item(NomeCtl) = Controle.ValorAtual(ctl)
                Next
                LinhaDS(MyBaseInst, z, Tipo) = DS
            Next
        End Sub

        ''' <summary>
        ''' Busca os registros novos dentro de uma base.
        ''' </summary>
        ''' <param name="MyBaseInst">Controle que será usado para a pesquisa.</param>
        ''' <param name="NumLinha">Delimita os novos registros inseridos na base.</param>
        ''' <value>Valor a ser inserido.</value>
        ''' <returns>Retorna a quantidade de novos registros.</returns>
        ''' <remarks></remarks>
        Public Shared Property LinhaRegistroNovo(ByVal MyBaseInst As Control, ByVal NumLinha As Integer) As Boolean
            Get
                Return Mid(CtlProp(MyBaseInst, "LINHA_NOVA"), NumLinha, 1) = "X"
            End Get
            Set(ByVal value As Boolean)
                Mid(CtlProp(MyBaseInst, "LINHA_NOVA"), NumLinha, 1) = IIf(value, "X", " ")
            End Set
        End Property

        ''' <summary>
        ''' Linha inválida ou não.
        ''' </summary>
        ''' <param name="MyBaseInst">Lista de linhas.</param>
        ''' <param name="NumLinha">Linha a ser invalidada.</param>
        ''' <value>True caso linha invalidada ou false caso contrário.</value>
        ''' <returns>True caso linha esteja invalidada ou false caso contrário.</returns>
        ''' <remarks></remarks>
        Public Shared Property LinhaInvalida(ByVal MyBaseInst As Control, ByVal NumLinha As Integer) As Boolean
            Get
                Dim P As String = CtlProp(MyBaseInst, "LINHA_INV")
                If NumLinha > Len(P) Then
                    Return True
                End If
                Return (Mid(P, NumLinha, 1) = "X")
            End Get
            Set(ByVal value As Boolean)
                Dim P As String = CtlProp(MyBaseInst, "LINHA_INV")
                If Len(P) < NumLinha Then
                    P &= New String("X", NumLinha - Len(P))
                End If
                Mid(P, NumLinha, 1) = IIf(value, "X", " ")
                CtlProp(MyBaseInst, "LINHA_INV") = P
            End Set
        End Property

        ''' <summary>
        ''' Manipula linhas controladas.
        ''' </summary>
        ''' <param name="MyBaseInst">Objeto de carga das linhas controladas.</param>
        ''' <param name="NumLinha">Número da linha a ser manipulada.</param>
        ''' <param name="Tipo">Um texto livre de usuário para especificar o tipo de controle.</param>
        ''' <value>Linha solicitada.</value>
        ''' <returns>Linha solicitada.</returns>
        ''' <remarks></remarks>
        Public Shared Property LinhaDS(ByVal MyBaseInst As Control, ByVal NumLinha As Integer, Optional ByVal Tipo As String = "") As DataSet
            Get
                Return CtlProp(MyBaseInst, "LINHA_" & NumLinha & "_DS" & UCase(Tipo))
            End Get
            Set(ByVal value As DataSet)
                CtlProp(MyBaseInst, "LINHA_" & NumLinha & "_DS" & UCase(Tipo)) = value
            End Set
        End Property


        ''' <summary>
        ''' Informa se linha está selecionada.
        ''' </summary>
        ''' <param name="MyBaseInst">Objeto onde as linhas estão armazenadas.</param>
        ''' <param name="NumLinha">Número da linha que desejamos ou verificar ou selecionar.</param>
        ''' <value>True caso linha seja selecionada ou false caso contrário.</value>
        ''' <returns>True caso linha seja selecionada ou false caso contrário.</returns>
        ''' <remarks></remarks>
        Public Shared Property LinhaSelecionada(ByVal MyBaseInst As Control, ByVal NumLinha As Integer) As Boolean
            Get
                Return Mid(CtlProp(MyBaseInst, "LINHA_SEL"), NumLinha, 1) = "X"
            End Get
            Set(ByVal value As Boolean)
                Mid(CtlProp(MyBaseInst, "LINHA_SEL"), NumLinha, 1) = IIf(value, "X", " ")
            End Set
        End Property

        ''' <summary>
        ''' Verifica a quantidade de linhas alteradas dentro de uma base por meio da comparação de NumLinha com NumlinhaCompara.
        ''' </summary>
        ''' <param name="MyBaseInst">Base que será uasada para a consulta.</param>
        ''' <param name="NumLinha">Número anterior da linha.</param>
        ''' <param name="Tipo">Tipo de dados.</param>
        ''' <param name="TipoCompara">Tipo de dado para a comparação.</param>
        ''' <param name="NumLinhaCompara">Número atual</param>
        ''' <returns>Se houver diferença retorna false, senão retorna true.</returns>
        ''' <remarks></remarks>
        Public Shared Function LinhaAlterada(ByVal MyBaseInst As Control, ByVal NumLinha As Integer, ByVal Tipo As String, ByVal TipoCompara As String, Optional ByVal NumLinhaCompara As Integer = -1) As Boolean
            If NumLinhaCompara = -1 Then
                NumLinhaCompara = NumLinha
            End If
            Dim DS As DataSet = LinhaDS(MyBaseInst, NumLinha, Tipo)
            Dim DSCompara As DataSet = LinhaDS(MyBaseInst, NumLinhaCompara, TipoCompara)
            For Each CampoCtl As DataColumn In DS.Tables(0).Columns
                If DS.Tables(0).Rows(0).Item(CampoCtl) <> DSCompara.Tables(0).Rows(0).Item(CampoCtl) Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Verifica se linha está alterada.
        ''' </summary>
        ''' <param name="MyBaseInst">Objeto de pesquisa de linhas.</param>
        ''' <param name="Container">Container ou controle que será verificado se está alterado ou não.</param>
        ''' <param name="Prefixo">Prefixo que será pesquisado (qualquer campo no container alterado retornará true).</param>
        ''' <param name="NumLinhaCompara">Linha a ser comparada.</param>
        ''' <param name="TipoCompara">Texto definido pelo usuário para qualificar este conjunto.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function LinhaAlterada(ByVal MyBaseInst As Control, ByVal Container As Object, ByVal Prefixo As String, ByVal NumLinhaCompara As Integer, Optional ByVal TipoCompara As String = "") As Boolean
            Dim DSCompara As DataSet = LinhaDS(MyBaseInst, NumLinhaCompara, TipoCompara)
            For Each CampoCtl As Control In Form.Controles(Container, Prefixo)
                Dim NomeCtl As String = Mid(CampoCtl.ID, 4)
                If Prop(CampoCtl) <> DSCompara.Tables(0).Rows(0).Item(NomeCtl) Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Monta texto de erro.
        ''' </summary>
        ''' <param name="ObjErr">Objeto de erro.</param>
        ''' <param name="TextoSimplif">Texto simplificado ou complemento para melhor identificação da situação.</param>
        ''' <returns>Texto pronto incluindo mensagem tratada de erro e complemento.</returns>
        ''' <remarks></remarks>
        Shared Function TextoLogEx(ByVal ObjErr As Exception, Optional ByVal TextoSimplif As String = "") As String
            Dim Err As String = ""
            If Ambiente() = AmbienteTipo.Windowsforms Then
                Err = "----------------------------------------------------------------------------------------" & vbCrLf & "Momento: " & Format(Now, "yyyy-MM-dd ddd HH:mm:ss") & vbCrLf
                Err &= "Produto: " & System.Windows.Forms.Application.ProductName & vbCrLf
                Err &= "Aplicativo: " & System.Windows.Forms.Application.ExecutablePath & vbCrLf
                Err &= "Login na rede: " & ExprExpr("/", "", System.Environment.UserDomainName, System.Environment.UserName) & vbCrLf & vbCrLf

                If TextoSimplif <> "" Then
                    Err &= "Mensagem apresentada: " & TextoSimplif & vbCrLf & vbCrLf
                End If

                If Not IsNothing(ObjErr) Then


                    Err &= "Mensagem de erro:" & vbCrLf
                    Err &= ObjErr.Message & vbCrLf & vbCrLf
                    If Not IsNothing(ObjErr.StackTrace) Then
                        Err &= "Erro:" & vbCrLf
                        Err &= ObjErr.StackTrace.ToString().Replace(Chr(9), "    ")
                        Err &= vbCrLf & vbCrLf
                    End If

                End If
            Else
                Dim ctx As HttpContext = HttpContext.Current
                Err = "<span style='font-family:Verdana;font-weight:normal;font-size:.7em;color:black'>"
                Err &= "<span style='font-size:18pt;color:red'>Erro no site " & ctx.Server.HtmlEncode(WebConf("site_nome")) & "</span><br />"
                Err &= "<b>Momento:</b> " & Format(Now, "yyyy-MM-dd ddd HH:mm:ss") & "<br /><br />"
                Err &= "<b>P&aacute;gina de erro:</b> " & ctx.Request.Url.ToString() & "<br /><br />"
                Err &= "<b>IP do host:</b> " & ctx.Request.UserHostAddress.ToString & "<br /><br />"

                Try
                    If ctx.Session.Keys.Count > 0 Then
                        Err &= "<b>Vari&aacute;veis de sess&atilde;o:</b><ul>"
                        For Each var As String In ctx.Session.Keys
                            Err &= "<li><b>" & ctx.Server.HtmlEncode(var) & "</b> = "
                            Try
                                Err &= NZ(ctx.Session(var), "")
                            Catch
                                Err &= ctx.Session(var).GetType.ToString()
                            End Try
                            Err &= "</li>"
                        Next
                        Err &= "</ul>"
                    End If
                    Err &= "<br />"
                Catch
                End Try

                Err &= "<b>Servidor:</b> " & ctx.Server.MachineName & "<br /><br />"
                If TextoSimplif <> "" Then
                    Err &= "<b>Mensagem apresentada: " & ctx.Server.HtmlEncode(TextoSimplif) & "</b><br /><br />"
                End If
                If Not IsNothing(ObjErr) Then
                    Err &= "<b>Mensagem de erro:</b> "
                    If TypeOf (ObjErr) Is HttpException Then
                        With CType(ObjErr, HttpException)
                            Err &= .GetHttpCode & " - " & ctx.Server.HtmlEncode(ObjErr.Message)
                        End With
                    Else
                        Err &= ctx.Server.HtmlEncode(ObjErr.Message)
                    End If
                    Err &= "<br /><br />"
                    If Not IsNothing(ObjErr.StackTrace) Then
                        Err &= "<b>Erro:</b><br /><span style='font-size:12px'>"
                        Err &= ObjErr.StackTrace.ToString().Replace(Chr(13) & Chr(10), "<br />").Replace(Chr(9), "    ")
                        Err &= "</span><br /><br />"
                    End If
                End If
                Err &= "<hr />"
                Err &= "<br /></span>"
            End If
            Return Err
        End Function

        ''' <summary>
        ''' Registra mensagem de erro.
        ''' </summary>
        ''' <param name="Ex">Objeto de erro.</param>
        ''' <param name="TextoSimplif">Texto simplificado ou complemento para melhor identificação da situação.</param>
        ''' <remarks></remarks>
        Shared Sub ErroLogReg(ByVal Ex As Exception, Optional ByVal TextoSimplif As String = "", Optional ErroArqLog As String = "")
            Dim Texto As String = TextoLogEx(Ex, TextoSimplif)
            If NZ(WebConf("erro_remetente"), "") <> "" AndAlso WebConf("erro_notifica") <> "" Then
                EnviaEmail(WebConf("erro_remetente"), WebConf("erro_notifica"), "Erro no site " & WebConf("site_nome"), Texto, Net.Mail.MailPriority.High)
            End If
            If ErroArqLog = "" Then
                ErroArqLog = WebConf("erro_arqlog")
            End If
            If NZ(ErroArqLog, "") <> "" Then
                GravaLog(FileExpr(ErroArqLog), Texto)
            End If
        End Sub

        ''' <summary>
        ''' Define ou carrega valor de um controle. Utilizar Prop.
        ''' </summary>
        ''' <param name="Controles">Container onde controle será procurado.</param>
        ''' <param name="NomeControle">Nome do controle.</param>
        ''' <param name="Propriedade">Propriedade a ser pesquisada.</param>
        ''' <value>Valor do controle.</value>
        ''' <returns>Retorna o valor do controle.</returns>
        ''' <remarks></remarks>
        <Obsolete()> Shared Property Def(ByVal Controles As Control, ByVal NomeControle As String, Optional ByVal Propriedade As String = "") As Object
            Get
                Dim ctl As Control = Controles.FindControl(NomeControle)
                Return Prop(ctl, Propriedade)
            End Get
            Set(ByVal value As Object)
                Dim ctl As Control = Controles.FindControl(NomeControle)
                Prop(ctl, Propriedade) = value
            End Set
        End Property


        ''' <summary>
        ''' Inclui campo no formulário conforme pré-definição de layout.
        ''' </summary>
        ''' <param name="Objeto">Página ou formulário onde a operação irá ocorrer.</param>
        ''' <param name="Container">Container onde a inclusão acontecerá.</param>
        ''' <param name="Prefixo">Prefixo do controle.</param>
        ''' <param name="Nome">Nome do novo controle.</param>
        ''' <param name="LarguraCampo">Largura do campo.</param>
        ''' <param name="Tipo">Tipo de campo.</param>
        ''' <param name="Etiqueta">Etiqueta do campo.</param>
        ''' <param name="LarguraEtiq">Largura do campo.</param>
        ''' <param name="ToolTip">Ajuda do campo.</param>
        ''' <param name="ExtendedProps">Propriedades adicionais.</param>
        ''' <param name="Formato">Formato do campo.</param>
        ''' <param name="Tamanho">Tamanho do campo.</param>
        ''' <param name="Auto">Condição de campo automático.</param>
        ''' <param name="ValorPadrao">Valor para preenchimento padrão do campo.</param>
        ''' <param name="Sistema">Sistema correspondente.</param>
        ''' <param name="Tabela">Tabela a qual o campo irá se referir.</param>
        ''' <param name="StrGerador">String de conexão com gerador.</param>
        ''' <param name="STRCONN">String de conexão para busca de dados relacionados ao campo.</param>
        ''' <param name="Bloqueado">Se campo irá ser apresentado como bloqueado ou não.</param>
        ''' <param name="Estrut"></param>
        ''' <param name="Botoes"></param>
        ''' <param name="Template"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Shared Function IncluiCampo(ByVal Objeto As Object, ByVal Container As Table, ByVal Prefixo As String, ByVal Nome As String, ByVal LarguraCampo As String, ByVal Tipo As String, ByVal Etiqueta As String, ByVal LarguraEtiq As String, ByVal ToolTip As String, ByVal ExtendedProps As String, ByVal Formato As String, ByVal Tamanho As String, ByVal Auto As String, ByVal ValorPadrao As String, ByVal Sistema As String, ByVal Tabela As String, ByVal StrGerador As String, ByVal StrConn As String, ByVal Bloqueado As Boolean, Optional ByVal Estrut As MontaEstrut = Nothing, Optional ByVal Botoes As String = "", Optional ByVal Template As String = "t01") As Control
            Dim Reg As Match
            Dim Elem As ElementosStr = Nothing

            Dim Page As Page
            If TypeOf Objeto Is Page Then
                Page = Objeto
                Objeto = Nothing
            Else
                Page = Objeto.Page
            End If


            Dim etiq As Panel = Nothing
            Dim lbl As Label

            If Not Nome Like "SYS_*" Then


                ' prepara painel de comandos
                Dim comandos As New Panel
                If Botoes <> "" Then
                    For Each Botao As String In Split(Botoes, ";")
                        Dim bt As New Button
                        bt.Text = Botao
                        bt.ID = "btn" & Nome & "_" & TiraCaracEspec(Botao)
                        bt.CommandName = bt.ID
                        comandos.Controls.Add(bt)
                    Next
                End If

                ' disponibiliza propriedades do gerador...
                Dim Props As ElementosStr = New ElementosStr(ExtendedProps)

                ' verifica formato
                If Formato = "" Then
                    If Compare(Tipo, "System.Boolean") Then
                        Formato = "BOOL"
                    ElseIf Compare(Tipo, "System.Decimal") Then
                        Formato = "CURRENCY"
                    ElseIf Compare(Tipo, "System.Byte") Or Compare(Tipo, "System.Int32") Then
                        Formato = "INTEGER"
                    ElseIf Compare(Tipo, "System.Double") Or Compare(Tipo, "System.Single") Then
                        Formato = "REAL"
                    ElseIf Compare(Tipo, "System.DateTime") Then
                        Formato = "dd\/MM\/yyyy"
                    End If
                End If

                Dim trow As New TableRow



                Dim tcel As New TableCell
                tcel.VerticalAlign = VerticalAlign.Top

                ' inclui etiqueta
                If Etiqueta <> "" Then
                    etiq = New Panel
                    etiq.Style("text-align") = "left"
                    etiq.Style("float") = "left"
                    etiq.Style("margin-left") = "20px"
                    etiq.ID = "divlbl" & Nome
                    etiq.CssClass = "icftform_etiq"
                    etiq.Style.Add("width", LarguraEtiq & "px")
                    etiq.ToolTip = ToolTip

                    Dim etiqlbl As New Label
                    etiqlbl.ID = "lbl" & Nome
                    etiqlbl.Text = Etiqueta

                    etiq.Controls.Add(etiqlbl)
                    tcel.Controls.Add(etiq)
                End If

                trow.Cells.Add(tcel)

                tcel = New TableCell

                ' campo, caso seja booleano <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                If Compare(Formato, "bool") Then
                    Dim bool As CheckBox

                    bool = New CheckBox
                    bool.ID = Prefixo & Nome
                    bool.CssClass = "icftform_checkbox"
                    bool.ToolTip = ToolTip
                    bool.Attributes("ValorPadrao") = ValorPadrao

                    Select Case Template
                        Case "t02"
                        Case Else
                            bool.Style.Add("position", "relative")
                            bool.Style.Add("left", -(LarguraCampo / 2) - 5 & "px")
                    End Select

                    ' define outras propriedades
                    For Each prop As ElementoStr In Props.Elementos
                        bool.Style.Add(prop.Nome, prop.Conteudo)
                    Next

                    tcel.Controls.Add(bool)


                    ' adiciona caso tenha botões
                    If comandos.Controls.Count > 0 Then
                        tcel.Controls.Add(comandos)
                    End If
                    ' inclui quebra de linha
                    lbl = New Label
                    lbl.ID = "lblbr" & Nome
                    lbl.Text = "<br clear='all'/>"
                    tcel.Controls.Add(lbl)
                    trow.Cells.Add(tcel)
                    trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                    Container.Rows.Add(trow)
                    If Not IsNothing(etiq) Then
                        bool.Attributes("Etiq") = etiq.ID
                    End If


                    Return bool
                End If


                ' listaadd
                Reg = Regex.Match(Formato, "(?is)LISTAADD($|;)(.*)")
                If Reg.Groups(0).Value <> "" Then
                    Elem = New ElementosStr(Reg.Groups(2).Value)

                    Dim ctl As Object = Nothing
                    ctl = Page.LoadControl("~\uc\icftlistaadd\icftlistaadd.ascx")
                    ctl.id = Prefixo & Nome
                    ctl.tooltip = ToolTip
                    ctl.autobind = False
                    ctl.titulo = "Escolha lista para " & Etiqueta

                    ' define outras propriedades
                    For Each prop As ElementoStr In Props.Elementos
                        ctl.Style.Add(prop.Nome, prop.Conteudo)
                    Next
                    tcel.Controls.Add(ctl)


                    ' adiciona caso tenha botões
                    If comandos.Controls.Count > 0 Then
                        tcel.Controls.Add(comandos)
                    End If
                    ' inclui quebra de linha
                    lbl = New Label
                    lbl.ID = "lblbr" & Nome
                    lbl.Text = "<br clear='all'/>"
                    tcel.Controls.Add(lbl)
                    trow.Cells.Add(tcel)
                    trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                    Container.Rows.Add(trow)
                    If Not IsNothing(etiq) Then
                        ctl.Attributes("Etiq") = etiq.ID
                    End If

                    Return ctl
                End If



                ' radioopc
                Reg = Regex.Match(Formato, "(?is)RADIO_OPC($|;)(.*)")
                If Reg.Groups(0).Value <> "" Then
                    Elem = New ElementosStr(Reg.Groups(2).Value)
                    If Elem("LISTA").Conteudo <> "" Then

                        Dim ctl As New RadioButtonList
                        ctl.ID = Prefixo & Nome
                        ctl.ToolTip = ToolTip

                        ' define outras propriedades
                        For Each prop As ElementoStr In Props.Elementos
                            ctl.Style.Add(prop.Nome, prop.Conteudo)
                        Next

                        ' carrega itens
                        Dim Lista() As String = Split(ExibeTexto(Elem("LISTA").Conteudo), ";")
                        For z As Integer = 0 To Lista.Count - 1 Step 2
                            '                            If Not Compare(Lista(z + 1), "...") Then
                            ctl.Items.Add(New ListItem(Lista(z + 1), Lista(z)))
                            'Else
                            'ctl.Items.Add(New ListItem(Lista(z + 1), ""))
                            'End If
                        Next

                        tcel.Controls.Add(ctl)


                        ' adiciona caso tenha botões
                        If comandos.Controls.Count > 0 Then
                            tcel.Controls.Add(comandos)
                        End If
                        ' inclui quebra de linha
                        lbl = New Label
                        lbl.ID = "lblbr" & Nome
                        lbl.Text = "<br clear='all'/>"
                        tcel.Controls.Add(lbl)
                        trow.Cells.Add(tcel)
                        trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                        Container.Rows.Add(trow)
                        If Not IsNothing(etiq) Then
                            ctl.Attributes("Etiq") = etiq.ID
                        End If



                        Return ctl
                    End If
                End If




                Dim Reg2 As Match = Regex.Match(Formato, "(?is)HTML($|;)(.*)")

                ' campo, caso seja html <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                'If Compare(Formato, "html") Then
                If Reg2.Groups(0).Value <> "" Then
                    Dim Elem2 As New ElementosStr(Reg2.Groups(2).Value)
                    Dim div As New Panel
                    div.Style("padding-bottom") = "60px"
                    div.Style("display") = "inline-block"

                    Dim ctl As Object = Page.LoadControl("~\uc\icfttextarea\icfttextarea.ascx")
                    ctl.ID = Prefixo & Nome
                    ctl.Panel.CssClass = "icftform_html"
                    ctl.Largura = LarguraCampo & "PX"
                    ctl.Attributes("ValorPadrao") = ValorPadrao
                    ctl.caminho = NZV(Elem2.Items("caminho").Conteudo, "~/img")

                    ' define outras propriedades
                    For Each prop As ElementoStr In Props.Elementos
                        ctl.estilo(prop.Nome) = prop.Conteudo
                    Next

                    ctl.DATABIND()
                    div.Controls.Add(ctl)

                    trow.Cells.Add(New TableCell)
                    Container.Rows.Add(trow)

                    trow = New TableRow
                    tcel = New TableCell
                    tcel.Controls.Add(div)
                    tcel.ColumnSpan = 2
                    tcel.Style("text-align") = "right"

                    ' adiciona caso tenha botões
                    If comandos.Controls.Count > 0 Then
                        tcel.Controls.Add(comandos)
                    End If
                    ' inclui quebra de linha
                    lbl = New Label
                    lbl.ID = "lblbr" & Nome
                    lbl.Text = "<br clear='all'/>"
                    tcel.Controls.Add(lbl)
                    trow.Cells.Add(tcel)
                    trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                    Container.Rows.Add(trow)
                    If Not IsNothing(etiq) Then
                        ctl.Attributes("Etiq") = etiq.ID
                    End If



                    Return ctl
                End If

                ' combo, se com relacionamento ou opções no ToolTip <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
                Dim toolTipMatches As MatchCollection = RegularExpressions.Regex.Matches(NZ(ToolTip, ""), "(^|\b)(\w*?)=(\w*?)($|[ .,])")


                If (Sistema <> "" And Tabela <> "") OrElse toolTipMatches.Count > 0 Then
                    ' busca relacionamento n1

                    Dim rels As New RelsN1(Sistema, Tabela, Nome, StrGerador)

                    If rels.Count <> 0 OrElse toolTipMatches.Count > 0 Then
                        Dim list As DropDownList

                        list = New DropDownList
                        list.ID = Prefixo & Nome
                        list.ToolTip = ToolTip
                        list.CssClass = "icftform_lista"
                        list.Attributes("ValorPadrao") = ValorPadrao
                        list.Style("width") = LarguraCampo & "px"

                        Dim Atualiza As ArrayList = New ArrayList

                        If rels.Count <> 0 Then
                            For z As Integer = 0 To rels.Count - 1
                                If rels(z)("_CAMPOITEM") < (rels(z)("_CAMPOSQTD") - 1) Then
                                    Dim Campos As Array = Split(rels(z)("CAMPO_N"), ";")
                                    For zz As Integer = rels(z)("_CAMPOITEM") + 1 To rels(z)("_CAMPOITEM") + 1
                                        If Not Atualiza.Contains(Campos(zz)) Then
                                            Atualiza.Add(Prefixo & Campos(zz))
                                        End If
                                    Next
                                    Exit For
                                End If
                            Next
                            If Atualiza.Count > 0 Then
                                list.AutoPostBack = True
                                CtlProp(list, "ATUALIZAR") = Join(Atualiza.ToArray, ";")
                                AddHandler list.TextChanged, AddressOf AtualizouControle

                                If Not IsNothing(Estrut) Then
                                    Estrut(MontaEstrut.Cod.VB_INIT).AppendLine("AddHandler list.TextChanged, AddressOf AtualizouControle")
                                End If

                            End If

                            Dim sql As String = ""
                            If rels(0)("_CAMPOITEM") > 0 Then
                                Dim REL1 As Array = Split(rels(0)("CAMPO_1"), ";")
                                Dim RELN As Array = Split(rels(0)("CAMPO_N"), ";")
                                For Z As Integer = 0 To rels(0)("_CAMPOITEM") - 1
                                    sql = sql & IIf(sql <> "", " AND ", "") & REL1(Z) & " = [:" & Prefixo & RELN(Z) & "]"
                                Next
                            End If

                            Dim chave_apres As String = NZ(rels(0)("chave_apres_1"), "")
                            If chave_apres = "" Then
                                chave_apres = NZ(rels(0)("chave_apres"), "")
                            End If
                            Dim chave_apres_Array() As String = {}
                            If chave_apres <> "" Then
                                chave_apres_Array = Split(chave_apres, ";")
                                chave_apres = ", " & Join(chave_apres_Array, ", ")
                            End If

                            sql = "select " & rels(0)("_CAMPOREL") & chave_apres & " from " & rels(0)("TABELA_1").ToString.ToLower & IIf(sql <> "", " WHERE ", "") & sql
                            CtlProp(list, "SQL") = sql
                            CtlProp(list, "STRCONN") = StrConn
                            CtlProp(list, "QTDCOLS") = 1 + chave_apres_Array.Length
                        Else
                            Dim Lista As New ArrayList
                            For Each mt As Match In toolTipMatches
                                If Not String.IsNullOrEmpty(mt.Groups(2).Value) Then
                                    Lista.Add(Trim(mt.Groups(2).Value))
                                    Lista.Add(Trim(mt.Groups(3).Value))
                                End If
                            Next

                            If Lista.Count > 0 Then
                                list.AutoPostBack = True
                                CtlProp(list, "LISTA") = Join(Lista.ToArray, ";")
                                CtlProp(list, "QTDCOLS") = 2
                            End If
                        End If

                        ' define outras propriedades
                        For Each prop As ElementoStr In Props.Elementos
                            list.Style.Add(prop.Nome, prop.Conteudo)
                        Next


                        tcel.Controls.Add(list)



                        ' adiciona caso tenha botões
                        If comandos.Controls.Count > 0 Then
                            tcel.Controls.Add(comandos)
                        End If
                        ' inclui quebra de linha
                        lbl = New Label
                        lbl.ID = "lblbr" & Nome
                        lbl.Text = "<br clear='all'/>"
                        tcel.Controls.Add(lbl)
                        trow.Cells.Add(tcel)
                        trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                        Container.Rows.Add(trow)
                        If Not IsNothing(etiq) Then
                            list.Attributes("Etiq") = etiq.ID
                        End If


                        Return list
                    End If
                End If



                ' combobox
                Reg = Regex.Match(Formato, "(?is)COMBOBOX($|;)(.*)")
                If Reg.Groups(0).Value <> "" Then
                    Elem = New ElementosStr(Reg.Groups(2).Value)
                    Dim ctl As New DropDownList
                    ctl.ID = Prefixo & Nome
                    ctl.ToolTip = ToolTip
                    ctl.CssClass = "icftform_lista"
                    ctl.Attributes("ValorPadrao") = ValorPadrao
                    ctl.Width = LarguraCampo

                    ' carrega itens
                    CtlProp(ctl, "LISTA") = ExibeTexto(Elem("LISTA").Conteudo)
                    CtlProp(ctl, "QTDCOLS") = ExibeTexto(Elem("QTDCOLS").Conteudo)

                    tcel.Controls.Add(ctl)



                    ' adiciona caso tenha botões
                    If comandos.Controls.Count > 0 Then
                        tcel.Controls.Add(comandos)
                    End If
                    ' inclui quebra de linha
                    lbl = New Label
                    lbl.ID = "lblbr" & Nome
                    lbl.Text = "<br clear='all'/>"
                    tcel.Controls.Add(lbl)
                    trow.Cells.Add(tcel)
                    trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                    Container.Rows.Add(trow)
                    If Not IsNothing(etiq) Then
                        ctl.Attributes("Etiq") = etiq.ID
                    End If



                    Return ctl
                End If



                ' outros campos <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                Dim txt As TextBox
                txt = New TextBox
                txt.ID = Prefixo & Nome

                If Compare(Tipo, "System.DateTime") Then
                    Select Case Template
                        Case "t02"
                            txt.Style.Add("width", "100px")
                        Case Else
                            txt.Style.Add("width", LarguraCampo - 10 & "px")
                    End Select
                Else
                    txt.Style.Add("width", LarguraCampo & "px")
                End If

                If Compare(Formato, "memo") Then
                    txt.CssClass = "icftform_memo"
                    txt.TextMode = TextBoxMode.MultiLine
                Else
                    txt.CssClass = "icftform_txt"
                End If

                txt.ToolTip = ToolTip
                txt.Attributes("Formato") = Formato
                txt.Attributes("Auto") = Auto
                txt.Attributes("ValorPadrao") = ValorPadrao
                txt.Attributes("Tipo") = Tipo

                If Auto <> "" Then
                    txt.Attributes("Tabela") = Tabela
                    txt.Attributes("Campo") = Nome
                    txt.Attributes("STRCONN") = StrConn
                End If

                Dim Tam As Integer = NZV(Tamanho, "0")
                If Tam <> 0 Then
                    txt.MaxLength = Tamanho
                    Prop(txt, "ToolTip") &= " [Máximo de " & txt.MaxLength & " caracter" & IIf(txt.MaxLength > 1, "es", "") & "]"
                End If

                If Compare(Formato, "senha") Or Compare(Formato, "senhaaberta") Then
                    txt.TextMode = TextBoxMode.Password
                End If


                ' inclui o campo
                txt.Enabled = Not Bloqueado

                ' define outras propriedades
                For Each prop As ElementoStr In Props.Elementos
                    txt.Style.Add(prop.Nome, prop.Conteudo)
                Next
                tcel.Controls.Add(txt)

                ' inclui botão do calendário
                If (Compare(Formato, "dd\/MM\/yyyy")) Then
                    Dim btnCalend As New HyperLink
                    btnCalend.ID = "btnCalenda" & Nome
                    btnCalend.Text = "+"
                    btnCalend.NavigateUrl = "javascript:void(0);"
                    btnCalend.Attributes.Add("onclick", "displayCalendar($_('" & txt.ID & "',this),'dd/mm/yyyy',this)")
                    tcel.Controls.Add(btnCalend)

                    IncluiScript(Page, "js1_calendario", "<script>var host = '" & Page.ResolveUrl(NZV(WebConf("url_site"), "~/")) & "';var pathToImages = host + 'uc/IcftCalendario/Theme/" & NZV(WebConf("Theme"), "Default") & "/images/';</script>")
                    IncluiScript(Page, "js2_calendario", Page.ResolveUrl("~/uc/IcftCalendario/Theme/" & NZV(WebConf("Theme"), "Default") & "/dhtmlgoodies_calendar.js"))
                    IncluiScript(Page, "js3_calendario", Page.ResolveUrl("~/uc/IcftCalendario/dhtmlgoodies_calendar.js"))
                    IncluiStyleSheet(Page, btnCalend.UniqueID, NZV(WebConf("calendario_css"), "~/uc/IcftCalendario/Theme/" & NZV(WebConf("Theme"), "Default") & "/dhtmlgoodies_calendar.css"))

                    If Not IsNothing(Estrut) Then
                        Estrut(MontaEstrut.Cod.VB_INIT).AppendLine("IncluiScript(Page, ""js1_calendario"", ""<script>var host = '"" & Page.ResolveUrl(NZV(WebConf(""url_site""), ""~/"")) & ""';var pathToImages = host + 'uc/IcftCalendario/Theme/"" & NZV(WebConf(""Theme""), ""Default"") & ""/images/';</script>"")")
                        If InStr(Estrut(MontaEstrut.Cod.VB_INIT).ToString, """js2_calendario""") = 0 Then
                            Estrut(MontaEstrut.Cod.VB_INIT).AppendLine("IncluiScript(Page, ""js2_calendario"", Page.ResolveUrl(""~/uc/IcftCalendario/Theme/"" & NZV(WebConf(""Theme""), ""Default"") & ""/dhtmlgoodies_calendar.js""))")
                            Estrut(MontaEstrut.Cod.VB_INIT).AppendLine("IncluiScript(Page, ""js3_calendario"", Page.ResolveUrl(""~/uc/IcftCalendario/dhtmlgoodies_calendar.js""))")
                        End If
                        Estrut(MontaEstrut.Cod.VB_INIT).AppendLine("IncluiStyleSheet(Page, """ & btnCalend.UniqueID & """, NZV(WebConf(""calendario_css""), ""~/uc/IcftCalendario/Theme/"" & NZV(WebConf(""Theme""), ""Default"") & ""/dhtmlgoodies_calendar.css""))")
                    End If

                End If


                ' mais paineis

                ' arquivo
                Reg = Regex.Match(Formato, "(?is)ARQUIVO($|;)(.*)")
                If Reg.Groups(0).Value <> "" Then
                    Elem = New ElementosStr(Reg.Groups(2).Value)

                    Dim isImg As Boolean = LCase(Elem.Items("caminho").Conteudo).Contains("img")
                    Dim ctl As Object = Nothing

                    If isImg Then
                        Dim btnImg As New HyperLink
                        btnImg.ID = "btnImg" & Nome
                        btnImg.Text = "+"
                        btnImg.NavigateUrl = "javascript:void(0);"
                        tcel.Controls.Add(btnImg)

                        ctl = Page.LoadControl("~\uc\icftdialogoimagem\icftdialogoimagem.ascx")
                        ctl.id = "dlgImagem" & Nome
                        ctl.controlevinc = txt.ID
                        ctl.BotaoId = btnImg.ID
                        ctl.escondetexto = True
                    Else
                        ctl = Page.LoadControl("~\uc\icftdialogo\icftdialogo.ascx")
                        ctl.id = "dlgNovo" & Nome
                        ctl.tipo = 1
                        ctl.controlevinc = txt.ID

                        ctl.mostrarurl = NZV(Elem.Items("mostrarurl").Conteudo, "false")
                    End If

                    ctl.mascara = NZV(Elem.Items("mascara").Conteudo, "*.*")
                    ctl.caminho = NZV(Elem.Items("caminho").Conteudo, "~/img")


                    If isImg Then
                    Else
                        If NZV(Elem.Items("salvasemcaminho").Conteudo, True) Then
                            ctl.OBTERTEXTOSEMCAMINHO = True
                        End If
                        ctl.EscondeTexto = True
                        ctl.BotaoTexto = "Novo Arquivo"
                        ctl.ToolTip = "Clique para inserir um arquivo novo."
                        ctl.titulo = "Novo Arquivo " & NZV(Elem.Items("mascara").Conteudo, "*.jpg")
                        ctl.PermitirAlterarCaminho = False
                        comandos.Controls.Add(ctl)

                        ctl = Page.LoadControl("~\uc\icftdialogo\icftdialogo.ascx")
                        ctl.id = "dlgJaExist" & Nome
                        ctl.tipo = 2
                        ctl.controlevinc = txt.ID
                        ctl.mascara = NZV(Elem.Items("mascara").Conteudo, "*.jpg")
                        ctl.caminho = NZV(Elem.Items("caminho").Conteudo, "~/img")
                        If NZV(Elem.Items("salvasemcaminho").Conteudo, False) Then
                            ctl.OBTERTEXTOSEMCAMINHO = True
                        End If
                        ctl.EscondeTexto = True
                        ctl.BotaoTexto = "Arquivo Já existente"
                        ctl.ToolTip = "Clique para escolher um arquivo já existente no diretório."
                        ctl.titulo = "Arquivo Já Existente " & ctl.mascara
                        ctl.PermitirAlterarCaminho = False
                    End If

                    comandos.Controls.Add(ctl)
                End If

                ' conexão
                Reg = Regex.Match(Formato, "(?is)CONEXAO($|;)(.*)")
                If Reg.Groups(0).Value <> "" Then
                    Elem = New ElementosStr(Reg.Groups(2).Value)

                    Dim ctl As Object = Nothing
                    ctl = Page.LoadControl("~\uc\icftdialogo\icftdialogo.ascx")
                    ctl.id = "dlgConexao" & Nome
                    ctl.tipo = 0
                    ctl.controlevinc = txt.ID
                    ctl.EscondeTexto = True
                    ctl.BotaoTexto = "Escolha a Conexão"
                    ctl.ToolTip = "Clique para escolher a conexão."
                    ctl.titulo = "Conexão para campo " & Etiqueta
                    comandos.Controls.Add(ctl)
                End If


                ' inclui comandos caso tenha sido incluídos
                If comandos.Controls.Count > 0 Then
                    tcel.Controls.Add(comandos)
                End If


                ' mascara o campo, caso seja necessário
                If Formato <> "" And Not (Compare(Formato, "HTML") Or Compare(Formato, "MEMO")) Then
                    txt.Page = Page
                    Controle.AplicaMascara(txt)
                End If


                ' adiciona caso tenha botões
                If comandos.Controls.Count > 0 Then
                    tcel.Controls.Add(comandos)
                End If
                ' inclui quebra de linha
                lbl = New Label
                lbl.ID = "lblbr" & Nome
                lbl.Text = "<br clear='all'/>"
                tcel.Controls.Add(lbl)
                trow.Cells.Add(tcel)
                trow.Cells(0).Style("border-bottom") = "1px solid #f0f0f0"
                Container.Rows.Add(trow)
                If Not IsNothing(etiq) Then
                    txt.Attributes("Etiq") = etiq.ID
                End If



                Return txt
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Classe para busca de relacionamentos para combobox.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class RelsN1
            Private Rels As DataView

            ''' <summary>
            ''' Total de relacionamentos N1.
            ''' </summary>
            ''' <value>Quantidade de relacionamentos N1.</value>
            ''' <returns>Quantidade de relacionamentos N1.</returns>
            ''' <remarks></remarks>
            ReadOnly Property Count() As Integer
                Get
                    Return Rels.Table.Rows.Count
                End Get
            End Property

            ''' <summary>
            ''' Obtém um relacionamento N1.
            ''' </summary>
            ''' <param name="Index">Número do relacionamento N1 desejado comaçado por zero.</param>
            ''' <value>Linha contendo relacionamento N1 desejado.</value>
            ''' <returns>Linha contendo relacionamento N1 desejado.</returns>
            ''' <remarks></remarks>
            Default ReadOnly Property Item(ByVal Index As Integer) As DataRowView
                Get
                    Return Rels.Item(Index)
                End Get
            End Property

            ''' <summary>
            ''' Visão de consulta de relacionamentos N1.
            ''' </summary>
            ''' <value>Visão de consulta de relacionamentos N1.</value>
            ''' <returns>Relacionamentos N1.</returns>
            ''' <remarks></remarks>
            ReadOnly Property DataView() As DataView
                Get
                    Return Rels
                End Get
            End Property

            ''' <summary>
            ''' Cria ponto de pesquisa para relacionamentos N1.
            ''' </summary>
            ''' <param name="Sistema">Sistema onde serão procurados os relacionamentos N1.</param>
            ''' <param name="Tabela">Tabela que contém estes relacionamentos (lado N).</param>
            ''' <param name="Campo">Campo que faz parte deste relacionamneto.</param>
            ''' <param name="StrGerador">String de conexão para obtenção das informações em banco.</param>
            ''' <param name="EsquemaGerador">Esquema gerador onde será encontrada a tabela GER_RELACIONAMENTO.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Sistema As String, ByVal Tabela As String, ByVal Campo As String, ByVal StrGerador As Object, Optional ByVal EsquemaGerador As String = "")
                Dim esquema As String = ""
                If InStr(Tabela, ".") Then
                    Dim tt As Array = Split(Tabela, ".")
                    esquema = tt(0)
                    Tabela = tt(1)
                End If
                Dim relss As DataSet = Nothing
                Try
                    'Adicionado campo chave_apres

                    Select Case DSTipoBaseSQL(StrGerador)
                        Case TipoBaseSQL.MSAccess
                            relss = DSCarrega("select r.tabela_1 as tabela_1, r.campo_1 as campo_1, r.tabela_n as tabela_n, r.campo_n as campo_n, r.obrig as obrig, r.chave_apres_1 as chave_apres_1, t1.chave_apres as chave_apres, r.prop_extend as prop_extend from " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_RELACIONAMENTO as r, " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_TABELA as t1 where r.sistema = t1.sistema and r.tabela_1 = t1.tabela and t1.sistema = :sistema and tabela_n = :tabela and (INSTR(';' & UCASE(campo_n) & ';', ';' & :campo & ';')<>0)", StrGerador, ":sistema", Sistema, ":tabela", Tabela, ":campo", UCase(Campo))
                        Case TipoBaseSQL.Oracle
                            relss = DSCarrega("select r.tabela_1 as tabela_1, r.campo_1 as campo_1, r.tabela_n as tabela_n, r.campo_n as campo_n, r.obrig as obrig, r.chave_apres_1 as chave_apres_1, t1.chave_apres as chave_apres, r.prop_extend as prop_extend from " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_RELACIONAMENTO r, " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_TABELA t1 where r.sistema = t1.sistema and r.tabela_1 = t1.tabela and t1.sistema = :sistema and tabela_n = :tabela and (INSTR(';' || UPPER(campo_n) || ';', ';' || :campo || ';')<>0)", StrGerador, ":sistema", Sistema, ":tabela", Tabela, ":campo", UCase(Campo))
                        Case TipoBaseSQL.MySQL
                            relss = DSCarrega("select r.tabela_1 as tabela_1, r.campo_1 as campo_1, r.tabela_n as tabela_n, r.campo_n as campo_n, r.obrig as obrig, r.chave_apres_1 as chave_apres_1, t1.chave_apres as chave_apres, r.prop_extend as prop_extend from " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_RELACIONAMENTO as r, " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_TABELA as t1 where r.sistema = t1.sistema and r.tabela_1 = t1.tabela and t1.sistema = :sistema and tabela_n = :tabela and (INSTR(CONCAT(';', UPPER(campo_n), ';'), CONCAT(';',:campo, ';'))<>0)", StrGerador, ":sistema", Sistema, ":tabela", Tabela, ":campo", UCase(Campo))
                    End Select


                Catch EX As Exception
                End Try
                If IsNothing(relss) Then
                    relss = New DataSet
                End If
                If relss.Tables.Count = 0 Then
                    relss.Tables.Add(New DataTable)
                End If
                relss.Tables(0).Columns.Add("_CAMPOITEM", GetType(Integer))
                relss.Tables(0).Columns.Add("_CAMPOREL", GetType(String))
                relss.Tables(0).Columns.Add("_CAMPOSQTD", GetType(Integer))
                For Each row As DataRow In relss.Tables(0).Rows
                    row("_CAMPOITEM") = Array.IndexOf(Split(UCase(row("CAMPO_N")), ";"), UCase(Campo))
                    row("_CAMPOREL") = Split(UCase(row("CAMPO_1")), ";")(row("_CAMPOITEM"))
                    row("_CAMPOSQTD") = Split(row("CAMPO_N"), ";").Length
                    If esquema <> "" Then
                        row("TABELA_1") = esquema & "." & row("TABELA_1")
                        row("TABELA_N") = esquema & "." & row("TABELA_N")
                    End If
                Next
                relss.Tables(0).DefaultView.ApplyDefaultSort = True
                relss.Tables(0).DefaultView.Sort = "_CAMPOSQTD"
                Rels = relss.Tables(0).DefaultView
            End Sub
        End Class


        ''' <summary>
        ''' NotaMsg. Armazena e mostra mensagem de Nota como validador.
        ''' </summary>
        ''' <remarks>
        ''' Para utilizar:
        ''' Try
        ''' ...
        ''' Catch ex as Exception
        ''' ...Icraft.NotaMsg.Trata(Page, Ex, IgnoreNotas, URLRedirNota)
        ''' End Try
        ''' Na página que tratará o Nota (postlocal ou redirNota), deverá colocar:
        ''' Icraft.NotaMsg.Verifica(Page) no PRE_RENDER.
        ''' </remarks>
        Public Class NotaMsg

            ''' <summary>
            ''' Classe para registro de detalhes sobre nota a ser apresentada.
            ''' </summary>
            ''' <remarks></remarks>
            <Serializable()> Class Msg
                Public Pagina As Page
                Public Controle As Control
                Public Texto As String
                Public Ex As Exception
                Public Identif As String
                Public URLRedirNota As String

                ''' <summary>
                ''' Criação de registro para armazenamento de detalhes sobre nota.
                ''' </summary>
                ''' <param name="Controle">Controle de notamsg.</param>
                ''' <param name="Texto">Texto que será armazenado.</param>
                ''' <param name="Nota">Erro.</param>
                ''' <param name="Identif">Identificação da rotina que armazena a nota.</param>
                ''' <param name="URLRedirNota">Redirecionamento que acontecerá após clique no botão da nota.</param>
                ''' <remarks></remarks>
                Sub New(ByVal Controle As Control, ByVal Texto As String, ByVal Nota As Exception, Optional ByVal Identif As String = "", Optional ByVal URLRedirNota As String = "")
                    Me.Pagina = Controle.Page
                    Me.Controle = Controle
                    Me.Texto = Texto
                    Me.Ex = Nota
                    Me.Identif = Identif
                    Me.URLRedirNota = URLRedirNota
                End Sub
            End Class

            ''' <summary>
            ''' Recupera ou registra dado em cache ainda para apresentação.
            ''' </summary>
            ''' <param name="Controle">Página corrente (deve ser PAGE).</param>
            ''' <value>Objeto MSG, que possui página onde msg foi gerada, exception e URL de redirecionamento.</value>
            ''' <returns>Retorna objeto MSG gerada, expception e URL de redirecionamento (página que trata do Nota).</returns>
            ''' <remarks></remarks>
            Public Shared Property Ex(ByVal Controle As Control) As Msg
                Get
                    Dim nota As Msg = Nothing
                    nota = Controle.Page.Session("notamsg_" & Controle.ID & "_" & Controle.Page.Session.SessionID)
                    If IsNothing(nota) Then
                        nota = Controle.Page.Session("notamsg_" & Controle.Page.Session.SessionID)
                    End If

                    Return nota
                End Get
                Set(ByVal value As Msg)
                    Controle.Page.Session("notamsg_" & Controle.ID & "_" & Controle.Page.Session.SessionID) = value
                    Controle.Page.Session("notamsg_" & Controle.Page.Session.SessionID) = value
                End Set
            End Property

            ''' <summary>
            ''' Registro de nota padrão.
            ''' </summary>
            ''' <param name="Controle">Controle onde ocorreu o evento.</param>
            ''' <param name="Texto">Texto caso não seja um erro.</param>
            ''' <param name="Nota">Exception caso seja um erro.</param>
            ''' <param name="Identif">Identificação, que é o título da mensagem.</param>
            ''' <param name="IgnoreNotas">Se deve ignorar as notas ou não (não apresentá-las na tela).</param>
            ''' <param name="URLRedirNota">URL de encaminhamento. Vazio para postback (mesma tela).</param>
            ''' <remarks></remarks>
            Private Shared Sub Registra(ByVal Controle As Control, ByVal Texto As String, ByVal Nota As Exception, ByVal Identif As String, ByVal IgnoreNotas As Boolean, ByVal URLRedirNota As String)
                If Not IgnoreNotas Then
                    If IsNothing(Nota) And NZ(Texto, "") = "" Then
                        Controle.Page.Session.Remove("notamsg_" & Controle.ID & "_" & Controle.Page.Session.SessionID)
                        Controle.Page.Session.Remove("notamsg_" & Controle.Page.Session.SessionID)
                    Else
                        Ex(Controle) = New Msg(Controle, Texto, Nota, Identif, URLRedirNota)
                        If Not IsNothing(Nota) Then
                            ErroLogReg(Nota, NotaMsg.MsgTexto(Texto, Nota))
                        End If
                    End If
                End If
            End Sub

            ''' <summary>
            ''' Deve ser utilizada no TRY...CATCH ex as EXCEPTION...END TRY na forma TRATA(PAGE, EX, IGNORENotaS, URLREDIRNota).
            ''' </summary>
            ''' <param name="Controle">Página corrente onde ocorreu o Nota.</param>
            ''' <param name="Nota">Exception ocorrido.</param>
            ''' <param name="IgnoreNotas">Indica que Notas devem ser ignorados.</param>
            ''' <param name="URLRedirNota">Endereço da URL que receberá o controle. Esta deverá possuir NotaMSG.VERIFICA para que apresente o Nota adequadamente. Ignorar este parâmetro ou colocar "" significará POSTBACK na própria página.</param>
            ''' <remarks></remarks>
            Public Shared Sub Registra(ByVal Controle As Control, ByVal Nota As Exception, ByVal Identif As String, Optional ByVal IgnoreNotas As Boolean = False, Optional ByVal URLRedirNota As String = "")
                Registra(Controle, "", Nota, Identif, IgnoreNotas, URLRedirNota)
            End Sub

            ''' <summary>
            ''' Registro de mensagem texto para aparecimento mediante VERIFICA.
            ''' </summary>
            ''' <param name="Controle">Controle onde ocorre a mensagem.</param>
            ''' <param name="Texto">Texto que deverá aparecer na mensagem.</param>
            ''' <param name="Identif">Identificação ou título da mensagem.</param>
            ''' <param name="IgnoreNotas">Ignorar as notas.</param>
            ''' <param name="URLRedirNota">URL de redirecionamento. Ocorrerá o encaminhamento para esta tela onde a função VERIFICA deverá ser executada.</param>
            ''' <remarks></remarks>
            Public Shared Sub Registra(ByVal Controle As Control, ByVal Texto As String, ByVal Identif As String, Optional ByVal IgnoreNotas As Boolean = False, Optional ByVal URLRedirNota As String = "")
                Registra(Controle, Texto, Nothing, Identif, IgnoreNotas, URLRedirNota)
            End Sub

            ''' <summary>
            ''' Retorna a mensagem a ser exibida na tela a partir do texto simplificado e/ou Exception.
            ''' </summary>
            ''' <param name="Texto">Texto simplificado a ser incluído na explicação.</param>
            ''' <param name="Ex">Exception para tratamento através de messageEx.</param>
            ''' <returns>Retorna o texto representativo da notificação.</returns>
            ''' <remarks></remarks>
            Public Shared Function MsgTexto(ByVal Texto As String, ByVal Ex As Exception) As String
                Dim MsgNota As String = Texto
                If Not IsNothing(Ex) Then
                    MsgNota &= IIf(MsgNota <> "", vbCrLf, "") & MessageEx(Ex)
                End If
                Return MsgNota
            End Function

            ''' <summary>
            ''' Deve ser colocado em PRE_RENDER (postback ou não) das páginas que tratarão dos Notas. Serão apresentados os diálogos sem a necessidade de novo POST.
            ''' </summary>
            ''' <param name="Controle">Página atual sendo a propriedade PAGE, utilizada para recuperar variáveis de sessão.</param>
            ''' <remarks></remarks>
            Public Shared Sub Verifica(ByVal Controle As Control)
                Dim erro As Boolean = False
                Dim Nota As Msg = Ex(Controle)

                If Not IsNothing(Nota) Then

                    ' se existir erro, vermelho, caso contrário, azul
                    If Not IsNothing(Nota.Ex) Then
                        erro = True
                    End If

                    ' nota é texto mais erro em outra linha
                    Dim NotaMsg As String = MsgTexto(Nota.Texto, Nota.Ex)

                    ' apenas para compatibilidade com versão anterior
                    Dim ctl As Object = Nothing
                    If TypeOf Controle Is Page Then
                        ctl = Form.FindControl(Controle, "IcraftNotaMsg_Alert")
                    Else
                        ctl = Controle
                    End If

                    Dim add As Boolean = False
                    If IsNothing(ctl) Then
                        ctl = Controle.Page.LoadControl("~\uc\icftmessage\icftmessage.ascx")
                        add = True
                    End If


                    Try
                        ctl.NotaIdentif = Nota.Identif
                        ctl.NotaMsg = NotaMsg
                        ctl.Attributes("Icone") = IIf(erro, "erro", "info")
                        ctl.attributes("Escondido") = False
                        ctl.attributes("Botoes") = "OK"
                        ctl.attributes("EventosStr") = ""

                        If Nota.URLRedirNota.StartsWith("javascript:", StringComparison.OrdinalIgnoreCase) Then
                            ctl.attributes("EventosStr") = Nota.URLRedirNota & ";" & "return false;"
                        Else
                            ctl.attributes("EventosStr") = "javascript:" & ctl.Fecha()
                            If Nota.URLRedirNota <> "" Then
                                ctl.attributes("EventosStr") &= "window.location='" & HttpContext.Current.Server.UrlEncode(Nota.URLRedirNota) & "';return false;"
                            End If
                        End If


                        ctl.databind()


                        If add Then
                            Controle.Page.Form.Controls.Add(ctl)
                        End If

                        If Ambiente() = AmbienteTipo.WEB Then
                            Dim mpe As Object = Form.FindGeral(ctl, "mpeMsg")
                            mpe.Show()
                        End If

                    Catch ex As Exception
                        ShowJSMessage(Controle.Page, "Nota: " & NotaMsg)
                    End Try
                    Limpa(Controle)
                End If
            End Sub

            ''' <summary>
            ''' Limpa controle de erro ou notificação.
            ''' </summary>
            ''' <param name="Controle"></param>
            ''' <remarks></remarks>
            Public Shared Sub Limpa(ByVal Controle As Control)
                If Not IsNothing(Ex(Controle)) Then
                    Ex(Controle) = Nothing
                End If
            End Sub

        End Class


        ''' <summary>
        ''' Classe para busca de propriedades do objeto.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Info

            ''' <summary>
            ''' Relaciona os métodos de um objeto.
            ''' </summary>
            ''' <param name="obj">Objeto a ser pesquisado.</param>
            ''' <returns>Array de métodos.</returns>
            ''' <remarks></remarks>
            Public Shared Function verificaMetodos(ByVal obj As Object) As String()
                Return (From mInfo As Reflection.MethodInfo In obj.GetType.GetMethods() Select mInfo.Name & "(" & String.Join(", ", (From pInfo As Reflection.ParameterInfo In mInfo.GetParameters() Select pInfo.Name).ToArray) & ")" & IIf(mInfo.ReturnType.Name = "Void", "", " As " & mInfo.ReturnType.Name).ToString).ToArray
            End Function

            ''' <summary>
            ''' Relaciona as propriedades de um objeto.
            ''' </summary>
            ''' <param name="obj">Objeto a ser pesquisado.</param>
            ''' <returns>Propriedades do objeto.</returns>
            ''' <remarks></remarks>
            Public Shared Function verificaPropriedades(ByVal obj As Object) As String()
                Return (From pInfo As Reflection.PropertyInfo In obj.GetType.GetProperties Select IIf(pInfo.CanRead, "", "WriteOnly ").ToString & IIf(pInfo.CanWrite, "", "ReadOnly ").ToString & pInfo.Name & "() As " & pInfo.PropertyType.Name).ToArray
            End Function
        End Class

        ''' <summary>
        ''' Trata endereço de email qualificando elementos.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Email
            Private _completo As String = ""
            Private _soendereco As String = ""
            Private _descricao As String = ""
            Private _dominio As String = ""
            Private _primeironome As String = ""
            Private _ultimonome As String = ""

            ''' <summary>
            ''' Verifica a existência de caracteres inválidos para o formato de email padrão.
            ''' </summary>
            ''' <param name="Email">Email a ser verificado.</param>
            ''' <value>Endereço de email.</value>
            ''' <returns>True se email é válido ou false caso contrário.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property Valida(ByVal Email As String) As Boolean
                Get
                    Return Regex.IsMatch(EmailStr(Email), "(^|[ \t\[\<\>\""]*)([\w-.]+@[\w-]+(\.[\w-]+)+)(($|[ \t\<\>\""]*))")
                End Get
            End Property

            ''' <summary>
            ''' Verifica email carregado anteriormente.
            ''' </summary>
            ''' <value>True se email é válido ou false caso contrário.</value>
            ''' <returns>True se email é válido ou false caso contrário.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Valida() As Boolean
                Get
                    Return Valida(_completo)
                End Get
            End Property

            ''' <summary>
            ''' Decompõe email em elementos.
            ''' </summary>
            ''' <param name="Email">Endereço de email.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Email As String)
                Email = Replace(Email, Chr(0), "")
                _completo = EmailStr(Email)
                _soendereco = SoEmailStr(_completo)
                _descricao = Trim(RegexGroup(_completo, "\""(.*)\""", 1).Value)
                _dominio = RegexGroup(_soendereco, "@(.*)$", 1).Value

                Dim ems() As String = Split(_descricao & " ", " ")
                _primeironome = Trim(ems(0))
                _ultimonome = Trim(ems(ems.Length - 2))
            End Sub

            ''' <summary>
            ''' Domínio do email.
            ''' </summary>
            ''' <value>Domínio do email (depois do arroba).</value>
            ''' <returns>Domínio do email.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Dominio() As String
                Get
                    Return _dominio
                End Get
            End Property

            ''' <summary>
            ''' Email completo já formatado.
            ''' </summary>
            ''' <value>Email completo já formatado.</value>
            ''' <returns>Email completo já formatado.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Completo() As String
                Get
                    Return _completo
                End Get
            End Property

            ''' <summary>
            ''' Só o endereço do email (antes do arroba).
            ''' </summary>
            ''' <value>Só o endereço do email.</value>
            ''' <returns>Só o endereço do email.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property SoEndereco() As String
                Get
                    Return _soendereco
                End Get
            End Property

            ''' <summary>
            ''' Descrição do email (trecho entre apóstrofos antes do email).
            ''' </summary>
            ''' <value>Descrição do email (trecho entre apóstrofos antes do email).</value>
            ''' <returns>Descrição do email (trecho entre apóstrofos antes do email).</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Descricao() As String
                Get
                    Return _descricao
                End Get
            End Property

            ''' <summary>
            ''' Primeiro nome na descrição do email.
            ''' </summary>
            ''' <value>Primeiro nome na descrição do email.</value>
            ''' <returns>Primeiro nome na descrição do email.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property PrimeiroNome() As String
                Get
                    Return _primeironome
                End Get
            End Property

            ''' <summary>
            ''' Último nome na descrição de email.
            ''' </summary>
            ''' <value>Último nome na descrição de email.</value>
            ''' <returns>Último nome na descrição de email.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property UltimoNome() As String
                Get
                    Return _ultimonome
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Com base na página e no arquivo, cria link para acesso à imagem.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="Arquivo">Arquivo.</param>
        ''' <returns>Retorna http... (link da imagem).</returns>
        ''' <remarks></remarks>
        Public Shared Function ImagemPath(ByVal Page As Page, ByVal Arquivo As String, Optional Seguro As Boolean = False) As String
            If Arquivo.StartsWith("~/") Then
                Return Page.ResolveUrl(Arquivo)
            ElseIf Arquivo.StartsWith("http://", StringComparison.OrdinalIgnoreCase) Then
                Return Arquivo
            End If
            Return Page.ResolveUrl("~/img/" & Arquivo)
        End Function


        ''' <summary>
        ''' Retorna link para acesso ao arquivo no diretório de temas.
        ''' </summary>
        ''' <param name="page">Página que está chamando.</param>
        ''' <param name="Arquivo">Arquivo desejado.</param>
        ''' <param name="Theme">Tema.</param>
        ''' <param name="Path">Caminho sendo default ~/app_theme do dot.net.</param>
        ''' <value>Caminho do arquivo.</value>
        ''' <returns>Caminho do arquivo.</returns>
        ''' <remarks></remarks>
        Public Shared ReadOnly Property ThemePath(ByVal page As Page, ByVal Arquivo As String, Optional ByVal Theme As String = "Default", Optional ByVal Path As String = "~/App_Theme") As String
            Get
                Return page.ResolveUrl(URLExpr(Path, Theme, Arquivo))
            End Get
        End Property

        ''' <summary>
        ''' Transforma string em array de bytes.
        ''' </summary>
        ''' <param name="Texto">Texto a ser convertido.</param>
        ''' <returns>Array de bytes.</returns>
        ''' <remarks></remarks>
        Shared Function StrToByteArray(ByVal Texto As String) As Byte()
            Try
                Dim Cod As New System.Text.ASCIIEncoding
                Return Cod.GetBytes(Texto)
            Catch
                Return Nothing
            End Try
        End Function

        ''' <summary>
        ''' Transforma array de bytes em string.
        ''' </summary>
        ''' <param name="Bytes">Array de bytes.</param>
        ''' <returns>Texto.</returns>
        ''' <remarks></remarks>
        Shared Function ByteArrayToStr(ByVal Bytes() As Byte) As String
            Try
                Dim Cod As New System.Text.ASCIIEncoding
                Return Cod.GetString(Bytes)
            Catch
                Return Nothing
            End Try
        End Function

        ''' <summary>
        ''' Função para tirar acento.
        ''' </summary>
        ''' <param name="Texto">Texto a ser tratado.</param>
        ''' <returns>Texto sem acentos.</returns>
        ''' <remarks></remarks>
        Shared Function TiraAcento(ByVal Texto As String) As String
            Dim de As String = "ÁÉÍÓÚáéíóúÇçÀàÃãÕõÂâÊêÈèÔôñÑòÒçÇ"
            Dim para As String = "AEIOUaeiouCcAaAaOoAaEeEeOonNoOcC"
            For z = 1 To Len(de)
                Texto = Texto.Replace(Mid(de, z, 1), Mid(para, z, 1))
            Next
            Return Texto
        End Function


        ''' <summary>
        ''' Retorna os diretorios
        ''' </summary>
        ''' <param name="Raiz"></param>
        ''' <param name="MascRegex"></param>
        ''' <param name="DirAcum"></param>
        ''' <returns></returns>
        Public Shared Function ObtemDiretorios(ByVal Raiz As String, Optional ByVal MascRegex As String = "", Optional ByVal DirAcum As ArrayList = Nothing) As ArrayList
            If IsNothing(DirAcum) Then
                DirAcum = New ArrayList
            End If
            Dim D() As String = System.IO.Directory.GetDirectories(FileExpr(Raiz))
            For Each I As String In D
                If MascRegex = "" OrElse System.Text.RegularExpressions.Regex.Match(I, MascRegex).Success Then
                    DirAcum.Add(I)
                End If
                DirAcum.AddRange(ObtemDiretorios(I).ToArray)
            Next
            Return DirAcum
        End Function

        ''' <summary>
        ''' Cria uma nova URL
        ''' </summary>
        ''' <param name="Url"></param>
        ''' <param name="Lista"></param>
        ''' <returns></returns>
        Public Shared Function NovaUrl(ByVal Url As String, ByVal ParamArray Lista() As String) As String
            Dim Params As ArrayList = Icraft.IcftBase.ParamArrayToArrayList(Lista)
            Dim R() As String = Split(Url & "?", "?")
            Dim P As System.Collections.Specialized.NameValueCollection = System.Web.HttpUtility.ParseQueryString(R(1))
            For z As Integer = 0 To Params.Count - 1 Step 2
                Dim VV As String = Mid(Lista(z), 2)
                Dim CC As String = ""
                If z < Lista.Count - 1 Then
                    CC = Lista(z + 1)
                End If
                If CC <> "" AndAlso Not P.AllKeys.Contains(VV) Then
                    P.Add(VV, CC)
                ElseIf CC <> "" Then
                    P(VV) = CC
                ElseIf CC = "" AndAlso P.AllKeys.Contains(VV) Then
                    P.Remove(VV)
                End If
            Next
            Return R(0) & IIf(P.Count > 0, "?" & P.ToString, "")
        End Function


        ''' <summary>
        ''' Tira caracteres especiais de texto.
        ''' </summary>
        ''' <param name="Texto">Texto a ser tratado.</param>
        ''' <param name="TrocarPor">Trocar caracteres especiais por (vazio por padrão).</param>
        ''' <returns>Retorna texto com caracteres especiais trocados.</returns>
        ''' <remarks></remarks>
        Shared Function TiraCaracEspec(ByVal Texto As String, Optional ByVal TrocarPor As String = "") As String
            Texto = TiraAcento(Texto)
            Return Regex.Replace(Texto, "(?is)[^_a-z0-9]", TrocarPor)
        End Function

        ''' <summary>
        ''' Carrega arquivo texto.
        ''' </summary>
        ''' <param name="Arquivo">Nome do arquivo.</param>
        ''' <param name="Encoding">Codificação a ser utilizada na interpretação do texto.</param>
        ''' <returns>Texto obtido no arquivo na codificação especificada.</returns>
        ''' <remarks></remarks>
        Public Shared Function CarregaArqTxt(ByVal Arquivo As String, Optional ByVal Encoding As System.Text.Encoding = Nothing) As String
            If IsNothing(Encoding) Then
                Encoding = System.Text.Encoding.Default
            End If
            Dim Arq As New System.IO.StreamReader(FileExpr(Arquivo), Encoding)
            Dim Txt As String = Arq.ReadToEnd
            Arq.Close()
            Return Txt
        End Function

        ''' <summary>
        ''' Carrega arquivo binário.
        ''' </summary>
        ''' <param name="Arquivo">Nome do arquivo.</param>
        ''' <returns>Array de bytes existentes no arquivo (leitura binária).</returns>
        ''' <remarks></remarks>
        Public Shared Function CarregaArqBin(ByVal Arquivo As String) As Byte()
            Dim BR As System.IO.BinaryReader = Nothing
            Dim FS As New System.IO.FileStream(FileExpr(Arquivo), System.IO.FileMode.Open, System.IO.FileAccess.Read)
            BR = New System.IO.BinaryReader(FS)
            Dim B() As Byte = BR.ReadBytes(Convert.ToInt32(BR.BaseStream.Length))
            FS.Close()
            BR.Close()
            Return B
        End Function


        ''' <summary>
        ''' Carrega uma página da web.
        ''' </summary>
        ''' <param name="URL">Url da página.</param>
        ''' <param name="Encoding">Codificação utilizada para obtenção do texto da página.</param>
        ''' <returns>Página carregada na codificação especificada.</returns>
        ''' <remarks></remarks>
        Shared Function ObtemPag(ByVal URL As String, Optional ByVal Encoding As System.Text.Encoding = Nothing) As String
            If IsNothing(Encoding) Then
                Encoding = New System.Text.ASCIIEncoding
            End If
            Return ObtemPag(URL, "GET", Encoding)
        End Function

        ''' <summary>
        ''' Leitura diretamente do arquivo em codificação padrão.
        ''' </summary>
        ''' <param name="Origem">Arquivo que será lido.</param>
        ''' <returns>Texto obtido no arquivo.</returns>
        ''' <remarks></remarks>
        Shared Function ObtemTexto(ByVal Origem As String) As String
            Dim Ret As String = ""
            Dim Arq As New System.IO.StreamReader(Origem)
            Ret = Arq.ReadToEnd
            Arq.Close()
            Return Ret
        End Function

        ''' <summary>
        ''' Obtém página permitindo passar lista de parâmetros.
        ''' </summary>
        ''' <param name="URL">Url desejada.</param>
        ''' <param name="Metodo">Método GET ou POST.</param>
        ''' <param name="Encoding">Codificação da página resultante.</param>
        ''' <param name="ListaParams">Lista de parâmetros passados.</param>
        ''' <returns>Retorna página conforme a codificação desejada.</returns>
        ''' <remarks></remarks>
        Shared Function ObtemPag(ByVal URL As String, ByVal Metodo As String, ByVal Encoding As System.Text.Encoding, ByVal ParamArray ListaParams() As Object) As String
            Try
                Dim Req As HttpWebRequest = HttpWebRequest.Create(New System.Uri(URL))
                If Not IsNothing(HttpContext.Current) Then
                    Req.Headers.Add("SessionId", HttpContext.Current.Session.SessionID)
                Else
                    Req.Headers.Add("SessionId", "")
                End If
                Dim Params As ArrayList = ParamArrayToArrayList(ListaParams)

                Dim PostP As New StringBuilder
                For z = 0 To Params.Count - 1 Step 2
                    PostP.Append(IIf(PostP.Length <> 0, "&", "") & Params(z) & "=")
                    PostP.Append(Params(z + 1))
                Next

                ' trata parâmetros
                If Compare(Metodo, "POST") Then
                    Dim PostPBytes() As Byte = Encoding.GetBytes(PostP.ToString)
                    Req.Method = "POST"
                    Req.ContentType = "application/x-www-form-urlencoded"
                    Req.ContentLength = PostPBytes.Length
                    Req.GetRequestStream().Write(PostPBytes, 0, PostPBytes.Length)
                End If

                With New StreamReader(Req.GetResponse().GetResponseStream(), Encoding)
                    Return .ReadToEnd()
                End With
            Catch EX As Exception
                Return MessageEx(EX, "Obtendo página")
            End Try
        End Function

        ''' <summary>
        ''' Apresentação de conteúdo durante depuração em objeto padrão txtdebug.
        ''' </summary>
        ''' <param name="page">Página onde txtdebug será pesquisado.</param>
        ''' <param name="Conteudo">Conteúdo a ser colocado no espaço de depuração.</param>
        ''' <remarks></remarks>
        Shared Sub DebugPrint(ByVal page As Page, ByVal Conteudo As String)
            Dim Ctl As Label = page.Master.FindControl("txtDebug")
            If Not IsNothing(Ctl) Then
                Ctl.Text &= HttpContext.Current.Server.HtmlEncode(Conteudo) & "<br/>"
            End If
        End Sub

        ''' <summary>
        ''' Atribuição de objeto quando ele existe. Isso para evitar o erro da não definição.
        ''' </summary>
        ''' <param name="VarByRef">Objeto a ser atribuído.</param>
        ''' <param name="Def">Atribuição quando não for nothing.</param>
        ''' <remarks></remarks>
        Shared Sub AtribQuandoDef(ByRef VarByRef As Object, ByVal Def As Object)
            If Not IsNothing(Def) Then
                VarByRef = Def
            End If
        End Sub

        ''' <summary>
        ''' Classe responsável por criar objetos com base em uma dll carregada dinamicamente.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class CriadorDeObjetos
            Private _assembly As Reflection.Assembly

            ''' <summary>
            ''' Publica caminho de uma dll procurando-a pelos diretórios default.
            ''' </summary>
            ''' <param name="dll">Nome da dll.</param>
            ''' <remarks></remarks>
            Public Sub New(ByVal dll As String)
                Dim dirList As String = ""
                Dim errList As String = ""

                If Ambiente() = AmbienteTipo.WEB Then
                    If Not String.IsNullOrEmpty(IO.Path.GetDirectoryName(dll)) Then
                        dirList = IO.Path.GetDirectoryName(HttpContext.Current.Server.MapPath(dll))
                        dll = IO.Path.GetFileName(HttpContext.Current.Server.MapPath(dll))
                    Else
                        dirList = HttpContext.Current.Server.MapPath("~/bin/") & ";"
                    End If

                Else
                    If Not String.IsNullOrEmpty(IO.Path.GetDirectoryName(dll)) Then
                        dirList = IO.Path.GetDirectoryName(dll)
                        dll = IO.Path.GetFileName(dll)
                    Else
                        dirList = System.Windows.Forms.Application.StartupPath & "\" & ";" & System.Windows.Forms.Application.StartupPath & "\bin\" & ";" & System.AppDomain.CurrentDomain.BaseDirectory & ";" & System.AppDomain.CurrentDomain.BaseDirectory & "bin\;" & Environment.GetEnvironmentVariable("WINDIR") & ";" & Environment.SystemDirectory() & ";"
                    End If
                End If

                For Each s As String In dirList.Split(";")
                    If IO.File.Exists(FileExpr(s, dll)) Then
                        Try
                            _assembly = Reflection.Assembly.LoadFile(FileExpr(s, dll))
                        Catch EX As Exception
                            Dim DI As New System.IO.DirectoryInfo(FileExpr(s, dll))
                            _assembly = Reflection.Assembly.LoadFile(DI.FullName)
                        End Try
                        Exit For
                    End If
                Next

                If _assembly Is Nothing Then
                    Throw New Exception("Não foi possível carregar a dll especificada('" & dll & "'). Verifique se a mesma contém um formato válido.")
                End If
            End Sub

            ''' <summary>
            ''' Cria um objeto de um tipo especificado dentro da dll com base em seu nome.
            ''' </summary>
            ''' <param name="obj">O nome do tipo do objeto que será criado.</param>
            ''' <param name="params">Parâmetros que atendam a algum construtor do objeto especificado. No caso de nada ser passado, o contrutor default será admitido.</param>
            ''' <returns>Retorna o objeto criado.</returns>
            ''' <remarks></remarks>
            Public Function Criar(ByVal obj As String, ByVal ParamArray params() As Object) As Object
                Return _assembly.CreateInstance(getTipo(obj).FullName, False, Reflection.BindingFlags.CreateInstance, Nothing, params, Nothing, Nothing)
            End Function

            ''' <summary>
            ''' Cria objeto a partir de uma instância com nome e parâmetros específicos.
            ''' </summary>
            ''' <param name="assemblyInstance">Instância da biblioteca publicada.</param>
            ''' <param name="objectName">Nome do objeto a ser criado.</param>
            ''' <param name="params">Parâmetros considerados por esta instância.</param>
            ''' <returns>Objeto criado.</returns>
            ''' <remarks></remarks>
            Public Shared Function Criar(ByVal assemblyInstance As Reflection.Assembly, ByVal objectName As String, ByVal ParamArray params() As Object) As Object
                Return assemblyInstance.CreateInstance(GetTipo(assemblyInstance, objectName).FullName, False, Reflection.BindingFlags.CreateInstance, Nothing, params, Nothing, Nothing)
            End Function

            ''' <summary>
            ''' Pega tipo de um objeto.
            ''' </summary>
            ''' <param name="typeName">Tipo do objeto.</param>
            ''' <returns>Tipo do objeto.</returns>
            ''' <remarks></remarks>
            Public Function getTipo(ByVal typeName As String) As System.Type
                Return _assembly.GetTypes().Single(Function(tp) tp.Name = typeName)
            End Function

            ''' <summary>
            ''' Pega uma função do tipo especificado.
            ''' </summary>
            ''' <param name="asb">Objeto a ser pesquisado.</param>
            ''' <param name="typeName">Tipo que permitirá buscar a função.</param>
            ''' <returns>Objeto de tipo encontrado.</returns>
            ''' <remarks></remarks>
            Public Shared Function GetTipo(ByVal asb As Reflection.Assembly, ByVal typeName As String) As System.Type
                Return asb.GetTypes().Single(Function(tp) tp.Name = typeName)
            End Function

            ''' <summary>
            ''' Busca todos os tipos encontrados no objeto.
            ''' </summary>
            ''' <returns>Array contendo todos os tipos.</returns>
            ''' <remarks></remarks>
            Public Function VerificaTipos() As String()
                Return (From assemb As System.Type In _assembly.GetTypes Select assemb.Name).ToArray
            End Function

            ''' <summary>
            ''' Busca tipos na instância informada.
            ''' </summary>
            ''' <param name="asb">Instância informada.</param>
            ''' <returns>Array de tipos existentes na instância.</returns>
            ''' <remarks></remarks>
            Public Shared Function VerificaTipos(ByVal asb As Reflection.Assembly) As String()
                Return (From assemb As System.Type In asb.GetTypes Select assemb.Name).ToArray
            End Function

            ''' <summary>
            ''' Retorna assembly criado.
            ''' </summary>
            ''' <value>Assembly criado.</value>
            ''' <returns>Assembly criado.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Assembly() As Reflection.Assembly
                Get
                    Return _assembly
                End Get
            End Property
        End Class

        ''' <summary>
        ''' Classe que permite manutenção de pool de execuções assíncronas.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class PoolAsync
            Public MaxPends As Integer = Nothing
            Private _Pool As ArrayList = Nothing

            ''' <summary>
            ''' Cria pool de execução assíncrona.
            ''' </summary>
            ''' <param name="Pool">Array para armazenamento das execuções assíncronas.</param>
            ''' <param name="MaxPends">Máximo de pendências possível.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Pool As ArrayList, Optional ByVal MaxPends As Integer = 20)
                If Not IsNothing(Pool) Then
                    _Pool = Pool
                Else
                    _Pool = New ArrayList
                End If
                Me.MaxPends = NZ(MaxPends, 20)
            End Sub

            ''' <summary>
            ''' Programa chamada para execução assíncrona.
            ''' </summary>
            ''' <param name="Rotina">Delegate de rotina.</param>
            ''' <param name="Param">Parâmetro utilizado.</param>
            ''' <returns>Thread de controle daquela rotina assíncrona.</returns>
            ''' <remarks></remarks>
            Private Function _Chama(ByVal Rotina As System.Delegate, Optional ByVal Param As Object = Nothing) As System.Threading.Thread
                Dim th As System.Threading.Thread = Nothing
                If Not IsNothing(Pend()) Then
                    If TypeOf (Rotina) Is System.Threading.ThreadStart Then
                        th = New System.Threading.Thread(CType(Rotina, System.Threading.ThreadStart))
                    ElseIf TypeOf (Rotina) Is System.Threading.ParameterizedThreadStart Then
                        th = New System.Threading.Thread(CType(Rotina, System.Threading.ParameterizedThreadStart))
                    End If
                    If Not IsNothing(_Pool) Then
                        _Pool.Add(th)
                    End If
                    If IsNothing(Param) Then
                        th.Start()
                    Else
                        th.Start(Param)
                    End If
                End If
                Return th
            End Function

            ''' <summary>
            ''' Chama execução de rotina assíncrona sem parâmetro.
            ''' </summary>
            ''' <param name="Rotina">Thread de controle da rotina assíncrona.</param>
            ''' <returns>Thread de controle da rotina assíncrona.</returns>
            ''' <remarks></remarks>
            Function Chama(ByVal Rotina As System.Threading.ThreadStart) As System.Threading.Thread
                Return _Chama(Rotina, Nothing)
            End Function

            ''' <summary>
            ''' Chama execução de rotina assíncrona com parâmetro.
            ''' </summary>
            ''' <param name="Rotina">Thread de controle da rotina assíncrona.</param>
            ''' <param name="Param">Parâmetro que será passado para rotina de execução assíncrona.</param>
            ''' <returns>Thread de controle da rotina assíncrona.</returns>
            ''' <remarks></remarks>
            Function Chama(ByVal Rotina As System.Threading.ParameterizedThreadStart, ByVal Param As Object) As System.Threading.Thread
                Return _Chama(Rotina, Param)
            End Function

            ''' <summary>
            ''' Aciona um evento assíncrono a partir de um objeto sem parâmetro.
            ''' </summary>
            ''' <param name="Sender">Objeto que dispara o evento.</param>
            ''' <param name="Rotina">Rotina que será executada.</param>
            ''' <returns>Retorna controle de execução assíncrona.</returns>
            ''' <remarks></remarks>
            Function Invoke(ByVal Sender As Object, ByVal Rotina As System.Delegate) As System.IAsyncResult
                Return _Invoke(Sender, Rotina)
            End Function

            ''' <summary>
            ''' Aciona um evento assíncrono a partir de um objeto com parâmetro.
            ''' </summary>
            ''' <param name="Sender">Objeto que dispara o evento.</param>
            ''' <param name="Rotina">Rotina que será executada.</param>
            ''' <param name="Params">Parâmetro que será passado para evento disparado.</param>
            ''' <returns>Retorna controle de execução assíncrona.</returns>
            ''' <remarks></remarks>
            Function Invoke(ByVal Sender As Object, ByVal Rotina As System.Delegate, ByVal Params As Object) As System.IAsyncResult
                Return _Invoke(Sender, Rotina, Params)
            End Function

            ''' <summary>
            ''' Chamada comum para ativação de evento assíncrono a partir de um objeto como parâmetro.
            ''' </summary>
            ''' <param name="Sender">Objeto que dispara o evento.</param>
            ''' <param name="Rotina">Rotina que será executada.</param>
            ''' <param name="Param">Parâmetro que será passado para evento disparado.</param>
            ''' <returns>Retorna controle de execução assíncrona.</returns>
            ''' <remarks></remarks>
            Private Function _Invoke(ByVal Sender As Object, ByVal Rotina As System.Delegate, Optional ByVal Param As Object = Nothing) As System.IAsyncResult
                Dim ar As Object = Nothing
                If Not IsNothing(Pend()) Then
                    If TypeOf (Rotina) Is System.Threading.ThreadStart Then
                        ar = Sender.BeginInvoke(Rotina)
                    ElseIf TypeOf (Rotina) Is System.Threading.ParameterizedThreadStart Then
                        ar = Sender.BeginInvoke(Rotina, Param)
                    End If
                    If Not IsNothing(_Pool) Then
                        _Pool.Add(ar)
                    End If
                End If
                Return ar
            End Function

            ''' <summary>
            ''' Trata pendências liberando espaço de alocação das threads finalizadas.
            ''' </summary>
            ''' <returns>Retorna true caso ainda haja espaço para alocação de pendências ou false caso não exista mais itens disponíveis.</returns>
            ''' <remarks></remarks>
            Public Function Pend() As Object
                If MaxPends = 0 Then
                    Return True
                End If
                If IsNothing(_Pool) Then
                    Return False
                End If
                Dim z As Integer = 0
                Do While z < _Pool.Count
                    Dim obj As Object = _Pool(z)
                    If TypeOf (obj) Is System.Threading.Thread AndAlso CType(obj, System.Threading.Thread).ThreadState = System.Threading.ThreadState.Stopped Then
                        _Pool.RemoveAt(z)
                    ElseIf obj.ToString = "System.Windows.Forms.Control+ThreadMethodEntry" AndAlso obj.iscompleted Then
                        _Pool.RemoveAt(z)
                    Else
                        z += 1
                    End If
                Loop
                If _Pool.Count >= MaxPends Then
                    Return Nothing
                End If
                Return z > 0
            End Function
        End Class


        ''' <summary>
        ''' Define atributo de um objeto.
        ''' </summary>
        ''' <param name="Objeto">Objeto.</param>
        ''' <param name="Atributo">Atributo.</param>
        ''' <value>Valor.</value>
        ''' <returns>Retorna o próprio objeto.</returns>
        ''' <remarks></remarks>
        Public Shared Property Atrib(ByVal Objeto As Object, ByVal Atributo As String) As Object
            Get
                Dim r() As Reflection.MemberInfo = (From x As Reflection.MemberInfo In Objeto.GetType.GetMember(Atributo, Reflection.BindingFlags.IgnoreCase Or Reflection.BindingFlags.Public Or Reflection.BindingFlags.Instance) Select x Order By x.DeclaringType.FullName = x.ReflectedType.FullName Descending).ToArray
                If r(0).MemberType = Reflection.MemberTypes.Property Then
                    Return CType(r(0), System.Reflection.PropertyInfo).GetValue(Objeto, Nothing)
                ElseIf r(0).MemberType = Reflection.MemberTypes.Field Then
                    Return CType(r(0), System.Reflection.FieldInfo).GetValue(Objeto)
                Else
                    Throw New Exception("Especificado tipo " & r(0).MemberType.ToString & " não tratado no objeto " & Objeto.GetType.ToString & ".")
                End If
                Return Nothing
            End Get
            Set(ByVal value As Object)
                Dim r() As Reflection.MemberInfo = (From x As Reflection.MemberInfo In Objeto.GetType.GetMember(Atributo, Reflection.BindingFlags.IgnoreCase Or Reflection.BindingFlags.Public Or Reflection.BindingFlags.Instance) Select x Order By x.DeclaringType.FullName = x.ReflectedType.FullName Descending).ToArray
                If r(0).MemberType = Reflection.MemberTypes.Property Then
                    Dim p As System.Reflection.PropertyInfo = r(0)
                    p.SetValue(Objeto, Convert.ChangeType(value, p.PropertyType), Reflection.BindingFlags.SetProperty, Nothing, Nothing, Nothing)
                ElseIf r(0).MemberType = Reflection.MemberTypes.Field Then
                    Dim f As System.Reflection.FieldInfo = r(0)
                    f.SetValue(Objeto, Convert.ChangeType(value, f.FieldType), Reflection.BindingFlags.SetField, Nothing, Nothing)
                Else
                    Throw New Exception("Especificado tipo " & r(0).MemberType.ToString & " não tratado no objeto " & Objeto.GetType.ToString & ".")
                End If
            End Set
        End Property

        ''' <summary>
        ''' Funções com página html.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class PagHtml
            Public Conteudo As String = ""
            Public Titulo As String = ""
            Public Descricao As String = ""
            Public Classe As String = ""

            ''' <summary>
            ''' Carrega do disco uma página.
            ''' </summary>
            ''' <param name="Pagina">Url da página.</param>
            ''' <remarks></remarks>
            Public Sub CarregaDoDisco(ByVal Pagina As String)
                Dim Arq As New System.IO.StreamReader(FileExpr(Pagina), System.Text.Encoding.Default)
                Conteudo = Arq.ReadToEnd
                Arq.Close()
                AtualizaParams()
            End Sub

            ''' <summary>
            ''' Atualiza parâmetros da página.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub AtualizaParams()
                Titulo = RegexGroup(Conteudo, "(?is)title=""(.*?)""", 1).Value
                If Titulo = "" Then
                    Titulo = PegaHtmlEmTexto(Conteudo, "title").Inner
                End If
                Descricao = RegexGroup(Conteudo, "(?is)description=""(.*?)""", 1).Value
                Classe = RegexGroup(Conteudo, "(?is)inherits=""(.*?)""", 1).Value
            End Sub

            ''' <summary>
            ''' Inicia acesso à uma página específica.
            ''' </summary>
            ''' <param name="Pagina">Url da página.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Pagina As String)
                If Pagina <> "" Then
                    CarregaDoDisco(Pagina)
                End If
            End Sub
        End Class


        ''' <summary>
        ''' Pega html em texto.
        ''' </summary>
        ''' <param name="Texto">Texto que será pesquisado.</param>
        ''' <param name="Tag">Tag desejada.</param>
        ''' <returns>Trecho contendo a tag (outer).</returns>
        ''' <remarks></remarks>
        Shared Function PegaHtmlEmTexto(ByVal Texto As String, ByVal Tag As String) As RegexHtml
            Return New RegexHtml(Texto, Tag)
        End Function


        ''' <summary>
        ''' Monta uma nova senha com base em critérios previamente estabelecidos.
        ''' </summary>
        ''' <param name="Qtd">Quantidade de caracteres.</param>
        ''' <param name="Maiusc">Com maiúsculas?</param>
        ''' <param name="Minusc">Com minúsculas?</param>
        ''' <param name="Complex">Caracteres para aumentar complexidade?</param>
        ''' <param name="Numeros">Com números?</param>
        ''' <returns>Retorna senha calculada.</returns>
        ''' <remarks></remarks>
        Public Shared Function NovaSenha(Optional ByVal Qtd As Integer = 6, Optional ByVal Maiusc As Boolean = True, Optional ByVal Minusc As Boolean = False, Optional ByVal Complex As Boolean = False, Optional ByVal Numeros As Boolean = False) As String
            Dim ComplexStr As String = "!@#$&*_-+=?|\/"
            Dim NR As Integer = 0
            If Maiusc Then
                NR += 26
            End If
            If Minusc Then
                NR += 26
            End If
            If Numeros Then
                NR += 10
            End If
            If Complex Then
                NR += Len(ComplexStr)
            End If

            Dim Senha As String = ""
            For Z = 1 To Qtd
                Dim Carac As Integer = Int(Rnd(Rnd() * 100) * NR)
                If Maiusc And Carac < 26 Then ' A-Z
                    Senha += Chr(Carac + Asc("A"))
                ElseIf Minusc And Carac < IIf(Maiusc, 26, 0) + 26 Then ' a-z
                    Senha += Chr(Carac - IIf(Maiusc, 26, 0) + Asc("a"))
                ElseIf Numeros And Carac < IIf(Maiusc, 26, 0) + IIf(Minusc, 26, 0) + 10 Then ' 0-9
                    Senha += Chr(Carac - IIf(Maiusc, 26, 0) - IIf(Minusc, 26, 0) + Asc("0"))
                ElseIf Complex And Carac >= IIf(Maiusc, 26, 0) + IIf(Minusc, 26, 0) + IIf(Numeros, 10, 0) Then ' complex
                    Senha += ComplexStr.Chars(Carac - IIf(Maiusc, 26, 0) - IIf(Minusc, 26, 0) - IIf(Numeros, 10, 0))
                End If
            Next
            Return Senha
        End Function

        ''' <summary>
        ''' Conjunto de funções para criar código de base de dados.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Gerador

            ''' <summary>
            ''' Critérios utilizados para ativar opções de criação de triggers.
            ''' </summary>
            ''' <remarks></remarks>
            <Flags()> Public Enum Criterios
                Iniciar = 2 ^ 0
                Tabela = 2 ^ 1
                InfraSistema = 2 ^ 2
                InfraSistemaDados = 2 ^ 3
                InfraGerador = 2 ^ 4
                InfraGeradorDados = 2 ^ 5
                TabelaDados = 2 ^ 6
                IntegridadeInterna = 2 ^ 7
                GaranteEstrutGerSys = 2 ^ 8
                SysEmTodosOsSistemas = 2 ^ 9
                DependeInterfere = 2 ^ 10
                AtualizaGrupo = 2 ^ 11
                AtualizaClasse = 2 ^ 12
                ChecaRelacionamento = 2 ^ 13
                RenovaGerTabelaECampo = 2 ^ 14
                DefinirDescrPelasTabs = 2 ^ 15
                AtualizaRelacionamentos = 2 ^ 16
                AtualizaIndice = 2 ^ 17
                DescricoesDasEstrutSoVazias = 2 ^ 18
                Visao = 2 ^ 19
                ProcuraErrosEmMetas = 2 ^ 20
                ConsiderarTiposBaseAtual = 2 ^ 21
                DefSysEmMinusculas = 2 ^ 22
                Tudo = 2 ^ 23 - 1
            End Enum

            ''' <summary>
            ''' Evento que ocorre ao notificar registro de log.
            ''' </summary>
            ''' <param name="Texto"></param>
            ''' <remarks></remarks>
            Public Event NotificaRegLog(ByVal Texto As String)

            ''' <summary>
            ''' Criação do gerador.
            ''' </summary>
            ''' <remarks></remarks>
            Sub New()
                CarregaDict(Explica, True, Criterios.Iniciar, "Selecionar se desejar iniciar as definições.", Criterios.Tabela, "Marque se precisar tratar tabelas e campos.", Criterios.InfraSistema, "Marque se for considerar as estruturas de sistema (tabelas SYS_...).", Criterios.InfraSistemaDados, "Marcar se precisar tratar dos dados de tabelas de sistema (tabelas SYS_...).", Criterios.InfraGerador, "Marcado se forem consideradas as tabelas do gerador (tabelas GER_...).", Criterios.InfraGeradorDados, "Marcado se os dados das tabelas de gerador precisarem de tratamento (tabelas GER_...).", Criterios.TabelaDados, "Marque para tratar dados de tabelas em geral que não as do sistema ou do gerador.", Criterios.IntegridadeInterna, "Marcado para que a máquina garanta as tabelas básicas e estruturas complementares obrigatórias do ambiente.", Criterios.GaranteEstrutGerSys, "Marcado para que as tabelas do gerador e do sistema sejam incluídas na especificação.", Criterios.SysEmTodosOsSistemas, "Inclui tabelas de SYS... em todos os sistemas.", Criterios.DependeInterfere, "Atualiza variáveis de GER_TABELA DEPENDE e INTERFERE, que armazenam respectivas condições entre as tabelas.", Criterios.AtualizaGrupo, "Verifica em usuários os grupos que existem criando-os em GER_GRUPO caso necessário.", Criterios.AtualizaClasse, "Confere se todas as classes existentes nos objetos existem na tabela GER_CLASSE.", Criterios.ChecaRelacionamento, "Verifica se todos os relacionamentos possuem campos relacionados com tamanhos iguais.", Criterios.RenovaGerTabelaECampo, "Recarrega especificações de GER_TABELA e GER_CAMPO recuperando as definições anteriores.", Criterios.DefinirDescrPelasTabs, "Definir descrições pelas tabelas implementadas ao invés de pegar no GER_... isso para tabelas e campos.", Criterios.AtualizaRelacionamentos, "Para garantir relacionamentos (dados da tabela GER_RELACIONAMENTO) após tratamento da base.", Criterios.AtualizaIndice, "Procura índices disponíveis diferentes de referenciais e chaves primárias e utiliza para compor o banco.", Criterios.DescricoesDasEstrutSoVazias, "Considera descrições apenas para conteúdos vazios. Aquelas que já estiverem especificadaas permanecerão.", Criterios.Visao, "Considera no processamento as visões.", Criterios.ProcuraErrosEmMetas, "Procura erros como descrições vazias, etiquetas igual ao nome em maiúsculo entre outras condições de imperfeição.", Criterios.ConsiderarTiposBaseAtual, "Faz com que os tipos sejam ajustados caso necessário para contemplar o que está na base.")
            End Sub

            ''' <summary>
            ''' Carrega definição de campos com base no sistema.
            ''' </summary>
            ''' <param name="StrGerador">String de consulta para busca do banco de dados.</param>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="Tabela">Tabela.</param>
            ''' <param name="NomeCampo">Nome do campo.</param>
            ''' <value>Linha encontrada.</value>
            ''' <returns>Linha encontrada.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property DefsCampo(ByVal StrGerador As String, ByVal Sistema As String, ByVal Tabela As String, ByVal NomeCampo As String) As DataRow
                Get
                    Dim Row As DataRow = Nothing
                    Try
                        Dim DS As DataSet = DSCarrega("SELECT * FROM GER_CAMPO WHERE SISTEMA=:SISTEMA AND TABELA=:TABELA AND CAMPO=:CAMPO", StrGerador, ":SISTEMA", Sistema, ":TABELA", Tabela, ":CAMPO", NomeCampo)
                        With DS.Tables(0).Rows(0)
                            If NZ(.Item("PROP_EXTEND"), "") <> "" Then
                                Dim Props As New ElementosStr(.Item("PROP_EXTEND"), vbCrLf, ":")
                                For Each Prop As ElementoStr In Props.Elementos
                                    DS.Tables(0).Columns.Add(Prop.Nome)
                                    .Item(Prop.Nome) = Prop.Conteudo
                                Next
                            End If
                        End With
                        Row = DS.Tables(0).Rows(0)
                    Catch
                    End Try
                    Return Row
                End Get
            End Property

            ''' <summary>
            ''' Define propriedade de linha de campo.
            ''' </summary>
            ''' <param name="Def">Linha de campo.</param>
            ''' <param name="NomeProp">Propriedade.</param>
            ''' <value>Valor do campo.</value>
            ''' <returns>Valor do campo.</returns>
            ''' <remarks></remarks>
            Shared ReadOnly Property DefsProp(ByVal Def As DataRow, ByVal NomeProp As String) As Object
                Get
                    Try
                        Return Def(NomeProp)
                    Catch
                    End Try
                    Return Nothing
                End Get
            End Property

            ''' <summary>
            ''' Confirma a integridade do gerador
            ''' </summary>
            ''' <remarks></remarks>
            Public ConfirmaIntegridade As Boolean = False
            Public Importa As Criterios
            Public Exporta As Criterios
            Public Tbs As New System.Data.DataSet
            Public Log As New StringBuilder
            Public Explica As New Dictionary(Of Criterios, String)
            Public db As Object ' objeto utilizado para abrir access
            Public GerSistema As String = ""

            Public TabsSistema As String = "SYS_CONFIG_GLOBAL;SYS_CONFIG_USUARIO;SYS_DELETE;SYS_LOCALID;SYS_OCORRENCIA"
            Public TabsGerador As String = "GER_ADICIONAL_OBJ;GER_CAMPO;GER_GRUPO;GER_INDICE;GER_RELACIONAMENTO;GER_SISTEMA;GER_TABELA;GER_VISAO;GER_CLASSE;GER_DIREITO;GER_TIPO_OBJ;GER_USUARIO"

            ''' <summary>
            ''' Cancela integridade do conjunto de definições para gerador.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub SuspendeIntegridade()
                ConfirmaIntegridade = False
                EliminaConstrants()
                LimpaRelacionamentos()
            End Sub

            ''' <summary>
            ''' Reativa integridade do conjunto de definições para gerador.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub AcertaIntegridade()
                Dim Ult As String = ""

                Try
                    RegLog("Confirmando integridade.", True)
                    ConfirmaIntegridade = True

                    If Tbs.Tables.Contains(GerSistema & ".GER_TABELA") Then
                        For Each tb As System.Data.DataTable In Tbs.Tables
                            Ult = "definindo chave em tabela " & tb.TableName
                            Dim z As Integer = 0
                            Dim db_def As System.Data.DataRow = Tbs.Tables(GerSistema & ".GER_TABELA").Select("SISTEMA='" & tb.ExtendedProperties("SISTEMA") & "' AND  SISTEMA + '.' + TABELA='" & tb.TableName & "'").DefaultIfEmpty()(0)
                            If Not IsNothing(db_def) Then
                                Dim Ar As New List(Of System.Data.DataColumn)
                                For Each Item As String In Split(db_def!CHAVE_PRIMA, ";")
                                    If Item <> "" Then
                                        Ar.Add(tb.Columns(Item))
                                    End If
                                Next
                                tb.PrimaryKey = Ar.ToArray
                            End If
                        Next
                    Else
                        Throw New Exception("Nenhum objeto GER_TABELA encontrado.")
                        Exit Sub
                    End If


                    If Tbs.Tables.Contains(GerSistema & ".GER_RELACIONAMENTO") Then
                        Ult = "apagando relacionamentos"
                        LimpaRelacionamentos()
                        For Each Rel As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Select("OBRIG<>0")
                            Ult = "definindo rel " & Rel!NOME
                            Dim z As Integer = 0
                            Dim Col1 As New List(Of System.Data.DataColumn)
                            Dim ColN As New List(Of System.Data.DataColumn)
                            Dim Camp1() As String = Split(Rel!CAMPO_1, ";")
                            Dim CampN() As String = Split(Rel!CAMPO_N, ";")
                            Dim zz As Integer = Nothing
                            For zz = 0 To Camp1.Length - 1
                                Try
                                    Dim COL = Tbs.Tables(Rel!sistema & "." & Rel!TABELA_1).COLUMNs(Camp1(zz))
                                    If IsNothing(COL) Then Throw New Exception("Retorno nulo")
                                    Ult = "adicionando coluna " & COL.columnname
                                    Col1.Add(COL)
                                Catch EX As Exception
                                    Throw New Exception("Falha ao tentar ler campo " & Camp1(zz) & " na tabela " & Rel!TABELA_1 & ": " & MessageEx(EX) & ".")
                                End Try
                                Try
                                    Dim COL = Tbs.Tables(Rel!sistema & "." & Rel!TABELA_N).COLUMNs(CampN(zz))
                                    If IsNothing(COL) Then Throw New Exception("Retorno nulo")
                                    ColN.Add(COL)
                                Catch ex As Exception
                                    Throw New Exception("Falha ao tentar ler campo " & CampN(zz) & " na tabela " & Rel!TABELA_N & ": " & MessageEx(ex) & ".")
                                End Try

                            Next
                            Dim rr As New System.Data.DataRelation(Rel!NOME, Col1.ToArray, ColN.ToArray, True)
                            Try
                                Tbs.Relations.Add(rr)
                            Catch ex As Exception
                                Throw New Exception("Impossível ativar rel " & rr.RelationName & ". " & ex.Message & " (campos1: " & Rel!tabela_1 & " " & Rel!campo_1 & " | campon: " & Rel!tabela_n & " " & Rel!campo_n & ".")
                            End Try
                        Next
                    Else
                        Throw New Exception("Nenhum objeto GER_RELACIONAMENTO encontrado.")
                    End If

                    RegLog("Integridade OK", True)
                Catch ex As Exception
                    SuspendeIntegridade()
                    RegLog("Problemas ao tentar ativar integridade: " & ex.Message & " última condição: " & Ult, True)
                End Try
            End Sub

            ''' <summary>
            ''' Carrega gerador baseando-se em esquema.
            ''' </summary>
            ''' <param name="Sistema">Esquema a ser pesquisado.</param>
            ''' <param name="MDBouStrConn">String de conexão ou arquivo MDB.</param>
            ''' <remarks></remarks>
            Public Sub CarregaGerador(ByVal Sistema As String, ByVal MDBouStrConn As String)
                CarregaGerador(Sistema, "", MDBouStrConn)
            End Sub

            ''' <summary>
            ''' Carrega gerador a partir de esquema.
            ''' </summary>
            ''' <param name="Sistema">Sistema que será registrado.</param>
            ''' <param name="Esquema">Esquema a ser pesquisado.</param>
            ''' <param name="StrConnStr">String de conexão.</param>
            ''' <remarks></remarks>
            Public Sub CarregaGerador(ByVal Sistema As String, ByVal Esquema As String, ByVal StrConnStr As String)
                RegLog("Carregando gerador " & Sistema & "-" & Esquema & "-" & StrConnStr, True)
                Dim StrConn As System.Configuration.ConnectionStringSettings = StrConnObj(StrConnStr)

                If Importa And Criterios.Iniciar Then
                    ApagaTabelas()
                End If

                ChecagemAnterior(Sistema)
                GaranteEstruturaGerSys(Sistema)

                Dim Ar As New ArrayList

                For Each TB As String In Split(TabsGerador, ";")
                    Dim ds As System.Data.DataSet = Nothing
                    Try
                        ds = DSCarrega("SELECT * FROM " & IIf(Esquema <> "", Esquema & ".", "") & TB, StrConn)
                    Catch EX As Exception
                        RegLog("Erro ao obter dados de tabela " & IIf(Esquema <> "", Esquema & ".", "") & TB, True)
                    End Try

                    If Not IsNothing(ds) Then
                        For Each Linha As System.Data.DataRow In ds.Tables(0).Rows


                            If TemNaLista("GER_TABELA;GER_CAMPO", TB) Then
                                If Linha!TABELA = "GER_TABELA" Then Continue For
                                If Linha!TABELA = "GER_CAMPO" Then Continue For
                            ElseIf TB = "GER_RELACIONAMENTO" Then
                                If TemNaLista(TabsGerador, Linha!TABELA_1) And TemNaLista(TabsGerador, Linha!TABELA_N) Then Continue For
                            End If


                            Ar = New ArrayList
                            For Each Col As System.Data.DataColumn In Tbs.Tables(Sistema & "." & TB).Columns
                                Try
                                    Ar.Add(Linha(Col.ColumnName))
                                Catch
                                    Ar.Add(System.Convert.DBNull)
                                End Try
                            Next
                            Try
                                Tbs.Tables(Sistema & "." & TB).Rows.Add(Ar.ToArray)
                            Catch EX As Exception
                                RegLog("Erro ao incluir linha na tabela " & TB & " - " & ConcatValores(";", Ar) & " - Erro:" & EX.Message, True)
                                If Not TemNaLista(TabsGerador, TB) Then
                                    Throw EX
                                End If
                            End Try
                        Next
                    End If
                Next

                RegLog("Término de carga gerador " & Sistema & "-" & Esquema & "-" & StrConnStr, True)
            End Sub

            ''' <summary>
            ''' Carrega gerador a partir de arquivo MDB.
            ''' </summary>
            ''' <param name="Sistema">Sistema a ser registrado.</param>
            ''' <param name="ArquivoMDB">MDB contendo a estrutura a ser registrada.</param>
            ''' <remarks></remarks>
            Public Sub CarregaMSAccess(ByVal Sistema As String, ByVal ArquivoMDB As String)
                RegLog("Carregando " & Sistema & "-" & ArquivoMDB, True)

                If Importa And Criterios.Iniciar Then
                    ApagaTabelas()
                End If

                ChecagemAnterior(Sistema)
                ArquivoMDB = FileExpr(ArquivoMDB)
                AbreMSAccess(ArquivoMDB) ' abre arquivo mdb
                ImportaMSTabs(Sistema, ArquivoMDB) ' obtem tabelas do access
                AtualizaTabelaCampo(Sistema) ' garante campos atuais em ger_tabela e ger_campo
                AtualizaMSRelacionamento(Sistema) ' garante ger_relacionamentos com todos existentes
                AtualizaMSIndice(Sistema) ' atualiza ger_indice com índices existentes

                If Importa And Criterios.DefSysEmMinusculas Then
                    For Each TB As System.Data.DataTable In Tbs.Tables
                        TB.TableName = LCase(TB.TableName)
                        For Each RB As System.Data.DataRow In TB.Rows
                            If TB.Columns.Contains("TABELA") Then
                                RB("TABELA") = LCase(RB("TABELA"))
                            End If
                            If TB.Columns.Contains("CAMPO") Then
                                RB("CAMPO") = LCase(RB("CAMPO"))
                            End If
                            If TB.Columns.Contains("CHAVE_PRIMA") Then
                                RB("CHAVE_PRIMA") = LCase(RB("CHAVE_PRIMA"))
                            End If
                            If TB.Columns.Contains("CODIGO") Then
                                RB("CODIGO") = LCase(RB("CODIGO"))
                            End If
                        Next
                    Next

                End If

                ChecagemPosterior()
                FechaMSAccess()

                RegLog("Término carga " & Sistema & "-" & ArquivoMDB, True)
            End Sub ' fim carga access

            ''' <summary>
            ''' Monta nome de relacionamento.
            ''' </summary>
            ''' <param name="TB_1">Tabela lado 1.</param>
            ''' <param name="TB_N">Tabela lado N.</param>
            ''' <param name="Rels">Relacionamentos para busca de próximo sequencial disponível com esta composição.</param>
            ''' <returns>Nome do relacionamento.</returns>
            ''' <remarks></remarks>
            Function NomeRelMonta(ByVal TB_1 As System.Data.DataRow, ByVal TB_N As System.Data.DataRow, ByVal Rels As System.Data.DataTable) As String
                Dim Pref As String = TB_1("CODIGO") & "_" & TB_N("CODIGO") & "_"
                Dim Qtd As Integer = (From x In Rels Where x("NOME") Like Pref & "*").Count()
                Return Pref & Format(NZ(Qtd, 0) + 1, "00")
            End Function

            ''' <summary>
            ''' Atualiza relacionamentos.
            ''' </summary>
            ''' <param name="Sistema">Sistema que deseja tratar.</param>
            ''' <remarks></remarks>
            Sub AtualizaMSRelacionamento(ByVal Sistema As String)
                If Importa And Criterios.AtualizaRelacionamentos Then
                    RegLog("Atualizando GER_RELACIONAMENTOS com base no sistema " & Sistema, True)
                    For Each Item As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Select("SISTEMA='" & Sistema & "'")
                        Item.Delete()
                    Next
                    Tbs.AcceptChanges()

                    For Each tbr As Object In db.Relations
                        Dim NomeTabela1 As String = tbr.TABLE
                        Dim NomeTabelaN As String = tbr.FOREIGNTABLE
                        Dim TB_1 As System.Data.DataRow = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_TABELA").Rows Where x!SISTEMA = Sistema And x!TABELA = NomeTabela1 Select x)(0)
                        Dim TB_N As System.Data.DataRow = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_TABELA").Rows Where x!SISTEMA = Sistema And x!TABELA = NomeTabelaN Select x)(0)

                        If Not IsNothing(TB_1) And Not IsNothing(TB_N) Then

                            ' busca campos do relacionamento
                            Dim Campos_1 As String = ""
                            Dim Campos_N As String = ""

                            'Loop para carregar chaves primárias e estrangeiras
                            For Each fld As Object In tbr.Fields
                                Dim NomeCampo1 As String = fld.name
                                Dim NomeCampoN As String = fld.foreignName
                                Campos_1 &= IIf(Campos_1 <> "", ";", "") & NomeCampo1
                                Campos_N &= IIf(Campos_N <> "", ";", "") & NomeCampoN
                            Next
                            Dim CascadeDel As String = IIf(CType(tbr.Attributes And DAO_RelationAttributeEnum_dbRelationDeleteCascade, Boolean), "CASCADE", "")
                            Dim CascadeUpd As String = IIf(CType(tbr.Attributes And DAO_RelationAttributeEnum_dbRelationUpdateCascade, Boolean), "CASCADE", "")
                            Dim Obrig As Boolean = Not CType(tbr.Attributes And DAO_RelationAttributeEnum_dbRelationDontEnforce, Boolean)
                            Dim NomeRel As String = NomeRelMonta(TB_1, TB_N, Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO"))

                            Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Rows.Add(Sistema, NomeRel, TB_1("TABELA"), Campos_1, "", TB_N("TABELA"), Campos_N, "", CascadeDel, CascadeUpd, Obrig, "", "", "", "", Convert.DBNull)
                        End If
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Atualiza índice.
            ''' </summary>
            ''' <param name="Sistema">Sistema que deseja tratar.</param>
            ''' <remarks></remarks>
            Sub AtualizaMSIndice(ByVal Sistema As String)
                If Importa And Criterios.AtualizaIndice Or Exporta And Criterios.AtualizaIndice Then
                    RegLog("Registrando índices.", True)
                    Tbs.Tables(GerSistema & ".GER_INDICE").Clear()
                    For Each TB As Object In db.tabledefs
                        If Not TabelasMSNegadas(TB.name) Then
                            For Each IND As Object In TB.indexes
                                If Not IND.primary And Not IND.Foreign Then
                                    Dim Campos As String = ObtemMSIndiceCampos(IND)
                                    Tbs.Tables(GerSistema & ".GER_INDICE").Rows.Add(Sistema, TB.NAME, IND.NAME, Campos, "", IND.unique)
                                End If
                            Next
                        End If
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Remove linhas no gerador.
            ''' </summary>
            ''' <param name="Sistema">Sistema de gerador.</param>
            ''' <param name="Tabela">Tabela onde quer apagar linhas.</param>
            ''' <param name="Filtro">Filtro de linhas.</param>
            ''' <remarks></remarks>
            Sub RemoveGerLinhas(ByVal Sistema As String, ByVal Tabela As String, ByVal Filtro As String)
                For Each Linha As System.Data.DataRow In Tbs.Tables(Sistema & "." & Tabela).Select(Filtro)
                    Linha.Delete()
                Next
                Tbs.AcceptChanges()
            End Sub

            ''' <summary>
            ''' Monta código novo para apresentação em script (nome do código).
            ''' </summary>
            ''' <param name="Texto">Texto de onde será obtida a especificação inicial.</param>
            ''' <param name="TB">Tabela para busca do sequencial.</param>
            ''' <returns>Nome do código novo.</returns>
            ''' <remarks></remarks>
            Function CodigoNovo(ByVal Texto As String, ByVal TB As DataTable) As String
                Dim TRECHO As String = ""
                Dim Z As Integer = 0
                For Z = 1 To 100
                    If Z = 1 Then
                        TRECHO = Microsoft.VisualBasic.Left(Texto, 13)
                    Else
                        TRECHO = Microsoft.VisualBasic.Left(Texto, 10) & "_" & Format(Z, "00")
                    End If
                    If TB.Select("CODIGO = '" & TRECHO & "'").Count = 0 Then
                        Exit For
                    End If
                Next
                If Z > 100 Then
                    Throw New Exception("Falha ao tentar obter código de tabela no gerador.")
                End If
                Return TRECHO
            End Function

            ''' <summary>
            ''' Atualiza estrutura tabela e campo no gerador.
            ''' </summary>
            ''' <param name="Sistemas">Sistema desejado.</param>
            ''' <remarks></remarks>
            Sub AtualizaTabelaCampo(Optional ByVal Sistemas As String = "")
                Dim Lista() As Object
                If Sistemas = "" Then
                    Lista = (From x As System.Data.DataTable In Tbs.Tables Select x.ExtendedProperties("SISTEMA") Distinct).ToArray
                Else
                    Lista = Split(Sistemas, ";")
                End If
                For Each Item As String In Lista
                    Dim Sistema As String = Item
                    If (Importa Or Exporta) And Criterios.RenovaGerTabelaECampo Then
                        Dim TABELA = Tbs.Tables(GerSistema & "." & "GER_TABELA").Copy
                        Dim CAMPO = Tbs.Tables(GerSistema & "." & "GER_CAMPO").Copy

                        EliminaConstrants()
                        RemoveGerLinhas(GerSistema, "GER_CAMPO", "SISTEMA='" & Sistema & "'")
                        RemoveGerLinhas(GerSistema, "GER_TABELA", "SISTEMA='" & Sistema & "'")

                        Dim TabOrd As Long = 1

                        Dim TabsSist = (From x As System.Data.DataTable In Tbs.Tables Where x.ExtendedProperties("SISTEMA") = Sistema Select x)
                        For Each DTab In From Atual As System.Data.DataTable In TabsSist Group Join Antiga As System.Data.DataRow In TABELA.Rows On Atual.TableName Equals Antiga!SISTEMA & "." & Antiga!tabela Into RelAntiga = Group From elem As System.Data.DataRow In RelAntiga.DefaultIfEmpty Select Atual, Antiga = elem Order By NZV(Prop(Antiga, "ORDEM"), 0), Atual.TableName

                            Dim TabelaAtual As String = DTab.Atual.TableName.Split(".")(1)
                            RegLog("Registrando em GER_TABELA e GER_CAMPO, tabela " & TabelaAtual, True)

                            Dim Descr As New DescrConcat("", "", "", "", "")
                            Descr = New DescrConcat(NZV(Prop(DTab.Antiga, "ETIQ"), TabelaAtual), Nothing, DTab.Atual.ExtendedProperties("ORIG_DESCRIPTION"))

                            Dim Classe As String = NZV(Descr.Grupo, NZ(Prop(DTab.Antiga, "CLASSE"), ""))
                            If (Importa Or Exporta) And Criterios.AtualizaClasse Then
                                If Tbs.Tables(GerSistema & "." & "GER_CLASSE").Select("SISTEMA='" & Sistema & "' AND CLASSE='" & Classe & "'").Count() = 0 Then
                                    Tbs.Tables(GerSistema & "." & "GER_CLASSE").Rows.Add(Sistema, Classe, Classe)
                                    RegLog("Classe " & Classe & " não existia e foi incluída")
                                End If
                            End If

                            Dim ChavePrima As String = ""
                            Try
                                ChavePrima = DTab.Antiga("CHAVE_PRIMA")
                            Catch
                            End Try
                            ChavePrima = NZ(ChaveMSPrima(DTab.Atual), ChavePrima)

                            Dim PegaDeTabs As Boolean = (Importa Or Exporta) And Criterios.DefinirDescrPelasTabs
                            Dim TEtiq As String = IIf(PegaDeTabs, NZV(Descr.Etiq, NZV(Prop(DTab.Antiga, "ETIQ"), TabelaAtual)), NZV(Prop(DTab.Antiga, "ETIQ"), NZV(Descr.Etiq, TabelaAtual)))
                            Dim TDescr As String = IIf(PegaDeTabs, NZV(Descr.Descr, NZV(Prop(DTab.Antiga, "DESCR"), "")), NZV(Prop(DTab.Antiga, "DESCR"), NZV(Descr.Descr, "")))
                            Dim TClasse As String = IIf(PegaDeTabs, NZV(Classe, NZV(Prop(DTab.Antiga, "CLASSE"), Sistema)), NZV(Prop(DTab.Antiga, "CLASSE"), NZV(Classe, Sistema)))
                            Dim DR As System.Data.DataRow = Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows.Add(DTab.Atual.ExtendedProperties("SISTEMA"), TabelaAtual, TabOrd, NZV(Prop(DTab.Antiga, "CODIGO"), CodigoNovo(TabelaAtual, Tbs.Tables(GerSistema & "." & "GER_TABELA"))), TEtiq, TDescr, ChavePrima, TClasse, NZV(Prop(DTab.Antiga, "CHAVE_APRES"), ""), NZV(Prop(DTab.Antiga, "DEPENDE"), -1), NZV(Prop(DTab.Antiga, "INTERFERE"), -1), NZV(Prop(DTab.Antiga, "CHAVE_FILTRO"), ""))

                            If (Exporta Or Importa) And Criterios.ProcuraErrosEmMetas Then
                                If NZ(DR!ETIQ, "") = "" Then
                                    RegLog("Tabela " & DR!tabela & " com descrição vazia.")
                                End If
                                If NZ(DR!DESCR, "") = "" Then
                                    RegLog("Tabela " & DR!tabela & " com descrição vazia.")
                                End If
                                Dim mm As System.Text.RegularExpressions.Match = System.Text.RegularExpressions.Regex.Match(DR!DESCR, "\(CLOB\)")
                                If mm.Success Then
                                    RegLog("Tabela " & DR!tabela & " com TRECHO inválido em DESCR '" & mm.Groups(0).Value & "'")
                                End If
                                If Not System.Text.RegularExpressions.Regex.Match(NZ(DR!DESCR, ""), "[.?!:]$").Success Then
                                    RegLog("Tabela " & DR!tabela & " precisa terminar com ponto, interrogação ou exclamação..[.?!:].")
                                End If
                                If NZ(DR!ETIQ, "") = DR!TABELA Or NZ(DR!ETIQ, "") = "" Then
                                    RegLog("Tabela " & DR!tabela & " deve possuir etiqueta válida no formato 'Etiqueta do Campo'.")
                                End If
                                mm = System.Text.RegularExpressions.Regex.Match(DR!ETIQ, "\(CLOB\)")
                                If mm.Success Then
                                    RegLog("Tabela " & DR!tabela & " com TRECHO inválido em ETIQ '" & mm.Groups(0).Value & "'")
                                End If

                                If NZ(DR!CHAVE_PRIMA, "") = "" Then
                                    RegLog("Tabela " & DR!tabela & " deve possuir CHAVE PRIMÁRIA.")
                                End If
                            End If


                            TabOrd += 1
                            Dim CampoOrd As Integer = 10000

                            Dim cpatual = From CAtual As System.Data.DataColumn In DTab.Atual.Columns Where CAtual.Table.TableName = Sistema & "." & TabelaAtual
                            Dim cprel = From rel In cpatual Group Join elem1 As System.Data.DataRow In CAMPO.Rows On rel.Table.TableName Equals elem1!sistema & "." & elem1!TABELA And rel.ColumnName Equals elem1!CAMPO Into elem2 = Group From elem3 As System.Data.DataRow In elem2.DefaultIfEmpty Select CAtual = rel, CAntiga = elem3 Order By Prop(CAntiga, "ORDEM"), CAtual.Ordinal
                            For Each CP In cprel
                                If Not TemNaLista("SYS_MOMENTO_CRIA;SYS_USUARIO_CRIA;SYS_LOCAL_CRIA;SYS_MOMENTO_ATUALIZA;SYS_USUARIO_ATUALIZA;SYS_LOCAL_ATUALIZA;SYS_STATUS", CP.CAtual.ColumnName) Then

                                    Dim TipoAcc As String = NZ(Prop(CP.CAntiga, "TIPO_ACCESS"), "")
                                    Dim TipoOracle As String = NZ(Prop(CP.CAntiga, "TIPO_ORACLE"), "")
                                    Dim TipoMySQL As String = NZ(Prop(CP.CAntiga, "TIPO_MYSQL"), "")
                                    AtualizaTipo(TipoAcc, TipoOracle, TipoMySQL, CP.CAtual)

                                    Dim DescrC As New DescrConcat("", "", "", "", "")
                                    If Importa Then
                                        DescrC = New DescrConcat(TabelaAtual, NZV(Prop(CP.CAntiga, "ETIQ"), CP.CAtual.ColumnName), NZV(CP.CAtual.ExtendedProperties("ORIG_DESCRIPTION"), ""))
                                    End If

                                    Dim CEtiq As String = IIf(PegaDeTabs, NZV(DescrC.Etiq, NZV(Prop(CP.CAntiga, "ETIQ"), "")), NZV(Prop(CP.CAntiga, "ETIQ"), NZV(DescrC.Etiq, CP.CAtual.ColumnName)))
                                    Dim CDescr As String = IIf(PegaDeTabs, NZV(DescrC.Descr, NZV(Prop(CP.CAntiga, "DESCR"), "")), NZV(Prop(CP.CAntiga, "DESCR"), NZV(DescrC.Descr, "")))
                                    Dim CGrupo As String = IIf(PegaDeTabs, NZV(DescrC.Grupo, NZ(Prop(CP.CAntiga, "CONJUNTO"), "")), NZV(Prop(CP.CAntiga, "CONJUNTO"), NZV(DescrC.Grupo, "")))

                                    DR = Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows.Add(DTab.Atual.ExtendedProperties("SISTEMA"), TabelaAtual, CP.CAtual.ColumnName, CampoOrd, CEtiq, CDescr, NZV(Prop(CP.CAntiga, "PROP_EXTEND"), ""), TipoAcc, TipoOracle, TipoMySQL, NZV(Prop(CP.CAntiga, "FORMATO"), ""), NZV(Prop(CP.CAntiga, "VALOR_PADRAO"), ""), NZV(Prop(CP.CAntiga, "AUTO"), ""), NZV(Prop(CP.CAntiga, "VALOR_CHECK"), ""), CGrupo)

                                    If (Exporta Or Importa) And Criterios.ProcuraErrosEmMetas Then
                                        If NZ(DR!DESCR, "") = "" Then
                                            RegLog("Tabela " & DR!tabela & " campo " & DR!campo & " com descrição vazia.")
                                        End If
                                        If Not System.Text.RegularExpressions.Regex.Match(NZ(DR!DESCR, ""), "[.?!:]$").Success Then
                                            RegLog("Tabela " & DR!tabela & " campo " & DR!campo & " precisa terminar com ponto, interrogação ou exclamação..[.?!:].")
                                        End If
                                        If NZ(DR!ETIQ, "") = DR!CAMPO Or NZ(DR!ETIQ, "") = "" Then
                                            RegLog("Tabela " & DR!tabela & " campo " & DR!campo & " deve possuir etiqueta válida no formato 'Nome do Campo'.")
                                        End If
                                        Dim mm As System.Text.RegularExpressions.Match = System.Text.RegularExpressions.Regex.Match(DR!DESCR, "\(CLOB\)")
                                        If mm.Success Then
                                            RegLog("Tabela " & DR!tabela & " campo " & DR!campo & " com TRECHO inválido em DESCR '" & mm.Groups(0).Value & "'")
                                        End If
                                        mm = System.Text.RegularExpressions.Regex.Match(DR!ETIQ, "\(CLOB\)")
                                        If mm.Success Then
                                            RegLog("Tabela " & DR!tabela & " campo " & DR!campo & " com TRECHO inválido em ETIQ '" & mm.Groups(0).Value & "'")
                                        End If
                                    End If
                                    CampoOrd += 1

                                End If
                            Next

                            Dim LINHAS = From X In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where X!TABELA = TabelaAtual Order By X!ORDEM
                            Dim ORD As Integer = 1
                            For Each LINHA As System.Data.DataRow In LINHAS
                                LINHA!ORDEM = ORD
                                ORD += 1
                            Next

                        Next


                    End If

                Next

            End Sub

            ''' <summary>
            ''' Atualiza lista de tipos.
            ''' </summary>
            ''' <param name="TipoAcc">Tipo do MsAccess.</param>
            ''' <param name="TipoOracle">Tipo do Oracle.</param>
            ''' <param name="TipoMySQL">Tipo do MySQL.</param>
            ''' <param name="CP">Campo.</param>
            ''' <remarks></remarks>
            Sub AtualizaTipo(ByRef TipoAcc As String, ByRef TipoOracle As String, ByRef TipoMySQL As String, ByVal CP As System.Data.DataColumn)

                Dim NovoTipoAccess As String = NZV(CP.ExtendedProperties("ORIG_TIPO_ACCESS"), "")
                Dim NovoTipoOracle As String = NZV(CP.ExtendedProperties("ORIG_TIPO_ORACLE"), "")
                Dim NovoTipoMySql As String = NZV(CP.ExtendedProperties("ORIG_TIPO_MYSQL"), "")

                If NovoTipoAccess <> "" Or NovoTipoOracle <> "" Or NovoTipoMySql <> "" Then

                    If TipoAcc <> NovoTipoAccess Or TipoOracle <> NovoTipoOracle Or TipoMySQL <> NovoTipoMySql Then
                        If TipoAcc <> NovoTipoAccess Then
                            RegLog("Tipo ACCESS para campo " & CP.ColumnName & " em tabela " & CP.Table.TableName & " ...ger_campo '" & TipoAcc & "' diferente da base '" & NovoTipoAccess & "'")
                            If (Importa Or Exporta) And Criterios.ConsiderarTiposBaseAtual Then
                                TipoAcc = NovoTipoAccess
                                RegLog("Tipo novo tipo ACCESS assumido automaticamente: " & NovoTipoAccess)
                            End If
                        End If

                        If TipoOracle <> NovoTipoOracle Then
                            RegLog("Tipo ORACLE para campo " & CP.ColumnName & " em tabela " & CP.Table.TableName & " ...ger_campo '" & TipoOracle & "' diferente da base '" & NovoTipoOracle & "'")
                            If (Importa Or Exporta) And Criterios.ConsiderarTiposBaseAtual Then
                                TipoOracle = NovoTipoOracle
                                RegLog("Tipo novo tipo ORACLE assumido automaticamente: " & NovoTipoOracle)
                            End If
                        End If

                        If TipoMySQL <> NovoTipoMySql Then
                            RegLog("Tipo MYSQL para campo " & CP.ColumnName & " em tabela " & CP.Table.TableName & " ...ger_campo '" & TipoMySQL & "' diferente da base '" & NovoTipoMySql & "'")
                            If (Importa Or Exporta) And Criterios.ConsiderarTiposBaseAtual Then
                                TipoOracle = NovoTipoOracle
                                RegLog("Tipo novo tipo MYSQL assumido automaticamente: " & NovoTipoMySql)
                            End If
                        End If

                    End If

                End If
                If TipoAcc = "" And TipoOracle = "" And TipoMySQL = "" Then
                    RegLog("DEFINIÇÃO DE TIPO incorreta pois todos estão vazios para " & CP.ColumnName & " em tabela " & CP.Table.TableName)
                End If
            End Sub

            ''' <summary>
            ''' Especificação de chave primária.
            ''' </summary>
            ''' <param name="TB">Tabela.</param>
            ''' <returns>Retorna chave primária.</returns>
            ''' <remarks></remarks>
            Function ChaveMSPrima(ByVal TB As DataTable) As String
                If TB.ExtendedProperties.Contains("ORIG_INDEXES") Then
                    Dim Elem As New ElementosStr(TB.ExtendedProperties("ORIG_INDEXES"), "|", "=")
                    Return TrimCarac(NZV(Elem("PrimaryKey").Conteudo, Elem("ID_" & TB.TableName.Split(".")(1)).Conteudo), New String() {"'"})
                End If
                Return Join((From X In TB.PrimaryKey Select X.ColumnName).ToArray, ";")
            End Function

            ''' <summary>
            ''' Propriedade DAO de banco de dados MsAccess.
            ''' </summary>
            ''' <param name="TbDef">Definição de tabela.</param>
            ''' <param name="NomeProp">Nome da propriedade.</param>
            ''' <value>Conteúdo da propriedade.</value>
            ''' <returns>Conteúdo da propriedade.</returns>
            ''' <remarks></remarks>
            Property DaoPropTab(ByVal TbDef As Object, ByVal NomeProp As String) As Object
                Get
                    Try
                        Return TbDef.Properties(NomeProp).Value
                    Catch
                    End Try
                    Return ""
                End Get
                Set(ByVal value As Object)
                    Try
                        If NZ(value, "") = "" Then
                            TbDef.Properties.Delete(NomeProp)
                        Else
                            Try
                                TbDef.Properties(NomeProp).Value = value
                            Catch
                                Dim Prop As Object = TbDef.CreateProperty(NomeProp, DAO_DataTypeEnum_dbText, value)
                                TbDef.Properties.Append(Prop)
                            End Try
                        End If
                    Catch
                    End Try
                End Set
            End Property

            ''' <summary>
            ''' Propriedade DAO de banco de campo em banco de dados MSAccess.
            ''' </summary>
            ''' <param name="Fld">Campo MSAccess.</param>
            ''' <param name="NomeProp">Nome da propriedade.</param>
            ''' <value>Valor da propriedade.</value>
            ''' <returns>Valor da propriedade.</returns>
            ''' <remarks></remarks>
            Property DaoPropCampo(ByVal Fld As Object, ByVal NomeProp As String) As Object
                Get
                    Try
                        Return Fld.Properties(NomeProp).Value
                    Catch
                    End Try
                    Return ""
                End Get
                Set(ByVal value As Object)
                    Try
                        If NZ(value, "") = "" Then
                            Fld.Properties.Delete(NomeProp)
                        Else
                            Try
                                Fld.Properties(NomeProp).Value = value
                            Catch
                                Dim Prop As Object = Fld.CreateProperty(NomeProp, DAO_DataTypeEnum_dbText, value)
                                Fld.Properties.Append(Prop)
                            End Try
                        End If
                    Catch
                    End Try
                End Set
            End Property

            ''' <summary>
            ''' Tabelas que não devem ser consideradas pela leitura do gerador.
            ''' </summary>
            ''' <param name="NomeTab">Nome da tabela está na lista de negadas?</param>
            ''' <returns>True caso nome esteja na lista e false caso não esteja.</returns>
            ''' <remarks></remarks>
            Function TabelasMSNegadas(ByVal NomeTab As String) As Boolean
                Return NomeTab Like "MSys*" Or NomeTab Like "~*" Or NomeTab = "tblRelationshipViews"
            End Function

            ''' <summary>
            ''' Importa tabelas de arquivo MDB para sistema específico.
            ''' </summary>
            ''' <param name="Sistema">Nome do sistema.</param>
            ''' <param name="ArquivoMDB">Arquivo mdb.</param>
            ''' <remarks></remarks>
            Sub ImportaMSTabs(ByVal Sistema As String, ByVal ArquivoMDB As String)
                If Importa And Criterios.Tabela Then
                    Dim TabOrdem As Integer = 1

                    Dim GerTab As System.Data.DataSet = Nothing
                    Try
                        GerTab = DSCarrega("SELECT * FROM GER_TABELA", "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb")
                    Catch
                    End Try

                    For Each tbd As Object In db.TableDefs
                        '                        If IsNothing(GerTab) OrElse GerTab.Tables(0).Select("TABELA='" & tbd.NAME & "' AND SISTEMA='" & Sistema & "'").Count > 0 Then
                        Try
                            Dim ds As System.Data.DataSet = Nothing
                            If TabelasMSNegadas(tbd.name) Then
                                Continue For
                            End If
                            RegLog("Carregando tabela " & tbd.name, True)
                            If TemNaLista(TabsSistema, tbd.name) Then
                                If Not CType(Importa And Criterios.InfraSistema, Boolean) Then
                                    Continue For
                                ElseIf CType(Importa And Criterios.InfraSistemaDados, Boolean) Then
                                    ds = DSCarrega("SELECT * FROM " & tbd.NAME & " WHERE SISTEMA=:SISTEMA", "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb", ":SISTEMA", Sistema)
                                ElseIf CType(Importa And Criterios.InfraSistema, Boolean) Then
                                    ds = DSCarregaEstrut("SELECT * FROM " & tbd.NAME & " WHERE SISTEMA=:SISTEMA", "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb", ":SISTEMA", Sistema)
                                End If
                            ElseIf TemNaLista(TabsGerador, tbd.name) Then
                                If Sistema = GerSistema Then
                                    If Not CType(Importa And Criterios.InfraGerador, Boolean) Then
                                        Continue For
                                    ElseIf CType(Importa And Criterios.InfraGeradorDados, Boolean) Then
                                        ds = DSCarrega("SELECT * FROM " & tbd.NAME, "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb")
                                    ElseIf CType(Importa And Criterios.InfraGerador, Boolean) Then
                                        ds = DSCarregaEstrut("SELECT * FROM " & tbd.NAME, "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb")
                                    End If
                                End If
                            Else
                                If CType(Importa And Criterios.TabelaDados, Boolean) Then
                                    ds = DSCarrega("SELECT * FROM " & tbd.NAME, "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb")
                                ElseIf CType(Importa And Criterios.Tabela, Boolean) Then
                                    ds = DSCarregaEstrut("SELECT * FROM " & tbd.NAME, "Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB & ";providerName:System.Data.OleDb")
                                End If
                            End If

                            If Not IsNothing(ds) Then
                                For Each tbc As Object In tbd.Fields
                                    Dim DC As System.Data.DataColumn = ds.Tables(0).Columns(tbc.NAME)
                                    AtribuiOrigDiverDados(DC, tbc)
                                Next
                                ds.Tables(0).TableName = Sistema & "." & tbd.NAME
                                AtribuiOrigDiverDados(ds.Tables(0), tbd)
                                ds.Tables(0).ExtendedProperties("SISTEMA") = Sistema
                                Tbs.Merge(ds)
                            End If
                        Catch ex As Exception
                            RegLog("Falha ao importar ms tab." & tbd.name & ": " & ex.Message & " do arquivo " & ArquivoMDB & ".")
                        End Try
                        'End If
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Define atributo de origem de dados.
            ''' </summary>
            ''' <param name="Onde">DataColumn ou DataTable?</param>
            ''' <param name="ObjAccess">Objeto onde será obtida a propriedade.</param>
            ''' <param name="Tipo">Tipo se é Oracle ou MsAccess.</param>
            ''' <remarks></remarks>
            Sub AtribuiOrigDiverDados(ByVal Onde As Object, ByVal ObjAccess As Object, Optional ByVal Tipo As TipoBaseSQL = TipoBaseSQL.MSAccess)
                If Tipo = TipoBaseSQL.MSAccess Then
                    If TypeOf (Onde) Is System.Data.DataColumn Then
                        Onde.ExtendedProperties("ORIG_TIPO_ACCESS") = TipoAccessToScript(ObjAccess.type, ObjAccess.SIZE)
                        Onde.ExtendedProperties("ORIG_DESCRIPTION") = DaoPropCampo(ObjAccess, "description")
                    ElseIf TypeOf (Onde) Is System.Data.DataTable Then
                        Onde.ExtendedProperties("ORIG_DESCRIPTION") = DaoPropTab(ObjAccess, "description")
                        Dim Elem As New ElementosStr("", "|", "=")
                        For Each Ind As Object In ObjAccess.indexes
                            Elem(Ind.name).conteudo = ObtemMSIndiceCampos(Ind)
                        Next
                        Onde.ExtendedProperties("ORIG_INDEXES") = Elem.ToString
                    End If
                ElseIf Tipo = TipoBaseSQL.Oracle Then
                    If Not IsDBNull(Prop(ObjAccess, "COLUMN_NAME")) Then
                        Onde.ExtendedProperties("ORIG_TIPO_ORACLE") = TipoOracleToScript(ObjAccess!DATA_TYPE, ObjAccess!DATA_LENGTH, NZ(ObjAccess!DATA_PRECISION, ""), NZ(ObjAccess!DATA_SCALE, ""))
                        Onde.ExtendedProperties("ORIG_DESCRIPTION") = ObjAccess!COMMENTS
                    Else
                        Onde.ExtendedProperties("ORIG_DESCRIPTION") = ObjAccess!COMMENTS
                        Onde.ExtendedProperties("ORIG_INDEXES") = ObjAccess!INDEXES
                    End If
                End If
            End Sub

            ''' <summary>
            ''' Executa procedimentos de checagem anterior.
            ''' </summary>
            ''' <param name="Sistema">Nome do sistema.</param>
            ''' <remarks></remarks>
            Sub ChecagemAnterior(ByVal Sistema As String)
                If CType(((Importa Or Exporta) And Criterios.IntegridadeInterna), Boolean) And CType(((Importa Or Exporta) And Criterios.Iniciar), Boolean) Then
                    GaranteEstruturaGerSys(Sistema)  ' verifica estrutura
                End If
            End Sub

            ''' <summary>
            ''' Executa procedimentos de checagem posterior.
            ''' </summary>
            ''' <remarks></remarks>
            Sub ChecagemPosterior()
                If Importa And Criterios.IntegridadeInterna Or Exporta And Criterios.IntegridadeInterna Then

                    AcertaDependeInterfere() ' atualização depende e interfere com base nos relacionamentos
                    AtualizaGrupo() ' atualizar ger_grupo com configuração de ger_usuario (campo grupo)
                    AtualizaClasse() ' cria classes que não ainda não existam
                    ChecaRelacionamento() ' verifica se campos relacionados são do mesmo tipo

                    ' falta avaliar se é válida ativação de...
                    ' ATUALIZATABELACAMPO
                    ' ATUALIZARINDICE
                    ' ATUALIZARRELACIONAMENTO
                    ' ATUALIZARTIPO
                    ' PROPTABCAMPOS
                End If
            End Sub

            ''' <summary>
            ''' Limpa relacionamentos.
            ''' </summary>
            ''' <remarks></remarks>
            Sub LimpaRelacionamentos()
                Tbs.Relations.Clear()
            End Sub

            ''' <summary>
            ''' Exclui tabela.
            ''' </summary>
            ''' <param name="Sistema">Sistema de onde a tabela será excluída.</param>
            ''' <param name="Tabela">Tabela a ser excluída.</param>
            ''' <remarks></remarks>
            Sub ExcluiTabela(ByVal Sistema As String, ByVal Tabela As String)
                If Tbs.Tables.Contains(Sistema & "." & Tabela) Then
                    Tbs.Tables(Sistema & "." & Tabela).Constraints.Clear()
                    ConfirmaIntegridade = False
                    Tbs.Tables.Remove(Sistema & "." & Tabela)
                End If
                If Tbs.Tables.Contains(GerSistema & "." & "GER_TABELA") Then
                    Dim Ar() As System.Data.DataRow = Tbs.Tables(GerSistema & "." & "GER_TABELA").Select("TABELA='" & Tabela & "'")
                    For Each Item As System.Data.DataRow In Ar
                        Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows.Remove(Item)
                    Next
                End If
                If Tbs.Tables.Contains(GerSistema & "." & "GER_CAMPO") Then
                    Dim Ar() As System.Data.DataRow = Tbs.Tables(GerSistema & "." & "GER_CAMPO").Select("TABELA='" & Tabela & "'")
                    For Each Item As System.Data.DataRow In Ar
                        Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows.Remove(Item)
                    Next
                End If
                If Tbs.Tables.Contains(GerSistema & "." & "GER_RELACIONAMENTO") Then
                    Dim Ar() As System.Data.DataRow = Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO").Select("OBRIG<>0 AND (TABELA_1='" & Tabela & "' or TABELA_n='" & Tabela & "')")
                    For Each Item As System.Data.DataRow In Ar
                        Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO").Rows.Remove(Item)
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Verifica relacionamentos aplicados.
            ''' </summary>
            ''' <remarks></remarks>
            Sub ChecaRelacionamento()
                Dim Novamente As Boolean = True
                Do While Novamente
                    Novamente = False
                    If Importa And Criterios.ChecaRelacionamento Or Exporta And Criterios.ChecaRelacionamento Then
                        For Each Rel As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO").Rows
                            Dim CP1() As String = Split(Rel!CAMPO_1, ";")
                            Dim CPN() As String = Split(Rel!CAMPO_N, ";")
                            Dim Z As Integer = Nothing
                            For Z = 0 To CP1.Length - 1
                                Dim RELTAB1 As String = Rel!TABELA_1
                                Dim RELTABN As String = Rel!TABELA_N
                                Dim RELSISTEMA As String = Rel!SISTEMA
                                Dim CP_1 As System.Data.DataRow = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where x!SISTEMA = RELSISTEMA And x!TABELA = RELTAB1 And x!CAMPO = CP1(Z) Select x)(0)
                                If IsNothing(CP_1) Then
                                    RegLog("Problemas ao obter campo " & CP1(Z) & " de tabela " & Rel!TABELA_1 & ".")
                                    Continue For
                                End If
                                Dim CP_N As System.Data.DataRow = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where x!SISTEMA = RELSISTEMA And x!TABELA = RELTABN And x!CAMPO = CPN(Z) Select x)(0)
                                If IsNothing(CP_N) Then
                                    RegLog("Problemas ao obter campo " & CPN(Z) & " de tabela " & Rel!TABELA_N & ".")
                                    Continue For
                                End If
                                If NZ(CP_1!TIPO_ACCESS, "") <> NZ(CP_N!TIPO_ACCESS, "") Or NZ(CP_1!TIPO_ORACLE, "") <> NZ(CP_N!TIPO_ORACLE, "") Or NZ(CP_1!TIPO_MYSQL, "") <> NZ(CP_N!TIPO_MYSQL, "") Then
                                    RegLog("Relacionamento " & Rel!NOME & " com tipos diferentes 1:" & CP_1!TIPO_ACCESS & CP_1!TIPO_ORACLE & CP_1!TIPO_MYSQL & " <> N:" & CP_N!TIPO_ACCESS & CP_N!TIPO_ORACLE & CP_N!TIPO_MYSQL & ". Acertado para lado 1")
                                    CP_N!TIPO_ACCESS = CP_1!TIPO_ACCESS
                                    CP_N!TIPO_ORACLE = CP_1!TIPO_ORACLE
                                    CP_N!TIPO_MYSQL = CP_1!TIPO_MYSQL
                                    Novamente = True
                                End If
                            Next
                        Next
                    End If
                Loop
            End Sub

            ''' <summary>
            ''' Atualiza classe.
            ''' </summary>
            ''' <remarks></remarks>
            Sub AtualizaClasse()
                If Importa And Criterios.AtualizaClasse Or Exporta And Criterios.AtualizaClasse Then
                    For Each DTab As System.Data.DataRow In From x In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows
                        Dim Classe As String = NZ(DTab!CLASSE, "")
                        If Tbs.Tables(GerSistema & "." & "GER_CLASSE").Select("SISTEMA='" & DTab!SISTEMA & "' AND CLASSE='" & Classe & "'").Count() = 0 Then
                            Tbs.Tables(GerSistema & "." & "GER_CLASSE").Rows.Add(DTab!SISTEMA, Classe, Classe)
                            RegLog("Classe " & Classe & " não existia e foi incluída")
                        End If
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Atualiza grupo.
            ''' </summary>
            ''' <remarks></remarks>
            Sub AtualizaGrupo()
                If Importa And Criterios.AtualizaGrupo Or Exporta And Criterios.AtualizaGrupo Then
                    For Each Usu In From x In Tbs.Tables(GerSistema & "." & "GER_USUARIO").Rows Select x!sistema, x!grupo
                        For Each Grp In Split(Usu.grupo, ";")
                            If Grp <> "" Then
                                If Tbs.Tables(GerSistema & "." & "GER_GRUPO").Select("SISTEMA = '" & Usu.sistema & "' AND GRUPO = '" & Grp & "'").Count = 0 Then
                                    RegLog("Grupo " & Grp & " não existia e foi incluído")
                                    Tbs.Tables(GerSistema & "." & "GER_GRUPO").Rows.Add(Usu.sistema, Grp, Grp)
                                End If
                            End If
                        Next
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Acerta depende e interfere.
            ''' </summary>
            ''' <remarks></remarks>
            Sub AcertaDependeInterfere()
                ' depende interfere
                If Importa And Criterios.DependeInterfere Or Exporta And Criterios.DependeInterfere Then
                    RegLog("Calculando depende interfere", True)
                    For Each TB As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows
                        TB!DEPENDE = Convert.DBNull
                        TB!INTERFERE = Convert.DBNull
                    Next

                    For Each Sist As String In From x In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Select x!SISTEMA Distinct
                        Dim Sistema As String = Sist

                        Dim T = From TT In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Where TT!SISTEMA = Sistema

                        Dim R = From RR In Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO") Where RR!SISTEMA = Sistema Join T1 In T On RR!TABELA_1 Equals T1!TABELA Join TN In T On RR!TABELA_N Equals TN!TABELA Select RR, T1, TN

                        For Each Item In (From x In T Where (From y In R Where y.RR!tabela_n = x!tabela).Count = 0 Select x)
                            Item!depende = 0
                        Next

                        For Each Item In (From x In T Where (From y In R Where y.RR!tabela_1 = x!tabela).Count = 0 Select x)
                            Item!interfere = 0
                        Next


                        Dim NivAnt As Integer = 0
                        Dim Encontrou As Boolean = True
                        Do While Encontrou
                            Encontrou = False
                            For Each Item In (From x In T Where (From y In R Where y.RR!tabela_1 <> y.RR!tabela_n And y.RR!tabela_n = x!tabela And NZ(y.T1!depende, -1) = NivAnt).Count > 0 Select x)
                                Item!depende = NivAnt + 1
                                Encontrou = True
                            Next
                            NivAnt += 1
                            If NivAnt > 10 Then
                                Exit Do
                            End If
                        Loop

                        NivAnt = 0
                        Encontrou = True
                        Do While Encontrou
                            Encontrou = False
                            For Each Item In (From x In T Where (From y In R Where y.RR!tabela_1 <> y.RR!tabela_n And y.RR!tabela_1 = x!tabela And NZ(y.TN!interfere, -1) = NivAnt).Count > 0 Select x)
                                Item!interfere = NivAnt + 1
                                Encontrou = True
                            Next
                            NivAnt += 1
                            If NivAnt > 10 Then
                                Exit Do
                            End If
                        Loop
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Garante estrutura SYS no sistema.
            ''' </summary>
            ''' <param name="Sistema">Sistema onde deseja garantir estrutura SYS.</param>
            ''' <remarks></remarks>
            Public Sub GaranteEstruturaGerSys(Optional ByVal Sistema As String = Nothing)
                Dim Ret As String = ""
                RegLog("Garantindo que tenha tabelas GER_ e SYS_ conforme padrão", True)
                If Importa And Criterios.GaranteEstrutGerSys Or Exporta And Criterios.GaranteEstrutGerSys Then
                    Dim DS As System.Data.DataSet = CarregaXML("~/gersys.xml")

                    ' limpa relacionamentos
                    LimpaRelacionamentos()

                    ' identifica todos os sistemas carregados

                    Dim SIST1 = New List(Of Object)
                    Try
                        SIST1 = (From x As System.Data.DataTable In Tbs.Tables Select x.ExtendedProperties("SISTEMA")).Distinct.ToList
                    Catch
                    End Try
                    Dim SIST2 = New List(Of Object)
                    Try
                        SIST2 = (From X In Tbs.Tables(Me.GerSistema & ".GER_TABELA").Rows Select X("SISTEMA")).Distinct.ToList
                    Catch
                    End Try

                    Dim Sistemas As List(Of Object) = (From X In SIST1.Union(SIST2) Select X).Distinct.ToList
                    If Not IsNothing(Sistema) Then
                        If Not Sistemas.Contains(Sistema) Then
                            Sistemas.Add(Sistema)
                        End If
                    End If

                    ' salva dataset para recuperações de customizações
                    Dim Salva As System.Data.DataSet = Tbs.Copy

                    ' atualiza estruturas nos sistemas
                    For Each SistemaAtual As String In Sistemas
                        If GerSistema = "" Then
                            GerSistema = SistemaAtual
                        End If

                        ' inclui apenas definição table
                        For Each tb As System.Data.DataTable In DS.Tables
                            Dim NomeTabela As String = tb.TableName
                            Dim SisEmTodos As Boolean = (Exporta Or Importa) And Criterios.SysEmTodosOsSistemas
                            Dim PegaDoGer As Boolean = TemNaLista(TabsGerador, NomeTabela) OrElse (TemNaLista(TabsSistema, NomeTabela) And Not SisEmTodos)

                            Dim NomeSistAtual As String = SistemaAtual
                            If (From x As System.Data.DataTable In Tbs.Tables Where x.TableName = NomeSistAtual & "." & NomeTabela).Count > 0 Then
                                ExcluiTabela(NomeSistAtual, tb.TableName)
                            End If

                            ' inclui as definições de tabela caso seja necessário
                            If (SistemaAtual = GerSistema) OrElse (Not PegaDoGer) Then
                                Dim TTB As System.Data.DataTable = DS.Tables(tb.TableName).Clone
                                TTB.TableName = NomeSistAtual & "." & tb.TableName
                                TTB.ExtendedProperties("SISTEMA") = SistemaAtual
                                Tbs.Tables.Add(TTB)
                            End If
                        Next

                        ' chave primária relacionamento
                        If Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Constraints.Contains("TAB_COLS_UNIQUE") Then
                            Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Constraints.Remove("TAB_COLS_UNIQUE")
                        End If
                        Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Constraints.Add("TAB_COLS_UNIQUE", New System.Data.DataColumn() {Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Columns("TABELA_1"), Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Columns("TABELA_N"), Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Columns("CAMPO_1"), Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Columns("CAMPO_N")}, False)


                        ' agora inclui as linhas
                        For Each tb As System.Data.DataTable In DS.Tables
                            Dim NomeTabela As String = tb.TableName
                            Dim SisEmTodos As Boolean = (Exporta Or Importa) And Criterios.SysEmTodosOsSistemas
                            Dim PegaDoGer As Boolean = TemNaLista(TabsGerador, NomeTabela) OrElse (TemNaLista(TabsSistema, NomeTabela) And Not SisEmTodos)
                            Dim NomeSistemaTabela As String = IIf(PegaDoGer, GerSistema, SistemaAtual) & "." & NomeTabela
                            If Tbs.Tables.Contains(NomeSistemaTabela) Then
                                ' escolhe registros, pois não pode copiar ger para <> gersistema
                                Dim DOM As New System.Data.DataTable

                                Dim TabsGerFiltradas As Boolean = TemNaLista("GER_TABELA;GER_CAMPO;GER_RELACIONAMENTO;GER_INDICE", NomeTabela)
                                Dim Crit As String = IIf(NomeTabela = "GER_RELACIONAMENTO", "NOT (TABELA_1 LIKE 'GER_*' OR TABELA_N LIKE 'GER_*')", "NOT TABELA LIKE 'GER_*'")
                                If Not SisEmTodos And SistemaAtual <> GerSistema Then
                                    Crit &= " AND " & IIf(NomeTabela = "GER_RELACIONAMENTO", "NOT (TABELA_1 LIKE 'SYS_*' OR TABELA_N LIKE 'SYS_*')", "NOT TABELA LIKE 'SYS_*'")
                                End If

                                If TabsGerFiltradas And SistemaAtual <> GerSistema Then
                                    DefSistemaEIncluiLinhas(SisEmTodos, SistemaAtual, NomeTabela, NomeSistemaTabela, Tbs.Tables(NomeSistemaTabela), tb.Select(Crit))
                                Else
                                    DefSistemaEIncluiLinhas(SisEmTodos, SistemaAtual, NomeTabela, NomeSistemaTabela, Tbs.Tables(NomeSistemaTabela), tb.Rows)
                                End If

                                ' agora acerta sistema 
                                ' depois disso, registros que já existiam são incluídos, isso se não for ger_tabela, campo e relacionamento, que devem ser sempre o espelho da base
                                If Not IsNothing(Salva) AndAlso Salva.Tables.Contains(NomeSistemaTabela) Then
                                    If TabsGerFiltradas Then
                                        Ret = IncluiTabLinhas(Tbs.Tables(NomeSistemaTabela), Salva.Tables(NomeSistemaTabela).Select(Crit))
                                    Else
                                        Ret = IncluiTabLinhas(Tbs.Tables(NomeSistemaTabela), Salva.Tables(NomeSistemaTabela).Rows)
                                    End If
                                    If Ret <> "" Then
                                        RegLog(Ret)
                                    End If
                                End If
                            End If
                        Next
                    Next
                End If
            End Sub

            ''' <summary>
            ''' Define tabelas de sistema e inclui linhas.
            ''' </summary>
            ''' <param name="SisEmTodos">Coloca SYS em todos os sistemas?</param>
            ''' <param name="SistemaAtual">Informa sistema atual.</param>
            ''' <param name="NomeTabela">Nome da tabela atual.</param>
            ''' <param name="NomeSistemaTabela">Nome do sistema da tabela atual.</param>
            ''' <param name="TB">Lista de tabelas.</param>
            ''' <param name="Linhas">Linhas que serão incluídas.</param>
            ''' <remarks></remarks>
            Sub DefSistemaEIncluiLinhas(ByVal SisEmTodos As Boolean, ByVal SistemaAtual As String, ByVal NomeTabela As String, ByVal NomeSistemaTabela As String, ByVal TB As System.Data.DataTable, ByVal Linhas As Object)
                For Each Linha As Object In Linhas
                    If NomeTabela = "GER_SISTEMA" Then
                        Linha!NOME = SistemaAtual
                    ElseIf TemNaLista(TabsGerador, NomeTabela) AndAlso Not TemNaLista("GER_TIPO_OBJ", NomeTabela) Then
                        Linha!SISTEMA = IIf(SisEmTodos, SistemaAtual, GerSistema)
                    End If
                Next
                ' agora sim inclui na tabela
                Dim Ret As String = IncluiTabLinhas(Tbs.Tables(NomeSistemaTabela), Linhas)
                If Ret <> "" Then
                    RegLog(Ret)
                End If
            End Sub

            ''' <summary>
            ''' Abre arquivo MSAccess.
            ''' </summary>
            ''' <param name="ArquivoMDB">Arquivo mdb.</param>
            ''' <remarks></remarks>
            Sub AbreMSAccess(ByVal ArquivoMDB As String)
                Dim de As Object
                Try
                    de = CreateObject("DAO.DBEngine.36")
                Catch ex As Exception
                    Throw New Exception("Necessária inclusão de referência para DBEngine.36.")
                End Try
                db = de(0).OpenDatabase(ArquivoMDB)
            End Sub

            ''' <summary>
            ''' Fecha arquivo MSAccess.
            ''' </summary>
            ''' <remarks></remarks>
            Sub FechaMSAccess()
                db.close()
            End Sub

            ''' <summary>
            ''' Registra mensagem em log para consulta posterior.
            ''' </summary>
            ''' <param name="Texto">Texto de informação.</param>
            ''' <param name="Notifica">É uma notificação?</param>
            ''' <remarks></remarks>
            Public Sub RegLog(ByVal Texto As String, Optional ByVal Notifica As Boolean = False)
                Log.AppendLine(Format(Now, "MMM-dd HH:mm").ToUpper() & " - " & Texto)
                If Notifica Then
                    RaiseEvent NotificaRegLog(Texto)
                End If
            End Sub

            ''' <summary>
            ''' Grava no arquivo MSAccess.
            ''' </summary>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="ArquivoMDB">Arquivo MDB.</param>
            ''' <remarks></remarks>
            Public Sub GravaMSAccess(ByVal Sistema As String, ByVal ArquivoMDB As String)
                Dim trecho As String = ""
                Try
                    trecho = "Gravando " & Sistema & "-" & ArquivoMDB
                    RegLog("Gravando " & Sistema & "-" & ArquivoMDB, True)

                    ArquivoMDB = FileExpr(ArquivoMDB)


                    trecho = "Criando dbengine"
                    Dim de As Object
                    Try
                        de = CreateObject("DAO.DBEngine.36")
                    Catch ex As Exception
                        Throw New Exception("Necessária inclusão de referência para DBEngine.36.")
                    End Try

                    trecho = "Abrindo ou criando arquivo"
                    If System.IO.File.Exists(ArquivoMDB) Then
                        If Exporta And Criterios.Iniciar Then
                            Kill(ArquivoMDB)
                        Else
                            db = de(0).OpenDatabase(ArquivoMDB)
                        End If
                    End If
                    If Not System.IO.File.Exists(ArquivoMDB) Then
                        db = de(0).CreateDatabase(ArquivoMDB, DAO_LanguageConstants_dbLangGeneral)
                    End If

                    If Exporta And Criterios.Tabela Then
                        Dim SistEmTodos As Boolean = (Exporta Or Importa) And Criterios.SysEmTodosOsSistemas

                        trecho = "Relacionando tabelas para criar"
                        Dim OO = From x In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Where x!SISTEMA = Sistema Select x
                        If GerSistema <> Sistema Then
                            OO = OO.Union(From x In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Where x!sistema = GerSistema And TemNaLista(TabsGerador, x!tabela))
                            If Not SistEmTodos Then
                                OO = OO.Union(From x In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Where x!sistema = GerSistema And TemNaLista(TabsSistema, x!tabela))
                            End If
                        End If

                        For Each tab As System.Data.DataRow In OO

                            trecho = "Criando tabela " & tab("Tabela")
                            Dim tb As Object = Nothing
                            tb = de(0).databases(0).CreateTableDef(tab("Tabela"))

                            ' insere campos
                            Dim NomeTab As String = tab!tabela

                            Dim SisEmTodos As Boolean = (Exporta Or Importa) And Criterios.SysEmTodosOsSistemas
                            Dim PegaDoGer As Boolean = TemNaLista(TabsGerador, NomeTab) OrElse (TemNaLista(TabsSistema, NomeTab) And Not SisEmTodos)

                            RegLog("Criando em MDB tabela " & NomeTab, True)
                            For Each camp As System.Data.DataRow In From x In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where x!sistema = IIf(PegaDoGer, GerSistema, Sistema) And x!tabela = tb.name Select x Order By x!ORDEM, x!CAMPO
                                trecho = "Criando campo " & camp("Campo") & " na tabela " & tab("Tabela")
                                Dim m As Match = RegexMatches(TipoScriptToAccess(camp), "(.*);([^ \(]*)( \((.*)\))*")
                                Dim cp As Object = tb.CreateField(camp("Campo"), IIf(m.Groups(2).Value = "20", "4", m.Groups(2).Value))
                                Try
                                    cp.AllowZeroLength = True
                                Catch
                                End Try

                                If m.Groups(4).Value <> "" Then
                                    cp.Size = m.Groups(4).Value
                                End If
                                tb.Fields.Append(cp)
                            Next

                            ' insere chave primária
                            trecho = "Inserindo chave primária em " & tab!tabela
                            If tab("chave_prima") <> "" Then
                                Dim chp As Object = tb.CreateIndex("PrimaryKey")
                                chp.Primary = True

                                For Each Campo As String In Split(tab("chave_prima"), ";")
                                    Dim fld As Object = chp.CreateField(Campo)
                                    chp.Fields.Append(fld)
                                Next
                                tb.Indexes.Append(chp)
                            End If

                            Try
                                db.TableDefs.Append(tb)
                                trecho = "Inserindo campos de chave primária de " & tab!tabela
                                ' define descrições
                                DaoPropTab(tb, "Description") = New DescrConcat(tb.name, Nothing, tab("Classe"), tab("Etiq"), tab("Descr")).Texto
                                For Each camp As System.Data.DataRow In From x In Tbs.Tables(GerSistema & "." & "GER_CAMPO") Where x!sistema = Sistema And x!tabela = tb.name Select x
                                    DaoPropCampo(tb.Fields(camp("Campo")), "Description") = New DescrConcat(tab!Tabela, camp!Campo, Nothing, NZV(camp("Etiq"), ""), NZV(camp("Descr"), "")).Texto
                                Next
                            Catch EX As Exception
                                RegLog("Erro ao tentar criar tabela " & tb.name & ": " & EX.Message)
                            End Try


                        Next

                        trecho = "Fechando banco"
                        db.Close()


                        If (Exporta And Criterios.InfraGeradorDados) Then
                            For Each Tabela As String In Split(TabsGerador, ";")
                                trecho = "Exportando dados para mdb da tabela " & Tabela
                                RegLog("Exportando dados para mdb da tabela " & Tabela, True)
                                Dim Ret As String = DSGravaLinhas(Tabela, Tbs.Tables(GerSistema & "." & Tabela), "providerName:System.Data.OleDb;Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB)
                                If Ret <> "" Then
                                    RegLog("Gravação de tabela " & Tabela & " com erros. Veja log:")
                                    RegLog(Ret)
                                End If
                            Next
                        End If

                        If Exporta And Criterios.InfraSistemaDados Then
                            For Each Tabela As String In Split(TabsSistema, ";")
                                trecho = "Exportando dados para mdb da tabela " & Tabela
                                RegLog("Exportando dados para mdb da tabela " & Tabela, True)
                                Try
                                    Dim Ret As String = DSGravaLinhas(Tabela, Tbs.Tables(IIf(SistEmTodos, Sistema, GerSistema) & "." & Tabela), "providerName:System.Data.OleDb;Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB)
                                    If Ret <> "" Then
                                        RegLog("Gravação de tabela " & Tabela & " com erros. Veja log:")
                                        RegLog(Ret)
                                    End If
                                Catch EX As Exception
                                    RegLog("Erro em gravação de tabela " & Tabela & ": " & EX.Message)
                                End Try
                            Next
                        End If

                        If Exporta And Criterios.TabelaDados Then
                            For Each TABELA As System.Data.DataTable In Tbs.Tables
                                Dim NomeTab As String = TABELA.TableName.Split(".")(1)
                                If Not TemNaLista(TabsGerador, NomeTab) And Not TemNaLista(TabsSistema, NomeTab) Then
                                    trecho = "Exportando dados para mdb da tabela " & NomeTab
                                    RegLog("Exportando dados para mdb da tabela " & NomeTab, True)
                                    Dim Ret As String = DSGravaLinhas(NomeTab, TABELA, "providerName:System.Data.OleDb;Provider:Microsoft.Jet.OLEDB.4.0;Data Source:" & ArquivoMDB)
                                    If Ret <> "" Then
                                        RegLog("Gravação de tabela " & TABELA.TableName & " com erros. Veja log:")
                                        RegLog(Ret)
                                    End If
                                End If
                            Next
                        End If

                        ' definição dos relacionamnetos
                        AbreMSAccess(ArquivoMDB)
                        If Exporta And Criterios.AtualizaRelacionamentos Then
                            trecho = "Definindo relacionamentos no MDB " & ArquivoMDB
                            RegLog("Definindo relacionamentos no MDB " & ArquivoMDB, True)
                            ' insere relacionamentos
                            For Each rr As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO").Rows
                                ' trata atributo de relacionamento
                                Dim p As Integer = 0
                                If rr("Delete_Cascade") = "CASCADE" Then
                                    p += DAO_RelationAttributeEnum_dbRelationDeleteCascade
                                End If
                                If rr("Update_Cascade") = "CASCADE" Then
                                    p += DAO_RelationAttributeEnum_dbRelationUpdateCascade
                                End If
                                If Not CType(rr("OBRIG"), Boolean) Then
                                    p += DAO_RelationAttributeEnum_dbRelationDontEnforce
                                End If

                                Dim rl As Object = db.CreateRelation(rr("Nome"), rr("Tabela_1"), rr("Tabela_N"))
                                rl.Attributes = p

                                ' inclui campos
                                trecho = "Incluindo campos no relacionamento " & rr!nome
                                Dim cps As String() = Split(rr("Campo_1"), ";")
                                Dim cpsrel As String() = Split(rr("Campo_N"), ";")
                                For z As Integer = 0 To cps.Length - 1
                                    Dim cp As Object = rl.CreateField(cps(z))
                                    cp.ForeignName = cpsrel(z)
                                    rl.Fields.Append(cp)
                                Next


                                Try
                                    db.Relations.Append(rl)
                                Catch EX As Exception
                                    Dim rltcampo As String = ""
                                    Dim rltfcampo As String = ""
                                    For Each fld As Object In rl.Fields
                                        rltcampo &= IIf(rltcampo <> "", ";", "") & fld.Name
                                        rltfcampo &= IIf(rltfcampo <> "", ";", "") & fld.ForeignName
                                    Next
                                    RegLog("Falta rel de " & rl.Table & " (" & rltcampo & ")" & " para " & rl.ForeignTable & "(" & rltfcampo & ").")
                                End Try
                            Next
                        End If

                        db.Close()

                    End If


                    RegLog("Término gravação " & Sistema & "-" & ArquivoMDB, True)

                Catch EX As Exception
                    RegLog("Falha na criação do mdb access: " & EX.Message & " em " & trecho)
                End Try
            End Sub ' fim grava access

            ''' <summary>
            ''' Grava estrutura do gerador em XML.
            ''' </summary>
            ''' <param name="ArquivoXML">Arquivo XML.</param>
            ''' <remarks></remarks>
            Public Sub GravaXMLEstrut(ByVal ArquivoXML As String)
                RegLog("Gravando XML " & ArquivoXML, True)

                Dim TbsN As New System.Data.DataSet
                If Exporta And Criterios.InfraGerador Then
                    For Each tb As System.Data.DataTable In From x As System.Data.DataTable In Tbs.Tables Where x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "GER_*"
                        Dim TTB As System.Data.DataTable = tb.Clone
                        TTB.TableName = tb.TableName
                        TbsN.Tables.Add(TTB)
                        If Exporta And Criterios.InfraGeradorDados Then
                            For Each Linha As System.Data.DataRow In tb.Rows
                                TbsN.Tables(tb.TableName).Rows.Add(Linha.ItemArray)
                            Next
                        End If
                    Next
                End If
                If Exporta And Criterios.InfraSistema Then
                    For Each tb As System.Data.DataTable In From x As System.Data.DataTable In Tbs.Tables Where x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "SYS_*"
                        Dim TTB As System.Data.DataTable = tb.Clone
                        TTB.TableName = tb.TableName
                        TbsN.Tables.Add(TTB)
                        If Exporta And Criterios.InfraSistemaDados Then
                            For Each Linha As System.Data.DataRow In tb.Rows
                                TbsN.Tables(tb.TableName).Rows.Add(Linha.ItemArray)
                            Next
                        End If
                    Next
                End If
                If Exporta And Criterios.Tabela Then
                    For Each tb As System.Data.DataTable In From x As System.Data.DataTable In Tbs.Tables Where Not (x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "GER_*" Or x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "SYS_*")
                        Dim TTB As System.Data.DataTable = tb.Clone
                        TTB.TableName = tb.TableName
                        TbsN.Tables.Add(TTB)
                        If Exporta And Criterios.TabelaDados Then
                            For Each Linha As System.Data.DataRow In tb.Rows
                                TbsN.Tables(tb.TableName).Rows.Add(Linha.ItemArray)
                            Next
                        End If
                    Next
                End If

                GravaXml(TbsN, ArquivoXML, XmlWriteMode.WriteSchema)


                RegLog("Término gravação XML " & ArquivoXML, True)
            End Sub ' fim grava xml


            ''' <summary>
            ''' Carrega estrutura do gerador a partir de arquivo XML.
            ''' </summary>
            ''' <param name="ArquivoXML">Arquivo XML.</param>
            ''' <remarks></remarks>
            Public Sub CarregaXMLEstrut(ByVal ArquivoXML As String)
                RegLog("Carregando XML " & ArquivoXML, True)
                If Importa And Criterios.Iniciar Then
                    ApagaTabelas()
                End If

                Dim TbsN As System.Data.DataSet = CarregaXML(ArquivoXML)

                If Importa And Criterios.InfraGerador Then
                    For Each tb As System.Data.DataTable In From x As System.Data.DataTable In TbsN.Tables Where x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "GER_*"
                        If GerSistema = "" Then
                            GerSistema = tb.ExtendedProperties("SISTEMA")
                        End If
                        Dim TTB As System.Data.DataTable = tb.Clone
                        TTB.TableName = tb.TableName
                        Tbs.Tables.Add(TTB)
                        If Importa And Criterios.InfraGeradorDados Then
                            For Each Linha As System.Data.DataRow In tb.Rows
                                Tbs.Tables(tb.TableName).Rows.Add(Linha.ItemArray)
                            Next
                        End If
                    Next
                End If
                If Importa And Criterios.InfraSistema Then
                    For Each tb As System.Data.DataTable In From x As System.Data.DataTable In TbsN.Tables Where x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "SYS_*"
                        Dim TTB As System.Data.DataTable = tb.Clone
                        TTB.TableName = tb.TableName
                        Tbs.Tables.Add(TTB)
                        If Importa And Criterios.InfraSistemaDados Then
                            For Each Linha As System.Data.DataRow In tb.Rows
                                Tbs.Tables(tb.TableName).Rows.Add(Linha.ItemArray)
                            Next
                        End If
                    Next
                End If
                If Importa And Criterios.Tabela Then
                    For Each tb As System.Data.DataTable In From x As System.Data.DataTable In TbsN.Tables Where Not (x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "GER_*" Or x.TableName Like x.ExtendedProperties("SISTEMA") & "." & "SYS_*")
                        Dim TTB As System.Data.DataTable = tb.Clone
                        TTB.TableName = tb.TableName
                        Tbs.Tables.Add(TTB)
                        If Importa And Criterios.TabelaDados Then
                            For Each Linha As System.Data.DataRow In tb.Rows
                                Tbs.Tables(tb.TableName).Rows.Add(Linha.ItemArray)
                            Next
                        End If
                    Next
                End If



                RegLog("Término carga XML " & ArquivoXML, True)
            End Sub ' fim carga xml

            ''' <summary>
            ''' Apaga tabelas.
            ''' </summary>
            ''' <remarks></remarks>
            Sub ApagaTabelas()
                EliminaConstrants()
                Tbs.Tables.Clear()
                GerSistema = ""
            End Sub

            ''' <summary>
            ''' Elimina constraints.
            ''' </summary>
            ''' <remarks></remarks>
            Sub EliminaConstrants()
                Tbs.Relations.Clear()
                Dim Z As Integer = 0
                Dim NOVAMENTE As Boolean = True
                Do While NOVAMENTE
                    NOVAMENTE = False
                    For Each TB As System.Data.DataTable In Tbs.Tables
                        Try
                            TB.Constraints.Clear()
                        Catch
                            NOVAMENTE = True
                        End Try
                    Next
                Loop
                ConfirmaIntegridade = False
            End Sub

            ''' <summary>
            ''' Tipo de script a ser gerado para Oracle.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum GravaOracleParteTipo
                Todas
                Um
                Dois
                Dados
            End Enum

            ''' <summary>
            ''' Grava script do Oracle em disco ou executa diretamente.
            ''' </summary>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="ExecutaNoOracle">Executa no Oracle?</param>
            ''' <param name="Parte">Que parte?</param>
            ''' <param name="ListaDeParams">Lista de parâmetros para substituição nos scripts.</param>
            ''' <returns>Log de script que resulta da criação do arquivo ou execução no banco de dados.</returns>
            ''' <remarks></remarks>
            Public Function GravaOracle(ByVal Sistema As String, ByVal ExecutaNoOracle As Boolean, ByVal Parte As GravaOracleParteTipo, ByVal Encoding As System.Text.Encoding, ByVal ParamArray ListaDeParams() As Object) As String
                RegLog("Gravando Oracle " & Sistema, True)

                Dim Result As String = ""

                Dim Params As ArrayList = ParamArrayToArrayList(ListaDeParams)
                Params.Add(":SISTEMA")
                Params.Add(Sistema)

                Dim TempArq As String = TemporaryFile()

                Dim S As System.IO.StreamWriter
                If Encoding Is Nothing Then
                    S = New System.IO.StreamWriter(TempArq)
                Else
                    S = New System.IO.StreamWriter(TempArq, False, Encoding)
                End If

                If Parte = GravaOracleParteTipo.Um Or Parte = GravaOracleParteTipo.Todas Then
                    RegLog("Gravando PRIMEIRA PARTE do script..." & Sistema, True)
                    GravaOracleSemRestr(Sistema, S, ExecutaNoOracle, Params)
                End If
                If Parte = GravaOracleParteTipo.Dois Or Parte = GravaOracleParteTipo.Todas Then
                    RegLog("Gravando SEGUNDA PARTE do script..." & Sistema, True)
                    GravaOracleRestr(Sistema, S, ExecutaNoOracle, Params)
                End If
                If Parte = GravaOracleParteTipo.Dados Or Parte = GravaOracleParteTipo.Todas Then
                    RegLog("Gravando script de DADOS..." & Sistema, True)
                    GravaOracleDados(Sistema, S, ExecutaNoOracle, Params)
                End If


                S.Flush()
                S.Close()

                If ExecutaNoOracle Then
                    RegLog("Executando no oracle..." & Sistema, True)
                    ' executa script no oracle
                    Dim Psi As New System.Diagnostics.ProcessStartInfo("SQLPLUS.EXE", MacroSubstSQLText("[:VALOR.USUARIOSYS]/[:VALOR.SENHASYS]@[:VALOR.SERVICO] AS SYSDBA", Params))
                    Psi.UseShellExecute = False
                    Psi.RedirectStandardError = True
                    Psi.RedirectStandardInput = True
                    Psi.RedirectStandardOutput = True
                    Psi.WorkingDirectory = TemporaryDir()
                    Dim Proc As System.Diagnostics.Process = System.Diagnostics.Process.Start(Psi)
                    Dim StdIn As System.IO.StreamWriter = Proc.StandardInput
                    Dim StdOut As System.IO.StreamReader = Proc.StandardOutput
                    Dim StdErr As System.IO.StreamReader = Proc.StandardError
                    StdIn.WriteLine("@" & TempArq)
                    Proc.Close()
                    StdIn.Close()
                    Result = "Resultado:" & vbCrLf & StdOut.ReadToEnd & vbCrLf & vbCrLf & "Erro:" & vbCrLf & StdErr.ReadToEnd
                    StdOut.Close()
                    StdErr.Close()
                    Return Result
                End If

                Dim R As New IO.StreamReader(TempArq)
                Result = R.ReadToEnd()
                R.Close()
                Return Result

                RegLog("Término gravação Oracle " & Sistema, True)
            End Function


            ''' <summary>
            ''' Grava script do Oracle em disco ou executa diretamente.
            ''' </summary>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="ExecutaNoOracle">Executa no Oracle?</param>
            ''' <param name="Parte">Que parte?</param>
            ''' <param name="ListaDeParams">Lista de parâmetros para substituição nos scripts.</param>
            ''' <returns>Log de script que resulta da criação do arquivo ou execução no banco de dados.</returns>
            ''' <remarks></remarks>
            Public Function GravaOracle(ByVal Sistema As String, ByVal ExecutaNoOracle As Boolean, ByVal Parte As GravaOracleParteTipo, ByVal ParamArray ListaDeParams() As Object) As String
                Return GravaOracle(Sistema, ExecutaNoOracle, Parte, Nothing, ListaDeParams)
            End Function

            ''' <summary>
            ''' Monta SQL a partir de conteúdo.
            ''' </summary>
            ''' <param name="Obj">Objeto para o qual se deseja o SQL.</param>
            ''' <returns>Retona conteúdo do objeto formatado para SQL.</returns>
            ''' <remarks></remarks>
            Public Function SqlOracleConteudo(ByVal Obj As Object) As String
                Dim Conteudo As String = ""
                If TypeOf Obj Is String Then
                    Conteudo = "'" & Replace(Replace(Replace(Obj, "'", "''"), vbCrLf, "' || CHR(13) || CHR(10) || '"), "&", "' || CHR(" & Asc("&") & ") || '") & "'"
                ElseIf TypeOf Obj Is Date Then
                    Conteudo = IIf(Conteudo <> "", ", ", "") & "TO_DATE('" & Format(Obj, "yyyy-MM-dd HH:mm:ss") & "', 'YYYY-MM-DD HH24:MI:SS')"
                ElseIf TypeOf Obj Is DBNull Then
                    Conteudo = IIf(Conteudo <> "", ", ", "") & "NULL"
                ElseIf TypeOf Obj Is Int32 OrElse TypeOf Obj Is Decimal OrElse TypeOf Obj Is Double Then
                    Conteudo = IIf(Conteudo <> "", ", ", "") & Val(Obj)
                ElseIf TypeOf Obj Is Boolean Then
                    Conteudo = IIf(Conteudo <> "", ", ", "") & IIf(Obj, "1", "0")
                Else
                    Stop
                End If
                Return Conteudo
            End Function

            ''' <summary>
            ''' Grava script oracle ou executa na base criação de dados.
            ''' </summary>
            ''' <param name="Sistema">Sistema desejado.</param>
            ''' <param name="S">Arquivo para saída do script.</param>
            ''' <param name="ExecutaNoOracle">Executa no oracle?</param>
            ''' <param name="Params">Parâmetros para macrosubstituição.</param>
            ''' <remarks></remarks>
            Public Sub GravaOracleDados(ByVal Sistema As String, ByVal S As System.IO.StreamWriter, ByVal ExecutaNoOracle As Boolean, ByVal Params As ArrayList)
                S.WriteLine("$SET NLS_LANG=""BRAZILIAN PORTUGUESE.WE8MSWIN1252""")
                S.WriteLine("SET ECHO ON")
                Dim ARQLOG As String = MacroSubstSQLText("[:VALOR.SERVICO]_DADOS.LOG", Params)
                S.WriteLine("SPOOL " & ARQLOG)
                S.WriteLine(MacroSubstSQLText("CONNECT [:VALOR.ESQUEMA]/[:VALOR.SENHAESQUEMA]@[:VALOR.SERVICO];", Params))


                Try

                    Dim LLs = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Where x!SISTEMA = Sistema)

                    For Each ttb In (From x In LLs Order By NZV(x!DEPENDE, 0), x!ORDEM)
                        Dim Campos As New ArrayList
                        Dim NomeTabela As String = ttb!TABELA

                        Dim ColsA = (From cc In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where cc!SISTEMA = Sistema And cc!TABELA = NomeTabela)
                        Dim Cols = (From x In ColsA Order By x!ORDEM)

                        If Tbs.Tables.Contains(ttb!SISTEMA & "." & ttb!TABELA) Then
                            For Each Linha As System.Data.DataRow In Tbs.Tables(ttb!SISTEMA & "." & ttb!TABELA).rows
                                Dim CONTEUDO As String = ""
                                Dim ELEMS As ArrayList = ItemsToArrayList(Cols, "CAMPO")
                                'Dim Expr As String = ""
                                For Each ELEM As String In ELEMS
                                    'Expr &= IIf(Expr <> "", ", ", "") & ELEM & " = "
                                    If Linha.Table.Columns.Contains(ELEM) Then
                                        'Expr &= SqlOracleConteudo(Linha(ELEM))
                                        CONTEUDO &= IIf(CONTEUDO <> "", ", ", "") & SqlOracleConteudo(Linha(ELEM))
                                    Else
                                        'Expr &= SqlOracleConteudo(Convert.DBNull)
                                        CONTEUDO &= IIf(CONTEUDO <> "", ", ", "") & SqlOracleConteudo(Convert.DBNull)
                                    End If
                                Next
                                S.WriteLine("INSERT INTO " & ttb!SISTEMA & "." & ttb!TABELA & " (" & Join(ELEMS.ToArray, ", ") & ") VALUES (" & CONTEUDO & ");")
                                'S.WriteLine("INSERT INTO " & ttb!SISTEMA & "." & ttb!TABELA & " SET " & Expr & ";")
                            Next
                        End If
                    Next
                Catch ex As Exception
                    Stop
                End Try


                S.WriteLine("")

                ' encerramento de script
                S.WriteLine("SPOOL OFF")
                Dim ARQLOGCONS As String = MacroSubstSQLText("[:VALOR.SERVICO]_PARTES.LOG", Params)
                S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                S.WriteLine("$CMD /C ECHO %DATE% %TIME% >>""" & ARQLOGCONS & """")
                S.WriteLine("$CMD /C FIND ""ORA-"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                S.WriteLine("$CMD /C FIND ""SP2-"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                S.WriteLine("$CMD /C FIND ""Advert"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                S.WriteLine("EXIT")

            End Sub

            ''' <summary>
            ''' Cria arquivo script do Oracle ou executa na base parte sem restrição.
            ''' </summary>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="S">Arquivo de saída.</param>
            ''' <param name="ExecutaNoOracle">Executa no Oracle?</param>
            ''' <param name="Params">Parâmetros para substituição.</param>
            ''' <remarks></remarks>
            Public Sub GravaOracleSemRestr(ByVal Sistema As String, ByVal S As System.IO.StreamWriter, ByVal ExecutaNoOracle As Boolean, ByVal Params As ArrayList)
                Dim Etapa As String = "Início export sem restr oracle"
                Try
                    Params.Add(":SISTEMA")
                    Params.Add(Sistema)

                    ' preparo do ambiente de criação
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   INTERCRAFT SOLUTIONS INFORMÁTICA LTDA - 2008")
                    S.WriteLine("   SCRIPT CRIADO EM " & Format(Now, "dd/MM/yyyy HH:mm"))
                    S.WriteLine("")
                    S.WriteLine("   IMPORTANTE!!!")
                    S.WriteLine("   * O SISTEMA LOGARÁ SYSTEM PARA INICIAR A EXECUÇÃO, LOGO, MUITO CUIDADO!")
                    S.WriteLine("   * CASO O USUÁRIO DO ESQUEMA JÁ EXISTA, ESTE SERÁ ELIMINADO, PORTANTO, TENHA A CERTEZA DAQUILO QUE ESTÁ FAZENDO.")
                    S.WriteLine(MacroSubstSQLText("   * ARQUIVO [:VALOR.ESQUEMA].LOG REGISTRARÁ O LOG DE EXECUÇÃO, QUE DEVE SER VERIFICADO.", Params))
                    S.WriteLine("   * CASO BANCO POSSUA ACENTOS, PRECISARÁ GARANTIR FORMATO ANSI ANTES DA EXECUÇÃO. PARA ISSO, EDITE O CONTEÚDO NO NOTEPAD E SALVE FAZENDO OPÇÃO POR ESTE FORMATO.")
                    S.WriteLine("*/")
                    S.WriteLine("$SET NLS_LANG=""BRAZILIAN PORTUGUESE.WE8MSWIN1252""")
                    S.WriteLine("")
                    S.WriteLine("SET ECHO ON")
                    S.WriteLine("SET HEADING OFF")
                    S.WriteLine("SET PAGESIZE 0")
                    S.WriteLine("SET LINES 80")
                    S.WriteLine("SET LINESIZE 80")
                    S.WriteLine("SET SERVEROUTPUT ON SIZE 40000")

                    Dim ARQLOG As String = MacroSubstSQLText("[:VALOR.SERVICO]_PARTE1.LOG", Params)
                    S.WriteLine("SPOOL " & ARQLOG)

                    S.WriteLine("")
                    S.WriteLine("-- GARANTINDO QUE TODOS TENHA ACESSO AOS RECURSOS DE PACOTE")
                    S.WriteLine(MacroSubstSQLText("CONNECT [:VALOR.USUARIOSYS]/[:VALOR.SENHASYS]@[:VALOR.SERVICO] AS SYSDBA", Params))
                    S.WriteLine("ALTER SYSTEM SET DB_RECOVERY_FILE_DEST_SIZE =20G SCOPE=SPFILE;")
                    S.WriteLine("GRANT EXECUTE ON SYS.UTL_FILE TO PUBLIC;")
                    S.WriteLine("GRANT EXECUTE ON SYS.UTL_SMTP TO PUBLIC;")
                    S.WriteLine("GRANT EXECUTE ON SYS.UTL_TCP TO PUBLIC;")
                    S.WriteLine("GRANT EXECUTE ON SYS.UTL_INADDR TO PUBLIC;")
                    S.WriteLine("GRANT SELECT ON SYS.V_$SESSION TO PUBLIC;")
                    S.WriteLine("GRANT SELECT ON SYS.V_$TABLESPACE TO PUBLIC;")
                    S.WriteLine("GRANT SELECT ON SYS.V_$DATAFILE TO PUBLIC;")
                    S.WriteLine("GRANT SELECT ON SYS.V_$DATABASE TO PUBLIC;")
                    S.WriteLine("GRANT SELECT ON SYS.AUD$ TO PUBLIC;")
                    S.WriteLine("

                        BEGIN
                        BEGIN
                        DBMS_NETWORK_ACL_ADMIN.DROP_ACL('resolve.xml');
                        Exception
                        WHEN OTHERS THEN
                        NULL;
                        END;
                        DBMS_NETWORK_ACL_ADMIN.CREATE_ACL('resolve.xml', 'Normal Access', 'PUBLIC', TRUE, 'resolve', NULL, NULL);
                        DBMS_NETWORK_ACL_ADMIN.ASSIGN_ACL('resolve.xml', '*', NULL, NULL);
                        END;
                        /



                        BEGIN
                        BEGIN
                        DBMS_NETWORK_ACL_ADMIN.DROP_ACL('connect.xml');
                        Exception WHEN OTHERS THEN
                        NULL;
                        END;
                        DBMS_NETWORK_ACL_ADMIN.CREATE_ACL('connect.xml', 'Normal Access', 'PUBLIC', TRUE, 'connect', NULL, NULL);
                        DBMS_NETWORK_ACL_ADMIN.ASSIGN_ACL('connect.xml', '*', NULL, NULL);
                        END;
                        /
                    ")

                    ' desabilitei trecho de liberação de email pois acredito que a parte de access e resolve já libere.. testando
                    'S.WriteLine("BEGIN")
                    'S.WriteLine("dbms_network_acl_admin.create_acl (")
                    'S.WriteLine(" acl => 'grant_acl.xml',")
                    'S.WriteLine("description => 'Libera CIAD_BD para envio de email.',")
                    'S.WriteLine("principal => 'CIAD_BD',")
                    'S.WriteLine("is_grant => TRUE,")
                    'S.WriteLine(" privilege => 'connect'")
                    'S.WriteLine(");")
                    'S.WriteLine("commit;")
                    'S.WriteLine("END;")
                    'S.WriteLine("/")

                    'S.WriteLine("BEGIN")
                    'S.WriteLine("dbms_network_acl_admin.assign_acl(")
                    'S.WriteLine("acl => 'grant_acl.xml',")
                    'S.WriteLine("host => '*',")
                    'S.WriteLine("lower_port => 25,")
                    'S.WriteLine("upper_port => null")
                    'S.WriteLine(");")
                    'S.WriteLine("commit;")
                    'S.WriteLine("END;")
                    'S.WriteLine("/")



                    S.WriteLine("GRANT QUERY REWRITE TO PUBLIC;")
                    S.WriteLine("GRANT CREATE MATERIALIZED VIEW TO PUBLIC;")
                    S.WriteLine("ALTER SESSION SET QUERY_REWRITE_ENABLED = TRUE;")

                    S.WriteLine("")
                    S.WriteLine("-- ELIMINA OS JOBS")
                    S.WriteLine("begin")
                    S.WriteLine(MacroSubstSQLText("for cur in (select job from user_jobs where schema_user='[:VALOR.ESQUEMA]') loop", Params))
                    S.WriteLine("dbms_job.remove(cur.job);")
                    S.WriteLine("end loop;")
                    S.WriteLine("end;")
                    S.WriteLine("/")

                    S.WriteLine("")
                    S.WriteLine("-- DEFININDO USUÁRIO DE ESQUEMA")

                    S.WriteLine("BEGIN")
                    S.WriteLine(MacroSubstSQLText("FOR CUR IN (SELECT SID, SERIAL# FROM V$SESSION WHERE USERNAME=[:ESQUEMA]) LOOP", Params))
                    S.WriteLine(MacroSubstSQLText("EXECUTE IMMEDIATE 'ALTER SYSTEM DISCONNECT SESSION ''' || CUR.SID || ',' || CUR.""SERIAL#"" || ''' IMMEDIATE';", Params))
                    S.WriteLine("END LOOP;END;")
                    S.WriteLine("/")
                    S.WriteLine("")

                    S.WriteLine(MacroSubstSQLText("DECLARE" & vbCrLf &
                    "COMA VARCHAR2(200);" & vbCrLf &
                    "BEGIN" & vbCrLf &
                    "FOR CUR IN (SELECT OWNER, OBJECT_NAME, OBJECT_TYPE FROM ALL_OBJECTS WHERE OWNER=[:ESQUEMA]) LOOP" & vbCrLf &
                    "BEGIN" & vbCrLf &
                    "COMA := 'DROP ' || CUR.OBJECT_TYPE || ' ' || CUR.OWNER || '.' || CUR.OBJECT_NAME;" & vbCrLf &
                    "IF CUR.OBJECT_TYPE = 'TYPE' THEN" & vbCrLf &
                    "  COMA := COMA || ' FORCE';" & vbCrLf &
                    "END IF;" & vbCrLf &
                    "EXECUTE IMMEDIATE COMA;" & vbCrLf &
                    "EXCEPTION" & vbCrLf &
                    "	WHEN OTHERS THEN" & vbCrLf &
                    "		NULL;" & vbCrLf &
                    "END;" & vbCrLf &
                    "END LOOP;" & vbCrLf &
                    "END;" & vbCrLf &
                    "/", Params))

                    S.WriteLine("")
                    S.WriteLine(MacroSubstSQLText("BEGIN FOR CUR IN (SELECT USERNAME FROM ALL_USERS WHERE USERNAME='[:VALOR.ESQUEMA]') LOOP EXECUTE IMMEDIATE 'DROP USER ' || CUR.USERNAME || ' CASCADE'; END LOOP; END;", Params))
                    S.WriteLine("/")

                    S.WriteLine("")
                    S.WriteLine("-- INICIALIZANDO TABLESPACE")
                    S.WriteLine(MacroSubstSQLText("ALTER TABLESPACE T_[:VALOR.ESQUEMA]_DAT OFFLINE;", Params))
                    S.WriteLine(MacroSubstSQLText("DROP TABLESPACE T_[:VALOR.ESQUEMA]_DAT INCLUDING CONTENTS;", Params))


                    Dim TRECHO As String = "DECLARE" & vbCrLf &
                    " SQL_ VARCHAR2(4000);" & vbCrLf &
                    " POS INTEGER := 0;" & vbCrLf &
                    " NOME VARCHAR2(4000) := '[:VALOR.ESQUEMA]';" & vbCrLf &
                    "BEGIN" & vbCrLf &
                    " SELECT DISTINCT FIRST_VALUE(NAME) OVER(ORDER BY CREATION_TIME DESC) INTO SQL_ FROM V$DATAFILE  WHERE STATUS = 'ONLINE';" & vbCrLf &
                    " SELECT INSTR(REVERSE(SQL_),'\') INTO POS FROM DUAL;" & vbCrLf &
                    " IF POS=0 THEN" & vbCrLf &
                    "  SQL_ := NOME;" & vbCrLf &
                    " ELSE" & vbCrLf &
                    "  SELECT LPAD(SQL_, LENGTH(SQL_)+1 - POS) || NOME INTO SQL_ FROM DUAL;" & vbCrLf &
                    " END IF;" & vbCrLf &
                    " SQL_ := 'CREATE TABLESPACE T_' || NOME || '_DAT DATAFILE ''' || SQL_ || '.DBF'' SIZE 100M REUSE AUTOEXTEND ON NEXT 50M  MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL';" & vbCrLf &
                    " EXECUTE IMMEDIATE SQL_;" & vbCrLf &
                    "END;" & vbCrLf &
                    "/" & vbCrLf

                    S.WriteLine(MacroSubstSQLText(TRECHO, Params))

                    S.WriteLine(MacroSubstSQLText("CREATE USER [:VALOR.ESQUEMA] IDENTIFIED BY [:VALOR.SENHAESQUEMA] DEFAULT TABLESPACE T_[:VALOR.ESQUEMA]_DAT;", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT DBA TO [:VALOR.ESQUEMA];", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT SELECT ON DBA_JOBS TO [:VALOR.ESQUEMA];", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT ALL PRIVILEGES TO [:VALOR.ESQUEMA];", Params))

                    S.WriteLine(MacroSubstSQLText("GRANT EXECUTE ON DBMS_FILE_TRANSFER TO [:VALOR.ESQUEMA];", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT EXECUTE ON DBMS_APPLY_ADM TO [:VALOR.ESQUEMA];", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT EXECUTE ON DBMS_STREAMS_AUTH TO [:VALOR.ESQUEMA];", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT EXECUTE ON SYS.DBMS_IJOB TO PUBLIC;", Params))
                    S.WriteLine(MacroSubstSQLText("EXEC DBMS_STREAMS_AUTH.GRANT_ADMIN_PRIVILEGE('[:VALOR.ESQUEMA]',TRUE);", Params))

                    S.WriteLine("")
                    S.WriteLine("-- CONECTANDO COM USUÁRIO DE ESQUEMA")
                    S.WriteLine("DISCONNECT;")
                    S.WriteLine(MacroSubstSQLText("CONNECT [:VALOR.ESQUEMA]/[:VALOR.SENHAESQUEMA]@[:VALOR.SERVICO];", Params))
                    S.WriteLine("")

                    ' SCRIPTS ADICIONAIS
                    S.WriteLine(MacroSubstSQLText("[:VALOR.INCLUI_APOS_CRIA_USUARIO]", Params))

                    ' prepara tabelas
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CRIAÇÃO DE TABELAS")
                    S.WriteLine("*/")
                    S.WriteLine("")



                    For Each tab As System.Data.DataRow In From c In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Order By c!Tabela Where c!SISTEMA = Sistema 'And Not c!TABELA Like "SYS_*" <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,

                        If NZ(tab("Codigo"), "") <> "" Then 'And Not (Not (Importa And Criterios.InfraSistema) AndAlso TemNaLista(TabsSistema, tab("codigo"))) 
                            Dim ChavePrima As ArrayList = ParamArrayToArrayList(Split(tab("Chave_Prima"), ";"))
                            S.WriteLine("-- TABELA " & tab("Tabela"))
                            S.WriteLine(MacroSubstSQLText("CREATE TABLE [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & " (", Params))
                            Dim Texto As String = ""



                            Dim NomeSistema As String = tab!SISTEMA
                            Dim NomeTabela As String = tab!TABELA
                            For Each camp As System.Data.DataRow In From X In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where X!SISTEMA = NomeSistema And X!TABELA = NomeTabela Order By X!ORDEM
                                Dim NotNull As Boolean = False
                                If ChavePrima.Contains(camp("Campo")) Then
                                    NotNull = True
                                End If
                                Texto &= IIf(Texto <> "", "," & Chr(13) & Chr(10) & "   ", "") & SqlExpr(camp("Campo"), Chr(34)) & " "
                                Texto &= TipoScriptToOracle(camp)
                                ' Texto &= IIf(NZ(camp("Valor_Padrao"), "") <> "", " DEFAULT '" & camp("Valor_Padrao") & "'", "") <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            Next

                            S.WriteLine("   " & Texto)
                            If Not TemNaLista("SYS_DELETE", tab!TABELA) Then
                                S.WriteLine(",")
                                S.WriteLine("   SYS_MOMENTO_CRIA DATE,")
                                S.WriteLine("   SYS_USUARIO_CRIA VARCHAR2 (100),")
                                S.WriteLine("   SYS_LOCAL_CRIA VARCHAR2 (100),")
                                S.WriteLine("   SYS_MOMENTO_ATUALIZA DATE,")
                                S.WriteLine("   SYS_USUARIO_ATUALIZA VARCHAR2 (100),")
                                S.WriteLine("   SYS_LOCAL_ATUALIZA VARCHAR2 (100),")
                                S.WriteLine("   SYS_STATUS CHAR (1)")
                            End If
                            S.WriteLine(");")
                            S.WriteLine("")


                            If ChavePrima.Count <> 0 Then
                                Dim Txt As String = ""

                                For Each Item As String In ChavePrima.ToArray
                                    Txt &= IIf(Txt <> "", ", ", "") & SqlExpr(Item, Chr(34))
                                Next
                                S.WriteLine(MacroSubstSQLText("ALTER TABLE [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & " ADD CONSTRAINT ""ID_" & tab("Tabela") & """" & Chr(13) & Chr(10) & "PRIMARY KEY(" & Txt & ");", Params))
                                S.WriteLine("")
                            End If

                            S.WriteLine(MacroSubstSQLText("COMMENT ON TABLE [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & " IS '" & Replace(tab("Classe") & " | " & tab("Descr") & " | " & tab("Etiq"), "'", "''") & "';", Params))
                            S.WriteLine("")

                            For Each camp As System.Data.DataRow In From X In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where X!SISTEMA = NomeSistema And X!TABELA = NomeTabela Order By X!ORDEM
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & "." & SqlExpr(camp("Campo"), Chr(34)) & " IS '" & Replace(camp("Descr") & " | " & camp("Etiq"), "'", "''") & "';", Params))
                            Next

                            If Not TemNaLista("SYS_DELETE", tab!TABELA) Then
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_MOMENTO_CRIA IS 'Registra momento de gravação. | Momento de Criação';", Params))
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_USUARIO_CRIA IS 'Registra usuário que gravou. | Usuário que Criou';", Params))
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_LOCAL_CRIA IS 'Registra local de gravação. | Local de Criação';", Params))
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_MOMENTO_ATUALIZA IS 'Registra momento de atualização. | Momento de Atualização';", Params))
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_USUARIO_ATUALIZA IS 'Registra usuário que atualizou. | Usuário que Alterou';", Params))
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_LOCAL_ATUALIZA IS 'Registra local de atualização. | Local de Alteração';", Params))
                                S.WriteLine(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & SqlExpr(tab("Tabela"), Chr(34)) & ".SYS_STATUS IS 'Status do registro entre I=Incluído, A=Alterado ou Vazio=Sem modificação. | Status do Registro';", Params))
                            End If
                            S.WriteLine("")
                        End If

                        ' incluir rotina de indices <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    Next


                    ' inclui procedimento de inicialização da base

                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CÓDIGO DE INICIALIZAÇÃO DA BASE DE DADOS")
                    S.WriteLine("*/")
                    S.WriteLine("")

                    S.WriteLine(MacroSubstSQLText("DECLARE" & vbCrLf &
                    "COD VARCHAR2(4000);" & vbCrLf &
                    "ID_MAX INTEGER;" & vbCrLf &
                    "BEGIN" & vbCrLf &
                    "-- CRIA PARA CONSIDERAR OBJETO NO MAX_ID" & vbCrLf &
                    "EXECUTE IMMEDIATE 'CREATE OR REPLACE PROCEDURE [:VALOR.ESQUEMA].BASE_EXEC(OPERA VARCHAR2) AS BEGIN NULL;END;';" & vbCrLf &
                    "" & vbCrLf &
                    "-- AGORA CRIA FIXANDO MAX_ID PARA FUTURAS EXCLUSÕES" & vbCrLf &
                    "SELECT MAX(OBJECT_ID) INTO ID_MAX FROM ALL_OBJECTS WHERE OWNER = [:ESQUEMA];" & vbCrLf &
                    "" & vbCrLf &
                    "" & vbCrLf &
                    "COD := '" & vbCrLf &
                    "" & vbCrLf &
                    "create or replace" & vbCrLf &
                    "PROCEDURE    BASE_EXEC(" & vbCrLf &
                    "OPERA VARCHAR2)" & vbCrLf &
                    "AS" & vbCrLf &
                    "ID_MAX  INTEGER;" & vbCrLf &
                    "QTD     INTEGER;" & vbCrLf &
                    "QTD_ANT INTEGER;" & vbCrLf &
                    "BEGIN" & vbCrLf &
                    "CASE UPPER(OPERA)" & vbCrLf &
                    "WHEN ''APAGA_OBJ_ADIC'' THEN" & vbCrLf &
                    "[:VALOR.ESQUEMA].DBMS_ICRAFT.JOB_APAGA_TODOS('[:ESQUEMA]');" & vbCrLf &
                    "[:VALOR.ESQUEMA].DBMS_ICRAFT.CONSTRAINTS_APAGA('[:ESQUEMA]');" & vbCrLf &
                    "[:VALOR.ESQUEMA].DBMS_ICRAFT.TRIGGERS_APAGA('[:ESQUEMA]');" & vbCrLf &
                    "ID_MAX := ' || ID_MAX || ';" & vbCrLf &
                    "QTD_ANT          := 0;" & vbCrLf &
                    "-- APAGA TODOS OS OBJETOS CRIADOS APÓS BASE_EXEC... LOOPING ENQUANTO EXISTIREM OBJETOS A APAGAR" & vbCrLf &
                    "LOOP" & vbCrLf &
                    "SELECT COUNT(*)" & vbCrLf &
                    "INTO QTD" & vbCrLf &
                    "FROM ALL_OBJECTS" & vbCrLf &
                    "WHERE OWNER   = ''[:VALOR.ESQUEMA]''" & vbCrLf &
                    "AND OBJECT_ID > ID_MAX;" & vbCrLf &
                    "EXIT" & vbCrLf &
                    "WHEN QTD=QTD_ANT;" & vbCrLf &
                    "[:VALOR.ESQUEMA].DBMS_ICRAFT.DEL_OBJ_APARTIR_ID(ID_MAX+1);" & vbCrLf &
                    "QTD_ANT := QTD;" & vbCrLf &
                    "END LOOP;" & vbCrLf &
                    "" & vbCrLf &
                    "WHEN ''INICIA'' THEN" & vbCrLf &
                    "BASE_EXEC(''APAGA_OBJ_ADIC'');" & vbCrLf &
                    "[:VALOR.ESQUEMA].DBMS_ICRAFT.EXEC_SQL(''SELECT ''''DELETE FROM [:VALOR.ESQUEMA].'''' || TABLE_NAME FROM ALL_TABLES WHERE OWNER=''''[:VALOR.ESQUEMA]'''''');" & vbCrLf &
                    "COMMIT;" & vbCrLf &
                    "END CASE;" & vbCrLf &
                    "END;" & vbCrLf &
                    "" & vbCrLf &
                    "';" & vbCrLf &
                    "" & vbCrLf &
                    "EXECUTE IMMEDIATE COD;" & vbCrLf &
                    "END;" & vbCrLf &
                    "/" & vbCrLf &
                    "", Params))


                    '                If Exporta And Criterios.InfraSistema Then

                    ' cria tabelas de sistema
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CRIAÇÃO DE TABELAS DO SISTEMA")
                    S.WriteLine("*/")
                    S.WriteLine("")

                    'S.Write(XmlParaOracle("~/Uc/IcftGera/Sistema.xml", Params))

                    'S.Write(XmlParaOracle("~/Uc/IcftGera/Gerador.xml", Params))

                    S.WriteLine("")
                    S.WriteLine("-- TABELA DE SISTEMA - GRANTS GERAIS")
                    S.WriteLine(MacroSubstSQLText("GRANT SELECT ON [:VALOR.ESQUEMA].SYS_CONFIG_GLOBAL TO PUBLIC;", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT SELECT ON [:VALOR.ESQUEMA].SYS_CONFIG_USUARIO TO PUBLIC;", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT SELECT ON [:VALOR.ESQUEMA].SYS_DELETE TO PUBLIC;", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT SELECT ON [:VALOR.ESQUEMA].SYS_LOCALID TO PUBLIC;", Params))
                    S.WriteLine(MacroSubstSQLText("GRANT SELECT ON [:VALOR.ESQUEMA].SYS_OCORRENCIA TO PUBLIC;", Params))


                    ' modelo de comando para import e eliminação de obs importados equivocadamente
                    S.WriteLine("")
                    S.WriteLine("")
                    S.WriteLine("-- EXEMPLO PARA IMPORT DE INFORMAÇÕES E ")
                    S.WriteLine("-- CÓDIGO PARA ELIMINAR OBJETOS IMPORTADOS EQUIVOCADAMENTE")
                    S.WriteLine("")
                    S.WriteLine("SET SERVEROUTPUT ON SIZE 40000")
                    S.WriteLine("SET ECHO OFF")


                    Dim PROG As String = "SELECT" & vbCrLf &
                    "'EXP [:VALOR.ESQUEMA]/[:VALOR.SENHAESQUEMA]@[:VALOR.SERVICO] OWNER=([:VALOR.ESQUEMA]) FILE=[:VALOR.ESQUEMA].DMP LOG=[:VALOR.ESQUEMA]_EXP.LOG' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'IMP [:VALOR.ESQUEMA]/[:VALOR.SENHAESQUEMA]@[:VALOR.SERVICO] FROMUSER=[:VALOR.ESQUEMA] CONSTRAINTS=NO GRANTS=NO FILE=[:VALOR.ESQUEMA].DMP LOG=[:VALOR.ESQUEMA]_IMP.LOG IGNORE=YES' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'SET SERVEROUTPUT ON SIZE 40000' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'DECLARE' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'    MAX NUMBER := ' || MAX(OBJECT_ID) || ';' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'BEGIN' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "' FOR CUR IN (SELECT ''DROP '' || OBJECT_TYPE || '' '' || OWNER || ''.'' || OBJECT_NAME ' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "' AS COL FROM ALL_OBJECTS WHERE OBJECT_ID > MAX) LOOP' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'  DBMS_OUTPUT.PUT(CUR.COL);' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'  BEGIN' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'   EXECUTE IMMEDIATE CUR.COL;' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'   DBMS_OUTPUT.PUT_LINE('' ==> OK'');' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'  EXCEPTION WHEN OTHERS THEN' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'   DBMS_OUTPUT.PUT_LINE('' ==> '' || SQLERRM);' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'  END;' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "' END LOOP;' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'END;' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'/' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'' || CHR(13) || CHR(10) ||" & vbCrLf &
                    "'' || CHR(13) || CHR(10) FROM ALL_OBJECTS" & vbCrLf &
                    "/" & vbCrLf


                    S.WriteLine(MacroSubstSQLText(PROG, Params))
                    S.WriteLine("")
                    S.WriteLine("")


                    ' encerramento de script
                    S.WriteLine("SPOOL OFF")
                    Dim ARQLOGCONS As String = MacroSubstSQLText("[:VALOR.SERVICO]_PARTES.LOG", Params)
                    S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                    S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                    S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C ECHO %DATE% %TIME% >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C FIND ""ORA-"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C FIND ""SP2-"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C FIND ""Advertência:"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                    S.WriteLine("EXIT")
                Catch ex As Exception
                    Throw New Exception("Erro durante " & Etapa & ": " & ex.Message)
                End Try
            End Sub
            'TÉRMINO GRAVAORACLESEMRESTR

            ''' <summary>
            ''' Obtém arquivo XML e transforma para Oracle.
            ''' </summary>
            ''' <param name="ArquivoXML">Arquivo XML.</param>
            ''' <param name="ParamsDivers">Parâmetros de substituição.</param>
            ''' <returns>Script resultante em Oracle.</returns>
            ''' <remarks></remarks>
            Public Shared Function XmlParaOracle(ByVal ArquivoXML As String, ByVal ParamArray ParamsDivers() As Object) As String
                Dim Params As ArrayList = ParamArrayToArrayList(ParamsDivers)
                Dim ger As New Gerador()
                ger.CarregaXMLEstrut(ArquivoXML)

                Dim sb As New StringBuilder()

                For Each tbl As System.Data.DataRow In ger.Tbs.Tables("GER_TABELA").Rows
                    sb.AppendLine("")
                    sb.AppendLine("-- TABELA DE SISTEMA - " & UCase(tbl("ETIQ")) & " - " & UCase(tbl("DESCR")))
                    sb.AppendLine(MacroSubstSQLText("CREATE TABLE [:VALOR.ESQUEMA]." & tbl!TABELA & " (", Params))

                    Dim texto As New List(Of String)
                    Dim coments As New List(Of String)

                    coments.Add(MacroSubstSQLText("COMMENT ON TABLE [:VALOR.ESQUEMA]." & tbl!Tabela & " IS '" & tbl("CLASSE") & " | " & tbl("DESCR") & " | " & tbl("ETIQ") & "';", Params))
                    coments.Add("")

                    Dim NomeSistema As String = tbl!SISTEMA
                    Dim NomeTabela As String = tbl!TABELA
                    For Each c In From X In ger.Tbs.Tables("GER_CAMPO").Rows Where X!SISTEMA = NomeSistema And X!TABELA = NomeTabela Order By X!ORDEM
                        texto.Add("   " & c.Campo & " " & TipoScriptToOracle(c))
                        coments.Add(MacroSubstSQLText("COMMENT ON COLUMN [:VALOR.ESQUEMA]." & tbl!Tabela & "." & c.Campo & " IS '" & c("DESCR") & " | " & c("ETIQ") & "';", Params))
                    Next

                    sb.AppendLine(String.Join("," & ControlChars.NewLine, texto.ToArray))
                    sb.AppendLine(");")

                    Dim tab As String = tbl!Tabela.ToString
                    If tab.IndexOf("_") > 0 Then
                        tab = tab.Remove(0, tab.IndexOf("_") + 1)
                    End If

                    tab = "ID_" & tab

                    sb.AppendLine(MacroSubstSQLText("ALTER TABLE [:VALOR.ESQUEMA]." & tbl!Tabela & " ADD CONSTRAINT " & tab & " PRIMARY KEY (" & tbl!Chave_Prima.Replace(";", ",") & ");", Params))
                    sb.AppendLine("")
                    sb.Append(String.Join(ControlChars.NewLine, coments.ToArray))
                    sb.AppendLine("")
                Next

                Return sb.ToString
            End Function

            ''' <summary>
            ''' Cria script de restrição do Oracle ou executa diretamente na base.
            ''' </summary>
            ''' <param name="Sistema">Sistema desejado.</param>
            ''' <param name="S">Arquivo de saída.</param>
            ''' <param name="ExecutaNoOracle">Executa diretamente no Oracle?</param>
            ''' <param name="Params">Parâmetros para substituição.</param>
            ''' <remarks></remarks>
            Public Sub GravaOracleRestr(ByVal Sistema As String, ByVal S As System.IO.StreamWriter, ByVal ExecutaNoOracle As Boolean, ByVal Params As ArrayList)
                Dim ErrMsg As String = ""
                Try
                    ErrMsg = "Echo, spool ou connect"
                    Params.Add(":SISTEMA")
                    Params.Add(Sistema)

                    S.WriteLine("$SET NLS_LANG=""BRAZILIAN PORTUGUESE.WE8MSWIN1252""")
                    S.WriteLine("SET ECHO ON")
                    Dim ARQLOG As String = MacroSubstSQLText("[:VALOR.SERVICO]_PARTE2.LOG", Params)
                    S.WriteLine("SPOOL " & ARQLOG)
                    S.WriteLine(MacroSubstSQLText("CONNECT [:VALOR.ESQUEMA]/[:VALOR.SENHAESQUEMA]@[:VALOR.SERVICO];", Params))

                    ErrMsg = "Elimina jobs"
                    S.WriteLine("")
                    S.WriteLine("-- ELIMINA OS JOBS")
                    S.WriteLine("begin")
                    S.WriteLine(MacroSubstSQLText("for cur in (select job from user_jobs where schema_user='[:VALOR.ESQUEMA]') loop", Params))
                    S.WriteLine("dbms_job.remove(cur.job);")
                    S.WriteLine("end loop;")
                    S.WriteLine("end;")
                    S.WriteLine("/")

                    ErrMsg = "Cria índices"
                    S.WriteLine("")
                    S.WriteLine("-- CRIA ÍNDICES")
                    For Each IND As System.Data.DataRow In From c In Me.Tbs.Tables(GerSistema & "." & "GER_INDICE").Rows Where c!SISTEMA = Sistema
                        S.WriteLine(MacroSubstSQLText("CREATE " & IIf(IND!UNICO, "UNIQUE ", "") & "INDEX [:VALOR.ESQUEMA]." & IND!NOME & " ON [:VALOR.ESQUEMA]." & IND!TABELA & "(" & Join(Split(IND!CAMPOS, ";"), ", ") & ");", Params))
                        If IND!UNICO Then
                            S.WriteLine(MacroSubstSQLText("ALTER TABLE [:VALOR.ESQUEMA]." & IND!TABELA & " ADD CONSTRAINT " & IND!NOME & "C" & " UNIQUE (" & Join(Split(IND!CAMPOS, ";"), ", ") & ") USING INDEX " & IND!NOME & ";", Params))
                        End If
                    Next
                    S.WriteLine("")


                    ErrMsg = "Prepara relacionamentos"
                    ' prepara constraints
                    S.WriteLine("")
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CRIAÇÃO DE RELACIONAMENTOS")
                    S.WriteLine("*/")
                    S.WriteLine("")


                    For Each rr As System.Data.DataRow In From X In Me.Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO").Rows Where X!SISTEMA = Sistema And (X!OBRIG <> 0)
                        Dim CampoN As String = ""
                        For Each Item As String In Split(rr("Campo_N"), ";")
                            CampoN &= IIf(CampoN <> "", ", ", "") & SqlExpr(Item, Chr(34))
                        Next
                        Dim Campo1 As String = ""
                        For Each Item As String In Split(rr("Campo_1"), ";")
                            Campo1 &= IIf(Campo1 <> "", ", ", "") & SqlExpr(Item, Chr(34))
                        Next
                        S.WriteLine(MacroSubstSQLText("ALTER TABLE [:VALOR.ESQUEMA]." & SqlExpr(rr("Tabela_N"), Chr(34)) & " ADD CONSTRAINT " & SqlExpr(rr("Nome"), Chr(34)) & " FOREIGN KEY(" & CampoN & ") REFERENCES [:VALOR.ESQUEMA]." & SqlExpr(rr("Tabela_1"), Chr(34)) & "(" & Campo1 & ");", Params))
                    Next
                    S.WriteLine("")

                    S.WriteLine("")
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CONSTRAINTS BASE EM CHECK")
                    S.WriteLine("*/")
                    S.WriteLine("")

                    ErrMsg = "Cria constraints baseadas em check"
                    Dim ttb = From c In Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Order By c!Tabela Where c!SISTEMA = Sistema

                    For Each tab As System.Data.DataRow In ttb
                        Dim ALTER As String = ""
                        Dim Z As Integer = 0
                        Dim tbsis As Object = tab!SISTEMA
                        Dim tbb As Object = tab!TABELA
                        For Each camp As System.Data.DataRow In From X In Tbs.Tables(GerSistema & "." & "GER_CAMPO").Rows Where X!SISTEMA = tbsis And X!TABELA = tbb Order By X!ORDEM
                            If NZ(camp!VALOR_CHECK, "") <> "" Then
                                If Z = 4 Then
                                    ALTER &= vbCrLf
                                    Z = 0
                                End If
                                ALTER &= IIf(ALTER <> "", " AND ", "") & SqlExpr(camp!CAMPO, Chr(34)) & " IS " & camp!VALOR_CHECK
                                Z += 1
                            End If
                        Next
                        If ALTER <> "" Then
                            S.WriteLine(MacroSubstSQLText("ALTER TABLE [:VALOR.ESQUEMA]." & SqlExpr(tab!tabela, Chr(34)) & " ADD CONSTRAINT " & SqlExpr("CHECK_" & tab!CODIGO, Chr(34)) & " CHECK (" & vbCrLf & ALTER & vbCrLf & ")", Params))
                            S.WriteLine("/")
                            S.WriteLine("")
                        End If
                    Next


                    ErrMsg = "Cria triggers"
                    ' cria os triggers
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CRIAÇÃO DE TRIGGERS PARA REGISTRO DE INCLUSÃO, ATUALIZAÇÃO E EXCLUSÃO")
                    S.WriteLine("*/")
                    S.WriteLine("")
                    For Each tab As System.Data.DataRow In From c In Me.Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Order By c!Tabela Where c!SISTEMA = Sistema And Not TemNaLista("SYS_DELETE", c!TABELA)
                        Dim ChavePrima As String = Mid(Replace(";" & tab("Chave_Prima"), ";", " || :OLD."), 5)
                        If NZ(tab("Codigo"), "") <> "" Then
                            S.WriteLine(MacroSubstSQLText("CREATE OR REPLACE TRIGGER [:VALOR.ESQUEMA].BEF_" & tab("Tabela") & " BEFORE UPDATE OR INSERT OR DELETE ON [:VALOR.ESQUEMA]." & tab("TAbela") & " FOR EACH ROW", Params))
                            S.WriteLine("DECLARE")
                            S.WriteLine("   TOT_DEL INTEGER;")
                            S.WriteLine("   -- variáveis que preencherão o retorno das consultas")
                            S.WriteLine("   CONN_USER VARCHAR2(100);")
                            S.WriteLine("   CONN_IP VARCHAR2(100);")
                            S.WriteLine("   CONN_MACHINE VARCHAR2(100);")
                            S.WriteLine("BEGIN")
                            S.WriteLine("   IF LPAD(USER,5) <> 'REPL_' THEN")

                            S.WriteLine("      -- Consulta que retornará o HOST, IP, USUÁRIO que acessou via internet")
                            S.WriteLine("      select module, client_info, action into conn_machine, conn_ip, conn_user from v$session where audsid = userenv('sessionid') and rownum = 1;")

                            S.WriteLine("      -- No caso da variável CONN_IP ser nula, significará que o acesso está sendo feito localmente")
                            S.WriteLine("      If (conn_ip Is null) Then")
                            S.WriteLine("         -- Consulta que retornará o HOST, IP, USUÁRIO que acessou via CIAD")
                            S.WriteLine("         select sys_context('userenv','host'), sys_context('userenv','ip_address'), sys_context('userenv','session_user') into conn_user, conn_ip, conn_machine from dual where rownum = 1;")
                            S.WriteLine("      end if;")

                            S.WriteLine("      IF DELETING Then")
                            S.WriteLine(MacroSubstSQLText("         SELECT COUNT(*) INTO TOT_DEL FROM [:VALOR.ESQUEMA].SYS_DELETE WHERE TABELA = '" & tab("Tabela") & "' AND CHAVE || '' = " & ChavePrima & " || '';", Params))
                            S.WriteLine("         IF TOT_DEL = 0 THEN")
                            S.WriteLine(MacroSubstSQLText("            INSERT INTO [:VALOR.ESQUEMA].SYS_DELETE (TABELA,CHAVE,MOMENTO,USUARIO,LOCAL) VALUES ('" & tab("Tabela") & "', " & ChavePrima & ", SYSDATE, USER, '[:VALOR.ESQUEMA]');", Params))
                            S.WriteLine("         ELSE")
                            S.WriteLine(MacroSubstSQLText("            UPDATE [:VALOR.ESQUEMA].SYS_DELETE SET MOMENTO = SYSDATE, USUARIO = USER, LOCAL = '[:VALOR.ESQUEMA]' WHERE TABELA = '" & tab("Tabela") & "' AND CHAVE || ''= " & ChavePrima & " || '';", Params))
                            S.WriteLine("         END IF;")
                            S.WriteLine("      ELSE")
                            S.WriteLine("         IF :NEW.SYS_STATUS = '+' THEN")
                            S.WriteLine("            :NEW.SYS_STATUS := 'I';")
                            S.WriteLine("         ELSIF :NEW.SYS_STATUS = '/' THEN")
                            S.WriteLine("            :NEW.SYS_STATUS := 'A';")
                            S.WriteLine("         ELSIF :NEW.SYS_STATUS = 'X' THEN")
                            S.WriteLine("            :NEW.SYS_STATUS := '';")
                            S.WriteLine("         ELSE")
                            S.WriteLine("            IF INSERTING THEN")
                            S.WriteLine("               :NEW.SYS_MOMENTO_CRIA := SYSDATE;")
                            S.WriteLine("               :NEW.SYS_USUARIO_CRIA := CONN_USER;")
                            S.WriteLine("               :NEW.SYS_LOCAL_CRIA := CONN_MACHINE || ' [' || CONN_IP || ']';")
                            S.WriteLine("               :NEW.SYS_MOMENTO_ATUALIZA := NULL;")
                            S.WriteLine("               :NEW.SYS_USUARIO_ATUALIZA := NULL;")
                            S.WriteLine("               :NEW.SYS_LOCAL_ATUALIZA := NULL;")
                            S.WriteLine("               :NEW.SYS_STATUS := 'I';")
                            S.WriteLine("            END IF;")
                            S.WriteLine("            IF UPDATING THEN")
                            S.WriteLine("               :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;")
                            S.WriteLine("               :NEW.SYS_USUARIO_ATUALIZA := CONN_USER;")
                            S.WriteLine("               :NEW.SYS_LOCAL_ATUALIZA := CONN_MACHINE || ' [' || CONN_IP || ']';")
                            S.WriteLine("               :NEW.SYS_STATUS := 'A';")
                            S.WriteLine("            END IF;")
                            S.WriteLine("         END IF;")
                            S.WriteLine("      END IF;")
                            S.WriteLine("   END IF;")
                            S.WriteLine("END;")
                            S.WriteLine("/")
                            S.WriteLine("")
                        End If
                    Next


                    'ErrMsg = "Atualização em cascata"
                    ' atualização em cascata
                    'S.WriteLine("/* **********************************************************************************")
                    'S.WriteLine("   CRIAÇÃO DE TRIGGERS PARA ALTERAÇÃO EM CASCATA")
                    'S.WriteLine("*/")
                    'S.WriteLine("")

                    'Dim TT = From c In Me.Tbs.Tables(GerSistema & "." & "GER_TABELA").Rows Where c!SISTEMA = Sistema And Not c!TABELA.ToString.StartsWith("SYS_*") Order By c!Tabela
                    'For Each tab As System.Data.DataRow In TT
                    '    Dim Texto As String = ""
                    '    ' para cada tabela, busca os relacionamentos pertinentes
                    '    ' será somente um trigger CCD (cascade) para cada tabela
                    '    ' neste trigger, todos os relacionamentos serão considerados
                    '    Dim NomeSistema As String = tab!SISTEMA
                    '    For Each rr As System.Data.DataRow In From X In Me.Tbs.Tables(GerSistema & "." & "GER_RELACIONAMENTO") Where X!SISTEMA = NomeSistema
                    '        If tab("Tabela") = rr("Tabela_1") Then
                    '            Dim Campos_1 As String() = Split(rr("Campo_1"), ";")
                    '            Dim Campos_N As String() = Split(rr("Campo_N"), ";")
                    '            Dim Crit As String = ""
                    '            Dim Def As String = ""
                    '            For z As Integer = 0 To Campos_1.Length - 1
                    '                Crit &= IIf(Crit <> "", " OR ", "") & "(:OLD." & Campos_1(z) & " <> :NEW." & Campos_1(z) & ")"
                    '                Def &= IIf(Def <> "", ", ", "") & Campos_N(z) & " = :NEW." & Campos_1(z)
                    '            Next
                    '            Dim Rels_Completo As String = ""
                    '            If Campos_1.Length > 1 Then
                    '                For z As Integer = 0 To Campos_1.Length - 1
                    '                    Rels_Completo &= IIf(Rels_Completo <> "", " AND ", "") & "NOT " & Campos_N(z) & " IS NULL"
                    '                Next
                    '            End If
                    '            Texto &= vbCrLf & "   --" & rr("Tabela_N") & vbCrLf
                    '            Texto &= "   IF " & Crit & " THEN" & vbCrLf
                    '            Texto &= MacroSubstSQLText("      UPDATE [:VALOR.ESQUEMA]." & rr("Tabela_N") & " SET " & Def & " WHERE " & Replace(Replace(Def, "NEW.", "OLD."), ", ", " AND ") & IIf(Rels_Completo <> "", " AND " & Rels_Completo, "") & ";", Params) & vbCrLf
                    '            Texto &= "   END IF;" & vbCrLf
                    '        End If
                    '    Next

                    '    If Texto <> "" Then
                    '        S.WriteLine(MacroSubstSQLText("CREATE OR REPLACE TRIGGER [:VALOR.ESQUEMA].AFT_" & tab("CODIGO") & "_CCD", Params))
                    '        S.WriteLine(MacroSubstSQLText("AFTER UPDATE ON [:VALOR.ESQUEMA]." & tab("Tabela") & " FOR EACH ROW", Params))
                    '        S.WriteLine("BEGIN")
                    '        'S.WriteLine("   IF LPAD(USER,5) <> 'REPL_' THEN")
                    '        S.WriteLine(Texto)
                    '        'S.WriteLine("END IF;")
                    '        S.WriteLine("END;")
                    '        S.WriteLine("/")
                    '        S.WriteLine("")
                    '    End If
                    'Next


                    ErrMsg = "Cria objetos"
                    ' cria objetos
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   OUTROS CÓDIGOS E VISÕES EM GERAL")
                    S.WriteLine("*/")
                    S.WriteLine("")

                    ErrMsg = "Cria objetos - adiciona objetos"
                    Dim TbOb As New ArrayList
                    For Each Linha In From X As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_ADICIONAL_OBJ").Rows Where X!SISTEMA = Sistema Select TIPO = X!TIPO, NOME = X!OBJETO, CLASSE = X!CLASSE, ORDEM = X!ORDEM, TEXTO = X!Texto
                        TbOb.Add(Linha)
                    Next

                    ErrMsg = "Cria objetos - adiciona visões"
                    For Each Linha In From x As System.Data.DataRow In Tbs.Tables(GerSistema & "." & "GER_VISAO").Rows Where x!SISTEMA = Sistema Select TIPO = "VISÃO", NOME = x!VISAO, CLASSE = x!CLASSE, ORDEM = x!ORDEM, TEXTO = x!Texto
                        TbOb.Add(Linha)
                    Next

                    ErrMsg = "Cria objetos - monta código"
                    For Each ob In (From X In TbOb Where NZ(X.TEXTO, "") <> "" Order By X.ORDEM, X.TIPO, X.NOME)
                        S.WriteLine("-- OBJETO " & ob.ORDEM & " | " & ob.TIPO & " | " & ob.NOME)
                        If ob.TIPO = "VISÃO" Then
                            S.WriteLine(MacroSubstSQLText("CREATE OR REPLACE VIEW [:VALOR.ESQUEMA]." & ob.NOME & " AS " & ob.Texto, Params))
                            S.WriteLine("/")
                            S.WriteLine("")
                        Else
                            S.WriteLine(MacroSubstSQLText(ob.Texto, Params))
                            S.WriteLine("/")
                            S.WriteLine("")
                        End If
                    Next
                    S.WriteLine("")

                    ' cria usuários
                    S.WriteLine("/* **********************************************************************************")
                    S.WriteLine("   CRIAÇÃO DE USUÁRIOS")
                    S.WriteLine("*/")
                    S.WriteLine("")
                    Dim Usu = From X In Tbs.Tables(GerSistema & "." & "GER_USUARIO").Rows Where X!SISTEMA = Sistema
                    For Each us As System.Data.DataRow In Usu
                        Dim ELEM As New ElementosStr("")
                        Try
                            ELEM = New ElementosStr(NZV(us!PROP_EXTEND, ""))
                        Catch
                        End Try

                        If Not TemNaLista("INTERNET", UCase(ELEM("Tipo").Conteudo)) Then

                            ErrMsg = "Cria usuários"
                            S.WriteLine("DECLARE")
                            S.WriteLine("  QTD INTEGER;")
                            S.WriteLine("BEGIN")
                            S.WriteLine("  SELECT COUNT(*) INTO QTD FROM ALL_USERS WHERE USERNAME = '" & us!USUARIO & "';")
                            S.WriteLine("  IF QTD = 0 THEN")
                            S.WriteLine("    EXECUTE IMMEDIATE 'CREATE USER """ & us!USUARIO & """ IDENTIFIED BY " & Chr(34) & NZV(us!Senha, NovaSenha(6, True)) & Chr(34) & " " & MacroSubstSQLText("DEFAULT TABLESPACE T_[:VALOR.ESQUEMA]_DAT", Params) & " TEMPORARY TABLESPACE TEMP PROFILE DEFAULT ACCOUNT UNLOCK';")
                            S.WriteLine("  ELSE")
                            S.WriteLine("    EXECUTE IMMEDIATE 'ALTER USER """ & us!USUARIO & """ IDENTIFIED BY " & Chr(34) & NZV(us!Senha, NovaSenha(6, True)) & Chr(34) & " ACCOUNT UNLOCK';")
                            S.WriteLine("  END IF;")
                            S.WriteLine("  EXECUTE IMMEDIATE 'ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED';")
                            S.WriteLine("END;")
                            S.WriteLine("/")
                            S.WriteLine("")

                            Dim NomeSistema As String = us!SISTEMA
                            Dim NomeUsuario As String = us!USUARIO

                            ErrMsg = "Define permissões"

                            If us!GRUPO = "ADM" Then
                                S.WriteLine("GRANT ALL PRIVILEGES TO """ & us!USUARIO & """;", Params)
                                S.WriteLine("", Params)
                            Else
                                S.WriteLine("GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE, CREATE ANY VIEW TO """ & us!USUARIO & """;")
                                S.WriteLine("", Params)
                                Dim SQL As String = ""
                                Try
                                    Dim Dir = From x In Tbs.Tables(GerSistema & "." & "GER_DIREITO").Rows Where x!sistema = NomeSistema And x!USUARIO = NomeUsuario
                                    For Each dr As System.Data.DataRow In Dir
                                        Dim Permissao As String = Trim(Gerador.PERMS(dr!Permissao))
                                        If Permissao <> "" Then
                                            SQL = MacroSubstSQLText("GRANT " & Permissao & " ON " & dr!SISTEMA & "." & IIf(NZ(dr!OBJETO_CLASSE, "") <> "", dr!OBJETO_CLASSE, dr!OBJETO_NOME) & " TO " & us!USUARIO & ";")
                                            S.WriteLine(SQL, Params)
                                        End If
                                    Next
                                Catch EX As Exception
                                    S.WriteLine("-- ORA: ERRO NA CRIAÇÃO DE DIREITOS: " & EX.Message & ", ÚLTIMO GRANT: " & SQL)
                                End Try
                                S.WriteLine("")

                            End If
                        End If

                    Next


                    ErrMsg = "Encerra script"
                    ' encerramento de script
                    S.WriteLine("SPOOL OFF")
                    Dim ARQLOGCONS As String = MacroSubstSQLText("[:VALOR.SERVICO]_PARTES.LOG", Params)
                    S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                    S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                    S.WriteLine("$ECHO - >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C ECHO %DATE% %TIME% >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C FIND ""ORA-"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C FIND ""SP2-"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                    S.WriteLine("$CMD /C FIND ""Advertência:"" """ & ARQLOG & """ >>""" & ARQLOGCONS & """")
                    S.WriteLine("EXIT")

                Catch EX As Exception
                    ErrMsg = ErrMsg & ": " & EX.Message
                    Throw New Exception(ErrMsg)
                End Try
            End Sub
            'TÉRMINO GRAVAORACLERESTR

            ''' <summary>
            ''' Verifica permissões para criação de script.
            ''' </summary>
            ''' <param name="Texto">Texto que deverá ser tratado.</param>
            ''' <returns>Retorna termo de completo para instrução GRANT.</returns>
            ''' <remarks></remarks>
            Public Shared Function PERMS(ByVal Texto As String) As String
                Dim Permissao As String = Texto.Replace(" ", "") & ";"
                Permissao = Permissao.Replace("SEL;", "SELECT, ")
                Permissao = Permissao.Replace("INS;", "INSERT, ")
                Permissao = Permissao.Replace("UPD;", "UPDATE, ")
                Permissao = Permissao.Replace("DEL;", "DELETE, ")
                Permissao = Permissao.Replace("ACC;", "")

                If Permissao.EndsWith(";") Then
                    Permissao = StrStr(Permissao, 0, -1)
                End If
                If Permissao.EndsWith(", ") Then
                    Permissao = StrStr(Permissao, 0, -2)
                End If
                Return Permissao
            End Function

            Private _cancelar As Boolean = False

            ''' <summary>
            ''' Cancelar
            ''' </summary>
            ''' <value>cancelar</value>
            ''' <returns>cancelar</returns>
            ''' <remarks></remarks>
            Public Property Cancelar() As Boolean
                Get
                    Return _cancelar
                End Get
                Set(ByVal value As Boolean)
                    _cancelar = value
                End Set
            End Property

            Private _terminado As Boolean = False

            ''' <summary>
            ''' Terminado
            ''' </summary>
            ''' <value></value>
            ''' <returns>terminado</returns>
            ''' <remarks>terminado</remarks>
            Public Property Terminado() As Boolean
                Get
                    Return _terminado
                End Get
                Set(ByVal value As Boolean)
                    _terminado = value
                End Set
            End Property

            ''' <summary>
            ''' Carrega dados de base Oracle.
            ''' </summary>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="Esquema">Esquema.</param>
            ''' <param name="ConnStr">String de conexão.</param>
            ''' <remarks></remarks>
            Public Sub CarregaOracle(ByVal Sistema As String, ByVal Esquema As String, ByVal ConnStr As String)
                Cancelar = False
                Terminado = False
                RegLog("Carregando Oracle " & Sistema, True)
                If Importa And Criterios.Iniciar Then
                    ApagaTabelas()
                End If

                ChecagemAnterior(Sistema)
                Tbs.Relations.Clear()
                Dim Provider As String = Oracle

                ' Carrega Tabelas


                Dim TSQL As String = " SELECT AT.TABLE_NAME," & vbCrLf &
                "  (SELECT COMMENTS" & vbCrLf &
                "     FROM ALL_TAB_COMMENTS" & vbCrLf &
                "    WHERE OWNER =AT.OWNER" & vbCrLf &
                "  AND TABLE_NAME=AT.TABLE_NAME" & vbCrLf &
                "  ) COMMENTS," & vbCrLf &
                "" & vbCrLf &
                "  (SELECT REPLACE(WM_CONCAT(INDEX_NAME" & vbCrLf &
                "    || ':'" & vbCrLf &
                "    ||" & vbCrLf &
                "    (SELECT WM_CONCAT(''''" & vbCrLf &
                "      || COLUMN_NAME" & vbCrLf &
                "      || '''')" & vbCrLf &
                "       FROM ALL_IND_COLUMNS IC" & vbCrLf &
                "      WHERE IC.INDEX_OWNER = I.OWNER" & vbCrLf &
                "    AND IC.INDEX_NAME      = I.INDEX_NAME" & vbCrLf &
                "    ) ),',',';')" & vbCrLf &
                "     FROM ALL_INDEXES I" & vbCrLf &
                "    WHERE AT.OWNER  = I.TABLE_OWNER" & vbCrLf &
                "  AND AT.TABLE_NAME = I.TABLE_NAME" & vbCrLf &
                "  ) INDEXES" & vbCrLf &
                "" & vbCrLf &
                "" & vbCrLf &
                "   FROM ALL_TABLES AT" & vbCrLf &
                "  WHERE UPPER(AT.OWNER) = :DB_NAME"


                Dim DS As DataSet = DSCarrega(TSQL, ConnStr, ":DB_NAME", Esquema.ToUpper)
                If Cancelar Then GoTo Cancelando
                If Importa And Criterios.Tabela Then
                    Dim TabOrdem As Integer = 1
                    For Each row As DataRow In DS.Tables(0).Rows
                        If Cancelar Then GoTo Cancelando
                        If Not row("TABLE_NAME") Like "BIN$*" Then

                            ' chave prima
                            Dim DSPrima As DataSet = DSCarrega("SELECT CC.COLUMN_NAME Chave_Prima, CC.TABLE_NAME, AC.CONSTRAINT_NAME FROM ALL_CONSTRAINTS AC, ALL_CONS_COLUMNS CC WHERE(CC.CONSTRAINT_NAME = AC.CONSTRAINT_NAME) AND CC.OWNER = AC.OWNER AND CC.TABLE_NAME = AC.TABLE_NAME AND AC.CONSTRAINT_TYPE = 'P' AND CC.TABLE_NAME = :TABELA AND UPPER(CC.OWNER) = :NOME ORDER BY CC.POSITION, CC.CONSTRAINT_NAME ASC", ConnStr, ":TABELA", row("TABLE_NAME"), ":NOME", Esquema)
                            Dim Chave_Prima As String = ""
                            Try
                                For Each fld As DataRow In DSPrima.Tables(0).Rows
                                    Chave_Prima &= IIf(Chave_Prima <> "", ";", "") & fld("Chave_Prima")
                                Next
                            Catch
                            End Try
                            Dim NomeTabela As String = row("TABLE_NAME")
                            Dim DSCampos As DataSet = DSCarrega("SELECT ATC.COLUMN_NAME,ATC.DATA_TYPE,ATC.DATA_LENGTH,ATC.DATA_PRECISION,ATC.DATA_SCALE, (SELECT COMMENTS FROM ALL_COL_COMMENTS WHERE OWNER=ATC.OWNER AND TABLE_NAME=ATC.TABLE_NAME AND COLUMN_NAME=ATC.COLUMN_NAME) COMMENTS FROM ALL_TAB_COLUMNS ATC WHERE NOT ATC.COLUMN_NAME IN ('SYS_MOMENTO_CRIA','SYS_USUARIO_CRIA','SYS_LOCAL_CRIA','SYS_MOMENTO_ATUALIZA','SYS_USUARIO_ATUALIZA','SYS_LOCAL_ATUALIZA','SYS_STATUS') AND UPPER(ATC.OWNER) = :DB_NAME AND UPPER(ATC.TABLE_NAME)=:TABELA ORDER BY ATC.COLUMN_ID", ConnStr, ":DB_NAME", Esquema, ":TABELA", row("TABLE_NAME").ToString.ToUpper)

                            RegLog("Importando do Oracle " & NomeTabela, True)
                            If (From X In Tbs.Tables(GerSistema & ".GER_TABELA") Where NZ(X!SISTEMA, "") = Sistema And NZ(X!TABELA, "") = NomeTabela).Count = 0 Then
                                Tbs.Tables(GerSistema & ".GER_TABELA").Rows.Add(Sistema, row("TABLE_NAME"), TabOrdem, CodigoNovo(row("TABLE_NAME"), Tbs.Tables(GerSistema & ".GER_TABELA")), "", "", Chave_Prima, Esquema, "", 0, 0, "")

                                ' campos
                                Dim CampoOrdem As Integer = 1

                                Dim E As Long = 0
                                For Each tbc As DataRow In DSCampos.Tables(0).Rows
                                    Try
                                        Tbs.Tables(GerSistema & ".GER_CAMPO").Rows.Add(Sistema, row("TABLE_NAME"), tbc("COLUMN_NAME"), CampoOrdem, "", "", "", "", TipoOracleToScript(tbc("DATA_TYPE"), tbc("DATA_LENGTH"), NZ(tbc("DATA_PRECISION"), ""), NZ(tbc("DATA_SCALE"), "")), "", "", "", "", "", "")
                                    Catch ex As Exception
                                        E += 1
                                    End Try
                                    CampoOrdem += 1
                                Next
                                If E > 0 Then
                                    RegLog("Não foi possível incluir todos registros em " & row("TABLE_NAME") & ". Total de falhas: " & E)
                                End If

                                TabOrdem += 1
                            Else
                                RegLog("Tabela " & row("TABLE_NAME") & " já existia. Só registros foram adicionados.")
                            End If

                            ' inclusão de registros nas definições do gerador

                            Dim SisEmTodos As Boolean = (Exporta Or Importa) And Criterios.SysEmTodosOsSistemas
                            Dim PegaDoGer As Boolean = TemNaLista(TabsGerador, NomeTabela) OrElse (TemNaLista(TabsSistema, NomeTabela) And Not SisEmTodos)

                            Dim NomeSistemaTabela As String = IIf(PegaDoGer, GerSistema, Sistema) & "." & NomeTabela

                            Dim DD As System.Data.DataSet = Nothing

                            ' critério para incluir dados ou não

                            Dim IncluiDados As Boolean = False
                            If TemNaLista(TabsGerador, NomeTabela) Then
                                If CType(Importa And Criterios.InfraGeradorDados, Boolean) Then
                                    IncluiDados = True
                                End If
                            ElseIf TemNaLista(TabsSistema, NomeTabela) Then
                                If CType(Importa And Criterios.InfraSistemaDados, Boolean) Then
                                    IncluiDados = True
                                End If
                            ElseIf CType(Importa And Criterios.TabelaDados, Boolean) Then
                                IncluiDados = True
                            End If

                            If IncluiDados Then
                                DD = DSCarrega("SELECT * FROM " & Esquema & "." & NomeTabela, ConnStr)
                                RegLog("Carrega dados da tabela " & NomeTabela, True)
                            Else
                                DD = DSCarregaEstrut("SELECT * FROM " & Esquema & "." & NomeTabela, ConnStr)
                            End If

                            If Not Tbs.Tables.Contains(NomeSistemaTabela) Then
                                DD.Tables(0).TableName = Sistema & "." & NomeTabela
                                DD.Tables(0).ExtendedProperties("SISTEMA") = Sistema


                                AtribuiOrigDiverDados(DD.Tables(0), row, TipoBaseSQL.Oracle)
                                For Each tbc As DataRow In DSCampos.Tables(0).Rows
                                    If Cancelar Then GoTo Cancelando
                                    AtribuiOrigDiverDados(DD.Tables(0).Columns(tbc!COLUMN_NAME), tbc, TipoBaseSQL.Oracle)
                                Next


                                Tbs.Tables.Add(DD.Tables(0).Copy)
                            Else
                                If DD.Tables(0).Rows.Count > 0 Then
                                    IncluiTabLinhas(Tbs.Tables(NomeSistemaTabela), DD.Tables(0).Rows)
                                End If
                            End If


                        End If
                    Next
                End If


                ' relacionamentos
                If Cancelar Then GoTo Cancelando
                If Importa And Criterios.AtualizaRelacionamentos Then
                    RegLog("Carregando do Oracle " & Sistema & " seus relacionamentos", True)
                    Dim DSRels As DataSet = DSCarrega("SELECT RR.CONSTRAINT_NAME CONSTRN, RR.TABLE_NAME TABN, R1.CONSTRAINT_NAME CONSTR1, R1.TABLE_NAME TAB1 FROM ALL_CONSTRAINTS RR, ALL_CONSTRAINTS R1 WHERE RR.CONSTRAINT_TYPE='R' AND RR.R_OWNER = R1.OWNER AND RR.R_CONSTRAINT_NAME = R1.CONSTRAINT_NAME AND RR.OWNER = :NOME ORDER BY TAB1 ASC", ConnStr, ":NOME", Esquema)

                    For Each tbr As DataRow In DSRels.Tables(0).Rows
                        If Cancelar Then GoTo Cancelando

                        Dim Tabela_1 As String = tbr("TAB1")
                        Dim Tabela_N As String = tbr("TABN")

                        ' busca campos do relacionamento
                        Dim Campos_1 As String = ""
                        Dim Campos_N As String = ""

                        'Loop para carregar chaves primárias e estrangeiras
                        'Monta SQL para carregar campos relacionados
                        Dim SQL As String = "SELECT * FROM (SELECT RR.OWNERN, RR.CONSTN, RN.POSITION POS, RN.COLUMN_NAME COLN, " &
                                            "R1.COLUMN_NAME COL1 FROM (SELECT RR.OWNER OWNERN, RR.CONSTRAINT_NAME CONSTN, " &
                                            "R1.OWNER OWNER1, R1.CONSTRAINT_NAME CONST1 FROM ALL_CONSTRAINTS RR, ALL_CONSTRAINTS R1 " &
                                            "WHERE RR.CONSTRAINT_TYPE='R' AND RR.R_OWNER = R1.OWNER AND RR.R_CONSTRAINT_NAME = R1.CONSTRAINT_NAME " &
                                            "AND RR.OWNER = :NOME) RR,(SELECT OWNER, CONSTRAINT_NAME, COLUMN_NAME, POSITION FROM ALL_CONS_COLUMNS) RN, " &
                                            "(SELECT OWNER, CONSTRAINT_NAME, COLUMN_NAME, POSITION FROM ALL_CONS_COLUMNS) R1 WHERE RR.OWNERN = RN.OWNER " &
                                            "AND RR.CONSTN = RN.CONSTRAINT_NAME AND RR.OWNER1 = R1.OWNER AND RR.CONST1 = R1.CONSTRAINT_NAME AND " &
                                            "RN.POSITION = R1.POSITION ORDER BY RN.OWNER, RN.CONSTRAINT_NAME, RN.POSITION) WHERE " &
                                            "OWNERN = :NOME AND CONSTN = :CONS"
                        Dim DSCamposRel As DataSet = DSCarrega(SQL, ConnStr, ":NOME", Esquema, ":CONS", tbr("CONSTRN"))
                        For Each row As DataRow In DSCamposRel.Tables(0).Rows
                            Campos_1 &= IIf(Campos_1 <> "", ";", "") & row("COL1")
                            Campos_N &= IIf(Campos_N <> "", ";", "") & row("COLN")
                        Next
                        Dim CascadeDel As String = "CASCADE"
                        Dim CascadeUpd As String = "CASCADE"
                        Dim Obrig As Boolean = True

                        Dim TB_1 As System.Data.DataRow = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_TABELA").Rows Where x!SISTEMA = Sistema And x!TABELA = Tabela_1 Select x)(0)
                        Dim TB_N As System.Data.DataRow = (From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_TABELA").Rows Where x!SISTEMA = Sistema And x!TABELA = Tabela_N Select x)(0)

                        Dim Pref As String = Tabela_1 & ":" & Campos_1 & "|" & Tabela_N & ":" & Campos_N
                        If Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Select("SISTEMA + '|' + TABELA_1 + ':' + CAMPO_1 + '|' + TABELA_N + ':' + CAMPO_N = '" & Sistema & "|" & Pref & "'").Count > 0 Then
                            RegLog("Relacionamento " & Pref & " já existe.")
                        Else
                            Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO").Rows.Add(Sistema, NomeRelMonta(TB_1, TB_N, Tbs.Tables(GerSistema & ".GER_RELACIONAMENTO")), Tabela_1, Campos_1, "", Tabela_N, Campos_N, "", CascadeDel, CascadeUpd, Obrig, "", "", "", "", 0, "", "", "")
                        End If
                    Next
                End If

                ' obtenção de params das tabelas ger_
                If Cancelar Then GoTo Cancelando
                If Importa And Criterios.InfraGeradorDados Then
                    RegLog("Buscando em GER_TABELA e GER_CAMPO do Oracle especificações para " & Sistema, True)
                    Dim TbCom As System.Data.DataSet = DSCarrega("SELECT * FROM " & GerSistema & ".GER_TABELA WHERE SISTEMA = :SISTEMA", ConnStr, ":SISTEMA", Esquema)
                    For Each Coment As System.Data.DataRow In TbCom.Tables(0).Rows
                        If Cancelar Then GoTo Cancelando
                        Dim NomeTabela As String = Coment!TABELA
                        If Not TemNaLista(TabsGerador, NomeTabela) And Not TemNaLista(TabsSistema, NomeTabela) Then
                            For Each Tb As System.Data.DataRow In From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_TABELA").Rows Where x!SISTEMA = Sistema And x!TABELA = NomeTabela Select x
                                Tb!ETIQ = Coment!ETIQ
                                Tb!DESCR = Coment!DESCR
                                Tb!CLASSE = Coment!CLASSE
                                Tb!ORDEM = Coment!ORDEM
                                Tb!CHAVE_APRES = IIf(TypeOf Coment!CHAVE_APRES Is System.DBNull, "", Coment!CHAVE_APRES)
                                Tb!CHAVE_FILTRO = IIf(TypeOf Coment!CHAVE_FILTRO Is System.DBNull, "", Coment!CHAVE_FILTRO)
                            Next
                        End If
                    Next

                    TbCom = DSCarrega("SELECT * FROM " & GerSistema & ".GER_CAMPO WHERE SISTEMA=:SISTEMA", ConnStr, ":SISTEMA", Esquema)
                    For Each Coment As System.Data.DataRow In TbCom.Tables(0).Rows
                        If Cancelar Then GoTo Cancelando
                        Dim NomeTabela As String = Coment!TABELA
                        If Not TemNaLista(TabsGerador, NomeTabela) And Not TemNaLista(TabsSistema, NomeTabela) Then
                            Dim NomeCampo As String = Coment!CAMPO
                            For Each Tb As System.Data.DataRow In From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_CAMPO").Rows Where x!SISTEMA = Sistema And x!TABELA = NomeTabela And x!CAMPO = NomeCampo Select x
                                If Cancelar Then GoTo Cancelando
                                Tb!ETIQ = Coment!ETIQ
                                Tb!DESCR = Coment!DESCR
                                Tb!CONJUNTO = Coment!CONJUNTO
                                Tb!ORDEM = Coment!ORDEM
                                Tb!PROP_EXTEND = Coment!PROP_EXTEND
                                Tb!FORMATO = Coment!FORMATO
                                Tb!VALOR_PADRAO = Coment!VALOR_PADRAO
                                Tb!AUTO = Coment!AUTO
                                Tb!VALOR_CHECK = Coment!VALOR_CHECK
                            Next
                        End If
                    Next
                End If

                ' obtenção das descrições
                If Cancelar Then GoTo Cancelando
                If Importa And Criterios.DefinirDescrPelasTabs Then
                    RegLog("Buscando descrições no Oracle especificações para " & Sistema, True)
                    Dim TbCom As System.Data.DataSet = DSCarrega("SELECT * FROM ALL_TAB_COMMENTS WHERE OWNER=:ESQUEMA AND TABLE_TYPE='TABLE'", ConnStr, ":ESQUEMA", Esquema)
                    For Each Coment As System.Data.DataRow In TbCom.Tables(0).Rows
                        If Cancelar Then GoTo Cancelando
                        Dim NomeTabela As String = Coment!TABLE_NAME
                        If Not TemNaLista(TabsGerador, NomeTabela) And Not TemNaLista(TabsSistema, NomeTabela) Then
                            For Each Tb As System.Data.DataRow In From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_TABELA").Rows Where x!SISTEMA = Sistema And x!TABELA = NomeTabela Select x
                                If Cancelar Then GoTo Cancelando
                                Dim D As New DescrConcat(Tb!TABELA, "", NZV(Coment!COMMENTS, ""))
                                If Importa And Criterios.DescricoesDasEstrutSoVazias Then
                                    Tb!ETIQ = NZV(Tb!ETIQ, D.Etiq)
                                    Tb!DESCR = NZV(Tb!descr, D.Descr)
                                    Tb!CLASSE = NZV(Tb!classe, D.Grupo)
                                Else
                                    Tb!ETIQ = D.Etiq
                                    Tb!DESCR = D.Descr
                                    Tb!CLASSE = D.Grupo
                                End If
                            Next
                        End If
                    Next

                    TbCom = DSCarrega("SELECT * FROM ALL_COL_COMMENTS WHERE OWNER=:ESQUEMA", ConnStr, ":ESQUEMA", Esquema)
                    For Each Coment As System.Data.DataRow In TbCom.Tables(0).Rows
                        If Cancelar Then GoTo Cancelando
                        Dim NomeTabela As String = Coment!TABLE_NAME
                        If Not TemNaLista(TabsGerador, NomeTabela) And Not TemNaLista(TabsSistema, NomeTabela) Then
                            Dim NomeCampo As String = Coment!COLUMN_NAME
                            For Each Tb As System.Data.DataRow In From x As System.Data.DataRow In Tbs.Tables(GerSistema & ".GER_CAMPO").Rows Where x!SISTEMA = Sistema And x!TABELA = NomeTabela And x!CAMPO = NomeCampo Select x
                                If Cancelar Then GoTo Cancelando
                                Dim D As New DescrConcat(Tb!TABELA, Tb!CAMPO, NZV(Coment!COMMENTS, ""))
                                If Importa And Criterios.DescricoesDasEstrutSoVazias Then
                                    Tb!ETIQ = NZV(Tb!ETIQ, D.Etiq)
                                    Tb!DESCR = NZV(Tb!DESCR, D.Descr)
                                    Tb!CONJUNTO = NZV(Tb!CONJUNTO, D.Grupo)
                                Else
                                    Tb!ETIQ = D.Etiq
                                    Tb!DESCR = D.Descr
                                    Tb!CONJUNTO = D.Grupo
                                End If
                            Next
                        End If
                    Next
                End If

                ' carrega visões do oracle
                If Cancelar Then GoTo Cancelando
                If Importa And Criterios.Visao Then
                    For Each Visao As System.Data.DataRow In DSCarrega("SELECT * FROM ALL_VIEWS WHERE OWNER=:ESQUEMA", ConnStr, ":ESQUEMA", Esquema).Tables(0).Rows
                        If Cancelar Then GoTo Cancelando
                        Try
                            Tbs.Tables(GerSistema & ".GER_VISAO").Rows.Add(Sistema, Visao!VIEW_NAME, Tbs.Tables(GerSistema & ".GER_VISAO").Rows.Count + 1, Sistema, Visao!TEXT)
                        Catch EX As Exception
                            RegLog("Visõe " & Visao!VIEW_NAME & " já existe: erro: " & EX.Message)
                        End Try
                    Next
                End If

                ' falta fazer objetos adicionais
                ' usuários
                ' direitos
                If Cancelar Then GoTo Cancelando

                ChecagemPosterior()
                RegLog("Término carga Oracle " & Sistema, True)
                Terminado = True
                Exit Sub

Cancelando:
                RegLog("Cancelada carga Oracle " & Sistema, True)
                Terminado = True
            End Sub ' fim carga oracle

            ''' <summary>
            ''' Limpa log.
            ''' </summary>
            ''' <remarks></remarks>
            Sub LogLimpa()
                Log.Length = 0
            End Sub

            ''' <summary>
            ''' Obtém campos de índice em banco MDB.
            ''' </summary>
            ''' <param name="IND"></param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Shared Function ObtemMSIndiceCampos(ByVal IND As Object) As String
                Dim Campos As String = ""
                For Each CP As Object In IND.Fields
                    Campos &= IIf(Campos <> "", ";", "") & CP.name
                Next
                Return Campos
            End Function

            ''' <summary>
            ''' Descrição para concatenação de termos de script a ser registrada.
            ''' </summary>
            ''' <remarks></remarks>
            Class DescrConcat
                ' descrição etiqueta e grupo
                Public DescrConcatFormat As String = "(?<g1>.*?)(\|(?<g2>.*?)(\|(?<g3>.*)|$)|$)"

                Private _tabela As String = ""
                Private _campo As String = ""
                Private _grupo As String = ""
                Private _etiq As String = ""
                Private _descr As String = ""

                ''' <summary>
                ''' Obtém texto correspondente à descrição concatenada.
                ''' </summary>
                ''' <value>Valor da concatenação.</value>
                ''' <returns>Termo resultante.</returns>
                ''' <remarks></remarks>
                Public ReadOnly Property Texto() As String
                    Get
                        Dim Ar As New ArrayList
                        If NZ(_grupo, "") <> "" Then
                            Ar.Add(Grupo)
                        End If
                        If NZ(_descr, "") <> "" Then
                            Ar.Add(_descr)
                        End If
                        If NZ(_etiq, "") <> "" Then
                            Ar.Add(_etiq)
                        End If
                        Return Join(Ar.ToArray, " | ")
                    End Get
                End Property

                ''' <summary>
                ''' Cria termo descritivo de concatenação.
                ''' </summary>
                ''' <param name="Tabela">Tabela.</param>
                ''' <param name="Campo">Campo.</param>
                ''' <param name="Grupo">Grupo.</param>
                ''' <param name="Etiq">Etiqueta.</param>
                ''' <param name="Descr">Descrição.</param>
                ''' <remarks></remarks>
                Sub New(ByVal Tabela As String, ByVal Campo As String, ByVal Grupo As String, ByVal Etiq As String, ByVal Descr As String)
                    _tabela = Tabela
                    _campo = Campo
                    _grupo = Grupo
                    _etiq = Etiq
                    _descr = Descr
                End Sub

                ''' <summary>
                ''' Grupo.
                ''' </summary>
                ''' <value>Grupo.</value>
                ''' <returns>Grupo.</returns>
                ''' <remarks></remarks>
                Public Property Grupo() As String
                    Get
                        Return _grupo
                    End Get
                    Set(ByVal value As String)
                        _grupo = value
                    End Set
                End Property

                ''' <summary>
                ''' Etiqueta.
                ''' </summary>
                ''' <value>Etiqueta.</value>
                ''' <returns>Etiqueta.</returns>
                ''' <remarks></remarks>
                Public Property Etiq() As String
                    Get
                        Return _etiq
                    End Get
                    Set(ByVal value As String)
                        _etiq = value
                    End Set
                End Property

                ''' <summary>
                ''' Descrição.
                ''' </summary>
                ''' <value>Descrição.</value>
                ''' <returns>Descrição.</returns>
                ''' <remarks></remarks>
                Public Property Descr() As String
                    Get
                        Return _descr
                    End Get
                    Set(ByVal value As String)
                        _descr = value
                    End Set
                End Property

                ''' <summary>
                ''' Decompõe termo descritivo em fatores.
                ''' </summary>
                ''' <param name="Tabela">Tabela.</param>
                ''' <param name="Campo">Campo.</param>
                ''' <param name="Texto">Texto.</param>
                ''' <remarks></remarks>
                Sub New(ByVal Tabela As String, ByVal Campo As String, ByVal Texto As String)
                    _tabela = Tabela
                    _campo = Campo
                    _descr = ""
                    _etiq = ""
                    _grupo = ""

                    Dim Txt() As String = Split(Texto, "|")
                    Select Case Txt.Count
                        Case 1
                            _descr = Txt(0).Trim()
                        Case 2
                            _descr = Txt(0).Trim()
                            _etiq = Txt(1).Trim()
                        Case 3
                            _grupo = Txt(0).Trim()
                            _descr = Txt(1).Trim()
                            _etiq = Txt(2).Trim()
                    End Select

                    If NZ(_etiq, "").EndsWith(".") Then
                        Dim troca As String = _etiq
                        _etiq = _descr
                        _descr = troca
                    End If

                    If NZ(_etiq, "") = "" Or NZ(_etiq, "") = "Geral" Then
                        If NZ(_campo, "") <> "" Then
                            _etiq = _campo
                        Else
                            _etiq = Tabela
                        End If
                    End If

                    If NZ(_grupo, "") = "" And NZ(_campo, "") <> "" Then
                        _grupo = "Geral"
                    End If

                End Sub
            End Class

        End Class


        ''' <summary>
        ''' Carrega arquivo XMl em dataset.
        ''' </summary>
        ''' <param name="TextoOuArquivo">Texto XML ou arquivo no disco.</param>
        ''' <returns>Dataset com base no XML.</returns>
        ''' <remarks></remarks>
        Public Shared Function CarregaXML(ByVal TextoOuArquivo As String) As System.Data.DataSet
            Dim TR As System.IO.StreamReader
            If TextoOuArquivo.StartsWith("<NewDataSet>") Then
                TR = New System.IO.StreamReader(TextoEmStream(TextoOuArquivo))
            End If
            TR = New System.IO.StreamReader(FileExpr(TextoOuArquivo), True)
            Dim DS As New System.Data.DataSet
            DS.ReadXml(TR)
            TR.Close()
            Return DS
        End Function

        ''' <summary>
        ''' Grava DS em arquivo XML no disco.
        ''' </summary>
        ''' <param name="DS">Dataset a ser gravado no disco em XML.</param>
        ''' <param name="ArquivoXML">Arquivo XML que será criado.</param>
        ''' <param name="Modo">Modo.</param>
        ''' <remarks></remarks>
        Public Shared Sub GravaXml(ByVal DS As System.Data.DataSet, ByVal ArquivoXML As String, Optional ByVal Modo As XmlWriteMode = XmlWriteMode.IgnoreSchema)
            ArquivoXML = FileExpr(ArquivoXML)
            DS.WriteXml(ArquivoXML, XmlWriteMode.WriteSchema)
        End Sub


        ''' <summary>
        ''' Classe para ler tnsnames do Oracle no disco.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class TNSNamesReader

            Private strOracleHome As String = ""
            Private strTNSNAMESORAFilePath As String = ""

            ''' <summary>
            ''' Verifica OracleHome.
            ''' </summary>
            ''' <returns>Diretório OracleHome.</returns>
            ''' <remarks></remarks>
            Public Function GetOracleHome() As String
                Dim rgkActualHome As RegistryKey = Nothing
                Dim strOraHome As String = ""

                Dim rgkLM As RegistryKey = Registry.LocalMachine
                Dim rgkAllHome As RegistryKey = rgkLM.OpenSubKey("SOFTWARE\ORACLE\ALL_HOMES")

                If Not IsNothing(rgkAllHome) Then
                    Dim objLastHome As Object = rgkAllHome.GetValue("LAST_HOME")
                    Dim strLastHome = ""
                    strLastHome = objLastHome.ToString()
                    rgkActualHome = Registry.LocalMachine.OpenSubKey("SOFTWARE\ORACLE\HOME" + strLastHome)
                Else
                    For Each Reg As String In rgkLM.OpenSubKey("SOFTWARE\ORACLE").GetSubKeyNames.Reverse.ToArray
                        If Not IsNothing(Registry.LocalMachine.OpenSubKey("SOFTWARE\ORACLE\" + Reg)) Then
                            rgkActualHome = Registry.LocalMachine.OpenSubKey("SOFTWARE\ORACLE\" + Reg)
                            If Not IsNothing(rgkActualHome.GetValue("ORACLE_HOME")) Then
                                Exit For
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(rgkActualHome) Then
                    Dim objOraHome As Object = rgkActualHome.GetValue("ORACLE_HOME")
                    strOraHome = objOraHome.ToString()
                    strOracleHome = strOraHome
                    Return strOraHome
                End If
                Return ""
            End Function

            ''' <summary>
            ''' Busca caminho do TNSNames do Oracle.
            ''' </summary>
            ''' <returns>Diretório do arquivo TNSNames do Oracle.</returns>
            ''' <remarks></remarks>
            Public Function GetTNSNAMESORAFilePath() As String
                If Not Me.GetOracleHome.Equals("") Then
                    strTNSNAMESORAFilePath = strOracleHome + "\NETWORK\ADMIN\TNSNAMES.ORA"
                    If Not (System.IO.File.Exists(strTNSNAMESORAFilePath)) Then
                        strTNSNAMESORAFilePath = strOracleHome + "\NET80\ADMIN\TNSNAMES.ORA"
                        Return strTNSNAMESORAFilePath
                    Else
                        Return strTNSNAMESORAFilePath
                    End If
                Else
                    Return ""
                End If
            End Function

            ''' <summary>
            ''' Carrega arquivo TNSNames.
            ''' </summary>
            ''' <returns>Lista de itens no TNSNames.</returns>
            ''' <remarks></remarks>
            Public Function LoadTNSNames() As Collection
                Dim DBNamesCollection As New Collection
                Dim RegExPattern As String = "[\n][\s]*[^\(][a-zA-Z0-9_.]+[\s]*=[\s]*\("

                GetTNSNAMESORAFilePath()
                DBNamesCollection.Add("")
                If Not strTNSNAMESORAFilePath.Equals("") Then
                    Try
                        Dim fiTNS As New System.IO.FileInfo(strTNSNAMESORAFilePath)
                        If (fiTNS.Exists) Then
                            If (fiTNS.Length > 0) Then
                                Dim iCount As Integer
                                Try
                                    For iCount = 0 To Regex.Matches(Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(fiTNS.FullName), RegExPattern).Count - 1
                                        DBNamesCollection.Add(Regex.Matches(Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(fiTNS.FullName), RegExPattern).Item(iCount).Value.Trim.Substring(0, Regex.Matches(Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(fiTNS.FullName), RegExPattern).Item(iCount).Value.Trim.IndexOf(" ")))
                                    Next
                                Catch ex As Exception
                                    Throw New Exception(ex.Message)
                                End Try
                            End If
                        End If
                    Catch ex As Exception
                        Throw New Exception(ex.Message)
                    End Try
                End If
                Return DBNamesCollection
            End Function

            ''' <summary>
            ''' Obtém serviços com base nos dados do TNSNames.
            ''' </summary>
            ''' <returns>Lista em texto de serviços disponíveis.</returns>
            ''' <remarks></remarks>
            Public Shared Function ObtemServicos() As ArrayList
                Dim R As New TNSNamesReader
                Dim Itens As New ArrayList
                For Each Item As String In R.LoadTNSNames
                    If Item <> "" Then
                        Itens.Add(Item)
                    End If
                Next
                Return Itens
            End Function

        End Class


        ''' <summary>
        ''' Soma lista de valores.
        ''' </summary>
        ''' <param name="Valores">Valores.</param>
        ''' <returns>A soma dos valores.</returns>
        ''' <remarks></remarks>
        Public Shared Function Soma(ByVal ParamArray Valores() As Object) As Double
            Dim Lista As ArrayList = ParamArrayToArrayList(Valores)
            Dim Total As Double = 0
            For Each V As Double In Lista
                Total += V
            Next
            Return Total
        End Function


        ''' <summary>
        ''' Cria filtro baseando na lista de definições de campo/conteúdo.
        ''' </summary>
        ''' <param name="Definicoes">Definições.</param>
        ''' <returns>Critério de filtro.</returns>
        ''' <remarks></remarks>
        Public Shared Function FiltroCampoConteudo(ByVal ParamArray Definicoes() As Object) As String
            Dim Conteudo As ArrayList = ParamArrayToArrayList(Definicoes)
            Dim Result As New StringBuilder
            Dim z As Integer = 0
            Do While z < Conteudo.Count
                If Result.Length > 0 Then
                    Result.Append(" and ")
                End If
                Result.Append(Conteudo(z).ToString)
                z += 1
                Result.Append("=")
                Result.Append(SqlExpr(Conteudo(z)))
                z += 1
            Loop
            Return Result.ToString
        End Function

        ''' <summary>
        ''' Transforma tipo Oracle em Script.
        ''' </summary>
        ''' <param name="data_type">Tipo do dado.</param>
        ''' <param name="data_length">Tamanho da string.</param>
        ''' <param name="data_precision">Precisão do dado (parte inteira de número).</param>
        ''' <param name="data_scale">Escala do dado (parte fracionária do número).</param>
        ''' <returns>Texto representativo em script do tipo Oracle.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoOracleToScript(ByVal data_type As String, ByVal data_length As String, ByVal data_precision As String, ByVal data_scale As String) As String
            Return Microsoft.VisualBasic.Switch(data_type = "VARCHAR2", "VARCHAR2 (" & data_length & ")", data_type = "NUMBER", "NUMBER" & IIf(data_precision <> "", " (" & data_precision & IIf(data_scale <> "", "," & data_scale, "") & ")", ""), True, data_type)
        End Function

        ''' <summary>
        ''' Transforma tipo MSAccess em script.
        ''' </summary>
        ''' <param name="Type">Tipo no ambiente MSAccess.</param>
        ''' <param name="Size">Tamanho no ambiente MSAccess.</param>
        ''' <returns>Tipo no formato script.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoAccessToScript(ByVal Type As Object, ByVal Size As Object) As String
            Dim ret As String
            If Type = 1 Then
                ' boolean
                ret = "BOOLEAN;1"
            ElseIf Type = 5 Then
                ' currency
                ret = "CURRENCY;5"
            ElseIf Type = 8 Then
                ' date
                ret = "DATE;8"
            ElseIf Type = 20 Then
                ' decimal
                ret = "DECIMAL;20"
            ElseIf Type = 6 Then
                ' single
                ret = "SINGLE;6"
            ElseIf Type = 7 Then
                ' double
                ret = "DOUBLE;7"
            ElseIf Type = 3 Then
                ' integer
                ret = "INTEGER;3"
            ElseIf Type = 4 Then
                ' long
                ret = "LONG;4"
            ElseIf Type = 12 Then
                ' memo
                ret = "MEMO;12"
            ElseIf Type = 10 Then
                ' text
                ret = "TEXT;10 (" & Size & ")"
            ElseIf Type = 11 Then
                ' objeto ole
                ret = "OBJETOOLE;11"
            ElseIf Type = 9 Then
                ' binário
                ret = "BINARY;9"
            Else
                Throw New Exception("TipoAccess não previsto:" & Type & ".")
            End If
            Return ret
        End Function

        ''' <summary>
        ''' Tipo MSAccess para script baseando-se no Campo.
        ''' </summary>
        ''' <param name="fld">Campo no MSAccess.</param>
        ''' <returns>Tipo script do campo.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoAccessToScript(ByVal fld As Object) As String
            Return TipoAccessToScript(fld.Type, fld.Size)
        End Function

        ''' <summary>
        ''' Transforma tipo script para MSAccess.
        ''' </summary>
        ''' <param name="Campo">Linha contendo o campo.</param>
        ''' <returns>Retorna formato do tipo script em MSAccess.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoScriptToAccess(ByVal Campo As System.Data.DataRow) As String
            Dim Tam As Integer = 0
            Dim Decim As Integer = 0

            If NZV(Campo("Tipo_Access"), "") <> "" Then
                Return Campo("Tipo_Access")
            End If
            If NZV(Campo("Tipo_Oracle"), "") <> "" Then
                Dim Tipo As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Campo("Tipo_Oracle"), "\w+")
                If Compare(Tipo(0).Value, "NUMBER") Then
                    If Tipo.Count > 1 Then
                        Tam = Tipo(1).Value
                    End If
                    If Tipo.Count > 2 Then
                        Decim = Val(Tipo(2).Value)
                    End If
                    If Tam = 1 And Decim = 0 Then
                        Return "BOOLEAN;1"
                    ElseIf Tam <= 6 And Decim = 0 Then
                        Return "INTEGER;3"
                    ElseIf Tam < 10 And Decim = 0 Then
                        Return "LONG;4"
                    ElseIf Tam <= 18 And Decim = 0 Then
                        Return "DECIMAL;20"
                    ElseIf Tam <= 16 And Decim = 2 Then
                        Return "CURRENCY;5"
                    ElseIf Tam > 16 Or Decim > 2 Then
                        Return "DOUBLE;" & DAO_DataTypeEnum_dbDouble
                    Else
                        Throw New Exception("Tipo NUMÉRICO não previsto no campo " & Campo("Campo") & " em script to access, obtendo de oracle.")
                    End If
                ElseIf Compare(Tipo(0).Value, "FLOAT") Then
                    Return "DOUBLE;" & DAO_DataTypeEnum_dbDouble
                ElseIf Compare(Tipo(0).Value, "DATE") Then
                    Return "DATE;" & DAO_DataTypeEnum_dbDate
                ElseIf Compare(Tipo(0).Value, "CLOB") Then
                    Return "MEMO;" & DAO_DataTypeEnum_dbMemo
                ElseIf Compare(Tipo(0).Value, "BLOB") Then
                    Return "OBJETOOLE;" & DAO_DataTypeEnum_dbBinary
                ElseIf Compare(Tipo(0).Value, "ROWID") Then
                    Return "TEXT;" & DAO_DataTypeEnum_dbText & " (18)"
                ElseIf Compare(Tipo(0).Value, "VARCHAR2") Then
                    If Tipo.Count > 1 Then
                        Tam = Tipo(1).Value
                    End If
                    If Tam < 255 Then
                        Return "TEXT;" & DAO_DataTypeEnum_dbText & " (" & Tipo(1).Value & ")"
                    Else
                        Return "MEMO;" & DAO_DataTypeEnum_dbMemo
                    End If
                ElseIf Compare(Tipo(0).Value, "CHAR") Then
                    Return "TEXT;" & DAO_DataTypeEnum_dbText & " (1)"
                End If
            End If


            If NZV(Campo("Tipo_MySql"), "") <> "" Then
                Dim Tipo As MatchCollection = System.Text.RegularExpressions.Regex.Matches(Campo("Tipo_MySQL"), "\w+")
                If InStr(";BIT;TINYINT;SMALLINT;MEDIUMINT;INT;BITINT;FLOAT;DOUBLE;DECIMAL;DEC;", ";" & UCase(Tipo(0).Value) & ";") <> 0 Then
                    If Tipo.Count > 1 Then
                        Tam = Tipo(1).Value
                    End If
                    If Tipo.Count > 2 Then
                        Decim = Val(Tipo(2).Value)
                    End If
                    If Tam <= 6 And Decim = 0 Then
                        Return "INTEGER;3"
                    ElseIf Tam <= 10 And Decim = 0 Then
                        Return "LONG;4"
                    ElseIf Tam <= 12 And Decim = 0 Then
                        Return "DECIMAL;20"
                    ElseIf Tam <= 16 And Decim = 2 Then
                        Return "CURRENCY;6"
                    ElseIf Tam <= 16 Then
                        Return "DOUBLE;5"
                    Else
                        Throw New Exception("Tipo NUMÉRICO não previsto no campo " & Campo("Campo") & " em script to access, obtendo de oracle.")
                    End If
                ElseIf InStr(";BOOL;BOOLEAN;", ";" & UCase(Tipo(0).Value) & ";") <> 0 Then
                    Return "BOOLEAN;" & DAO_DataTypeEnum_dbBoolean
                ElseIf InStr(";DATE;DATETIME;TIMESTAMP;TIME;YEAR;", ";" & UCase(Tipo(0).Value) & ";") <> 0 Then
                    Return "DATE;" & DAO_DataTypeEnum_dbDate
                ElseIf InStr(";BINARY;VARBINARY;TINYBLOB;BLOB;MEDIUMBLOB;LONGBLOB;", ";" & UCase(Tipo(0).Value) & ";") <> 0 Then
                    Return "OBJETOOLE;" & DAO_DataTypeEnum_dbBinary
                ElseIf InStr(";TEXT;LONGTEXT;", ";" & UCase(Tipo(0).Value) & ";") <> 0 Then
                    Return "MEMO;" & DAO_DataTypeEnum_dbMemo
                ElseIf InStr(";CHAR;VARCHAR;TINYTEXT;MEDIUMTEXT;TEXT;LONGTEXT;", ";" & UCase(Tipo(0).Value) & ";") <> 0 Then
                    If Tipo.Count > 1 Then
                        Tam = Tipo(1).Value
                    End If
                    If Tam < 255 Then
                        Return "TEXT;" & DAO_DataTypeEnum_dbText & " (" & Tipo(1).Value & ")"
                    Else
                        Return "MEMO;" & DAO_DataTypeEnum_dbMemo
                    End If
                End If
            End If
            Throw New Exception("Tipo não previsto no campo " & Campo("Campo") & " em script to access, obtendo de oracle.")
        End Function

        ''' <summary>
        ''' Transforma tipo Script em Oracle.
        ''' </summary>
        ''' <param name="Campo">Linha contendo o campo.</param>
        ''' <returns>Retorna formato texto da representação do script em Oracle.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoScriptToOracle(ByVal Campo As System.Data.DataRow) As String
            If NZV(Campo("Tipo_Oracle"), "") <> "" Then
                Return Campo("Tipo_Oracle")
            End If
            If NZV(Campo("Tipo_Access"), "") <> "" Then
                Dim Tipo As Match = RegexMatches(Campo("Tipo_Access"), "(.*);([0-9]*)($|[ ]*\(([0-9]*)\))")
                If Compare(Tipo.Groups(1).Value, "LONG") Then
                    Return "NUMBER (11,0)"
                ElseIf Compare(Tipo.Groups(1).Value, "BOOLEAN") Then
                    Return "NUMBER (1,0)"
                ElseIf Compare(Tipo.Groups(1).Value, "CURRENCY") Then
                    Return "NUMBER (16,2)"
                ElseIf Compare(Tipo.Groups(1).Value, "DATE") Then
                    Return "DATE"
                ElseIf Compare(Tipo.Groups(1).Value, "DECIMAL") Then
                    Return "NUMBER (12,0)"
                ElseIf Compare(Tipo.Groups(1).Value, "DOUBLE") Then
                    ' LUC-ERA .. NUMBER (16,12) .. TROQUEI PARA DOUBLE, POIS NUMBER NÃO ESTAVA APARECENDO NO ACCESS
                    Return "FLOAT"
                ElseIf Compare(Tipo.Groups(1).Value, "SINGLE") Then
                    Return "NUMBER (8,6)"
                ElseIf Compare(Tipo.Groups(1).Value, "INTEGER") Then
                    Return "NUMBER (6,0)"
                ElseIf Compare(Tipo.Groups(1).Value, "MEMO") Then
                    Return "VARCHAR2 (4000)"
                ElseIf Compare(Tipo.Groups(1).Value, "TEXT") Then
                    Return "VARCHAR2 (" & Tipo.Groups(4).Value & ")"
                ElseIf Compare(Tipo.Groups(1).Value, "OBJETOOLE") Then
                    Return "BLOB"
                Else
                    Throw New Exception("Tipo não previsto no campo " & Campo("Campo") & " em script to oracle, obtendo de Access (" & Tipo.Groups(1).Value & ").")
                    Exit Function
                End If
            End If
            Throw New Exception("Tipo vazio em campo " & Campo("campo") & ".")
        End Function

        ''' <summary>
        ''' Transforma tipo script em formato MYSql.
        ''' </summary>
        ''' <param name="Campo">Linha do campo.</param>
        ''' <returns>Retorna tipo em MYSql do tipo script especificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function TipoScriptToMySQL(ByVal Campo As System.Data.DataRow) As String
            If NZV(Campo("Tipo_MySQL"), "") <> "" Then
                Return Campo("Tipo_MySQL")
            End If
            If NZV(Campo("Tipo_Access"), "") <> "" Then
                Dim Tipo As Match = RegexMatches(Campo("Tipo_Access"), "(.*);([0-9]*)($|[ ]*\(([0-9]*)\))")
                If Compare(Tipo.Groups(1).Value, "LONG") Then
                    Return "INT (11)"
                ElseIf Compare(Tipo.Groups(1).Value, "BOOLEAN") Then
                    Return "INT (1)"
                ElseIf Compare(Tipo.Groups(1).Value, "CURRENCY") Then
                    Return "DECIMAL (16,2)"
                ElseIf Compare(Tipo.Groups(1).Value, "DATE") Then
                    Return "DATETIME"
                ElseIf Compare(Tipo.Groups(1).Value, "DECIMAL") Then
                    Return "INT (12)"
                ElseIf Compare(Tipo.Groups(1).Value, "DOUBLE") Then
                    Return "FLOAT"
                ElseIf Compare(Tipo.Groups(1).Value, "INTEGER") Then
                    Return "INT (6)"
                ElseIf Compare(Tipo.Groups(1).Value, "MEMO") Then
                    Return "TEXT"
                ElseIf Compare(Tipo.Groups(1).Value, "TEXT") Then
                    Return "VARCHAR (" & Tipo.Groups(4).Value & ")"
                ElseIf Compare(Tipo, "OBJETOOLE") Then
                    Return "BLOB"
                Else
                    Throw New Exception("Tipo não previsto no campo " & Campo("Campo") & " em script to oracle, obtendo de Access (" & Tipo.Groups(1).Value & ").")
                    Exit Function
                End If
            End If
            If NZV(Campo("Tipo_Oracle"), "") <> "" Then
                Dim Tipo As Match = RegexMatches(Campo("Tipo_Oracle"), "(.*?)(\ {0,1}\((.*?)\)|$)")
                Select Case (Tipo.Groups(1).Value).ToUpper()
                    Case "NUMBER"
                        Return "DECIMAL " & Trim(Tipo.Groups(2).Value)
                    Case "FLOAT"
                        Return "FLOAT"
                    Case "DATE"
                        Return "DATETIME"
                    Case "CLOB"
                        Return "TEXT"
                    Case "BLOB"
                        Return "BLOB"
                    Case "ROWID"
                        Return "INT (12)"
                    Case "VARCHAR2"
                        Return "VARCHAR (" & Tipo.Groups(3).Value & ")"
                    Case "CHAR"
                        Return "VARCHAR (1)"
                    Case Else
                        Throw New Exception("Tipo não previsto no campo " & Campo("Campo") & " em script To mysql, obtendo de oracle (" & Tipo.Groups(1).Value & ").")
                End Select
            End If
            Throw New Exception("Tipo vazio ou pre-definição de ORACLE não concluída para MYSQL " & Campo("campo") & ".")
        End Function


        ''' <summary>
        ''' Predicados para avaliação de arrays.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Predicados
            Private _valor As Object

            ''' <summary>
            ''' Criação do predicado de pesquisa.
            ''' </summary>
            ''' <param name="Valor">Valor a ser tratado.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Valor As Object)
                _valor = Valor
            End Sub

            ''' <summary>
            ''' Predicado de existência ou não de valor.
            ''' </summary>
            ''' <param name="ValorVetor">Onde será feita a pesquisa.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Function Exists(ByVal ValorVetor As Object) As Boolean
                Try
                    Return ValorVetor = _valor
                Catch
                End Try
                Return False
            End Function
        End Class

        ''' <summary>
        ''' Registra controle como não postback, ou seja, será sempre carregada a página após seu acionamento.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="Ctl">Controle.</param>
        ''' <remarks></remarks>
        Public Shared Sub RegistraControleComoPostBack(ByVal Page As Page, ByVal ParamArray Ctl() As Object)
            Dim Script As Object = Form.BuscaPrimeiroTipo(Page, "System.Web.UI.ScriptManager")
            If Not IsNothing(Script) Then
                For Each Ctl2 As Object In Ctl
                    If Not IsNothing(Ctl2) Then
                        Script.RegisterPostBackControl(Ctl2)
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' Decodifica texto html.
        ''' </summary>
        ''' <param name="Texto">Decodificação de texto html.</param>
        ''' <returns>Retorna texto html decodificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function HTMLD(ByVal Texto As String) As String
            Dim Ret As String = NZ(Texto, "")
            Ret = TiraHtml(Ret)
            Return System.Web.HttpUtility.HtmlDecode(Ret)
        End Function

        ''' <summary>
        ''' Tira tags html do texto.
        ''' </summary>
        ''' <param name="Texto">Texto que será tratado.</param>
        ''' <returns>Texto sem tags html.</returns>
        ''' <remarks></remarks>
        Public Shared Function TiraHtml(ByVal Texto As String) As String
            Texto = Regex.Replace(Texto, "(?Is)<br[ ]*/>", vbCrLf)
            Texto = Regex.Replace(Texto, "(?Is)<br[ ]*></br>", vbCrLf)
            Texto = Regex.Replace(Texto, "<.*?>", "")
            Texto = Regex.Replace(Texto, "</.*?>", "")
            Return Texto
        End Function

        ''' <summary>
        ''' Codifica itens no texto no ecomercial sustenido.
        ''' </summary>
        ''' <param name="Texto">Texto a ser codificado.</param>
        ''' <returns>Retorna texto codificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ItemEncode(ByVal Texto As String) As String
            Texto = NZ(Texto, "")
            Texto = Texto.Replace("&", "&#38&")
            Texto = Texto.Replace("_", "&#95&")
            Texto = Texto.Replace(";", "&#59&")
            Texto = Texto.Replace("""", "&#34&")
            Texto = Texto.Replace("|", "&#124&")
            Texto = Texto.Replace(":", "&#58&")
            Return Texto.Replace("&", "_")
        End Function

        ''' <summary>
        ''' Decodifica itens do texto no formato ecomercial sustenido.
        ''' </summary>
        ''' <param name="texto">Texto a ser decodificado.</param>
        ''' <returns>Texto codificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ItemDecode(ByVal texto As String) As String
            texto = Regex.Replace(texto, "_(#[0-9]{1,3})_", "&$1;")
            Return HttpUtility.HtmlDecode(texto)
        End Function

        ''' <summary>
        ''' Decodificação de termos em url.
        ''' </summary>
        ''' <param name="Texto">Url a ser decodificada.</param>
        ''' <returns>Url contendo dois pontos, barra, ecomercial e sinal de igual.</returns>
        ''' <remarks></remarks>
        Public Shared Function QueryDecode(ByVal Texto As String) As String
            Texto = NZ(Texto, "")
            Texto = Texto.Replace("%3a", ":")
            Texto = Texto.Replace("%2f", "/")
            Texto = Texto.Replace("%26", "&")
            Texto = Texto.Replace("%3d", "=")
            Return Texto
        End Function

        ''' <summary>
        ''' Recupera conteúdo de controles em container.
        ''' </summary>
        ''' <param name="Container">Container com os controles.</param>
        ''' <param name="Conteudo">Conteúdo que será distribuído entre os controles.</param>
        ''' <remarks></remarks>
        Public Shared Sub RecuperaControles(ByVal Container As Object, ByVal Conteudo As String)
            For Each Item As String In Split(Conteudo, ";")
                If Trim(Item) <> "" Then
                    Dim ItemD() As String = Split(Item, ":")
                    Dim CampoId As String = ItemDecode(ItemD(0))
                    Dim CampoConteudo As String = ItemDecode(ItemD(1))
                    Dim Ctl As Object = Form.FindGeral(Container, CampoId)
                    If Not IsNothing(Ctl) Then
                        Prop(Ctl) = CampoConteudo
                    End If
                End If
            Next
        End Sub

        ''' <summary>
        ''' Salva conteúdo de controles em string para recuperação futura.
        ''' </summary>
        ''' <param name="Container">Container que possui os controles.</param>
        ''' <param name="Prefix">Prefixo de pesquisa.</param>
        ''' <param name="Ignorar">Nomes de controles a serem ignorados no processo separados por ponto e vírgula.</param>
        ''' <returns>Retorna texto da concatenação de todos os conteúdos dos controles encontrados..</returns>
        ''' <remarks></remarks>
        Public Shared Function SalvaControles(ByVal Container As Object, ByVal Prefix As String, ByRef Ignorar As String) As String
            Dim Ret As New StringBuilder

            Try
                Dim id As String = Container.id
                If Not TemNaLista(Ignorar, Container.UniqueId) Then
                    Ignorar &= Container.uniqueid & ";"
                    If Prefix = "" OrElse id.StartsWith(Prefix, StringComparison.OrdinalIgnoreCase) Then
                        Ret.Append(ItemEncode(id))
                        Ret.Append(":" & ItemEncode(NZV(Prop(Container), "")))
                        Ret.Append(";")
                    End If
                End If
            Catch
            End Try

            Dim Cont As Object = Container
            Try
                Dim QtdControls As Integer = Container.Controls.Count()
                If QtdControls > 0 Then
                    Cont = Container.Controls
                End If
            Catch
            End Try

            Try
                For Each Ctl As Object In Cont
                    Dim ContSub As Object = Ctl
                    Try
                        Dim QtdControls As Integer = Ctl.Controls.count
                        If QtdControls > 0 Then
                            ContSub = Ctl.Controls
                        End If
                    Catch
                    End Try
                    For Each SubCtl As Object In ContSub
                        Ret.Append(SalvaControles(SubCtl, Prefix, Ignorar))
                    Next
                Next
            Catch
            End Try
            Return Ret.ToString
        End Function

        ''' <summary>
        ''' Recupera conteúdo de controles dos parâmetros do formulário.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="Pref">Prefixo.</param>
        ''' <remarks></remarks>
        Shared Sub RecuperaDoForm(ByVal Page As Page, ByVal Pref As String)
            For Each Item As String In Page.Request.Form
                If Item.StartsWith(Pref) Then
                    Prop(Page.FindControl(Item)) = Page.Request.Form(Item)
                End If
            Next
        End Sub


        ''' <summary>
        ''' Obtem cor considerando vários formatos exemplos: sustenido..., B16_..., FF000000, ecomercial... ou nome da cor.
        ''' </summary>
        ''' <param name="CorEspec">Especificação da cor.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Shared Function ObtemCor(ByVal CorEspec As Object) As Color
            Try
                If TypeOf (CorEspec) Is System.Drawing.Color Then
                    Return CorEspec
                ElseIf TypeOf (CorEspec) Is String Then
                    If CorEspec.StartsWith("#") Then
                        Dim H As String = Mid(CorEspec, 2)
                        H = Microsoft.VisualBasic.Left("FF000000", 8 - Len(H)) & H
                        Return Color.FromArgb(Val("&h" & H))
                    ElseIf CorEspec.StartsWith("B16_", StringComparison.OrdinalIgnoreCase) Then
                        Dim H As String = Mid(CorEspec, 5)
                        H = Microsoft.VisualBasic.Left("FF000000", 8 - Len(H)) & H
                        Return Color.FromArgb(Val("&h" & H))
                    Else
                        Return Color.FromName(CorEspec)
                    End If
                Else
                    Throw New Exception("Tipo de especificação de cor não previsto pela função.")
                End If
            Catch
            End Try
            Return Color.Transparent
        End Function

        ''' <summary>
        ''' Grava o registro do aplicativo no RegEdit.
        ''' </summary>
        ''' <param name="Key">String que servirá como chave.</param>
        ''' <value></value>
        ''' <returns>Chave com o nome do produto.</returns>
        ''' <remarks></remarks>
        Public Shared Property RegApl(ByVal Key As String) As String
            Get
                Return RegAplKey(My.Application.Info.ProductName, Key)
            End Get
            Set(ByVal value As String)
                RegAplKey(My.Application.Info.ProductName, Key) = value
            End Set
        End Property

        ''' <summary>
        ''' Grava o Registro do Usuário no RegEdit.
        ''' </summary>
        ''' <param name="Usuario"></param>
        ''' <param name="Key"></param>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Property RegAplUsu(ByVal Usuario As String, ByVal Key As String) As String
            Get
                Return RegAplKey(My.Application.Info.ProductName, Usuario & "_" & Key)
            End Get
            Set(ByVal value As String)
                RegAplKey(My.Application.Info.ProductName, Usuario & "_" & Key) = value
            End Set
        End Property

        ''' <summary>
        ''' Trata entrada no regedit sessão apl.
        ''' </summary>
        ''' <param name="NomeApl">Nome do aplicativo.</param>
        ''' <param name="Param">Parâmetro desejado.</param>
        ''' <param name="Empresa">Empresa, default Intercraft.</param>
        ''' <value>Valor do parâmetro.</value>
        ''' <returns>Retorna valor do parâmetro do regedit.</returns>
        ''' <remarks></remarks>
        Shared Property RegAplKey(ByVal NomeApl As String, ByVal Param As String, Optional ByVal Empresa As String = "Intercraft") As String
            Get
                Return RegMachineKey(ExprExpr("\", "/", "SOFTWARE", Empresa, NomeApl), Param)
            End Get
            Set(ByVal value As String)
                RegMachineKey(ExprExpr("\", "/", "SOFTWARE", Empresa, NomeApl), Param) = value
            End Set
        End Property

        ''' <summary>
        ''' Trata entrada no regedit sessão máquina.
        ''' </summary>
        ''' <param name="Local">Local.</param>
        ''' <param name="Param">Parâmetro desejado.</param>
        ''' <value>Valor do parâmetro.</value>
        ''' <returns>Valor do parâmetro.</returns>
        ''' <remarks></remarks>
        Shared Property RegMachineKey(ByVal Local As String, ByVal Param As String) As String
            Get
                Dim Reg As RegistryKey
                Dim Ret As Object = Nothing
                Reg = Registry.LocalMachine.OpenSubKey(Local)
                If Not IsNothing(Reg) Then
                    Ret = Reg.GetValue(Param)
                End If
                Return Ret
            End Get
            Set(ByVal value As String)
                Dim Reg As RegistryKey = Registry.LocalMachine
                Dim RegNovo As RegistryKey
                RegNovo = Registry.LocalMachine.OpenSubKey(Local, True)
                If IsNothing(RegNovo) Then
                    RegNovo = Reg.CreateSubKey(Local)
                End If
                If Not IsNothing(RegNovo) Then
                    RegNovo.SetValue(Param, value)
                    RegNovo.Close()
                End If
                Reg.Close()
                RegNovo.Close()
            End Set
        End Property

        ''' <summary>
        ''' Classe para replicação de conteúdos (diretórios em rede etc).
        ''' </summary>
        ''' <remarks></remarks>
        Public Class DirReplica

            ''' <summary>
            ''' Cria instrução para replicação de diretórios.
            ''' </summary>
            ''' <param name="DirOrigem">Diretório de origem que permanecerá inalterado.</param>
            ''' <param name="DirDestino">Diretório de destino, que será alterado.</param>
            ''' <param name="IncluirSubDir">Incluir sub-diretórios?</param>
            ''' <param name="ApagarQuandoEncontrar">Apagar quais arquivos quando encontrar (thumbmail por exemplo)?</param>
            ''' <remarks></remarks>
            Sub New(ByVal DirOrigem As String, ByVal DirDestino As String, ByVal IncluirSubDir As Boolean, Optional ByVal ApagarQuandoEncontrar As String = "")
                Me.DirOrigem = DirOrigem
                Me.DirDestino = DirDestino
                Me.IncluiSub = IncluirSubDir
                Me._ApagarQuandoEncontrar = ApagarQuandoEncontrar
            End Sub
            Private _ApagarQuandoEncontrar As String
            Private _dirorigem As String

            ''' <summary>
            ''' Diretório de origem.
            ''' </summary>
            ''' <value>Diretório de origem.</value>
            ''' <returns>Diretório de origem.</returns>
            ''' <remarks></remarks>
            Public Property DirOrigem() As String
                Get
                    Return _dirorigem
                End Get
                Set(ByVal value As String)
                    _dirorigem = value
                End Set
            End Property

            Private _dirdestino As String

            ''' <summary>
            ''' Diretório de destino.
            ''' </summary>
            ''' <value>Diretório de destino.</value>
            ''' <returns>Diretório de destino.</returns>
            ''' <remarks></remarks>
            Public Property DirDestino() As String
                Get
                    Return _dirdestino
                End Get
                Set(ByVal value As String)
                    _dirdestino = value
                End Set
            End Property

            Private _incluisub As Boolean

            ''' <summary>
            ''' Inclui sub-diretório.
            ''' </summary>
            ''' <value>Inclui sub-diretório.</value>
            ''' <returns>Inclui sub-diretório.</returns>
            ''' <remarks></remarks>
            Public Property IncluiSub() As Boolean
                Get
                    Return _incluisub
                End Get
                Set(ByVal value As Boolean)
                    _incluisub = value
                End Set
            End Property

            Private _qtdarqs As Integer

            ''' <summary>
            ''' Quantidade de arquivos.
            ''' </summary>
            ''' <value>Quantidade de arquivos.</value>
            ''' <returns>Quantidade de arquivos.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property QtdArqs() As Integer
                Get
                    Return _qtdarqs
                End Get
            End Property

            ''' <summary>
            ''' Executa rotina de notificação de status externa (carregada por delegate).
            ''' </summary>
            ''' <remarks></remarks>
            Public Event NotificaStatus()

            Private _status As String

            ''' <summary>
            ''' Status do sincronismo.
            ''' </summary>
            ''' <value>Status do sincronismo.</value>
            ''' <returns>Status do sincronismo.</returns>
            ''' <remarks></remarks>
            Public Property Status() As String
                Get
                    Return _status
                End Get
                Set(ByVal value As String)
                    _status = value
                End Set
            End Property

            Private _inicio As Date = Nothing

            ''' <summary>
            ''' Início da replicação.
            ''' </summary>
            ''' <value>Início da replicação.</value>
            ''' <returns>Início da replicação.</returns>
            ''' <remarks></remarks>
            Public Property Inicio() As Date
                Get
                    Return _inicio
                End Get
                Set(ByVal value As Date)
                    _inicio = value
                End Set
            End Property

            Private _termino As Date = Nothing

            ''' <summary>
            ''' Término da replicação.
            ''' </summary>
            ''' <value>Término da replicação.</value>
            ''' <returns>Término da replicação.</returns>
            ''' <remarks></remarks>
            Public Property Termino() As Date
                Get
                    Return _termino
                End Get
                Set(ByVal value As Date)
                    _termino = value
                End Set
            End Property

            Private _logdetalhado As Boolean = False

            ''' <summary>
            ''' Registro de log detalhado.
            ''' </summary>
            ''' <value>Registro de log detalhado.</value>
            ''' <returns>Registro de log detalhado.</returns>
            ''' <remarks></remarks>
            Public Property LogDetalhado() As Boolean
                Get
                    Return _logdetalhado
                End Get
                Set(ByVal value As Boolean)
                    _logdetalhado = value
                End Set
            End Property

            Private _log As New StringBuilder

            ''' <summary>
            ''' Registro de log.
            ''' </summary>
            ''' <value>Registro de log.</value>
            ''' <returns>Registro de log.</returns>
            ''' <remarks></remarks>
            Public Property Log() As StringBuilder
                Get
                    Return _log
                End Get
                Set(ByVal value As StringBuilder)
                    _log = value
                End Set
            End Property

            ''' <summary>
            ''' Execução da replicação de arquivo.
            ''' </summary>
            ''' <param name="Arquivo">Arquivo a ser replicado.</param>
            ''' <param name="DirOrigem">Diretório de origem.</param>
            ''' <param name="DirDestino">Diretório de destino.</param>
            ''' <param name="ArquivoDest">Arquivo de destino.</param>
            ''' <remarks></remarks>
            Private Sub Trata(ByVal Arquivo As String, ByVal DirOrigem As String, ByVal DirDestino As String, Optional ByVal ArquivoDest As String = "")
                Try
                    If ArquivoDest = "" Then
                        ArquivoDest = Arquivo
                    End If

                    Dim ArqO As String = FileExpr(DirOrigem, Arquivo)
                    Dim ArqD As String = FileExpr(DirDestino, ArquivoDest)


                    Dim Tratou As Boolean = False
                    If _ListaApagar.Length > 0 Then
                        For Each Item As String In _ListaApagar
                            Try
                                If Item <> "" AndAlso Arquivo Like Item Then
                                    Try
                                        If System.IO.File.Exists(ArqO) Then
                                            System.IO.File.SetAttributes(ArqO, FileAttributes.Archive)
                                            System.IO.File.Delete(ArqO)
                                            RegLog("Eliminado arquivo " & ArqO & " por corresponder à máscara '" & Item & "'")
                                        End If
                                    Catch ex As Exception
                                        RegLog("[FALHA] " & ex.Message & " ao tentar excluir arquivo " & ArqO)
                                    End Try
                                    Try
                                        If System.IO.File.Exists(ArqD) Then
                                            System.IO.File.SetAttributes(ArqD, FileAttributes.Archive)
                                            System.IO.File.Delete(ArqD)
                                            RegLog("Eliminado arquivo " & ArqD & " por corresponder à máscara '" & Item & "'")
                                        End If
                                    Catch ex As Exception
                                        RegLog("[FALHA] " & ex.Message & " ao tentar excluir arquivo " & ArqD)
                                    End Try
                                    Tratou = True
                                    Exit For
                                End If
                            Catch ex As Exception
                                RegLog("[FALHA] " & ex.Message & " ao tentar validar expressão " & Item & " para arquivo " & Arquivo)
                            End Try
                        Next
                    End If

                    If Not Tratou Then
                        Dim AtribOrigem As New System.IO.FileInfo(ArqO)
                        Dim AtribDestino As New System.IO.FileInfo(ArqD)
                        If AtribOrigem.Exists Then
                            Dim TempoDif As Boolean = False
                            Try
                                TempoDif = AtribOrigem.LastWriteTime <> AtribDestino.LastWriteTime
                            Catch ex As Exception
                                RegLog("[FALHA] " & ex.Message & " ao tentar obter lastwritetime de " & ArqD)
                            End Try

                            If (Not AtribDestino.Exists) OrElse TempoDif OrElse (AtribOrigem.Length <> AtribDestino.Length) Then
                                Try
                                    FileCopy(ArqO, ArqD)
                                Catch EX As System.IO.DirectoryNotFoundException
                                    Try
                                        CriaDir(DirDestino)
                                        FileCopy(ArqO, ArqD)
                                    Catch Ex2 As Exception
                                        RegLog("[FALHA] " & Ex2.Message & " ao tentar copiar " & ArqO & " para " & ArqD)
                                    End Try
                                Catch ex As Exception
                                    RegLog("[FALHA] " & ex.Message & " ao tentar copiar " & ArqO & " para " & ArqD)
                                End Try
                            End If
                        End If
                    End If
                Catch ex As Exception
                    RegLog("[FALHA] " & ex.Message & " ao tentar copiar " & Arquivo & " para " & ArquivoDest)
                End Try
            End Sub

            ''' <summary>
            ''' Registro de log de sincronização.
            ''' </summary>
            ''' <param name="Texto">Mensagem que será registrada.</param>
            ''' <remarks></remarks>
            Private Sub RegLog(ByVal Texto As String)
                Log.AppendLine(Format(Now, "ddd HH:mm:ss") & " - " & Texto)
            End Sub

            ''' <summary>
            ''' Apaga arquivo.
            ''' </summary>
            ''' <param name="Arquivo">Arquivo que será apagado.</param>
            ''' <param name="Diretorio">Diretório onde se encontra este arquivo.</param>
            ''' <remarks></remarks>
            Private Sub Apaga(ByVal Arquivo As String, ByVal Diretorio As String)
                Try
                    Dim Arq As String = FileExpr(Diretorio, Arquivo)
                    Kill(Arq)
                    If LogDetalhado Then
                        RegLog("Apagou " & Arq)
                    End If
                Catch Ex As Exception
                    RegLog("[FALHA] " & Ex.Message & " ao tentar excluir " & Arquivo & " do diretório " & Diretorio)
                End Try
            End Sub

            ''' <summary>
            ''' Criação de diretório.
            ''' </summary>
            ''' <param name="Diretorio">Diretório que será criado.</param>
            ''' <remarks></remarks>
            Private Sub CriaDir(ByVal Diretorio As String)
                Try
                    MkDir(Diretorio)
                    If LogDetalhado Then
                        RegLog("Criou " & Diretorio)
                    End If
                Catch ex As Exception
                    RegLog("[FALHA] " & ex.Message & " ao tentar criar diretório " & Diretorio)
                End Try
            End Sub

            Dim UltNotif As String = ""

            ''' <summary>
            ''' Registro de notificação de status.
            ''' </summary>
            ''' <param name="Texto">Texto a notificar.</param>
            ''' <param name="Forcar">Grava mensagem e manda para função de notificação agora.</param>
            ''' <remarks></remarks>
            Private Sub Notifica(ByVal Texto As String, Optional ByVal Forcar As Boolean = False)
                Dim Notif As String = Format(Now, "ss")
                If UltNotif <> Notif Or Forcar Then
                    Status = Texto
                    UltNotif = Notif
                    RaiseEvent NotificaStatus()
                End If
            End Sub

            ''' <summary>
            ''' Execução do processo de replicação.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub Executa()
                Try
                    Inicio = Now
                    Dim Ocorr As String = "Início de replicação de " & DirOrigem & " para " & DirDestino
                    Notifica(Ocorr, True)
                    RegLog(Ocorr)

                    Executa(DirOrigem, DirDestino)
                    Termino = Now

                    Ocorr = "Término (" & QtdArqs & Pl(QtdArqs, " arquivo") & " | duração: " & ExibeSegs(DateDiff(DateInterval.Second, Inicio, Termino), ExibeSegsOpc.xh_ymin_zseg) & ")"
                    Notifica(Ocorr, True)
                    RegLog(Ocorr)
                Catch ex As Exception
                    RegLog("[FALHA] " & ex.Message & " ao tentar executar sincronização entre " & DirOrigem & " e " & DirDestino)
                End Try
            End Sub

            Private DirBloqueado() As String = {"$RECYCLE.BIN", "System Volume Information"}

            ''' <summary>
            ''' Verifica se caminho está bloqueado.
            ''' </summary>
            ''' <param name="Caminho">Caminho.</param>
            ''' <returns>True caso esteja na lista de caminhos bloqueados ou false caso contrário.</returns>
            ''' <remarks></remarks>
            Private Function Bloqueado(ByVal Caminho As String) As Boolean
                Try
                    Dim Disco As String = System.IO.Path.GetPathRoot(Caminho)
                    Caminho = Mid(Caminho, Len(Disco) + 1) & "\"
                    For Each Item As String In DirBloqueado
                        If Caminho.StartsWith(Item & "\") Then
                            Return True
                        End If
                    Next
                Catch ex As Exception
                    RegLog("[FALHA] " & ex.Message & " ao verificar se caminho " & Caminho & " está na lista de itens bloqueados")
                End Try
                Return False
            End Function

            ''' <summary>
            ''' Garante gravação adequada do arquivo.
            ''' </summary>
            ''' <param name="Arquivo">Arquivo.</param>
            ''' <param name="DirOrigem">Diretório de origem.</param>
            ''' <param name="DirDestino">Diretório de destino.</param>
            ''' <param name="ArquivoDest">Arquivo de destino.</param>
            ''' <remarks></remarks>
            Private Sub Garante(ByVal Arquivo As String, ByVal DirOrigem As String, ByVal DirDestino As String, Optional ByVal ArquivoDest As String = "")
                Try
                    If ArquivoDest = "" Then
                        ArquivoDest = Arquivo
                    End If

                    If Not System.IO.File.Exists(FileExpr(DirOrigem, Arquivo)) AndAlso System.IO.File.Exists(FileExpr(DirDestino, Arquivo)) Then
                        Apaga(ArquivoDest, DirDestino)
                    End If
                Catch ex As Exception
                    RegLog("[FALHA] " & ex.Message & " ao buscar garantias de igualdade entre origem " & DirOrigem & "..." & Arquivo & " e " & DirDestino & "..." & ArquivoDest)
                End Try
            End Sub

            Private _ListaApagar() As String = {}

            ''' <summary>
            ''' Executa replicação de diretório de origem para réplica.
            ''' </summary>
            ''' <param name="Origem">Diretório de origem.</param>
            ''' <param name="Destino">Diretório de réplica.</param>
            ''' <remarks></remarks>
            Private Sub Executa(ByVal Origem As String, ByVal Destino As String)
                Try
                    _ListaApagar = Split(_ApagarQuandoEncontrar, vbCrLf)
                    If _ListaApagar.Length = 1 AndAlso Trim(_ListaApagar(0)) = "" Then
                        _ListaApagar = New String() {}
                    End If

                    ' garante todos os arquivos da origem no destino
                    If System.IO.Directory.Exists(Origem) Then


                        For Each Arq As String In System.IO.Directory.GetFiles(Origem)
                            If Not Bloqueado(Arq) Then
                                Notifica(Origem)

                                Dim ArqA As String = System.IO.Path.GetFileName(Arq)
                                Trata(ArqA, Origem, Destino)
                                _qtdarqs += 1
                            End If
                        Next

                        ' garante que não tenha nenhum a mais
                        If System.IO.Directory.Exists(Destino) Then
                            For Each Arq As String In System.IO.Directory.GetFiles(Destino)
                                If Not Bloqueado(Arq) Then
                                    Notifica(Arq)

                                    Dim ArqA As String = System.IO.Path.GetFileName(Arq)
                                    Garante(ArqA, Origem, Destino)
                                End If
                            Next
                        Else
                            CriaDir(Destino)
                        End If

                        ' diretório que existem na origem
                        For Each Dir As String In System.IO.Directory.GetDirectories(Origem)
                            If Not Bloqueado(Dir) Then
                                Notifica(Dir)

                                Dim DirA As String = System.IO.Path.GetFileName(Dir)
                                If IncluiSub Then
                                    Executa(Dir, FileExpr(Destino, DirA))
                                End If
                            End If
                        Next

                        ' diretórios existentes no destino sem origem
                        For Each Dir As String In System.IO.Directory.GetDirectories(Destino)
                            If Not Bloqueado(Dir) Then
                                Notifica(Dir)

                                Dim DirA As String = System.IO.Path.GetFileName(Dir)
                                If Not System.IO.Directory.Exists(FileExpr(Origem, DirA)) Then
                                    ApagaDir(Dir)
                                End If
                            End If
                        Next
                    Else
                        Dim OrigArq As String = System.IO.Path.GetFileName(Origem)
                        If OrigArq <> "" Then
                            Dim OrigSemArq As String = System.IO.Path.GetDirectoryName(Origem)
                            Dim DestArq As String = System.IO.Path.GetFileName(Destino)
                            Dim DestSemArq As String = System.IO.Path.GetDirectoryName(Destino)

                            Trata(OrigArq, OrigSemArq, DestSemArq, DestArq)
                            _qtdarqs += 1
                            Garante(OrigArq, OrigSemArq, DestSemArq, DestArq)

                        End If
                    End If
                Catch ex As Exception
                    RegLog("[FALHA] " & ex.Message & " ao executar sincronização entre origem " & Origem & " e destino " & Destino)
                End Try
            End Sub

            ''' <summary>
            ''' Apagar diretório.
            ''' </summary>
            ''' <param name="Diretorio">Diretório a ser eliminado.</param>
            ''' <remarks></remarks>
            Sub ApagaDir(ByVal Diretorio As String)
                Try
                    System.IO.Directory.Delete(Diretorio, True)
                    If LogDetalhado Then
                        RegLog("Apagou " & Diretorio)
                    End If
                Catch EX As Exception
                    RegLog("[FALHA] ao apagar diretório " & Diretorio & ": " & EX.Message)
                End Try
            End Sub

        End Class


        ''' <summary>
        ''' Retorna termo no singular ou plural conforme a quantidade.
        ''' </summary>
        ''' <param name="Numero">Número a ser tratado.</param>
        ''' <param name="Singular">Termo no singular.</param>
        ''' <param name="Plural">Termo no plural caso seja diferente de 's' no final.</param>
        ''' <returns>Texto com número do termo concordando com a quantidade.</returns>
        ''' <remarks></remarks>
        Public Shared Function Pl(ByVal Numero As Object, ByVal Singular As String, Optional ByVal Plural As String = "") As String
            Return IIf(Numero = 1, Singular, NZV(Plural, Singular & IIf(Char.IsLower(Microsoft.VisualBasic.Right(Singular, 1)), "s", "S")))
        End Function

        ''' <summary>
        ''' Número no singular ou plural conforme quantidade.
        ''' </summary>
        ''' <param name="Numero">Número a ser tratado.</param>
        ''' <param name="Singular">Termo no singular.</param>
        ''' <param name="Plural">Termo no plural caso seja diferente de acrescentar 's' no final.</param>
        ''' <returns>Texto com número do termo concordando com a quantidade.</returns>
        ''' <remarks></remarks>
        Public Shared Function NumPl(ByVal Numero As Object, ByVal Singular As String, Optional ByVal Plural As String = "") As String
            Return Numero & " " & Pl(Numero, Singular, Plural)
        End Function

        ''' <summary>
        ''' Execução de comando dos.
        ''' </summary>
        ''' <param name="Comando">Comando.</param>
        ''' <param name="Argumento">Argumentos.</param>
        ''' <param name="Diretorio">Diretório de início.</param>
        ''' <param name="Entrada">Fluxo de entrada.</param>
        ''' <param name="Erros">Fluxo de saída de erros.</param>
        ''' <param name="Usuario">Usuário que executa.</param>
        ''' <param name="Senha">Senha do usuário para executar o comando.</param>
        ''' <param name="Dominio">Domínio.</param>
        ''' <param name="EsperaSegs">Espera em segundos.</param>
        ''' <returns>Log de execução (retorno no fluxo de saída padrão).</returns>
        ''' <remarks></remarks>
        Public Shared Function DosShell(ByVal Comando As String, ByVal Argumento As String, ByVal Diretorio As String, ByVal Entrada As String, ByRef Erros As String, Optional ByVal Usuario As String = "", Optional ByVal Senha As String = "", Optional ByVal Dominio As String = "", Optional ByVal EsperaSegs As Integer = 30) As String
            Dim Result As String = ""
            Try
                Dim Proc As System.Diagnostics.Process = Nothing
                Dim StdIn As System.IO.StreamWriter = Nothing
                Dim StdOut As System.IO.StreamReader = Nothing
                Dim StdErr As System.IO.StreamReader = Nothing

                If Diretorio = "" Then
                    Diretorio = TemporaryDir()
                End If

                Dim Psi As New System.Diagnostics.ProcessStartInfo(Comando, Argumento)
                Psi.CreateNoWindow = True
                Psi.ErrorDialog = False
                Psi.UseShellExecute = False
                Psi.RedirectStandardError = True
                Psi.RedirectStandardInput = True
                Psi.RedirectStandardOutput = True
                Psi.WorkingDirectory = Diretorio

                If Usuario <> "" Then
                    Psi.UserName = Usuario
                End If
                If Senha <> "" Then
                    Psi.Password = New System.Security.SecureString
                    For z As Integer = 1 To Len(Senha)
                        Psi.Password.AppendChar(Mid(Senha, z, 1))
                    Next
                End If
                If Dominio <> "" Then
                    Psi.Domain = Dominio
                End If

                Proc = System.Diagnostics.Process.Start(Psi)

                StdIn = Proc.StandardInput
                StdOut = Proc.StandardOutput
                StdErr = Proc.StandardError

                If Entrada <> "" Then
                    StdIn.WriteLine(Entrada)
                End If
                Result = StdOut.ReadToEnd()
                Erros = StdErr.ReadToEnd()
                Proc.WaitForExit(30)
            Catch ex As Exception
                Result = MessageEx(ex, "Executando comando")
            End Try
            Return Result
        End Function

        ''' <summary>
        ''' Executa um comando em DOS.
        ''' </summary>
        ''' <param name="Comando">Comando que será executado.</param>
        ''' <param name="Evento">Evento que ativará a função.</param>
        ''' <returns>Retorna de saída do comando executado no DOS.</returns>
        ''' <remarks></remarks>
        Public Function DosShell(ByVal Comando As String, ByVal Evento As EventHandler) As String
            Dim Temp As String = System.IO.Path.GetTempFileName()
            Dim p As Process = New Process
            p.StartInfo.FileName = "CMD"
            p.StartInfo.Arguments = "/C """ & Comando & """ > " & Temp
            p.StartInfo.RedirectStandardOutput = False
            p.StartInfo.UseShellExecute = True
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
            p.Start()
            While Not p.HasExited
                System.Windows.Forms.Application.DoEvents()
                If Not IsNothing(Evento) Then
                    Evento.Invoke(Me, Nothing)
                End If
                p.WaitForExit(10)
            End While
            p.Dispose()
            p.Close()
            Dim Ret As String = CarregaArqTxt(Temp)
            Kill(Temp)
            Return Ret
        End Function

        ''' <summary>
        ''' Procura arquivo em diretórios do disco.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="Arquivo">Arquivo que será procurado.</param>
        ''' <param name="DirInicial">Diretório inicial podendo ser relativo.</param>
        ''' <param name="Raiz">Raiz para composição do diretório absoluto.</param>
        ''' <returns>Arquivo encontrado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ProcuraArq(ByVal Page As Page, ByVal Arquivo As String, Optional ByVal DirInicial As String = "", Optional ByVal Raiz As String = "") As String
            If NZV(DirInicial, "") = "" Then
                DirInicial = Page.ResolveUrl(Page.Request.Url.AbsolutePath)
            End If
            Dim Corrente As String = System.IO.Path.GetDirectoryName(FileExpr(DirInicial))

            If NZV(Raiz, "") = "" Then
                Raiz = Page.ResolveUrl("~/")
            End If
            Raiz = System.IO.Path.GetDirectoryName(FileExpr(Raiz))

            Do While Len(Corrente) >= Len(Raiz)
                Dim Arq = FileExpr(Corrente, Arquivo)

                If System.IO.File.Exists(Arq) Then
                    Return Arq
                End If
                Corrente = System.IO.Path.GetDirectoryName(Corrente & ".x")
            Loop
            Return ""
        End Function

        ''' <summary>
        ''' Inclui campo.
        ''' </summary>
        ''' <param name="PAGE">Página.</param>
        ''' <param name="Container">Container onde será criado o controle.</param>
        ''' <param name="Prefixo">Prefixo do controle a ser criado.</param>
        ''' <param name="Nome">Nome que será acrescentado no prefixo.</param>
        ''' <param name="LarguraCampo">Largura do campo em px.</param>
        ''' <param name="Tipo">Tipo de controle.</param>
        ''' <param name="Etiqueta">Nome da etiqueta.</param>
        ''' <param name="LarguraEtiq">Largura da etiqueta em px.</param>
        ''' <param name="ToolTip">Texto de auxílio.</param>
        ''' <param name="ExtendedProps">Propriedades extendidas para controle.</param>
        ''' <param name="Formato">Formato do controle.</param>
        ''' <param name="Tamanho">Tamanho do controle.</param>
        ''' <param name="Auto">Condição de auto.</param>
        ''' <param name="ValorPadrao">Valor padrão.</param>
        ''' <param name="Sistema">Sistema.</param>
        ''' <param name="Tabela">Tabela.</param>
        ''' <param name="StrGerador">String de configuração de gerador.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="Bloqueado">Cria campo bloqueado.</param>
        ''' <returns>Retorna controle criado.</returns>
        ''' <remarks></remarks>
        <Obsolete("Utilizada enquanto não são gerados os formulários automaticos")> Shared Function IncluiCampo(ByVal PAGE As Page, ByVal Container As Web.UI.ControlCollection, ByVal Prefixo As String, ByVal Nome As String, ByVal LarguraCampo As String, ByVal Tipo As String, ByVal Etiqueta As String, ByVal LarguraEtiq As String, ByVal ToolTip As String, ByVal ExtendedProps As String, ByVal Formato As String, ByVal Tamanho As String, ByVal Auto As String, ByVal ValorPadrao As String, ByVal Sistema As String, ByVal Tabela As String, ByVal StrGerador As String, ByVal StrConn As String, ByVal Bloqueado As Boolean) As Control
            Dim etiq As Panel = Nothing
            Dim lbl As Label

            If Not Nome Like "SYS_*" Then

                ' disponibiliza propriedades do gerador...
                Dim Props As ElementosStr = New ElementosStr(ExtendedProps)

                ' verifica formato
                If Formato = "" Then
                    If Compare(Tipo, "System.Boolean") Then
                        Formato = "BOOL"
                    ElseIf Compare(Tipo, "System.Decimal") Then
                        Formato = "CURRENCY"
                    ElseIf Compare(Tipo, "System.Byte") Or Compare(Tipo, "System.Int32") Then
                        Formato = "INTEGER"
                    ElseIf Compare(Tipo, "System.Double") Or Compare(Tipo, "System.Single") Then
                        Formato = "REAL"
                    ElseIf Compare(Tipo, "System.DateTime") Then
                        Formato = "dd\/MM\/yyyy"
                    End If
                End If

                ' inclui etiqueta
                If Etiqueta <> "" Then
                    etiq = New Panel
                    etiq.Style("text-align") = "left"
                    etiq.Style("float") = "left"
                    etiq.Style("margin-left") = "20px"
                    etiq.ID = "divlbl" & Nome
                    etiq.CssClass = "icftform_etiq"
                    etiq.Style.Add("width", LarguraEtiq & "px")
                    etiq.ToolTip = ToolTip

                    Dim etiqlbl As New Label
                    etiqlbl.ID = "lbl" & Nome
                    etiqlbl.Text = Etiqueta

                    etiq.Controls.Add(etiqlbl)
                    Container.Add(etiq)
                End If

                ' campo, caso seja booleano <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                If Compare(Formato, "bool") Then
                    Dim bool As CheckBox

                    bool = New CheckBox
                    bool.ID = Prefixo & Nome
                    bool.CssClass = "icftform_checkbox"
                    bool.ToolTip = ToolTip
                    bool.Attributes("ValorPadrao") = ValorPadrao
                    bool.Style.Add("position", "relative")
                    bool.Style.Add("left", -(LarguraCampo / 2) - 5 & "px")

                    ' define outras propriedades
                    For Each prop As ElementoStr In Props.Elementos
                        bool.Style.Add(prop.Nome, prop.Conteudo)
                    Next

                    Container.Add(bool)

                    lbl = New Label
                    lbl.ID = "lblbr" & Nome
                    lbl.Text = "<br clear='all'/>"
                    Container.Add(lbl)
                    If Not IsNothing(etiq) Then
                        bool.Attributes("etiq") = etiq.ID
                    End If
                    Return bool
                End If

                ' campo, caso seja html <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                If Compare(Formato, "html") Then
                    Dim ctl As Object = PAGE.LoadControl("~\uc\icfttextarea\icfttextarea.ascx")
                    ctl.ID = Prefixo & Nome
                    ctl.Panel.CssClass = "icftform_html"

                    ctl.Largura = LarguraCampo & "PX"
                    ctl.Attributes("ValorPadrao") = ValorPadrao

                    ' define outras propriedades
                    For Each prop As ElementoStr In Props.Elementos
                        ctl.estilo(prop.Nome) = prop.Conteudo
                    Next

                    ctl.DATABIND()
                    Container.Add(ctl)

                    ' inclui quebra de linha
                    lbl = New Label
                    lbl.ID = "lblbr" & Nome
                    lbl.Text = "<br clear='all'/>"
                    Container.Add(lbl)
                    If Not IsNothing(etiq) Then
                        ctl.Attributes("etiq") = etiq.ID
                    End If
                    Return ctl
                End If


                ' combo, se com relacionamento ou opções no ToolTip <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
                Dim toolTipMatches As MatchCollection = RegularExpressions.Regex.Matches(NZ(ToolTip, ""), "\b(\w+)=(\w+)\b")
                If (Sistema <> "" And Tabela <> "") OrElse toolTipMatches.Count > 0 Then
                    ' busca relacionamento n1
                    Dim rels As New RelsN1(Sistema, Tabela, Nome, StrGerador)

                    If rels.Count <> 0 OrElse toolTipMatches.Count > 0 Then
                        Dim list As DropDownList

                        list = New DropDownList
                        list.ID = Prefixo & Nome
                        list.ToolTip = ToolTip
                        list.CssClass = "icftform_lista"
                        list.Attributes("ValorPadrao") = ValorPadrao
                        list.Style("width") = LarguraCampo & "px"

                        Dim Atualiza As ArrayList = New ArrayList

                        If rels.Count <> 0 Then
                            For z As Integer = 0 To rels.Count - 1
                                If rels(z)("_CAMPOITEM") < (rels(z)("_CAMPOSQTD") - 1) Then
                                    Dim Campos As Array = Split(rels(z)("CAMPO_N"), ";")
                                    For zz As Integer = rels(z)("_CAMPOITEM") + 1 To rels(z)("_CAMPOITEM") + 1
                                        If Not Atualiza.Contains(Campos(zz)) Then
                                            Atualiza.Add(Prefixo & Campos(zz))
                                        End If
                                    Next
                                    Exit For
                                End If
                            Next
                            If Atualiza.Count > 0 Then
                                list.AutoPostBack = True
                                CtlProp(list, "ATUALIZAR") = Join(Atualiza.ToArray, ";")
                                AddHandler list.TextChanged, AddressOf AtualizouControle
                            End If

                            Dim sql As String = ""
                            If rels(0)("_CAMPOITEM") > 0 Then
                                Dim REL1 As Array = Split(rels(0)("CAMPO_1"), ";")
                                Dim RELN As Array = Split(rels(0)("CAMPO_N"), ";")
                                For Z As Integer = 0 To rels(0)("_CAMPOITEM") - 1
                                    sql = sql & IIf(sql <> "", " AND ", "") & REL1(Z) & " = [:" & Prefixo & RELN(Z) & "]"
                                Next
                            End If

                            Dim chave_apres As String = NZ(rels(0)("chave_apres_1"), "")
                            If chave_apres = "" Then
                                chave_apres = NZ(rels(0)("chave_apres"), "")
                            End If
                            Dim chave_apres_Array() As String = {}
                            If chave_apres <> "" Then
                                chave_apres_Array = Split(chave_apres, ";")
                                chave_apres = ", " & Join(chave_apres_Array, ", ")
                            End If

                            sql = "select " & rels(0)("_CAMPOREL") & chave_apres & " from " & rels(0)("TABELA_1").ToString.ToLower & IIf(sql <> "", " WHERE ", "") & sql
                            CtlProp(list, "SQL") = sql
                            CtlProp(list, "STRCONN") = StrConn
                            CtlProp(list, "QTDCOLS") = 1 + chave_apres_Array.Length
                        Else
                            For Each mt As Match In toolTipMatches
                                If Not String.IsNullOrEmpty(mt.Groups(0).Value) Then
                                    Atualiza.Add(mt.Groups(1).Value)
                                    Atualiza.Add(mt.Groups(2).Value)
                                End If
                            Next

                            If Atualiza.Count > 0 Then
                                list.AutoPostBack = True
                                CtlProp(list, "ATUALIZAR") = Join(Atualiza.ToArray, ";")
                                AddHandler list.TextChanged, AddressOf AtualizouControle
                            End If

                            CarregaCombo(list, 2, False, " | ", True, Atualiza)
                        End If


                        ' define outras propriedades
                        For Each prop As ElementoStr In Props.Elementos
                            list.Style.Add(prop.Nome, prop.Conteudo)
                        Next


                        Container.Add(list)

                        ' inclui quebra de linha
                        lbl = New Label
                        lbl.ID = "lblbr" & Nome
                        lbl.Text = "<br clear='all'/>"
                        Container.Add(lbl)

                        If Not IsNothing(etiq) Then
                            list.Attributes("etiq") = etiq.ID
                        End If
                        Return list
                    End If
                End If

                ' outros campos <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                Dim txt As TextBox
                txt = New TextBox
                txt.ID = Prefixo & Nome

                If Compare(Tipo, "System.DateTime") Then
                    txt.Style.Add("width", LarguraCampo - 10 & "px")
                Else
                    txt.Style.Add("width", LarguraCampo & "px")
                End If

                If Compare(Formato, "memo") Then
                    txt.CssClass = "icftform_memo"
                    txt.TextMode = TextBoxMode.MultiLine
                Else
                    txt.CssClass = "icftform_txt"
                End If

                txt.ToolTip = ToolTip
                txt.Attributes("Formato") = Formato
                txt.Attributes("Auto") = Auto
                txt.Attributes("ValorPadrao") = ValorPadrao
                txt.Attributes("Tipo") = Tipo

                If Auto <> "" Then
                    txt.Attributes("Tabela") = Tabela
                    txt.Attributes("Campo") = Nome
                    txt.Attributes("STRCONN") = StrConn
                End If

                Dim Tam As Integer = NZV(Tamanho, "0")
                If Tam <> 0 Then
                    txt.MaxLength = Tamanho
                    txt.TextMode = TextBoxMode.SingleLine
                    Prop(txt, "ToolTip") &= " [Máximo de " & txt.MaxLength & " caracter" & IIf(txt.MaxLength > 1, "es", "") & "]"
                End If


                ' inclui o campo
                txt.Enabled = Not Bloqueado

                ' define outras propriedades
                For Each prop As ElementoStr In Props.Elementos
                    txt.Style.Add(prop.Nome, prop.Conteudo)
                Next
                Container.Add(txt)

                ' inclui botão do calendário
                If (Compare(Formato, "dd\/MM\/yyyy")) Then
                    Dim btnCalend As New HyperLink
                    btnCalend.ID = "btnCalendario"
                    btnCalend.Text = "+"
                    btnCalend.NavigateUrl = "javascript:void(0);"
                    btnCalend.Attributes.Add("onclick", "displayCalendar($_('" & txt.ID & "',this),'dd/mm/yyyy',this)")
                    Container.Add(btnCalend)
                    IncluiScript(PAGE, "js1_calendario", "<script>var host = '" & PAGE.ResolveUrl(NZV(WebConf("url_site"), "~/")) & "';var pathToImages = host + 'uc/IcftCalendario/Theme/" & NZV(WebConf("Theme"), "Default") & "/images/';</script>")
                    IncluiScript(PAGE, "js2_calendario", PAGE.ResolveUrl("~/uc/IcftCalendario/Theme/" & NZV(WebConf("Theme"), "Default") & "/dhtmlgoodies_calendar.js"))
                    IncluiScript(PAGE, "js3_calendario", PAGE.ResolveUrl("~/uc/IcftCalendario/dhtmlgoodies_calendar.js"))
                    IncluiStyleSheet(PAGE, btnCalend.UniqueID, NZV(WebConf("calendario_css"), "~/uc/IcftCalendario/Theme/" & NZV(WebConf("Theme"), "Default") & "/dhtmlgoodies_calendar.css"))
                End If

                ' campo, caso seja imagem <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                If Compare(Formato, "imagem") Then
                    Dim div As New Panel
                    div.ID = "div_" & Nome
                    div.CssClass = "icftform_imagem"
                    div.Style.Add("visibility", "hidden")
                    div.Style.Add("display", "none")
                    div.Style.Add("width", "550px")
                    div.Style.Add("height", "400px")
                    div.Style.Add("border", "1px solid black")
                    div.Style.Add("position", "absolute")
                    Dim btnSelecao As New HyperLink
                    btnSelecao.ID = "btnSelecao_" & Nome
                    btnSelecao.Text = "+"
                    btnSelecao.NavigateUrl = "javascript:void(0);"
                    btnSelecao.Attributes.Add("onclick", "apareceDiv($_('" & div.ID & "',this));posicionaDiv('" & div.ClientID & "',this)")
                    Container.Add(btnSelecao)
                    Dim ctl As Object = PAGE.LoadControl("/uc/icfteditorimagem/icfteditorimagem.ascx")
                    ctl.ID = Nome & "_" & txt.ID
                    ctl.Attributes("ENDIMG") = WebConf("end_img")
                    ctl.Attributes("ENDTEMP") = WebConf("end_temp")
                    ctl.Attributes("ENDTEMP_DIR") = WebConf("end_temp_dir")
                    ctl.Attributes("URL_SITE") = WebConf("url_site")
                    ctl.Attributes("TEXTBOX") = "ctl00_ContentPlaceHolder1_EditaCad_RepElem_ctl00_" & txt.ID
                    ctl.Attributes("DIV") = "ctl00_ContentPlaceHolder1_EditaCad_RepElem_ctl00_" & div.ID
                    div.Controls.Add(ctl)

                    ' define outras propriedades
                    For Each prop As ElementoStr In Props.Elementos
                        div.Style.Add(prop.Nome, prop.Conteudo)
                    Next


                    Container.Add(div)
                    IncluiScript(PAGE, "editorImagem", PAGE.ResolveUrl(WebConf("editor_imagem_js")))
                End If

                ' mascara o campo, caso seja necessário
                If Formato <> "" And Not (Compare(Formato, "HTML") Or Compare(Formato, "MEMO")) Then
                    txt.Page = PAGE
                    Controle.AplicaMascara(txt)
                End If

                ' inclui quebra de linha
                lbl = New Label
                lbl.ID = "lblbr" & Nome
                lbl.Text = "<br clear='all'/>"
                Container.Add(lbl)

                If Not IsNothing(etiq) Then
                    txt.Attributes("etiq") = etiq.ID
                End If
                Return txt
            End If
            Return Nothing
        End Function


        ''' <summary>
        ''' Tipo de acesso para pesquisa de senha.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum AcessoOKOrigemTipo
            ListaAberta
            Pesquisa
            Conexao
        End Enum

        ''' <summary>
        ''' Classe de especificação de erros customizados.
        ''' </summary>
        ''' <remarks></remarks>
        Class Ex

            ''' <summary>
            ''' Encapsulamento de erros Intercraft.
            ''' </summary>
            ''' <remarks></remarks>
            Class Icraft
                Inherits Exception

                ''' <summary>
                ''' Mensagem de erro Intercraft.
                ''' </summary>
                ''' <value>Texto de erro Intercraft.</value>
                ''' <returns>Texto de erro Intercraft.</returns>
                ''' <remarks></remarks>
                Public Overrides ReadOnly Property Message() As String
                    Get
                        Return "Uma situação inesperada ocorreu na base Icraft."
                    End Get
                End Property
            End Class

            ''' <summary>
            ''' Encapsulamento de erro de usuário inválido.
            ''' </summary>
            ''' <remarks></remarks>
            Class UsuarioInvalido
                Inherits Ex.Icraft

                ''' <summary>
                ''' Mensagem de erro de usuário inválido.
                ''' </summary>
                ''' <value>Texto de erro de usuário inválido.</value>
                ''' <returns>Texto de erro de usuário inválido.</returns>
                ''' <remarks></remarks>
                Public Overloads ReadOnly Property Message() As String
                    Get
                        Return "Usuário inválido ou sessão expirada."
                    End Get
                End Property
            End Class
        End Class

        ''' <summary>
        ''' Transforma texto em sentence case ou maiúsculas nos primeiros caracteres.
        ''' </summary>
        ''' <param name="Texto">Texto a ser tratado.</param>
        ''' <returns>Retorna texto tratado com maiúsculas nos primeiros caracteres.</returns>
        ''' <remarks></remarks>
        Shared Function PrimLetraMaiusComEspaco(ByVal Texto As String) As String
            Texto = Trim(PrimLetraMaius(Regex.Replace(Texto, "([a-z])([A-Z])", "$1 $2")))
            Texto = ReplRepl(Texto, "  ", " ")
            Return Texto
        End Function

        ''' <summary>
        ''' Coloca o texto com letras iniciais maiúsculas.
        ''' </summary>
        ''' <param name="Texto">Texto a ser transformado.</param>
        ''' <returns>Texto com letras maiúsculas.</returns>
        ''' <remarks></remarks>
        Public Shared Function PrimLetraMaiusc(ByVal Texto As String) As String
            Dim Troca() As String
            Texto = StrConv(Texto, VbStrConv.ProperCase)
            Troca = Split("Da;De;Di;Do;Du;Das;Des;Dis;Dos;Dus", ";")

            For Each pron As String In Troca
                Texto = Replace(Texto, Space(1) & pron & Space(1), Space(1) & LCase(pron) & Space(1))
            Next pron

            Return Texto
        End Function

        ''' <summary>
        ''' Configuração de armazenamento em disco de objetos.
        ''' </summary>
        ''' <remarks></remarks>
        Class DirConfig
            Public Momento As Date = Nothing
            Public Usuario As String = ""
            Public Grupo As String = ""
            Public Obj As Object = Nothing

            ''' <summary>
            ''' Prepara nome do arquivo.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Usuario">Usuário.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Private Shared Function NomeArq(ByVal Page As Page, ByVal Termo As String, ByVal Usuario As String, ByVal Caminho As String) As String
                Try
                    Dim Arq As String = ""
                    If Not IsNothing(Page) Then
                        Arq = Regex.Replace(System.IO.Path.ChangeExtension(AppRelative(Page), ""), "[/\~.]", " ").Replace(" ", "")
                    Else
                        Arq = "#COMUM"
                    End If

                    If Not IsNothing(Termo) Then
                        Arq &= "_" & PrimLetraMaiusComEspaco(Termo).Replace(" ", "")
                    End If
                    If Not IsNothing(Caminho) Then
                        Arq = URLExpr(Caminho, Arq)
                    End If
                    Return Arq.ToUpper & ".xml"
                Catch
                    Return Nothing
                End Try
            End Function

            ''' <summary>
            ''' Instrução para apagar arquivo de configuração.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <remarks></remarks>
            Public Shared Sub Apaga(ByVal Page As Page, ByVal Termo As String, Optional ByVal Caminho As String = "~/config")
                ApagaCompl(Page, Termo, "", Caminho)
            End Sub

            ''' <summary>
            ''' Grava objeto no arquivo configurado.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Obj">Objeto que será gravado no arquivo.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <remarks></remarks>
            Public Shared Sub Grava(ByVal Page As Page, ByVal Termo As String, ByVal Obj As Object, Optional ByVal Caminho As String = "~/config")
                GravaCompl(Page, Termo, "", Obj, Caminho)
            End Sub

            ''' <summary>
            ''' Apaga a configuração de usuário.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <remarks></remarks>
            Public Shared Sub ApagaUsuario(ByVal Page As Page, ByVal Termo As String, Optional ByVal Caminho As String = "~/config")
                If Logon(Page).Usuario = "" Then
                    Throw New Ex.UsuarioInvalido
                End If
                ApagaCompl(Page, Termo, Logon(Page).Usuario, Caminho)
            End Sub

            ''' <summary>
            ''' Grava configuração do usuário.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Obj">Objeto que será gravado.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <remarks></remarks>
            Public Shared Sub GravaUsuario(ByVal Page As Page, ByVal Termo As String, ByVal Obj As Object, Optional ByVal Caminho As String = "~/config")
                If Logon(Page).Usuario = "" Then
                    Throw New Ex.UsuarioInvalido
                End If
                GravaCompl(Page, Termo, Logon(Page).Usuario, Obj, Caminho)
            End Sub

            ''' <summary>
            ''' Apaga arquivo de complemento.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Usuario">Usuário.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <remarks></remarks>
            Private Shared Sub ApagaCompl(ByVal Page As Page, ByVal Termo As String, ByVal Usuario As String, Optional ByVal Caminho As String = "~/config")
                Try
                    Kill(FileExpr(NomeArq(Page, Termo, Usuario, Caminho)))
                Catch
                End Try
            End Sub

            ''' <summary>
            ''' Grava arquivo de complemento.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Usuario">Usuário.</param>
            ''' <param name="Obj">Objeto que será gravado.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <remarks></remarks>
            Private Shared Sub GravaCompl(ByVal Page As Page, ByVal Termo As String, ByVal Usuario As String, ByVal Obj As Object, Optional ByVal Caminho As String = "~/config")
                Dim DS As New System.Data.DataSet
                Dim TB As New DataTable("CONFIG")
                TB.Columns.Add("MOMENTO", GetType(System.DateTime))
                TB.Columns.Add("USUARIO", GetType(System.String))
                TB.Columns.Add("GRUPO", GetType(System.String))
                TB.Columns.Add("OBJETO", GetType(System.Object))
                DS.Tables.Add(TB)
                If Not IsNothing(Page) Then
                    DS.Tables(0).Rows.Add(Now, NZ(Logon(Page).Usuario, ""), NZ(Logon(Page).Grupo, ""), Obj)
                Else
                    DS.Tables(0).Rows.Add(Now, "", "", Obj)
                End If
                DS.WriteXml(FileExpr(NomeArq(Page, Termo, Usuario, Caminho)), XmlWriteMode.WriteSchema)
            End Sub

            ''' <summary>
            ''' Recupera configuração.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <returns>Objeto recuperado.</returns>
            ''' <remarks></remarks>
            Public Shared Function Recupera(ByVal Page As Page, ByVal Termo As String, Optional ByVal Caminho As String = "~/config") As DirConfig
                Return RecuperaCompl(Page, Termo, "", Caminho)
            End Function

            ''' <summary>
            ''' Recupera configuração de usuário.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <returns>Objeto recuperado.</returns>
            ''' <remarks></remarks>
            Public Shared Function RecuperaUsuario(ByVal Page As Page, ByVal Termo As String, Optional ByVal Caminho As String = "~/config") As DirConfig
                If NZ(Logon(Page).Usuario, "") = "" Then
                    Throw New Ex.UsuarioInvalido
                End If
                Return RecuperaCompl(Page, Termo, Logon(Page).Usuario, Caminho)
            End Function

            ''' <summary>
            ''' Recupera configuração complementar.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Termo">Termo de configuração.</param>
            ''' <param name="Usuario">Usuário.</param>
            ''' <param name="Caminho">Caminho para encontrar o arquivo.</param>
            ''' <returns>Objeto recuperado.</returns>
            ''' <remarks></remarks>
            Private Shared Function RecuperaCompl(ByVal Page As Page, ByVal Termo As String, ByVal Usuario As String, Optional ByVal Caminho As String = "~/config") As DirConfig
                Dim D As New DirConfig
                Try
                    Dim DS As New System.Data.DataSet
                    DS.ReadXml(FileExpr(NomeArq(Page, Termo, Usuario, Caminho)), XmlReadMode.ReadSchema)
                    D.Momento = DS.Tables(0).Rows(0)("MOMENTO")
                    D.Usuario = DS.Tables(0).Rows(0)("USUARIO")
                    D.Grupo = DS.Tables(0).Rows(0)("GRUPO")
                    D.Obj = DS.Tables(0).Rows(0)("OBJETO")
                Catch
                End Try
                Return D
            End Function

            ''' <summary>
            ''' Listagem de configurações existentes.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Caminho">Caminho para encontrar os arquivos.</param>
            ''' <returns>Lista de configurações existentes.</returns>
            ''' <remarks></remarks>
            Public Shared Function Lista(ByVal Page As Page, Optional ByVal Caminho As String = "~/config") As ArrayList
                Return ListaCompl(Page, "", Caminho)
            End Function

            ''' <summary>
            ''' Lista usuários existentes entre as configurações.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Caminho">Caminho onde serão pesquisados os arquivos.</param>
            ''' <returns>Lista de usuários existentes.</returns>
            ''' <remarks></remarks>
            Public Shared Function ListaUsuario(ByVal Page As Page, Optional ByVal Caminho As String = "~/config") As ArrayList
                If NZ(Logon(Page).Usuario, "") = "" Then
                    Throw New Ex.UsuarioInvalido
                End If
                Return ListaCompl(Page, Logon(Page).Usuario, Caminho)
            End Function

            ''' <summary>
            ''' Lista complementos existentes no diretório.
            ''' </summary>
            ''' <param name="Page">Página.</param>
            ''' <param name="Usuario">Usuário.</param>
            ''' <param name="Caminho">Caminho onde serão pesquisados os arquivos.</param>
            ''' <returns>Retorna lista de arquivos encontrados.</returns>
            ''' <remarks></remarks>
            Private Shared Function ListaCompl(ByVal Page As Page, ByVal Usuario As String, Optional ByVal Caminho As String = "~/config") As ArrayList
                Dim NomeArqStr As String = NomeArq(Page, Nothing, Usuario, Nothing).Replace(".xml", "_")
                Dim Itens As ArrayList = ListaDir(Caminho, NomeArqStr & "*.*", False)
                Dim Pref As String = FileExpr(Caminho, NomeArqStr)
                Dim Ret As New ArrayList
                For Each Item As String In Itens
                    Ret.Add(Item.Replace(Pref, "").Replace(".xml", ""))
                Next
                Return Ret
            End Function
        End Class

        ''' <summary>
        ''' Configuração para liberação de acesso.
        ''' </summary>
        ''' <remarks></remarks>
        Class AcessoOKOrigem
            Public Tipo As AcessoOKOrigemTipo
            Public Grupo As String
            Public Conexao As Object
            Public Esquema As String
            Public ListaOuSQL As String

            ''' <summary>
            ''' Criação de grupo de acesso.
            ''' </summary>
            ''' <param name="Grupo">Grupo para acesso.</param>
            ''' <param name="LISTA">Lista de permissões.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Grupo As String, ByVal Lista As String)
                Me.New(AcessoOKOrigemTipo.ListaAberta, Grupo, Lista)
            End Sub

            ''' <summary>
            ''' Carrega lista de permissões com base em grupo.
            ''' </summary>
            ''' <param name="Tipo">Tipo de acesso.</param>
            ''' <param name="Grupo">Grupo do usuário.</param>
            ''' <param name="ListaOuSql">Lista de acesso ou SQL para pesquisa dependendo do tipo.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Tipo As AcessoOKOrigemTipo, ByVal Grupo As String, ByVal ListaOuSql As String)
                Me.Grupo = Grupo
                Me.Tipo = Tipo
                Me.ListaOuSQL = ListaOuSql
            End Sub
        End Class

        ''' <summary>
        ''' Função que verifica permissão ou não para recurso.
        ''' </summary>
        ''' <param name="Page">Página que será utilizada para comparação.</param>
        ''' <param name="UrlLogin">Url de login caso usuário não seja permitido.</param>
        ''' <param name="UrlCancel">Url de cancelamento caso usuário opte por cancelar.</param>
        ''' <param name="UrlRedirOK">Url de redirecionamento caso permissão seja concedida.</param>
        ''' <param name="Params">Params para pesquisa.</param>
        ''' <returns>True se liberado para acesso e false caso não tenha êxito na verificação.</returns>
        ''' <remarks></remarks>
        Public Shared Function AcessoOK(ByVal Page As Page, ByVal UrlLogin As String, ByVal UrlCancel As String, ByVal UrlRedirOK As String, ByVal ParamArray Params() As Object) As Boolean
            Try

                ' pega usuário e senha que foram passados (caso tenha sido passados)
                Dim Acesso As Boolean = False
                Dim Usu As String = ""
                Dim Snh As String = ""
                Dim Grp As String = ""
                Dim LocalParams As ArrayList = ParamArrayToArrayList(Params)
                Dim AtribUsu As Boolean = True
                Try
                    Usu = StrStr(MacroSubstSQLText("[:usuario]", LocalParams), 1, -1)
                    Snh = StrStr(MacroSubstSQLText("[:senha]", LocalParams), 1, -1)
                Catch
                End Try

                ' se não forem informados, irá considerar usuário e senha já logados, caso seja possível
                Try
                    If NZ(Usu, "") = "" Then
                        AtribUsu = False
                        Usu = Logon(Page).Usuario
                        Snh = DecrypB(Logon(Page).Senha)
                    End If
                Catch
                End Try


                ' verifica fontes
                Dim Hands As AcessoEventos = Nothing
                Dim ParamsAdd As New ArrayList
                For Each Item As Object In LocalParams
                    If TypeOf (Item) Is AcessoEventos Then
                        Hands = Item
                    ElseIf TypeOf (Item) Is AcessoOKOrigem And Not Acesso Then
                        Dim Fonte As AcessoOKOrigem = Item
                        If Fonte.Tipo = AcessoOKOrigemTipo.ListaAberta Then
                            Try
                                Dim Itens() As String = Split(Fonte.ListaOuSQL, ";")
                                For z As Integer = 0 To Itens.Length - 1 Step 2
                                    If UCase(Usu) = UCase(Itens(z)) And Snh = Itens(z + 1) Then
                                        Usu = Itens(z)
                                        Acesso = True
                                        Grp = Fonte.Grupo
                                        Exit For
                                    End If
                                Next
                            Catch
                            End Try
                        ElseIf Fonte.Tipo = AcessoOKOrigemTipo.Pesquisa Then
                            Try


                                Dim Ds As System.Data.DataSet = StrConnDSCarrega(Fonte.ListaOuSQL, "UPPER(USUARIO)=:USU AND " & IIf(InStr(UCase(Fonte.ListaOuSQL), "SENHAABERTA") <> 0, "SENHAABERTA=:PASSWORDABERTA", "SENHA=:SENHACRIPT"), ":USU", Usu.ToUpper, ":SENHACRIPT", EncrypB(Snh), ":PASSWORDABERTA", Snh)
                                If Not IsNothing(Ds) Then
                                    If Ds.Tables(0).Rows.Count = 1 Then
                                        Usu = Ds.Tables(0).Rows(0)("USUARIO")
                                        Acesso = True
                                        Dim GrpDef As String = ""
                                        For z As Integer = 0 To Ds.Tables(0).Columns.Count - 1
                                            Dim Col As String = Ds.Tables(0).Columns(z).ColumnName
                                            If Compare(Col, "GRUPO") Then
                                                GrpDef = Ds.Tables(0).Rows(0)("GRUPO")
                                            ElseIf Not (Compare(Col, "USUARIO") Or Compare(Col, "SENHA") Or Compare(Col, "SENHAABERTA")) Then
                                                ParamsAdd.Add(":" & Col)
                                                ParamsAdd.Add(Ds.Tables(0).Rows(0)(z))
                                            End If
                                        Next
                                        Grp = NZV(GrpDef, NZV(Fonte.Grupo, "GERAL"))
                                    End If
                                End If
                            Catch ex As Exception
                                ErroLogReg(ex, "Login incorreto")
                            End Try
                        ElseIf Fonte.Tipo = AcessoOKOrigemTipo.Conexao Then
                            Try
                                Dim Ds As System.Data.DataSet = DSCarrega("SELECT COUNT(*) FROM " & IIf(Fonte.Esquema <> "", Fonte.Esquema & ".", "") & "SYS_CONFIG_GLOBAL", StrConnUsuario(Page, Fonte.ListaOuSQL, ":USER", Usu, ":PASSWORD", Snh))
                                If Not IsNothing(Ds) AndAlso Ds.Tables(0).Rows.Count = 1 Then
                                    Acesso = True
                                    Grp = Fonte.Grupo
                                End If
                            Catch
                            End Try
                        End If
                    End If
                Next
                LocalParams.AddRange(ParamsAdd)


                ' finalmente, registra acesso caso este seja permitido e não tenha sido registrado ainda
                Dim SnhEncr As String = EncrypB(Snh)
                If Acesso Then
                    If Logon(Page).Usuario <> Usu Or Logon(Page).Senha <> SnhEncr Then

                        LoginCertifica(Page, Usu, SnhEncr, False, Grp)

                        Dim z As Integer = 0
                        Do While z < LocalParams.Count
                            If Compare(LocalParams(z), ":usuario", True) Or Compare(LocalParams(z), ":senha", True) Then
                                z += 2
                            ElseIf TypeOf LocalParams(z) Is AcessoOKOrigem Or TypeOf LocalParams(z) Is AcessoEventos Then
                                z += 1
                            Else
                                Logon(Page).ExtendedProps(Replace(LocalParams(z), ":", "")) = LocalParams(z + 1)
                                z += 2
                            End If
                        Loop

                        If Not IsNothing(Hands) Then
                            Hands.DepoisDeLoginExec()
                        End If

                    End If



                    Dim encaminha As String = NZV(UrlRedirOK, "")
                    If encaminha = "" Then
                        encaminha = NZV(Page.Request.Params("RETURNURL"), "")
                        If encaminha = "" Then
                            encaminha = NZV(Page.Request.Params("LoginReturlUrl"), "")
                            If encaminha = "" Then
                                encaminha = NZV(Page.Request.Params("Return_URL"), "")
                                If encaminha = "" Then
                                    encaminha = Page.Request.Url.PathAndQuery
                                End If
                            End If
                        End If
                    End If



                    Dim BuscaReturn As String = Page.Server.UrlDecode(encaminha)
                    Dim Pos As Integer = InStr(BuscaReturn, "?")
                    If Pos = 0 Then
                        Pos = 1
                    Else
                        Pos += 1
                    End If
                    BuscaReturn = Mid(BuscaReturn, Pos)
                    Dim BR As New ElementosStr(BuscaReturn, "&", "=")
                    BuscaReturn = NZV(BR.Items("LoginReturnURL").Conteudo, NZV(BR.Items("Return_URL").Conteudo, BR.Items("ReturnUrl").Conteudo))
                    If BuscaReturn <> "" Then
                        encaminha = BuscaReturn
                    End If

                    RedirCond(Page, encaminha, , "LoginReturnUrl")
                    Return True
                End If
            Catch ex As Exception
            End Try


            ' procura retorno
            Dim Retorno As String = NZV(NZV(UrlRedirOK, Page.Request.Params("LoginReturlUrl")), Page.Request.Url.PathAndQuery)

            ' caso sem permissão, direciona para rotina de acesso...
            RedirCond(Page, UrlLogin, Retorno, "LoginReturnUrl")
            Return False
        End Function

        ''' <summary>
        ''' Login na master.
        ''' </summary>
        ''' <param name="ControleOuPage">Controle ou página para verificação.</param>
        ''' <returns>Retorna login na master caso exista.</returns>
        ''' <remarks></remarks>
        Public Shared Function LoginNaMaster(ByVal ControleOuPage As Object) As Object
            Dim Login As Object = IIf(ControleOuPage.GetType.ToString = "ASP.uc_icftlogin_icftlogin_ascx", ControleOuPage, Nothing)
            If IsNothing(Login) Then
                Dim Logins As Object = Form.BuscaTipo(ControleOuPage.Page.Master, "ASP.uc_icftlogin_icftlogin_ascx")
                For Each L As Object In Logins
                    If L.tipo.ToString.EndsWith("PopupLogin") Then
                        Login = L
                        Exit For
                    End If
                Next
            End If
            Return Login
        End Function

        ''' <summary>
        ''' Verifica acesso com base no login que está na master.
        ''' </summary>
        ''' <param name="ControleOuPage">Controle ou página para procurar o controle.</param>
        ''' <param name="UrlLogin">Url de login caso usuário não seja permitido.</param>
        ''' <param name="UrlCancel">Url de cancelamento caso usuário opte por cancelar.</param>
        ''' <param name="UrlRedirOK">Url de redirecionamento caso usuário tenha permissão.</param>
        ''' <param name="Params">Parâmetros para substituição nas pesquisas.</param>
        ''' <returns>True caso tenha acesso ou false caso não tenha.</returns>
        ''' <remarks></remarks>
        Public Shared Function MasterAcessoOK(ByVal ControleOuPage As Object, ByVal UrlLogin As String, ByVal UrlCancel As String, ByVal UrlRedirOK As String, ByVal ParamArray Params() As Object) As Boolean
            Dim Page As Page = ControleOuPage.Page
            Dim Ret As Boolean = False

            Dim Login As Object = LoginNaMaster(ControleOuPage)
            Ret = AcessoOK(Page, UrlLogin, UrlCancel, UrlRedirOK, Params)

            If Not Ret Then
                If Not IsNothing(Login) Then
                    Login.Mostra()
                Else
                    If NZ(UrlCancel, "") <> "" Then
                        Page.Response.Redirect(UrlCancel)
                    End If
                End If
            End If
            Return Ret
        End Function

        ''' <summary>
        ''' String de conexão de usuário.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="STRCONN">String de conexão para troca de parâmetros de usuário e senha.</param>
        ''' <param name="Params">Parâmetros que serão pesquisados.</param>
        ''' <value>String de conexão.</value>
        ''' <returns>String de conexão.</returns>
        ''' <remarks></remarks>
        Public Shared ReadOnly Property StrConnUsuario(ByVal Page As Page, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As System.Configuration.ConnectionStringSettings
            Get
                If TypeOf StrConn Is System.Configuration.ConnectionStringSettings Then
                    Return StrConn
                End If
                Dim Elem As New ElementosStr(UCase(StrConn))
                Elem("USER").Conteudo = "[:USER]"
                Elem("PASSWORD").Conteudo = "[:PASSWORD]"
                Dim StrConnEntr As String = Elem("").Conteudo & ";" & Elem.ToStyleStr()
                Return StrConnObj(StrConnEntr, Params, ":USER", Logon(Page).Usuario, ":PASSWORD", DecrypB(Logon(Page).Senha))
            End Get
        End Property

        ''' <summary>
        ''' Função para tratamento de erro.
        ''' </summary>
        ''' <param name="ControleOuPage">Controle ou página.</param>
        ''' <param name="Ex">Erro ocorrido.</param>
        ''' <param name="Compl">Texto de complemento para indicação de local.</param>
        ''' <param name="IgnoreNotas">Ignora notas e configurações.</param>
        ''' <param name="UrlRedirNota">Url de redirecionamento após mensagem de erro.</param>
        ''' <remarks></remarks>
        Public Shared Sub TrataErro(ByVal ControleOuPage As Object, ByVal Ex As Exception, Optional ByVal Compl As String = "", Optional ByVal IgnoreNotas As Boolean = False, Optional ByVal UrlRedirNota As String = "")
            Dim Page As Page = ControleOuPage.Page
            If NZ(Compl, "") = "" Then
                Compl = IIf(Page.Title <> "Untitled Page", Page.Title, Microsoft.VisualBasic.Left(WebConf("site_nome"), 20))
            End If

            If TypeOf Ex Is System.Data.OracleClient.OracleException OrElse TypeOf Ex Is Ex.UsuarioInvalido Then
                Dim Login As Object = LoginNaMaster(ControleOuPage)
                If Not IsNothing(Login) Then
                    If Logon(Page).Usuario = "" Then
                    Else
                        NotaMsg.Registra(Page, "Acesso não permitido ou problemas com a conexão. Confirme seu login ou contacte o administrador do site ou sistema.", Compl)
                    End If
                    Login.Verifica()
                    RedirCond(Page, Login.UrlLogin, Page.Request.Url.PathAndQuery, "LoginReturnUrl")
                    Exit Sub
                End If
            End If

            If TypeOf Ex Is System.Threading.ThreadAbortException Then
                HttpContext.Current.Server.ClearError()
            Else
                NotaMsg.Registra(Page, TrimCarac(MessageEx(Ex), New String() {" ", "."}) & ".", Compl, IgnoreNotas)
                If UrlRedirNota <> "" Then
                    RedirCond(Page, UrlRedirNota)
                End If
            End If
        End Sub

        ''' <summary>
        ''' Adiciona um arquivo a um diretório específico.
        ''' </summary>
        ''' <param name="NomeDir">Nome do diretório.</param>
        ''' <param name="NomeArq">Nome do arquivo.</param>
        ''' <returns>Retorna o diretório completo e o arquivo que será adicionado.</returns>
        ''' <remarks></remarks>
        Public Shared Function NomeArqLivre(ByVal NomeDir As String, ByVal NomeArq As String) As String
            Dim DD As New System.IO.DirectoryInfo(NomeDir)
            If Not DD.Exists Then
                DD.Create()
                NomeArq = FileExpr(NomeDir, NomeArq)
            Else
                Dim z As Integer = 1
                Dim NomeTest As String = FileExpr(NomeDir, NomeArq)
                Do While True
                    If z <> 1 Then
                        NomeTest = FileExpr(NomeDir, System.IO.Path.GetFileNameWithoutExtension(NomeArq) & "_" & Trim(Format(z, "    00")) & System.IO.Path.GetExtension(NomeArq))
                    End If
                    Dim FF As New System.IO.FileInfo(NomeTest)
                    If Not FF.Exists Then
                        Exit Do
                    End If
                    z += 1
                Loop
                NomeArq = NomeTest
            End If
            Return NomeArq
        End Function


        ''' <summary>
        ''' Verificação de objetos por flags.
        ''' </summary>
        ''' <remarks></remarks>
        <Flags()> Public Enum ObjToDsFlags
            FProperty = 1
            FFunction = 2
            FSub = 4
            FAttribute = 8
            FShared = 16
            FPublic = 32
            FNonPublic = 64
        End Enum

        ''' <summary>
        ''' Verifica se flag está setado.
        ''' </summary>
        ''' <param name="FlagVar">Variável que será testada.</param>
        ''' <param name="Flag">Flag de teste.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Shared Function FlagSetado(ByVal FlagVar As Long, ByVal Flag As Long) As Boolean
            Return ((FlagVar And Flag) > 0)
        End Function

        ''' <summary>
        ''' Retorna página relativa.
        ''' </summary>
        ''' <param name="PageMasterOuControle">Página.</param>
        ''' <returns>Retorna url com página relativa.</returns>
        ''' <remarks></remarks>
        Public Shared Function AppRelative(ByVal PageMasterOuControle As Object) As String
            If TypeOf (PageMasterOuControle) Is MasterPage Or TypeOf (PageMasterOuControle) Is Page Then
                Return PageMasterOuControle.apprelativevirtualpath
            ElseIf TypeOf (PageMasterOuControle) Is String Then
                Return PageMasterOuControle
            Else
                Return PageMasterOuControle.page.apprelativevirtualpath
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Classe de configuração de DNS.
        ''' </summary>
        ''' <remarks></remarks>
        Class DNS
            Public Servidor As String
            Public Dominio As String
            Public Result As String
            Public Erros As String
            Public UltimoComando As String
            Public Usuario As String
            Public Senha As String
            Public DominioLogin As String

            ''' <summary>
            ''' Classe de registro em DNS.
            ''' </summary>
            ''' <remarks></remarks>
            Class Reg
                Public Nome As String
                Public Tipo As Tipos
                Public Param As String

                ''' <summary>
                ''' Criação de registro.
                ''' </summary>
                ''' <param name="Nome">Nome do registro.</param>
                ''' <param name="Tipo">Tipo do registro.</param>
                ''' <param name="Param">Parâmetro do registro.</param>
                ''' <remarks></remarks>
                Sub New(ByVal Nome As String, ByVal Tipo As Tipos, ByVal Param As String)
                    Me.Nome = Nome
                    Me.Tipo = Tipo
                    Me.Param = Param
                End Sub
            End Class

            ''' <summary>
            ''' Tipos de hosts a serem manipulados no DNS.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum Tipos
                A
                CN
            End Enum

            ''' <summary>
            ''' Cria novo verificação de registros em DNS.
            ''' </summary>
            ''' <param name="Servidor">IP ou nome do servidor de DNS.</param>
            ''' <param name="Dominio">Domínio que faz parte o servidor.</param>
            ''' <param name="Usuario">Usuário autorizado a fazer a pesquisa.</param>
            ''' <param name="Senha">Senha do usuário autorizado.</param>
            ''' <param name="DominioLogin">Domínio de login do usuário autorizado.</param>
            ''' <remarks></remarks>
            Public Sub New(ByVal Servidor As String, ByVal Dominio As String, ByVal Usuario As String, ByVal Senha As String, ByVal DominioLogin As String)
                Me.Servidor = Servidor
                Me.Dominio = Dominio
                Me.Usuario = Usuario
                Me.Senha = Senha
                Me.DominioLogin = DominioLogin
            End Sub

            ''' <summary>
            ''' Inclui registro em DNS.
            ''' </summary>
            ''' <param name="Nome">Nome do registro.</param>
            ''' <param name="Tipo">Tipo do registro.</param>
            ''' <param name="Param">Parâmetro do registro.</param>
            ''' <remarks></remarks>
            Public Sub RegInclui(ByVal Nome As String, ByVal Tipo As String, ByVal Param As String)
                Dim TipoT As Tipos = System.Enum.Parse(GetType(Tipos), Tipo)
                RegInclui(Nome, TipoT, Param)
            End Sub

            ''' <summary>
            ''' Inclui registro no DNS.
            ''' </summary>
            ''' <param name="Nome">Nome do registro.</param>
            ''' <param name="Tipo">Tipo do registro.</param>
            ''' <param name="Param">Parâmetro do registro.</param>
            ''' <remarks></remarks>
            Public Sub RegInclui(ByVal Nome As String, ByVal Tipo As Tipos, ByVal Param As String)
                Exec("/recordadd " & Dominio & " " & Nome & " " & Tipo.ToString & " " & Param)
            End Sub

            ''' <summary>
            ''' Exclui registro do DNS.
            ''' </summary>
            ''' <param name="Nome">Nome do registro.</param>
            ''' <param name="Tipo">Tipo do registro.</param>
            ''' <remarks></remarks>
            Public Sub RegExclui(ByVal Nome As String, ByVal Tipo As String)
                Dim TipoT As Tipos = System.Enum.Parse(GetType(Tipos), Tipo)
                RegExclui(Nome, TipoT)
            End Sub

            ''' <summary>
            ''' Exclui registro do DNS.
            ''' </summary>
            ''' <param name="Nome">Nome do registro.</param>
            ''' <param name="Tipo">Tipo do registro.</param>
            ''' <remarks></remarks>
            Public Sub RegExclui(ByVal Nome As String, ByVal Tipo As Tipos)
                Exec("/recorddelete " & Dominio & " " & Nome & " " & Tipo.ToString & " /f")
            End Sub

            ''' <summary>
            ''' Obtém lista de registros do DNS.
            ''' </summary>
            ''' <returns>Lista de registros do DNS.</returns>
            ''' <remarks></remarks>
            Public Function Regs() As List(Of Reg)
                Dim Lista As New List(Of Reg)
                Exec("/enumrecords " & Dominio & " @")
                For Each Linha As String In Split(Result, vbCrLf)
                    Dim Trata As Match = Regex.Match(Linha, "(?<nome>[^ \x09]*)[ \x09]+(?<ttl>[^ \x09]*)[^ \x09]*[ \x09]+(?<tipo>[^ \x09]*)[^ \x09]*[ \x09]+(?<param>[^ \x09]*)[^ \x09]*")
                    If System.Enum.IsDefined(GetType(Tipos), Trata.Groups("tipo").Value) Then
                        Lista.Add(New Reg(Trata.Groups("nome").Value, System.Enum.Parse(GetType(Tipos), Trata.Groups("tipo").Value), Trata.Groups("param").Value))
                    End If
                Next
                Return Lista
            End Function

            ''' <summary>
            ''' Executa comando de pesquisa no servidor.
            ''' </summary>
            ''' <param name="Params">Parâmetros de execução.</param>
            ''' <remarks></remarks>
            Public Sub Exec(ByVal Params As String)
                Erros = ""
                Result = ""
                UltimoComando = "dnscmd " & Servidor & " " & Params
                Result = DosShell("dnscmd", Servidor & " " & Params, FileExpr("~/temp"), "", Erros, Usuario, Senha)
            End Sub
        End Class

        ''' <summary>
        ''' Retorna texto resultante da configuração de metas.
        ''' </summary>
        ''' <param name="Page">Página.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="Esquema">Esquema de pesquisa.</param>
        ''' <value>Texto de meta.</value>
        ''' <returns>Texto de meta.</returns>
        ''' <remarks></remarks>
        Public Shared ReadOnly Property Meta(ByVal Page As Page, ByVal StrConn As String, Optional ByVal Esquema As String = "") As String
            Get
                Dim Ret As String = Page.Session(VarDeSessao(Page, "", "META"))
                If IsNothing(Ret) Then
                    Dim StrB As New StringBuilder
                    For Each Row As System.Data.DataRow In DSCarrega("SELECT PARAM, CONFIG FROM " & IIf(Esquema <> "", Esquema & ".", "") & "SYS_CONFIG_GLOBAL WHERE LPAD(PARAM,5) = 'META_'", StrConn).Tables(0).Rows
                        StrB.AppendLine("<meta name=""" & PrimLetraMaius(Row("PARAM").ToString.Substring(5)).Replace(" ", "") & """ content=""" & Row("CONFIG") & """ />")
                    Next
                    Ret = StrB.ToString
                    Page.Session(VarDeSessao(Page, "", "META")) = Ret
                End If
                Return Ret
            End Get
        End Property

        ''' <summary>
        ''' Formatação de coluna para tabela em memória.
        ''' </summary>
        ''' <remarks></remarks>
        Class TabCol
            Public Nome As String
            Public Tipo As System.Type

            ''' <summary>
            ''' Cria coluna de tabela em memória.
            ''' </summary>
            ''' <param name="Nome"></param>
            ''' <param name="Tipo"></param>
            ''' <remarks></remarks>
            Sub New(ByVal Nome As String, ByVal Tipo As Object)
                Me.Nome = Nome
                If TypeOf (Tipo) Is System.Type Then
                    Me.Tipo = Tipo
                ElseIf TypeOf Tipo Is DBNull Then
                    Me.Tipo = GetType(Object)
                Else
                    Me.Tipo = Tipo.GetType
                End If
            End Sub
        End Class

        ''' <summary>
        ''' Inicia dataset com estrutura dos registros. Caso já tenha sido especificado, carrega da variável de sessão.
        ''' </summary>
        ''' <param name="PageOuMaster">Página ou Master para obtenção da sessão.</param>
        ''' <param name="VarSessao">Nome para variável de sessão na página. Vázio significa criar sempre.</param>
        ''' <value>Conteúdo a ser atribuído ao objeto</value>
        ''' <returns>Retorna dataset contendo os registros da página especificada.</returns>
        ''' <remarks></remarks>
        Public Shared Property DSTabReg(ByVal PageOuMaster As Object, ByVal VarSessao As String) As System.Data.DataSet
            Get
                Dim Ret As System.Data.DataSet = Nothing
                If Not IsNothing(PageOuMaster) Then
                    Ret = PageOuMaster.session(VarDeSessao(PageOuMaster, "", VarSessao))
                    If Not IsNothing(Ret) Then
                        Return Ret
                    End If
                End If
                Return Ret
            End Get
            Set(ByVal value As System.Data.DataSet)
                PageOuMaster.session(VarDeSessao(PageOuMaster, "", VarSessao)) = value
            End Set
        End Property

        ''' <summary>
        ''' Cria um dataset a partir de uma lista.
        ''' </summary>
        ''' <param name="PageOuMaster">Página ou master para obtenção da sessão.</param>
        ''' <param name="VarSessao">Nome para a variável de sessão.</param>
        ''' <param name="QTDCOLS">Quantidade de colunas.</param>
        ''' <param name="NomeColNaPrimaLinha">Nome dos campos.</param>
        ''' <param name="Valores">Objeto que será exibido.</param>
        ''' <value>Conteúdo a ser atribuído ao objeto.</value>
        ''' <returns>Retorna dataset com lista dos registros especificados.</returns>
        ''' <remarks></remarks>
        Public Shared Property DSListaSet(ByVal PageOuMaster As Page, ByVal VarSessao As String, ByVal QtdCols As Integer, ByVal NomeColNaPrimaLinha As Boolean, ByVal ParamArray Valores() As Object) As System.Data.DataSet
            Get
                Dim DS As System.Data.DataSet = DSTabReg(PageOuMaster, VarSessao)
                If Not IsNothing(DS) Then
                    Return DS
                End If
                Dim Lista As ArrayList = ParamArrayToArrayList(Valores)
                Dim Monta As New ArrayList
                Dim z As Integer = 0
                Dim Pos As Integer = 0
                For z = 1 To QtdCols
                    If NomeColNaPrimaLinha Then
                        If TypeOf Lista(Pos) Is TabCol Then
                            Monta.Add(Lista(Pos))
                            Pos += 1
                        Else
                            Monta.Add(New TabCol(Lista(Pos), Lista(Pos + 1)))
                            Pos += 2
                        End If
                    Else
                        Monta.Add(New TabCol("Col" & z, New Object))
                    End If
                Next
                DS = DSTabCols(PageOuMaster, VarSessao, Monta)
                Do While Pos < Lista.Count
                    Dim NR As System.Data.DataRow = DS.Tables(0).NewRow()
                    For zz As Integer = 0 To QtdCols - 1
                        NR(zz) = Lista(Pos)
                        Pos += 1
                    Next
                    DS.Tables(0).Rows.Add(NR)
                Loop
                Return DS
            End Get
            Set(ByVal value As System.Data.DataSet)
                DSTabReg(PageOuMaster, VarSessao) = value
            End Set
        End Property

        ''' <summary>
        ''' Permite utilização do nome do arquivo para gravação de ordem, nome, descr, tipo de target.
        ''' </summary>
        ''' <remarks></remarks>
        Class ArqBaseNomeComplex
            Public NomeComplex As String = ""
            Public Ordem As Integer = 0
            Public NomeSemDir As String = ""
            Public NomeSemDirSemExt As String = ""
            Public Descr As String = ""
            Public Extensao As String = ""
            Public Target As String = ""
            Public Termos As String = ""
            Public TermosDecode As String = ""
            Public Caminho As String = ""

            ''' <summary>
            ''' Define características do arquivo que será utilizado.
            ''' </summary>
            ''' <returns>Retorna o nome do arquivo com as informações selecionadas.</returns>
            ''' <remarks></remarks>
            Public Function Complex() As String
                Return Complex(Ordem, Descr, NomeSemDirSemExt, Extensao, Target)
            End Function

            ''' <summary>
            ''' Trata o nome de um arquivo adicionando extensão apropriada.
            ''' </summary>
            ''' <param name="Ordem">Define a retirada de espaços da string.</param>
            ''' <param name="Descr">Descrição do arquivo.</param>
            ''' <param name="LinkOuArquivoSemExt">Arquivo que será analisado.</param>
            ''' <param name="ExtensaoQuandoArq">Extensão que será concatenada ao nome do arquivo.</param>
            ''' <param name="Target">Delimitador que será usado, devendo ser ";"</param>
            ''' <returns>Retorna o nome do arquivo com a sua devida extensão concatenada.</returns>
            ''' <remarks></remarks>
            Public Shared Function Complex(ByVal Ordem As Integer, ByVal Descr As String, ByVal LinkOuArquivoSemExt As String, ByVal ExtensaoQuandoArq As String, Optional ByVal Target As String = "") As String
                Dim Ret As String = ""
                If Ordem > 0 Then
                    Ret &= Trim(Format(Ordem, "######00"))
                End If
                Ret &= IIf(Ret <> "", ",", "") & Replace(Descr, ",", ";")
                If Target <> "" Then
                    Ret &= "," & Replace(Target, ",", ";")
                End If
                Ret &= "," & Replace(LinkOuArquivoSemExt, ",", ";")
                Return ExprExpr(".", "", URLJSEncode(Ret, True), Replace(ExtensaoQuandoArq, ",", ""))
            End Function

            ''' <summary>
            ''' Define o nome do arquivo.
            ''' </summary>
            ''' <param name="Ordem">Define a retirada de espaços da string.</param>
            ''' <param name="Descr">Descrição do arquivo.</param>
            ''' <param name="LinkOuArquivoSemExt">Arquivo que será analisado.</param>
            ''' <param name="ExtensaoQuandoArq">Extensão que será concatenada ao nome do arquivo.</param>
            ''' <param name="Target">Delimitador que será usado, devendo ser ";"</param>
            ''' <remarks></remarks>
            Sub New(ByVal Ordem As Integer, ByVal Descr As String, ByVal LinkOuArquivoSemExt As String, ByVal ExtensaoQuandoArq As String, Optional ByVal Target As String = "")
                BaseNomeComplex(Complex(Ordem, Descr, LinkOuArquivoSemExt, ExtensaoQuandoArq, Target))
            End Sub

            ''' <summary>
            ''' Analisa características do arquivo.
            ''' </summary>
            ''' <param name="NomeComplex">Arquivo que será analisado.</param>
            ''' <remarks></remarks>
            Private Sub BaseNomeComplex(ByVal NomeComplex As String)
                Me.NomeComplex = NomeComplex
                Me.Caminho = System.IO.Path.GetDirectoryName(NomeComplex)
                Me.Termos = System.IO.Path.GetFileName(NomeComplex)
                Me.TermosDecode = URLJSDecode(Termos)

                ' qtd params
                ' 1=LinkouArquivo (será descrição também)
                ' 2=Descrição,LinkOuArquivo
                ' 3=Ordem,Descrição,LinkOuArquivo
                ' 4=Ordem,Descrição,Target,LinkOuArquivo

                Dim Dets() As String = Split(Me.TermosDecode, ",")
                Dim ItemDescr As Integer = 0
                Dim ItemNomeSemDir As Integer = 0
                Ordem = 0
                Target = ""
                If Dets.Length = 1 Then
                    NomeSemDir = Termos
                    Extensao = System.IO.Path.GetExtension(NomeSemDir)
                    NomeSemDirSemExt = StrStr(NomeSemDir, 0, -Len(Extensao))
                    Descr = ExprExpr(".", "", NomeSemDirSemExt, ".")
                Else
                    If Dets.Length = 2 Then
                        Ordem = 0
                        ItemNomeSemDir = 1
                    ElseIf Dets.Length = 3 Then
                        Ordem = Val(Dets(0))
                        If Ordem = 0 Then
                            ItemDescr = 0
                            ItemNomeSemDir = 2
                            Target = Dets(1)
                        Else
                            ItemDescr = 1
                            ItemNomeSemDir = 2
                        End If
                    ElseIf Dets.Length = 4 Then
                        Ordem = Val(Dets(0))
                        ItemDescr = 1
                        ItemNomeSemDir = 3
                        Target = Dets(2)
                    End If
                    Descr = ExprExpr(".", "", Dets(ItemDescr), ".")
                    NomeSemDir = Dets(ItemNomeSemDir)
                    Extensao = System.IO.Path.GetExtension(NomeSemDir)
                    NomeSemDirSemExt = StrStr(NomeSemDir, 0, -Len(Extensao))
                End If
            End Sub

            ''' <summary>
            ''' Verifica se o arquivo já foi tratado.
            ''' </summary>
            ''' <param name="NomeComplex">Arquivo que será verificado.</param>
            ''' <remarks></remarks>
            Public Sub New(ByVal NomeComplex As String)
                If NomeComplex = "" Then
                    Exit Sub
                End If
                BaseNomeComplex(NomeComplex)
            End Sub

        End Class

        ''' <summary>
        ''' Permite rodar o código somente uma determinada vez, sendo 1 a primeira, considerando um tempo base de cálculo das vezes.
        ''' </summary>
        ''' <param name="Pagina">Página que será rodado o código.</param>
        ''' <param name="Vez">Determina a quantidade de vezes.</param>
        ''' <param name="AposSegs">Determina a quantidade de segundos que deverá ser esperada para executar.</param>
        ''' <returns>Retorna False caso o código não tenha sido rodado, ou True caso o código tenha sido rodado.</returns>
        ''' <remarks></remarks>
        Public Shared Function SomenteNaVez(ByVal Pagina As Object, Optional ByVal Vez As Integer = -1, Optional ByVal AposSegs As Integer = 2) As Boolean
            Dim VDS As String = VarDeSessao(Pagina, "", "NA_VEZ_ULT_MOM")
            Dim V As String = Pagina.session(VDS)
            Dim Ret As Boolean = False
            Dim UltMom As Date
            Dim VezAtual As Integer
            If Not IsNothing(V) Then
                UltMom = Microsoft.VisualBasic.Left(V, 19)
                VezAtual = Val("0" & Mid(V, 20)) + 1

                If DateDiff(DateInterval.Second, UltMom, Now) > AposSegs Then
                    UltMom = Now
                    VezAtual = 1
                End If
            Else
                UltMom = Now
                VezAtual = 1
            End If

            If VezAtual = Vez Then
                Ret = True
            End If

            V = Format(UltMom, "yyyy-MM-dd HH:mm:ss") & " " & Format(VezAtual, "000")
            Pagina.session(VDS) = V
            Return Ret
        End Function

        ''' <summary>
        ''' Cria um array utilizado como dicionário.
        ''' </summary>
        ''' <remarks></remarks>
        Class MontaEstrut
            Inherits Dictionary(Of MontaEstrut.Cod, StringB)
            Private _listaparams As ArrayList = New ArrayList
            Private _listaatualizada As Boolean = False

            ''' <summary>
            ''' Atualiza a lista adicionando novos registros.
            ''' </summary>
            ''' <returns>Retorna lista atualizada.</returns>
            ''' <remarks></remarks>
            Private Function AtualizaLista() As ArrayList
                _listaparams.Clear()
                For Each Item As Cod In System.Enum.GetValues(GetType(Cod))
                    _listaparams.Add(":" & Item.ToString)
                    _listaparams.Add(Me(Item).ToString)
                Next
                Return _listaparams
            End Function

            ''' <summary>
            ''' Define o formato de exibição do dicionário.
            ''' </summary>
            ''' <param name="Template">Template que será usado como base.</param>
            ''' <returns>Retorna o conteúdo do dicionário formatado de acordo com o template.</returns>
            ''' <remarks></remarks>
            Public Function MontaArq(ByVal Template As String) As String
                If Not _listaatualizada Then
                    AtualizaLista()
                End If
                Dim Arq As New System.IO.StreamReader(FileExpr(Template))
                Dim Txt As String = Arq.ReadToEnd
                For Each Item As Cod In System.Enum.GetValues(GetType(Cod))
                    MacroSubstSQL(Txt, Nothing, _listaparams, "[:NOW]", Now)
                Next

                ' adaptações de texto 
                Txt = Txt.Replace("§", "") 'coringa... eliminado
                Return Txt
            End Function

            ''' <summary>
            ''' Tipo de string que será incluída no dicionário.
            ''' </summary>
            ''' <remarks></remarks>
            Class StringB

                ''' <summary>
                ''' Estrutura que será usada como base para a criação do dicionário.
                ''' </summary>
                ''' <param name="BaseEstrut">Estrutura que será usada para montagem do dicionário.</param>
                ''' <param name="MeuCod">Código que será inserido no dicionário.</param>
                ''' <remarks></remarks>
                Sub New(ByVal BaseEstrut As MontaEstrut, ByVal MeuCod As Cod)
                    _montaestrut = BaseEstrut
                    _cod = MeuCod
                End Sub

                ''' <summary>
                ''' Texto a ser inserido.
                ''' </summary>
                ''' <param name="Texto">Texto.</param>
                ''' <returns>Retorna string contendo o texto.</returns>
                ''' <remarks></remarks>
                Private Function TextoT(ByVal Texto As String) As String
                    Return Texto
                End Function

                ''' <summary>
                ''' Definições de características para o dicionário.
                ''' </summary>
                ''' <remarks></remarks>
                Private _montaestrut As MontaEstrut
                Private _conteudo As StringBuilder = New StringBuilder
                Private _nivel As Integer = 0
                Private _cod As Cod

                ''' <summary>
                ''' Formata o texto que será apresentado.
                ''' </summary>
                ''' <param name="Texto">Texto.</param>
                ''' <remarks></remarks>
                Public Sub Append(ByVal Texto As String)
                    _montaestrut._listaatualizada = False
                    _conteudo.Append(TextoT(Texto).Replace(vbCrLf, vbCrLf & New String(" ", NivelLimit(_nivel) * 4)))
                End Sub

                ''' <summary>
                ''' Define um número como limite de nível.
                ''' </summary>
                ''' <param name="Nivel">Nível.</param>
                ''' <returns>Retorna o número de limite máximo do nível.</returns>
                ''' <remarks></remarks>
                Private Function NivelLimit(ByVal Nivel As Integer) As Integer
                    Return Math.Max(Nivel, 0)
                End Function

                ''' <summary>
                ''' Verifica se o tamanho do texto é maior que a quantidade de níveis suportada, se for, adiciona a diferença para que o texto caiba no dicionário.
                ''' </summary>
                ''' <param name="Texto">Texto.</param>
                ''' <param name="DifNivApos">Diferença de níveis entre a quantidade do texto atual e o máximo permitido.</param>
                ''' <remarks></remarks>
                Public Sub AppendLine(ByVal Texto As String, Optional ByVal DifNivApos As Integer = 0)
                    Texto = TextoT(Texto)
                    If _cod = Cod.ASPX_REGISTER Then
                        If InStr(_montaestrut(_cod).ToString, Trim(Texto)) <> 0 Then
                            Exit Sub
                        End If
                    End If
                    _montaestrut._listaatualizada = False

                    _conteudo.AppendLine(New String(" ", NivelLimit(_nivel) * 4) & Texto.Replace(vbCrLf, vbCrLf & New String(" ", Math.Max(NivelLimit(_nivel), 0) * 4)))
                    Niv += DifNivApos
                End Sub

                ''' <summary>
                ''' Verifica se a quantidade de níveis do texto é suficiente.
                ''' </summary>
                ''' <param name="DifNivAntes">Diferença de níveis do texto antes de ser passado para a estrutura.</param>
                ''' <param name="Texto">Texto.</param>
                ''' <remarks></remarks>
                Public Sub AppendLine(ByVal DifNivAntes As Integer, ByVal Texto As String)
                    Texto = TextoT(Texto)
                    If _cod = Cod.ASPX_REGISTER Then
                        If InStr(_montaestrut(_cod).ToString, Trim(Texto)) <> 0 Then
                            Exit Sub
                        End If
                    End If
                    _montaestrut._listaatualizada = False

                    Niv += DifNivAntes
                    _conteudo.AppendLine(New String(" ", NivelLimit(_nivel) * 4) & Texto.Replace(vbCrLf, vbCrLf & New String(" ", NivelLimit(_nivel) * 4)))
                End Sub

                ''' <summary>
                ''' Leitura do valor de _conteudo.
                ''' </summary>
                ''' <value>Conteúdo que será atribuído.</value>
                ''' <returns>Retorna a string contida em _conteudo.</returns>
                ''' <remarks></remarks>
                Public Shadows ReadOnly Property ToString() As String
                    Get
                        Return _conteudo.ToString()
                    End Get
                End Property

                ''' <summary>
                ''' Leitura de conteúdo do _nível.
                ''' </summary>
                ''' <value>Valor que será atribuído.</value>
                ''' <returns>Retorna o valor contido em _nivel.</returns>
                ''' <remarks></remarks>
                Public Property Niv() As Integer
                    Get
                        Return _nivel
                    End Get
                    Set(ByVal value As Integer)
                        _nivel = value
                    End Set
                End Property
            End Class

            ''' <summary>
            ''' Lista de códigos que poderão ser utilizados.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub New()
                For Each Item As Cod In System.Enum.GetValues(GetType(Cod))
                    Me(Item) = New StringB(Me, Item)
                Next
            End Sub

            ''' <summary>
            ''' Faz a montagem do dicionário, fundindo os itens que ele irá conter.
            ''' </summary>
            ''' <param name="Monta">Estrutura que será usada para montar o dicionário.</param>
            ''' <remarks></remarks>
            Public Sub Merge(ByVal Monta As MontaEstrut)
                For Each Item As Cod In System.Enum.GetValues(GetType(Cod))
                    If Item = Cod.ASPX_REGISTER Then
                        For Each Linha As String In Split(Monta(Item).ToString, vbCrLf)
                            Me(Item).AppendLine(Linha)
                        Next
                    Else
                        Me(Item).Append(Monta(Item).ToString)
                    End If
                Next
            End Sub

            ''' <summary>
            ''' Lista de códigos que poderão ser chamados.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum Cod
                ASPX_MASTER_PAGE_FILE
                ASPX_CODE_FILE
                ASPX_CODE_FILE_SEM_PATH
                ASPX_INHERITS
                ASPX_PRE_TITLE
                ASPX_TITLE
                ASPX_POS_TITLE
                ASPX_DESCRIPTION
                ASPX_REGISTER
                ASPX_CONTENT_ID
                ASPX_CONTENT_PRINCIPAL
                ASPX_CONTENT_PRINC_RODAPE
                ASPX_CONTENT_PRINC_CABECALHO
                ASPX_CONTENT_INI
                ASPX_CONTENT_FIM
                ASPX_CONTENT_OUTROS_BOTOES_SUP
                ASPX_CONTENT_OUTROS_BOTOES_INF
                ASPX_CONTENT_NAVEGACAO_SUP
                ASPX_CONTENT_NAVEGACAO_INF
                ASPX_CONTENT_BUSCA
                VB_CONST
                VB_DIM
                VB_INIT
                VB_NAMESPACE_INI
                VB_NAMESPACE_FIM
                VB_CLASSE
                VB_COD_ADICIONAL
                VB_LOADCOMPLETE_NOTPOSTBACK
                VB_BOTOES
                VB_BUSCA
                VB_PAGE_LOAD
                VB_PAGE_LOADCOMPLETE
                VB_CARREGATUDO
                VB_GRIDSEL
                VB_ORDEMNOVA
                VB_CARREGANAV
                VB_MUDOUPAG
                VB_BTNSALVA_CLICK
                VB_BOTOES_EXCLUIR
                VB_VALIDACAO_INI
                VB_VALIDACAO_FIM
                INCOERENCIAS
                LARGURA_PX
            End Enum

            ''' <summary>
            ''' Verifica a existência de registros fora do padrão exigido.
            ''' </summary>
            ''' <param name="Obj">Objeto que será analizado.</param>
            ''' <param name="Nivel">Nível permitido.</param>
            ''' <param name="SinalizaIncoerencia">Sinaliza com True caso haja, ou False caso não haja.</param>
            ''' <param name="CONTENT_PRINC">Padrão a ser utilziado para comparação.</param>
            ''' <returns>Retorna o resultado da verificação.</returns>
            ''' <remarks></remarks>
            Public Function RenderCtl(ByVal Obj As Object, ByVal Nivel As Integer, ByVal SinalizaIncoerencia As Boolean, Optional ByVal CONTENT_PRINC As Cod = Cod.ASPX_CONTENT_PRINCIPAL) As MontaEstrut
                If TypeOf Obj Is Panel Then
                    Me(CONTENT_PRINC).Append("<asp:Panel runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(">" & vbCrLf)
                    Dim QtdCtl As Integer = 0
                    Try
                        QtdCtl = Obj.controls.count
                    Catch
                    End Try
                    If QtdCtl > 0 Then
                        For Each SubObj As Object In Obj.Controls
                            Me.Merge(New MontaEstrut().RenderCtl(SubObj, Nivel + 1, SinalizaIncoerencia, CONTENT_PRINC))
                        Next
                    End If
                    Me(CONTENT_PRINC).AppendLine("</asp:Panel>")
                ElseIf TypeOf Obj Is TextBox Then
                    Me(CONTENT_PRINC).Append("<asp:TextBox runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append("></asp:TextBox>" & vbCrLf)
                ElseIf Obj.ToString = "ASP.uc_icftdialogo_icftdialogo_ascx" Then
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register src=""~/uc/IcftDialogo/IcftDialogo.ascx"" tagname=""IcftDialogo"" tagprefix=""ucDlg"" %>")
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register Src=""~/UC/IcftQuadro/IcftQuadro.ascx"" TagName=""IcftQuadro"" TagPrefix=""ucQrd"" %>")

                    Me(CONTENT_PRINC).Append("<ucDlg:IcftDialogo runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(" />" & vbCrLf)
                ElseIf Obj.ToString = "ASP.uc_icftdialogoimagem_icftdialogoimagem_ascx" Then
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register src=""~/uc/IcftDialogoImagem/IcftDialogoImagem.ascx"" tagname=""IcftDialogoImagem"" tagprefix=""ucDlg"" %>")
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register Src=""~/UC/IcftQuadro/IcftQuadro.ascx"" TagName=""IcftQuadro"" TagPrefix=""ucQrd"" %>")

                    Me(CONTENT_PRINC).Append("<ucDlg:IcftDialogoImagem runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(" />" & vbCrLf)
                ElseIf TypeOf Obj Is Label Then
                    Me(CONTENT_PRINC).Append("<asp:Label runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append("></asp:Label>" & vbCrLf)
                ElseIf TypeOf Obj Is CheckBox Then
                    Me(CONTENT_PRINC).Append("<asp:CheckBox runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append("></asp:CheckBox>" & vbCrLf)
                ElseIf TypeOf Obj Is Literal Then
                    Me(CONTENT_PRINC).Append(Obj.text)
                ElseIf TypeOf Obj Is Button Then
                    Me(CONTENT_PRINC).Append("<asp:Button runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append("></asp:Button>" & vbCrLf)
                ElseIf TypeOf Obj Is Table Then
                    Me(CONTENT_PRINC).Append("<asp:Table runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(">" & vbCrLf)
                    Dim QtdCtl As Integer = 0
                    Try
                        QtdCtl = Obj.controls.count
                    Catch
                    End Try
                    If QtdCtl > 0 Then
                        For Each SubObj As Object In Obj.Controls
                            Me.Merge(New MontaEstrut().RenderCtl(SubObj, Nivel + 1, SinalizaIncoerencia, CONTENT_PRINC))
                        Next
                    End If
                    Me(CONTENT_PRINC).Append("</asp:Table>" & vbCrLf)
                ElseIf TypeOf Obj Is TableRow Then
                    Me(CONTENT_PRINC).Append("<asp:TableRow runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(">" & vbCrLf)
                    Dim QtdCtl As Integer = 0
                    Try
                        QtdCtl = Obj.controls.count
                    Catch
                    End Try
                    If QtdCtl > 0 Then
                        For Each SubObj As Object In Obj.Controls
                            Me.Merge(New MontaEstrut().RenderCtl(SubObj, Nivel + 1, SinalizaIncoerencia, CONTENT_PRINC))
                        Next
                    End If
                    Me(CONTENT_PRINC).Append("</asp:TableRow>" & vbCrLf)
                ElseIf TypeOf Obj Is TableCell Then
                    Me(CONTENT_PRINC).Append("<asp:TableCell runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(">" & vbCrLf)
                    Dim QtdCtl As Integer = 0
                    Try
                        QtdCtl = Obj.controls.count
                    Catch
                    End Try
                    If QtdCtl > 0 Then
                        For Each SubObj As Object In Obj.Controls
                            Me.Merge(New MontaEstrut().RenderCtl(SubObj, Nivel + 1, SinalizaIncoerencia, CONTENT_PRINC))
                        Next
                    End If
                    Me(CONTENT_PRINC).Append("</asp:TableCell>" & vbCrLf)
                ElseIf TypeOf Obj Is HyperLink Then
                    Me(CONTENT_PRINC).Append("<asp:HyperLink runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append("></asp:HyperLink>" & vbCrLf)
                ElseIf TypeOf Obj Is DropDownList Then
                    Me(CONTENT_PRINC).Append("<asp:DropDownList runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append("></asp:DropDownList>" & vbCrLf)
                ElseIf Obj.ToString = "ASP.uc_icfttextarea_icfttextarea_ascx" Then
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register src=""~/uc/IcftTextArea/IcftTextArea.ascx"" tagname=""IcftTextArea"" tagprefix=""ucTex"" %>")
                    Me(CONTENT_PRINC).Append("<ucTex:IcftTextArea runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(" />" & vbCrLf)
                ElseIf Obj.ToString = "ASP.uc_icftlistaadd_icftlistaadd_ascx" Then
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register Src=""~/uc/IcftListaAdd/IcftListaAdd.ascx"" TagName=""IcftListaAdd"" TagPrefix=""ucLAdd"" %>")
                    Me(CONTENT_PRINC).Append("<ucLAdd:IcftListaAdd runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).Append(" />" & vbCrLf)
                ElseIf Obj.ToString = "System.Web.UI.WebControls.RadioButtonList" Then
                    Me(CONTENT_PRINC).Append("<asp:RadioButtonList runat=""server"" RepeatDirection=""Horizontal""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).AppendLine(" >", 1)
                    For Each it As ListItem In CType(Obj, RadioButtonList).Items
                        Me(CONTENT_PRINC).Append("<asp:ListItem value=""" & it.Value & """>" & System.Web.HttpUtility.HtmlEncode(it.Text) & "</asp:ListItem>")
                    Next
                    Me(CONTENT_PRINC).AppendLine(-1, "</asp:RadioButtonList>")
                ElseIf Obj.ToString = "ASP.uc_icftcombobox_icftcombobox_ascx" Then
                    Me(Cod.ASPX_REGISTER).AppendLine("<%@ Register Src=""~/uc/icftcombobox/IcftComboBox.ascx"" TagName=""IcftComboBox"" TagPrefix=""ucCbb"" %>")
                    Me(CONTENT_PRINC).Append("<ucCbb:IcftComboBox runat=""server""")
                    IAtrib(Obj, SinalizaIncoerencia, CONTENT_PRINC)
                    Me(CONTENT_PRINC).AppendLine(" />", 1)
                Else
                    Stop
                End If
                Return Me
            End Function

            ''' <summary>
            ''' Verifica atributos contidos na lista.
            ''' </summary>
            ''' <param name="LISTA">Lista onde será feita a verificação.</param>
            ''' <param name="Props">Propriedades que devem ser consideradas na renderização.</param>
            ''' <param name="NProps">Propriedades que não devem ser consideradas na renderização.</param>
            ''' <param name="obj">Objeto utilizado no tratamento.</param>
            ''' <remarks></remarks>
            Public Sub VerificaAtrib(ByVal Lista As Object, ByVal Props As String, ByVal NProps As String, ByVal obj As Object)
                Dim Ctx As HttpContext = HttpContext.Current
                Dim qtd As Integer = 0
                Try
                    qtd = Lista.length
                Catch
                    Try
                        qtd = Lista.count
                    Catch
                    End Try
                End Try
                If qtd > 0 Then
                    For Each Prop As Object In Lista
                        Dim N As String
                        Try
                            N = Prop.NAME
                        Catch
                            N = Prop.ToString
                        End Try
                        If Not TemNaLista(Props, N) AndAlso Not TemNaLista(NProps, N) AndAlso Not TemNaLista(NZ(Ctx.Session("Indef"), ""), N) Then
                            Me(Cod.INCOERENCIAS).AppendLine("Indef:" & N)
                            Me(Cod.INCOERENCIAS).AppendLine(obj.ToString & "-" & N & " --> " & NZ(Prop(obj, N), ""))
                        End If
                    Next
                End If
            End Sub


            ' essa rotina é especial
            ' serve como cão de guarda para garantir que todas as propriedades renderizáveis sejam tratadas
            ' props são as propriedades que devem ser consideradas na renderização
            ' nprops são as propriedades que não devem ser consideradas.

            ''' <summary>
            ''' Verificação especial que considera possíveis falhas na formatação.
            ''' </summary>
            ''' <param name="Obj">Objeto que será utilizado na formatação.</param>
            ''' <param name="SinalizaIncoerencia">Sinaliza com True caso haja, ou False caso não haja.</param>
            ''' <param name="CONTENT_PRINC">Padrão a ser utilziado para comparação.</param>
            ''' <remarks></remarks>
            Sub IAtrib(ByVal Obj As Object, ByVal SinalizaIncoerencia As Boolean, Optional ByVal CONTENT_PRINC As MontaEstrut.Cod = MontaEstrut.Cod.ASPX_CONTENT_PRINCIPAL)
                Dim Props As String = "ID;Text;BackImageUrl;DefaultButton;Direction;GroupingText;HorizontalAlign;ScrollBars;Wrap;AccessKey;BackColor;BorderColor;BorderWidth;BorderStyle;CssClass;Style;Enabled;Font;ForeColor;Height;ToolTip;Width;Visible;MaxLength;TextMode;ReadOnly;ValidationGroup;BotaoTexto;Titulo;Caminho;PermitirAlterarCaminho;Mascara;ControleVinc;TipoQuadro;EscondeTexto;Tipo;ObterTextoSemCaminho;Ativo;TextAlign;OnKeyPress;OnBlur;ValorPadrao;Etiq;Formato;Auto;Tabela;Campo;StrConn;OnClick;Criterio;MostrarUrl;Checked;Caption;CaptionAlign;CellPadding;CellSpacing;GridLines;Cells;TableSection;VerticalAlign;AssociatedHeaderCellID;ColumnSpan;RowSpan;Items;SelectedIndex;AppendDataBoundItems;DataTextField;DataTextFormatString;DataValueField;SelectedItem;SelectedValue;DataMember;DataSourceID;DataSourceObject;DataSource;NavigateUrl;ImageUrl;Target;Altura;Largura;ArquivoCSS;TextBox;Panel;TextChange;Estilo;Atualizar;SQL;QtdCols;BotaoId;guPF1p6Xn7km;lMCc;lOPCuKGckw;kuO0uKGamA;jdjD6ZM;CommandName;CommandArgument;Lista;AutoPostBack"
                Dim NProps As String = "BackColor;BorderWidth;BorderColor;Font;ForeColor;Attributes;ControlStyle;ControlStyleCreated;EnableTheming;HasAttributes;SkinID;TabIndex;ClientID;EnableViewState;NamingContainer;BindingContainer;Page;TemplateControl;Parent;TemplateSourceDirectory;AppRelativeTemplateSourceDirectory;Site;UniqueID;Controls;AssociatedControlID;AutoCompleteType;CausesValidation;Columns;Rows;UseSubmitBehavior;InputAttributes;LabelAttributes;Application;Trace;Request;Response;Server;Cache;CachePolicy;IsPostBack;Session;AppRelativeVirtualPath;OnClientClick;PostBackUrl;TOOL_TIP;OBTER_TEXTO_SEM_CAMINHO;PODE_ALTERAR_CAMINHO;CONTROLE_VINC;BOTAO_TEXTO;ESCONDE_TEXTO;Direction;HorizontalAlign;ScrollBars;Wrap;BorderStyle;Width;Height;Caption;CaptionAlign;GridLines;Cells;TableSection;AssociatedHeaderCellID;RowSpan;Items;SelectedIndex;AppendDataBoundItems;DataTextField;DataTextFormatString;DataValueField;SelectedItem;SelectedValue;DataMember;DataSourceID;DataSourceObject;DataSource;NavigateUrl;ImageUrl;Target;Altura;Largura;ArquivoCSS;TextBox;Panel;TextChange;Estilo"

                If SinalizaIncoerencia Then
                    VerificaAtrib(Obj.GetType.GetProperties, Props, NProps, Obj)
                    VerificaAtrib(CType(Obj.attributes, AttributeCollection).Keys, Props, NProps, Obj)
                End If

                Dim JaFoi As String = ""
                For Each Item As String In Split(Props, ";")
                    If Item <> "" AndAlso Not TemNaLista(NProps, Item) AndAlso Not TemNaLista(JaFoi, Item) AndAlso Not (Item = "Text" And TypeOf Obj Is CheckBox) Then
                        JaFoi &= ";" & Item
                        Dim Conteudo As String = ""

                        ' busca em propriedade
                        Try
                            Conteudo = NZ(Prop(Obj, Item), "")
                        Catch
                            Dim p As Object = Prop(Obj, Item)
                            If TypeOf p Is CssStyleCollection Then
                                Conteudo = NZ(p.VALUE, "")
                            Else
                                Try
                                    Conteudo = Prop(Obj, Item).ToString
                                Catch ex As Exception
                                    If SinalizaIncoerencia Then
                                        Me(Cod.INCOERENCIAS).AppendLine(Obj.ToString & "-" & Item & " --> " & ex.Message)
                                    End If
                                End Try
                            End If
                        End Try

                        ' busca em atributo
                        If Conteudo = "" Then
                            Try
                                Conteudo = NZ(Obj.attributes(Item), "")
                            Catch
                            End Try
                        End If

                        ' inclui
                        If Conteudo <> "" Then
                            Me(CONTENT_PRINC).Append(" " & Item & "=""" & Conteudo & """")
                        End If
                    End If
                Next
            End Sub

        End Class

        ''' <summary>
        ''' Registra informações sobre o último evento realizado na página.
        ''' </summary>
        ''' <remarks></remarks>
        Class UltimoEvento
            Public Momento As Date
            Public Pagina As Page
            Public Controle As String
            Public Argumento As String

            ''' <summary>
            ''' Construtor da classe UltimoEvento.
            ''' </summary>
            ''' <param name="Momento">Data em que ocorreu o último evento.</param>
            ''' <param name="Pagina">Página na qual ocorreu o evento.</param>
            ''' <param name="Controle">Controle que ativou o evento.</param>
            ''' <param name="Argumento">Argumento utilizado no evento.</param>
            ''' <remarks></remarks>
            Public Sub New(ByVal Momento As Date, ByVal Pagina As Page, ByVal Controle As String, ByVal Argumento As String)
                Me.Momento = Momento
                Me.Pagina = Pagina
                Me.Controle = Controle
                Me.Argumento = Argumento
            End Sub

            ''' <summary>
            ''' Verifica se o evento corresponde a página.
            ''' </summary>
            ''' <param name="Page">Página que será verificada.</param>
            ''' <value></value>
            ''' <returns>Retorna False para o caso de diferença entre o último evento e o momento atual.</returns>
            ''' <remarks></remarks>
            Public Shared ReadOnly Property IsPost(ByVal Page As Page) As Boolean
                Get
                    Dim UE As UltimoEvento = Page.Session("ULTIMO_EVENTO")
                    If IsNothing(UE) Then
                        Return False
                    End If
                    If DateDiff(DateInterval.Second, UE.Momento, Now) > 5 Then
                        Return False
                    End If
                    Return True
                End Get
            End Property

            ''' <summary>
            ''' Registra as informações sobre o evento.
            ''' </summary>
            ''' <param name="Page">Página em que ocorreu o evento.</param>
            ''' <param name="Controle">Controle que ativou o evento.</param>
            ''' <remarks></remarks>
            Public Shared Sub Registra(ByVal Page As Page, ByVal Controle As Object)
                Dim Arg As String = ""
                Try
                    Arg = Controle.commandarguments
                Catch
                End Try
                Page.Session("ULTIMO_EVENTO") = New UltimoEvento(Now, Page, Controle.ID, Arg)
            End Sub

            ''' <summary>
            ''' Verifica a existência do último evento.
            ''' </summary>
            ''' <param name="Page">Página a ser registrada.</param>
            ''' <value>Valor a ser registrado.</value>
            ''' <returns>Retorna a sessão em que ocorreu o último evento.</returns>
            ''' <remarks></remarks>
            Public Shared Property Registrado(ByVal Page As Page) As UltimoEvento
                Get
                    Return Page.Session("ULTIMO_EVENTO")
                End Get
                Set(ByVal value As UltimoEvento)
                    Page.Session("ULTIMO_EVENTO") = value
                End Set
            End Property

        End Class

        ''' <summary>
        ''' Exibe um trecho de um texto especificado através de uma consulta REGEX. Caso o texto continue após o trecho pesquisado é incluído "...".
        ''' </summary>
        ''' <param name="Page">Página que contém o texto.</param>
        ''' <param name="Texto">Texo no qual a palavra será buscada.</param>
        ''' <param name="Palavras">Palavra a ser buscada.</param>
        ''' <param name="IncluirQuandoTrecho">Inclui "..." após a sequência de caracteres pesquisada.</param>
        ''' <returns>Retorna o trecho do texto pesquisado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeTrecho(ByVal Page As Page, ByVal Texto As String, ByVal Palavras As Integer, Optional ByVal IncluirQuandoTrecho As String = "...") As String
            Dim Ret As String = ""
            If Palavras > 0 Then
                Ret = Regex.Match(NZ(Texto, ""), "(?is)([^ \r\,]*([ \r\,]|$)){1," & Palavras & "}").Value
            End If
            If Len(Ret) < Len(Texto) And IncluirQuandoTrecho <> "" Then
                Ret &= IncluirQuandoTrecho
            End If
            Return Ret
        End Function

        ''' <summary>
        ''' Concatena um valor inserido a um outro objeto diferente de NULL.
        ''' </summary>
        ''' <param name="Concat">Objeto que será concatenado.</param>
        ''' <param name="Valor">Valor que será concatenado.</param>
        ''' <param name="DefaultSemConcat">Valor do objeto.</param>
        ''' <returns>Caso seja passado algum valor, ele retorna o objeto concatenado com o valor, senão, retorna apenas o objeto sem concatenação.</returns>
        ''' <remarks></remarks>
        Shared Function NZConcat(ByVal Concat As Object, ByVal Valor As Object, ByVal DefaultSemConcat As String) As String
            Dim ValorTrat As String = NZ(Valor, "")
            If ValorTrat = "" Then
                Return DefaultSemConcat
            End If
            Return Concat & ValorTrat
        End Function

        ''' <summary>
        ''' Mostra a página de ajuda.
        ''' </summary>
        ''' <param name="Page">Página que será exibida.</param>
        ''' <param name="ListaParams">Lista de parâmetros passados.</param>
        ''' <remarks></remarks>
        Shared Sub MostraPagHelp(ByVal Page As Page, ByVal ParamArray ListaParams() As Object)
            Page.Response.Clear()
            Page.Response.Write(HTML.Help(Page, ListaParams))
            Page.Response.End()
        End Sub

        ''' <summary>
        ''' Efetua trocas em um determinado texto.
        ''' </summary>
        ''' <param name="Texto">Texto que receberá a troca.</param>
        ''' <param name="Trocas">Troca que será feita.</param>
        ''' <returns>Retorna o texto com a troca realizada.</returns>
        ''' <remarks></remarks>
        Shared Function TrocaTexto(ByVal Texto As String, ByVal ParamArray Trocas() As Object) As String
            For z As Integer = 1 To Trocas.Length Step 2
                Texto = ReplRepl(Texto, Trocas(z - 1), Trocas(z))
            Next
            Return Texto
        End Function

        ''' <summary>
        ''' Tamanho máximo de buffer clob a ser considerado.
        ''' </summary>
        ''' <remarks></remarks>
        Const ClobBufferTamMax As Integer = 24536

        ''' <summary>
        ''' Gera instrução em SQL de acordo com os parâmetros inseridos.
        ''' </summary>
        ''' <param name="Inicia">Define o método que será utilizado.</param>
        ''' <param name="Campo">Campo a ser inserido.</param>
        ''' <param name="Dominio">Tabela do banco.</param>
        ''' <param name="Texto">Texo a ser gravado.</param>
        ''' <param name="Filtro">Filtro a ser considerado.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="Params">Lista de parâmetros passados.</param>
        ''' <remarks></remarks>
        Shared Sub ClobAppend(ByVal Inicia As Boolean, ByVal Campo As String, ByVal Dominio As String, ByVal Texto As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object)
            Dim Args As ArrayList = ParamArrayToArrayList(Params)
            If Inicia Then
                DSGrava("UPDATE " & Dominio & " SET " & Campo & " = :TEXTO" & " WHERE " & Filtro, StrConn, ":TEXTO", Texto, Args)
            Else
                DSGrava("BEGIN FOR CUR IN (SELECT " & Campo & " FROM " & Dominio & " WHERE " & Filtro & " FOR UPDATE) LOOP DBMS_LOB.APPEND(CUR." & Campo & ", :XX_TEXTO_APPEND); END LOOP; END;", StrConn, ":XX_TEXTO_APPEND", Texto, Args)
            End If
        End Sub

        ''' <summary>
        ''' Gravação de campos enormes.
        ''' </summary>
        ''' <param name="Texto">Texto contendo o campo enorme.</param>
        ''' <param name="Campo">Nome do campo a ser gravado no domínio.</param>
        ''' <param name="Dominio">Tabela ou select que será utilizado para atribuição do campo enorme.</param>
        ''' <param name="Filtro">Condição de filtro sem a cláusula where.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="Params">Parâmetros para tratamento de marcrosubstituição na condição.</param>
        ''' <remarks></remarks>
        Shared Sub ClobGrava(ByVal Texto As String, ByVal Campo As String, ByVal Dominio As String, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object)
            Dim Args As ArrayList = ParamArrayToArrayList(Params)
            Dim Inicia As Boolean = True
            Dim z As Integer = 0
            For z = 1 To Len(Texto) Step ClobBufferTamMax
                If (Len(Texto) - z) < ClobBufferTamMax Then
                    ClobAppend(Inicia, Campo, Dominio, Mid(Texto, z), Filtro, StrConn, Args)
                    Exit Sub
                Else
                    ClobAppend(Inicia, Campo, Dominio, Mid(Texto, z, ClobBufferTamMax), Filtro, StrConn, Args)
                End If
                Inicia = False
            Next
        End Sub

        ''' <summary>
        ''' Elimina outros caracteres que não os espaços extremos.
        ''' </summary>
        ''' <param name="Texto">Texto onde será procurado.</param>
        ''' <param name="Carac">Caracter a ser procurado.</param>
        ''' <returns>Retorna o texto sem os caracteres eliminados.</returns>
        ''' <remarks></remarks>
        Public Shared Function TrimCarac(ByVal Texto As String, ByVal Carac() As String) As String
            Dim Achou As Boolean = True
            Do While Achou
                Achou = False
                For Each Item As String In Carac
                    Do While Texto.StartsWith(Item, StringComparison.OrdinalIgnoreCase)
                        Texto = Mid(Texto, Len(Item) + 1)
                        Achou = True
                    Loop
                    Do While Texto.EndsWith(Item, StringComparison.OrdinalIgnoreCase)
                        Texto = StrStr(Texto, 0, -Len(Item))
                    Loop
                Next
            Loop
            Return Texto
        End Function

        ''' <summary>
        ''' Procura por espaços no texto e os remove.
        ''' </summary>
        ''' <param name="Texto">Texto.</param>
        ''' <returns>Retorna uma string contendo uma cópia do texto passado por parâmetro, porém sem os espaços.</returns>
        ''' <remarks></remarks>
        Public Shared Function TrimNbsp(ByVal Texto As String) As String
            Texto = Trim(Texto)
            Texto = TrimCarac(Texto, New String() {"&nbsp;"})
            Return Texto
        End Function

        ''' <summary>
        ''' Obtém o tamanho do diretório escolhido.
        ''' </summary>
        ''' <param name="Diretorio">Diretório escolhido.</param>
        ''' <returns>Retorna o tamanho do diretório escolhido.</returns>
        ''' <remarks></remarks>
        Public Shared Function TamDir(ByVal Diretorio As String) As Long
            Diretorio = FileExpr(Diretorio)
            Return TamDir(New System.IO.DirectoryInfo(Diretorio))
        End Function

        ''' <summary>
        ''' Informa o tamanho do diretório, incluindo diretórios filhos.
        ''' </summary>
        ''' <param name="Diretorio">Diretório a ser buscado.</param>
        ''' <returns>Retorna o tamanho do diretório e seus filhos, caso haja.</returns>
        ''' <remarks></remarks>
        Public Shared Function TamDir(ByVal Diretorio As System.IO.DirectoryInfo) As Long
            Dim Ret As Long = 0
            If Diretorio.Exists Then
                For Each FF As System.IO.FileInfo In Diretorio.GetFiles
                    Ret += FF.Length

                    If Ambiente() = AmbienteTipo.Windowsforms Then
                        System.Windows.Forms.Application.DoEvents()
                    End If

                Next

                For Each DDD As System.IO.DirectoryInfo In Diretorio.GetDirectories
                    Ret += TamDir(DDD)

                    If Ambiente() = AmbienteTipo.Windowsforms Then
                        System.Windows.Forms.Application.DoEvents()
                    End If

                Next
            End If
            Return Ret
        End Function

        ''' <summary>
        ''' Forma de apresentação da especificação de tamanho.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum ExibeTamDirOpcoes
            Auto
            Bytes
            KBytes
            MBytes
            GBytes
            Teras
        End Enum

        ''' <summary>
        ''' Define a forma de exibição das informações sobre diretórios.
        ''' </summary>
        ''' <param name="Bytes">Tamanho em Bytes.</param>
        ''' <param name="Formato">Formato escolhido para exibição.</param>
        ''' <param name="CasasDecimais">Quantidade de casas decimais.</param>
        ''' <returns>Retorna o tamanho do diretório no formato de exibição escolhido.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExibeTamDir(ByVal Bytes As Object, Optional ByVal Formato As ExibeTamDirOpcoes = ExibeTamDirOpcoes.Auto, Optional ByVal CasasDecimais As Integer = 2) As String
            Dim TotBytes As Long = Bytes
            Dim Tot As Double
            If Formato = ExibeTamDirOpcoes.Bytes Then
                Return TotBytes & " " & Pl(TotBytes, "Byte")
            ElseIf Formato = ExibeTamDirOpcoes.KBytes Then
                Tot = Math.Round(TotBytes / 1024, CasasDecimais)
                Return Tot & " " & Pl(Tot, "KByte")
            ElseIf Formato = ExibeTamDirOpcoes.MBytes Then
                Tot = Math.Round(TotBytes / 1024 ^ 2, CasasDecimais)
                Return Tot & " " & Pl(Tot, "MByte")
            ElseIf Formato = ExibeTamDirOpcoes.GBytes Then
                Tot = Math.Round(TotBytes / 1024 ^ 3, CasasDecimais)
                Return Tot & " " & Pl(Tot, "GByte")
            ElseIf Formato = ExibeTamDirOpcoes.Teras Then
                Tot = Math.Round(TotBytes / 1024 ^ 4, CasasDecimais)
                Return Tot & " " & Pl(Tot, "TeraByte")
            ElseIf Formato = ExibeTamDirOpcoes.Auto Then
                If TotBytes < 1024 Then
                    Return ExibeTamDir(TotBytes, ExibeTamDirOpcoes.Bytes, CasasDecimais)
                ElseIf TotBytes < 1024 ^ 2 Then
                    Return ExibeTamDir(TotBytes, ExibeTamDirOpcoes.KBytes, CasasDecimais)
                ElseIf TotBytes < 1024 ^ 3 Then
                    Return ExibeTamDir(TotBytes, ExibeTamDirOpcoes.MBytes, CasasDecimais)
                ElseIf TotBytes < 1024 ^ 4 Then
                    Return ExibeTamDir(TotBytes, ExibeTamDirOpcoes.GBytes, CasasDecimais)
                Else
                    Return ExibeTamDir(TotBytes, ExibeTamDirOpcoes.Teras, CasasDecimais)
                End If
            End If
            Return ""
        End Function

        ''' <summary>
        ''' Consulta um par de chaves em uma determinada tabela.
        ''' </summary>
        ''' <param name="ExprChave">Campos utilizados na consulta.</param>
        ''' <param name="ExprValor">Campos utilizados na consulta.</param>
        ''' <param name="TabelaOuSQL">Tabela ou SQL que será usado.</param>
        ''' <param name="STRCONN">String de conexão com o banco.</param>
        ''' <param name="Condicao">Condição a ser considerada.</param>
        ''' <param name="Params">Parâmetros que serão passados.</param>
        ''' <returns>Retorna um dicionário contendo o resultado da consulta.</returns>
        ''' <remarks></remarks>
        Shared Function DsPairKey(ByVal ExprChave As String, ByVal ExprValor As String, ByVal TabelaOuSQL As String, ByVal StrConn As Object, ByVal Condicao As String, ByVal ParamArray Params() As Object) As Dictionary(Of Object, Object)
            Dim Dict As New Dictionary(Of Object, Object)
            For Each Linha As System.Data.DataRow In DSCarrega("SELECT " & ExprChave & ", " & ExprValor & " FROM " & IIf(TabelaOuSQL.StartsWith("SELECT", StringComparison.OrdinalIgnoreCase), "(" & TabelaOuSQL & ")", TabelaOuSQL) & IIf(Condicao <> "", " WHERE " & Condicao, ""), StrConn, Params).Tables(0).Rows
                Dict.Add(Linha(0), Linha(1))
            Next
            Return Dict
        End Function

        ''' <summary>
        ''' Permite o carregamento de mais de um parâmetro ao mesmo tempo, possibilitando acesso de cada um como colunas de um datarow.
        ''' </summary>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="Chaves">Nome de apresentação do campo.</param>
        ''' <param name="Tabela">Tabela que será acessada.</param>
        ''' <param name="CampoChave">Condição para a consulta.</param>
        ''' <param name="CampoConteudo">Campo que será buscado.</param>
        ''' <param name="FiltroAdic">Filtro que será considerado na consulta.</param>
        ''' <param name="Params">Parâmetros que serão passados.</param>
        ''' <returns>Retorna um dataset contendo o resultado da consulta.</returns>
        ''' <remarks></remarks>
        Shared Function DsConfigParams(ByVal strconn As Object, ByVal Chaves As String, Optional ByVal Tabela As Object = Nothing, Optional ByVal CampoChave As String = "PARAM", Optional ByVal CampoConteudo As String = "CONFIG", Optional ByVal FiltroAdic As String = "", Optional ByVal Params As Object = Nothing) As System.Data.DataRow
            Dim SQL As String = ""
            If IsNothing(Tabela) Then
                Tabela = TabEspec(TabEspecOpc.SYS_CONFIG_GLOBAL)
            End If
            For Each Chave As String In Split(Chaves, ";")
                Chave = Trim(Chave)
                SQL &= IIf(SQL <> "", ", ", "") & "(SELECT " & CampoConteudo & " FROM " & Tabela & " WHERE " & IIf(FiltroAdic <> "", FiltroAdic & " AND ", "") & CampoChave & "='" & Chave.Replace("'", "''") & "') AS " & Chave
            Next
            SQL = "SELECT " & SQL & " FROM DUAL"
            Return DSCarrega(SQL, strconn, Params).Tables(0).Rows(0)
        End Function

        ''' <summary>
        ''' Executa script VBS.
        ''' </summary>
        ''' <param name="VBS">Nome do script a ser executado.</param>
        ''' <returns>Texto de saída do script.</returns>
        ''' <remarks></remarks>
        Public Shared Function ExecutaVBS(ByVal VBS As String) As String
            Dim Arq As String = NomeArqLivre("~/temp", "Script.vbs")
            Dim F As New System.IO.StreamWriter(Arq)
            F.WriteLine(VBS.Replace("|", vbCrLf))
            F.Close()
            Dim Ret As String = DosShell("cscript.exe", Arq, "", "", "")
            Kill(Arq)
            Return Ret
        End Function

        ''' <summary>
        ''' Calcula dígito verificador módulo 10.
        ''' </summary>
        ''' <param name="Texto">Texto para o qual queremos o dígito verificador.</param>
        ''' <returns>Dígito calculado.</returns>
        ''' <remarks></remarks>
        Public Shared Function DacMod10(ByVal Texto As String) As String
            Dim DacMod10L As Integer = 0
            Dim Mult As Integer = 2
            For z As Integer = Len(Texto) To 1 Step -1
                Dim Fat As Integer = Val(Mid(Texto, z, 1))
                Dim FatStr As String = Fat * Mult
                Mult = IIf(Mult = 2, 1, 2)
                For zz As Integer = Len(FatStr) To 1 Step -1
                    DacMod10L += Val(Mid(FatStr, zz, 1))
                Next
            Next
            DacMod10L = 10 - (DacMod10L Mod 10)
            If DacMod10L = 10 Then
                DacMod10L = 0
            End If
            Return DacMod10L.ToString()
        End Function

        ''' <summary>
        ''' Calcula dígito verificador módulo 11.
        ''' </summary>
        ''' <param name="Texto">Texto para o qual queremos o dígito verificador.</param>
        ''' <returns>Dígito calculado.</returns>
        ''' <remarks></remarks>
        Public Shared Function DacMod11(ByVal Texto As String) As String
            Dim DacMod11L As Integer = 0
            Dim Mult As Integer = 2
            For z As Integer = Len(Texto) To 1 Step -1
                Dim Fat As Integer = Val(Mid(Texto, z, 1))
                DacMod11L += Fat * Mult
                Mult = IIf(Mult < 9, Mult + 1, 2)
            Next
            DacMod11L = 11 - (DacMod11L Mod 11)
            If DacMod11L = 0 OrElse DacMod11L = 10 OrElse DacMod11L = 11 Then
                DacMod11L = 1
            End If
            Return DacMod11L
        End Function

        Public Shared Function DacModP(ByVal Texto As String) As String
            Dim DacMod11L As Integer = 0
            Dim Mult As Integer = 2
            For z As Integer = 0 To Len(Texto) - 1 Step 1
                Dim Fat As Integer = Texto.Substring(z, 1)
                DacMod11L += Fat * Mult
                Mult = IIf(Mult <= 2, 7, Mult - 1)
            Next
            DacMod11L = 11 - (DacMod11L Mod 11)
            If DacMod11L = 11 Then
                Return 0
            End If
            If DacMod11L = 10 Then
                Return "P"
            End If
            Return DacMod11L
        End Function


        ''' <summary>
        ''' Calcula dígito verificador módulo 11 do CNPJ.
        ''' </summary>
        ''' <param name="Texto">Número no formato string</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function DacMod11CNPJ(ByVal Texto As String) As String
            Dim DacMod11L As Integer = 0
            Dim Mult As Integer = 2
            For z As Integer = Len(Texto) To 1 Step -1
                Dim Fat As Integer = Val(Mid(Texto, z, 1))
                DacMod11L += Fat * Mult
                Mult = IIf(Mult < 9, Mult + 1, 2)
            Next
            DacMod11L = 11 - (DacMod11L Mod 11)
            If DacMod11L > 9 Then
                DacMod11L = 0
            End If
            Return DacMod11L
        End Function

        ''' <summary>
        ''' Calcula dígito verificador módulo 11 CPF.
        ''' </summary>
        ''' <param name="Texto">Número no formato string.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function DacMod11CPF(ByVal Texto As String) As String
            Dim DacMod11L As Integer = 0
            Dim Mult As Integer = Len(Texto) + 1
            For z As Integer = 0 To Len(Texto) - 1 Step 1
                Dim Fat As Integer = Texto.Substring(z, 1)
                DacMod11L += Fat * Mult
                Mult = Mult - 1
            Next
            DacMod11L = 11 - (DacMod11L Mod 11)
            If DacMod11L > 9 Or DacMod11L < 0 Then
                DacMod11L = 0
            End If
            Return DacMod11L
        End Function

        ''' <summary>
        ''' Carrega arquivo binário a partir de Url.
        ''' </summary>
        ''' <param name="Url">Endereço do arquivo.</param>
        ''' <returns>Array de bytes.</returns>
        ''' <remarks></remarks>
        Public Shared Function CarregaUrlBin(ByVal Url As String) As Byte()
            Dim BT_ACUM As New List(Of Byte)
            Dim Req As System.Net.HttpWebRequest = System.Net.WebRequest.Create(UriRaiz(Url))
            Dim Resp As System.Net.HttpWebResponse = Req.GetResponse()
            Dim BR As New System.IO.BinaryReader(Resp.GetResponseStream(), System.Text.Encoding.ASCII)
            While True
                Dim BT() As Byte = BR.ReadBytes(1024)
                If BT.Count = 0 Then
                    Exit While
                End If
                BT_ACUM.AddRange(BT)
            End While
            Return BT_ACUM.ToArray
        End Function

        ''' <summary>
        ''' Eventos para automação em geral.
        ''' </summary>
        ''' <remarks></remarks>
        Class AcessoEventos
            ''' <summary>
            ''' Evento que ocorre após login.
            ''' </summary>
            ''' <remarks></remarks>
            Public Event DepoisDelogin()

            ''' <summary>
            ''' Função executada após login.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub DepoisDeLoginExec()
                RaiseEvent DepoisDelogin()
            End Sub
        End Class

        ''' <summary>
        ''' Obtém indicador de progresso da barra.
        ''' </summary>
        ''' <param name="BarraProgresso">Valor a ser definido como indicador de progresso na barra.</param>
        ''' <value>Barra de progresso a ser pesquisada.</value>
        ''' <returns>Retorna valor atual de progresso na barra.</returns>
        ''' <remarks></remarks>
        Public Shared Property ProgressoValor(ByVal BarraProgresso As Object) As Integer
            Get
                Return BarraProgresso.value
            End Get
            Set(ByVal value As Integer)
                BarraProgresso.value = value

                If Not IsNothing(BarraProgresso) Then
                    Dim Ini As String = ProgressoTexto(BarraProgresso)
                    If Ini <> "" Then
                        Select Case StrStr(Ini, -4)
                            Case "[--]"
                                Ini = StrStr(Ini, 0, -4) & "[\ ]"
                            Case "[\ ]"
                                Ini = StrStr(Ini, 0, -4) & "[| ]"
                            Case "[| ]"
                                Ini = StrStr(Ini, 0, -4) & "[/ ]"
                            Case "[/ ]"
                                Ini = StrStr(Ini, 0, -4) & "[--]"
                            Case Else
                                Ini &= " [--]"
                        End Select
                        ProgressoTexto(BarraProgresso) = Ini
                    End If
                End If
            End Set
        End Property

        ''' <summary>
        ''' Retorna texto apresentado na barra de progresso.
        ''' </summary>
        ''' <param name="BarraProgresso"></param>
        ''' <value>Texto encontrado na barra de progresso.</value>
        ''' <returns>Texto encontrado na barra de progresso.</returns>
        ''' <remarks></remarks>
        Public Shared Property ProgressoTexto(ByVal BarraProgresso As Object) As String
            Get
                If Not IsNothing(BarraProgresso) Then
                    Dim Ctl As System.Windows.Forms.ProgressBar = Nothing
                    Try
                        Ctl = BarraProgresso
                        For Each Item As Object In Ctl.FindForm.Controls.Find(Ctl.Name & "_etiq", True)
                            Return Item.text
                        Next
                    Catch
                    End Try
                End If
                Return ""
            End Get
            Set(ByVal value As String)
                If Not IsNothing(BarraProgresso) Then
                    Dim Ctl As System.Windows.Forms.ProgressBar = Nothing
                    Try
                        Ctl = BarraProgresso
                        For Each Item As Object In Ctl.FindForm.Controls.Find(Ctl.Name & "_etiq", True)
                            Item.text = value
                        Next
                    Catch
                    End Try
                End If
            End Set
        End Property

        ''' <summary>
        ''' Verifica senha válida com base em condições pré-determinadas.
        ''' </summary>
        ''' <param name="Senha">Senha a ser verificada.</param>
        ''' <param name="MinimoCaracs">Mínimo de caracteres exigido.</param>
        ''' <param name="ExigirLetraENum">Exigir letra e número?</param>
        ''' <param name="MaxCaracRepet">Máximo de caracteres repetidos.</param>
        ''' <param name="MaxCaracNaSeq">Máximo de caracteres em sequência.</param>
        ''' <returns>Retorna true caso senha atenda estas condições e false caso contrário.</returns>
        ''' <remarks></remarks>
        Public Shared Function ValidaSenha(ByVal Senha As String, Optional ByVal MinimoCaracs As Integer = 8, Optional ByVal ExigirLetraENum As Boolean = False, Optional ByVal MaxCaracRepet As Integer = -1, Optional ByVal MaxCaracNaSeq As Integer = -1) As String

            ' repetição
            If MaxCaracRepet > 1 AndAlso Len(Senha) > 0 Then
                Dim Ult As String = ""
                Dim Qtd As Integer = 0
                Dim QtdMax As Integer = 0
                For Z As Integer = 1 To Len(Senha)
                    Dim Carac As String = Mid(Senha, Z, 1)
                    If Carac = Ult Then
                        Qtd += 1
                    Else
                        QtdMax = Math.Max(QtdMax, Qtd)
                        Ult = Carac
                        Qtd = 0
                    End If
                Next
                QtdMax = Math.Max(QtdMax, Qtd)
                If QtdMax >= MaxCaracRepet Then
                    Return "NÃO repita o mesmo caracter mais de " & MaxCaracRepet & Pl(MaxCaracRepet, " vez consecutiva", " vezes consecutivas") & " (ex.inválidos: " & New String("A", MaxCaracRepet + 1) & ", " & New String("1", MaxCaracRepet + 1) & ", TESTE" & New String("1", MaxCaracRepet + 1) & ")."
                End If
            End If


            ' sequência para cima ou para baixo
            If MaxCaracNaSeq > 1 AndAlso Len(Senha) > 0 Then
                Dim Ult As Integer = 0
                Dim Qtd As Integer = 0
                Dim QtdMax As Integer = 0
                Dim z As Integer = 1
                Dim Descendo As Boolean = False
                Do While z > 0
                    Dim Carac As Integer = Asc(Mid(Senha, z, 1))
                    If Carac = Ult + 1 Then
                        Qtd += 1
                    Else
                        QtdMax = Math.Max(QtdMax, Qtd)
                        Qtd = 0
                    End If
                    Ult = Carac

                    If z < Len(Senha) And Not Descendo Then
                        z += 1
                    ElseIf z = Len(Senha) And Not Descendo Then
                        Descendo = True
                        Ult = 0
                    Else
                        z -= 1
                    End If
                Loop
                QtdMax = Math.Max(QtdMax, Qtd)
                If QtdMax >= MaxCaracNaSeq Then
                    Return "NÃO utilize sequências com mais de " & MaxCaracNaSeq & " caracteres ascendentes ou descendentes em sua senha (ex.inválidos: TESTE" & Microsoft.VisualBasic.Left("123456789", MaxCaracNaSeq + 1) & ", SENHA" & Microsoft.VisualBasic.Left("87654321", MaxCaracNaSeq + 1) & " ou " & Microsoft.VisualBasic.Left("ABCDEFGHIJKL", MaxCaracNaSeq + 1) & ")."
                End If
            End If

            ' mínimo de caracteres...
            If Senha.Length < MinimoCaracs Then
                Return "Senha muito curta. Entre pelo menos " & MinimoCaracs & Pl(MinimoCaracs, " caracter", " caracteres") & "."
            End If

            If ExigirLetraENum Then
                If Not (Regex.Match(Senha, "(?is)[a-z]").Success AndAlso Regex.Match(Senha, "[0-9]").Success) Then
                    Return "Por questões de segurança, sua senha precisa utilizar letras e números não devendo ser somente letras ou somente números."
                End If
            End If
            Return "OK"
        End Function

        ''' <summary>
        ''' Obtém elemento de xml.
        ''' </summary>
        ''' <param name="Xml">Texto xml.</param>
        ''' <param name="Param">Parâmetro desejado.</param>
        ''' <returns>Valor do parâmetro desejado.</returns>
        ''' <remarks></remarks>
        Public Shared Function XmlElem(ByVal Xml As Object, ByVal Param As String) As Object
            Dim Ret As Object = Nothing
            Dim Node As System.Xml.XmlNode = Xml
            If Not IsNothing(Node) Then
                Dim Tipo() As String = Split(NZV(System.Text.RegularExpressions.Regex.Match(Param, "{(.*?)}").Groups(1).Value, "System.String"), ";")
                Dim ParamDef As String = System.Text.RegularExpressions.Regex.Replace(Param, "{.*?}", "")
                ParamDef = ParamDef.Replace("/", "\")
                For Each No As String In Split(ParamDef, "\")
                    If No.StartsWith("*") Then
                        No = Mid(No, 2)
                    End If
                    Dim NoSep() As String = Split(No, ".")
                    Node = Node.Item(NoSep(0))
                    If IsNothing(Node) Then
                        Return Nothing
                    ElseIf NoSep.Count > 1 Then
                        Dim Valor As Object = Node.Attributes(NoSep(1))
                        If IsNothing(Valor) Then
                            Return Valor
                        End If
                        Return CTypeVal(Valor.VALUE, Tipo(0))
                    End If
                Next
                Return CTypeVal(Node.InnerText, Tipo(0))
            End If
            Return Ret
        End Function




        ''' <summary>
        ''' Obtém elementos do XML em forma de parâmetros.
        ''' </summary>
        ''' <param name="Xml">Documento XML.</param>
        ''' <param name="Params">Params desejados.</param>
        ''' <returns>Lista de parâmetros.</returns>
        ''' <remarks></remarks>
        Public Shared Function XmlElemParams(ByVal Xml As Object, ByVal Params() As String) As ArrayList
            Dim Conteudo As New ArrayList
            For z As Integer = 0 To Params.Count - 1 Step 2
                Conteudo.Add(":" & Params(z))

                Try
                    Conteudo.Add(NZ(XmlElem(Xml, Params(z + 1)), System.Convert.DBNull))
                Catch EX As Exception
                    Throw New Exception("Erro na obtenção de param " & Params(z) & " no caminho " & Params(z + 1) & ": " & EX.Message)
                End Try

            Next
            Return Conteudo
        End Function


        ''' <summary>
        ''' Transforma variável em tipo especificado por texto.
        ''' </summary>
        ''' <param name="Origem">Objeto de origem.</param>
        ''' <param name="Tipo">Tipo em texto para especificação final.</param>
        ''' <returns>Objeto criado no tipo desejado.</returns>
        ''' <remarks></remarks>
        Public Shared Function CTypeVal(ByVal Origem As Object, ByVal Tipo As String) As Object
            If Compare(Tipo, "System.Double") OrElse Compare(Tipo, "System.Single") Then
                Origem = Origem.replace(",", ".")
                Origem = Val(Origem)
            End If
            Return CTypeStr(Origem, Tipo)
        End Function

        ''' <summary>
        ''' Tipo de especificação se é do usuário ou global.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum TabEspecOpc
            SYS_CONFIG_USUARIO
            SYS_CONFIG_GLOBAL
        End Enum

        ''' <summary>
        ''' Cria um novo dicionário baseando nas tabelas SYS_CONFIG_USUARIO ou SYS_CONFIG_GLOBAL.
        ''' </summary>
        ''' <param name="Tabela">Tabela que será passada.</param>
        ''' <returns>Retorna o nome da tabela.</returns>
        ''' <remarks></remarks>
        Public Shared Function TabEspec(ByVal Tabela As TabEspecOpc) As String
            Static TabEspecDic As New Dictionary(Of TabEspecOpc, String)
            If TabEspecDic.Keys.Contains(Tabela) Then
                Return TabEspecDic(Tabela)
            End If

            Dim Nome As String = WebConf("tab_" & Tabela.ToString.ToLower)
            If Nome = "" Then
                Nome = Tabela.ToString
            End If

            TabEspecDic(Tabela) = Nome
            Return Nome
        End Function

        ''' <summary>
        ''' Moeda a ser considerada na função de extenso.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum ExtensoLingOpc
            PT
            REAL
            USD
            DM
            YEN
            EURO
        End Enum

        ''' <summary>
        ''' Obtém extenso de um número.
        ''' </summary>
        ''' <param name="VV">Valor.</param>
        ''' <param name="Ling">Idioma (ou moeda).</param>
        ''' <returns>Texto do extenso deste número.</returns>
        ''' <remarks></remarks>
        Public Shared Function Extenso(ByVal VV As Double, ByVal Ling As ExtensoLingOpc) As String
            Return Extenso(VV, Ling.ToString)
        End Function

        ''' <summary>
        ''' Obtém a escrita por extenso de um número.
        ''' </summary>
        ''' <param name="VV">Valor.</param>
        ''' <param name="Ling">Idioma (ou moeda).</param>
        ''' <returns>Texto do extenso deste número.</returns>
        ''' <remarks></remarks>
        Public Shared Function Extenso(ByVal VV As Double, ByVal Ling As String) As String
            Try
                Dim StrUnid As String, StrDez As String, StrCem As String, StrMil As String, StrCent As String, MOEDA As String, SEP As String, StrPrimaDez As String
                Dim StrVV As String, StrV0 As String, StrMoeda As String, StrM0 As String, Esp As String, SepDec As String
                Dim pos As Integer, Z As Integer, SepAndTrês As String
                Dim SepMil As String
                If Ling = "PT" Or Ling = "" Then
                    StrUnid = "Um;Dois;Três;Quatro;Cinco;Seis;Sete;Oito;Nove"
                    StrPrimaDez = "Onze;Doze;Treze;Quatorze;Quinze;Dezesseis;Dezesete;Dezoito;Dezenove"
                    StrDez = "Dez;Vinte;Trinta;Quarenta;Cinquenta;Sessenta;Setenta;Oitenta;Noventa"
                    StrCem = "Cento;Duzentos;Trezentos;Quatrocentos;Quinhentos;Seiscentos;Setecentos;Oitocentos;Novecentos"
                    StrMil = "Mil.Mil;Milhão.Milhões;Bilhão.Bilhões;Trilhão.Trilhões"
                    StrCent = "Centésimo.Centésimos"
                    MOEDA = ".."
                    SEP = " e "
                    SepDec = " e "
                    SepMil = ", "
                    SepAndTrês = " e "
                    Esp = " "
                ElseIf Ling = "R$" OrElse Ling = "Real" OrElse Ling = "REAL" Then
                    StrUnid = "Um;Dois;Três;Quatro;Cinco;Seis;Sete;Oito;Nove"
                    StrPrimaDez = "Onze;Doze;Treze;Quatorze;Quinze;Dezesseis;Dezesete;Dezoito;Dezenove"
                    StrDez = "Dez;Vinte;Trinta;Quarenta;Cinquenta;Sessenta;Setenta;Oitenta;Noventa"
                    StrCem = "Cento;Duzentos;Trezentos;Quatrocentos;Quinhentos;Seiscentos;Setecentos;Oitocentos;Novecentos"
                    StrMil = "Mil.Mil;Milhão.Milhões;Bilhão.Bilhões;Trilhão.Trilhões"
                    StrCent = "Centavo.Centavos"
                    MOEDA = "Real.Reais.de Reais"
                    SEP = " e "
                    SepDec = " e "
                    SepMil = ", "
                    SepAndTrês = " e "
                    Esp = " "
                ElseIf Ling = "USD" Or Ling = "US$" Or Ling = "USD." Or Ling = "U.S.DLRS" Then
                    StrUnid = "One;Two;Three;Four;Five;Six;Seven;Eight;Nine"
                    StrPrimaDez = "Eleven;Twelve;Thirteen;Fourteen;Fifteen;Sixteen;Seventeen;Eighteen;Nineteen"
                    StrDez = "Ten;Twenty;Thirty;Forty;Fifty;Sixty;Seventy;Eighty;Ninety"
                    StrCem = "One Hundred;Two Hundred;Three Hundred;Four Hundred;Five Hundred;Six Hundred;Seven Hundred;Eight Hundred;Nine Hundred"
                    StrMil = "Thousand.Thousand;Million.Millions;Billion.Billions;Trillion.Trillions"
                    StrCent = "Cent.Cents"
                    MOEDA = "U.S. Dollar;U.S. Dollars;U.S. Dollars"
                    SEP = " "
                    SepDec = " and "
                    SepMil = ", "
                    Esp = " "
                    SepAndTrês = " and "
                ElseIf Ling = "DM" Then
                    StrUnid = "One;Two;Three;Four;Five;Six;Seven;Eight;Nine"
                    StrPrimaDez = "Eleven;Twelve;Thirteen;Fourteen;Fifteen;Sixteen;Seventeen;Eighteen;Nineteen"
                    StrDez = "Ten;Twenty;Thirty;Forty;Fifty;Sixty;Seventy;Eighty;Ninety"
                    StrCem = "One Hundred;Two Hundred;Three Hundred;Four Hundred;Five Hundred;Six Hundred;Seven Hundred;Eight Hundred;Nine Hundred"
                    StrMil = "Thousand.Thousand;Million.Millions;Billion.Billions;Trillion.Trillions"
                    StrCent = "Cent.Cents"
                    MOEDA = "Deutsche Mark;Deutsche Mark;Deutsche Mark"
                    SEP = " "
                    SepDec = " and "
                    SepMil = ", "
                    Esp = " "
                    SepAndTrês = " and "
                ElseIf Ling = "YEN" Then
                    StrUnid = "One;Two;Three;Four;Five;Six;Seven;Eight;Nine"
                    StrPrimaDez = "Eleven;Twelve;Thirteen;Fourteen;Fifteen;Sixteen;Seventeen;Eighteen;Nineteen"
                    StrDez = "Ten;Twenty;Thirty;Forty;Fifty;Sixty;Seventy;Eighty;Ninety"
                    StrCem = "One Hundred;Two Hundred;Three Hundred;Four Hundred;Five Hundred;Six Hundred;Seven Hundred;Eight Hundred;Nine Hundred"
                    StrMil = "Thousand.Thousand;Million.Millions;Billion.Billions;Trillion.Trillions"
                    StrCent = "Cent.Cents"
                    MOEDA = "Yen;Yen;Yen"
                    SEP = " "
                    SepDec = " and "
                    SepMil = ", "
                    Esp = " "
                    SepAndTrês = " and "
                ElseIf Ling = "EURO" Then
                    StrUnid = "One;Two;Three;Four;Five;Six;Seven;Eight;Nine"
                    StrPrimaDez = "Eleven;Twelve;Thirteen;Fourteen;Fifteen;Sixteen;Seventeen;Eighteen;Nineteen"
                    StrDez = "Ten;Twenty;Thirty;Forty;Fifty;Sixty;Seventy;Eighty;Ninety"
                    StrCem = "One Hundred;Two Hundred;Three Hundred;Four Hundred;Five Hundred;Six Hundred;Seven Hundred;Eight Hundred;Nine Hundred"
                    StrMil = "Thousand.Thousand;Million.Millions;Billion.Billions;Trillion.Trillions"
                    StrCent = "Cent.Cents"
                    MOEDA = "Euro;Euro;Euro"
                    SEP = " "
                    SepDec = " and "
                    SepMil = ", "
                    Esp = " "
                    SepAndTrês = " and "
                Else
                    Extenso = "#Erro"
                    Exit Function
                End If
                StrVV = Format(VV, "000000000000000.00")
                StrMoeda = ""

                For Z = 1 To 6
                    StrM0 = ""
                    If Z <> 6 Then
                        StrV0 = Mid(StrVV, Z * 3 - 2, 3)
                        MontaCento(StrV0, pos, StrM0, StrCem, SEP, StrDez, StrPrimaDez, StrUnid)
                        If StrM0 <> "" Or Z = 5 Then
                            If Z < 5 Then
                                StrM0 = StrM0 & Esp & LItem(LItem(StrMil, 5 - Z), IIf(Val(StrV0) = 1, 1, 2))
                            Else
                                If Val(Mid(StrVV, 1, 15)) <> 0 Then
                                    StrM0 = StrM0 & Esp & LItem(MOEDA, Switch(Mid(StrVV, 10, 6) = "000000", 3, Val(Mid(StrVV, 1, 15)) = 1, 1, Val(Mid(StrVV, 1, 15)) <> 1, 2))
                                End If
                            End If
                        End If
                    Else
                        StrV0 = "0" & Mid(StrVV, 17, 2)
                        MontaCento(StrV0, pos, StrM0, StrCem, SEP, StrDez, StrPrimaDez, StrUnid)
                        If StrM0 <> "" Then
                            StrM0 = StrM0 & " " & LItem(StrCent, IIf(Val(StrV0) = 1, 1, 2))
                        End If
                    End If
                    If StrM0 <> "" Then
                        If Z = 6 Then
                            StrMoeda = StrMoeda & IIf(StrMoeda <> "", SepDec, "") & StrM0
                        Else
                            StrMoeda = StrMoeda & IIf(StrMoeda <> "" And Val(StrV0) <> 0, IIf(Val(StrV0) < 101 Or Val(StrV0) Mod 100 = 0, SepAndTrês, SepMil), "") & StrM0
                        End If
                    End If
                Next
                Extenso = StrMoeda
            Catch ex As Exception
                Return "#Erro"
            End Try
        End Function

        ''' <summary>
        ''' Função auxiliar para montagem de cento da rotina de extenso.
        ''' </summary>
        ''' <param name="strv0">Resultado.</param>
        ''' <param name="pos">Posição de retorno.</param>
        ''' <param name="strm0">Texto para milhar.</param>
        ''' <param name="strcem">Texto para centena.</param>
        ''' <param name="sep">Separador.</param>
        ''' <param name="strdez">Texto para dezena.</param>
        ''' <param name="strprimadez">Texto de primeira dezena.</param>
        ''' <param name="strunid">Texto de unidade.</param>
        ''' <remarks></remarks>
        Private Shared Sub MontaCento(ByRef strv0 As String, ByRef pos As Integer, ByRef strm0 As String, ByRef strcem As String, ByRef sep As String, ByRef strdez As String, ByRef strprimadez As String, ByRef strunid As String)
            For ZZ = 1 To 3
                pos = Val(Mid(strv0, ZZ, 1))
                If pos <> 0 Then
                    Select Case ZZ
                        Case 1
                            strm0 = strm0 & LItem(strcem, pos)
                        Case 2
                            If pos <> 1 Or Mid(strv0, 3, 1) = "0" Then
                                strm0 = strm0 & IIf(strm0 <> "", sep, "") & LItem(strdez, pos)
                            Else
                                pos = Val(Mid(strv0, 3, 1))
                                strm0 = strm0 & IIf(strm0 <> "", sep, "") & LItem(strprimadez, pos)
                                ZZ = 3
                            End If
                        Case 3
                            strm0 = strm0 & IIf(strm0 <> "", sep, "") & LItem(strunid, pos)
                    End Select
                End If
            Next
            If strm0 = "Cento" Then
                strm0 = "Cem"
            End If
        End Sub

        ''' <summary>
        ''' Quebra expressões em itens.
        ''' </summary>
        ''' <param name="Texto">Texto a ser quebrado.</param>
        ''' <param name="Item">Posição para encontrar item ou item para encontrar posição.</param>
        ''' <param name="Limit">Delimitador.</param>
        ''' <returns>Item quando procura pela posição ou posição quando procura pelo item.</returns>
        ''' <remarks></remarks>
        Public Shared Function LItem(ByVal Texto As Object, ByVal Item As Object, Optional ByVal Limit As String = Nothing) As Object
            Texto = NZV(Texto, "")
            If Limit = "" Then
                If InStr(Texto, ";") <> 0 Then
                    Limit = ";"
                Else
                    Limit = "."
                End If
            End If
            Dim Opc As List(Of String) = Split(Texto, Limit).ToList
            If TypeOf Item Is String Then
                Dim Pos As Integer = Opc.IndexOf(Item)
                Return IIf(Pos = -1, 0, Pos + 1)
            End If
            Item = CType(Item, Integer)
            If Item <= 0 OrElse Item >= (Opc.Count + 1) Then
                Return ""
            End If
            Return Opc.Item(Item - 1)
        End Function

        ''' <summary>
        ''' Codifica Url.
        ''' </summary>
        ''' <param name="TXT">Url a ser codificada.</param>
        ''' <returns>Url codificada.</returns>
        ''' <remarks></remarks>
        Public Shared Function UrlCodifica(ByVal TXT As String) As String
            Dim TXTNOVO As String = ""
            For Z As Integer = 1 To Len(TXT)
                If Mid(TXT, Z, 1) = " " Then
                    TXTNOVO &= "+"
                ElseIf (Mid(TXT, Z, 1) >= "A" And Mid(TXT, Z, 1) <= "Z") Or (Mid(TXT, Z, 1) >= "a" And Mid(TXT, Z, 1) <= "z") Or (Mid(TXT, Z, 1) >= "0" And Mid(TXT, Z, 1) <= "1") Then
                    TXTNOVO &= Mid(TXT, Z, 1)
                Else
                    Dim NUM As Integer = Asc(Mid(TXT, Z, 1))
                    TXTNOVO &= "%" & Microsoft.VisualBasic.Right("0" & Hex(NUM), 2)
                End If
            Next
            Return TXTNOVO
        End Function

        ''' <summary>
        ''' Decodifica Url.
        ''' </summary>
        ''' <param name="TXT">Url a ser decodificada.</param>
        ''' <returns>Url decodificada.</returns>
        ''' <remarks></remarks>
        Public Shared Function UrlDecodifica(ByVal TXT As String) As String
            Dim TXTNOVO As String = ""
            For Z As Integer = 1 To Len(TXT)
                If Mid(TXT, Z, 1) = "+" Then
                    TXTNOVO &= " "
                ElseIf Mid(TXT, Z, 1) <> "%" Then
                    TXTNOVO &= Mid(TXT, Z, 1)
                Else
                    Dim NUM As Integer = Val("&H" & Mid(TXT, Z + 1, 2))
                    TXTNOVO &= Chr(NUM)
                    Z += 2
                End If
            Next
            Return TXTNOVO
        End Function


        ''' <summary>
        ''' Grava linhas datatable.
        ''' </summary>
        ''' <param name="TabelaDestino">Tabela destino.</param>
        ''' <param name="TabelaOrigem">Tabela de origem.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="IgnoraCamposSys">Ignorar campos sys.</param>
        ''' <returns>Quantidade de gravações bem sucedidas.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSGravaLinhas(ByVal TabelaDestino As String, ByVal TabelaOrigem As System.Data.DataTable, ByVal StrConn As Object, Optional ByVal IgnoraCamposSys As Boolean = True) As String
            Dim Ret As String = ""
            Dim CamposAr As ArrayList = ItemsToArrayList((From X In TabelaOrigem.Columns Where (Not IgnoraCamposSys Or Not X.COLUMNNAME Like "SYS_*")).ToArray, "columnname")
            Dim Campos As String = Join(CamposAr.ToArray, ", ")
            Dim Ind As Integer = 1
            For Each Linha As System.Data.DataRow In TabelaOrigem.Rows
                Dim Params As New ArrayList
                For Each Campo As String In CamposAr
                    Params.Add(":" & Campo)
                    Params.Add(Linha(Campo))
                Next
                Try
                    DSGrava("insert into " & TabelaDestino & " (" & Campos & ") values (:" & Campos.Replace(", ", ", :") & ")", StrConn, Params)
                Catch ex As Exception
                    Try
                        Ret &= IIf(Ret <> "", vbCrLf, "") & "Linha " & Ind & " tentativa com [ERRO] " & MessageEx(ex) & "."
                    Catch ex2 As Exception
                        Try
                            Ret &= "Erro " & ex.Message & " gravando linhas em " & TabelaDestino & "."
                        Catch
                        End Try
                    End Try
                End Try
                Ind += 1
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Adiciona nó em árvore.
        ''' </summary>
        ''' <param name="Arvore">Árvore.</param>
        ''' <param name="Local">Local da árvore.</param>
        ''' <param name="Chave">Chave a ser adicionada.</param>
        ''' <param name="Texto">Texto de apresentação do nó.</param>
        ''' <remarks></remarks>
        Shared Sub AddNo(ByVal Arvore As System.Windows.Forms.TreeView, ByVal Local As System.Windows.Forms.TreeNode, ByVal Chave As String, Optional ByVal Texto As String = "")
            Dim COL As System.Windows.Forms.TreeNodeCollection
            If IsNothing(Local) Then
                COL = Arvore.Nodes
            Else
                COL = Local.Nodes
            End If
            AddNo(Arvore, COL, Chave, Texto)
        End Sub

        ''' <summary>
        ''' Procura nó em árvore.
        ''' </summary>
        ''' <param name="Arvore">Árvore.</param>
        ''' <param name="Local">Local na árvore.</param>
        ''' <returns>Nó encontrado.</returns>
        ''' <remarks></remarks>
        Shared Function ProcuraNo(ByVal Arvore As System.Windows.Forms.TreeView, ByVal Local As String) As System.Windows.Forms.TreeNode()
            Return Arvore.Nodes.Find(Local, True)
        End Function

        ''' <summary>
        ''' Adiciona um nó em uma determinada árvore.
        ''' </summary>
        ''' <param name="Arvore">Árvore.</param>
        ''' <param name="Local">Local na árvore.</param>
        ''' <param name="Chave">Chave a ser adicionada.</param>
        ''' <param name="Texto">Texto de apresentação do nó.</param>
        ''' <remarks></remarks>
        Shared Sub AddNo(ByVal Arvore As System.Windows.Forms.TreeView, ByVal Local As String, ByVal Chave As String, Optional ByVal Texto As String = "")
            If NZ(Local, "") = "" Then
                AddNo(Arvore, Arvore.Nodes, Chave, Texto)
            Else
                For Each Item As System.Windows.Forms.TreeNode In ProcuraNo(Arvore, Local)
                    AddNo(Arvore, Item, Chave, Texto)
                Next
            End If
        End Sub

        ''' <summary>
        ''' Adiciona um nó em uma determinada árvore.
        ''' </summary>
        ''' <param name="Arvore">Árvore.</param>
        ''' <param name="Local">Local na árvore.</param>
        ''' <param name="Chave">Chave a ser adicionada.</param>
        ''' <param name="Texto">Texto de apresentação do nó.</param>
        ''' <remarks></remarks>
        Shared Sub AddNo(ByVal Arvore As System.Windows.Forms.TreeView, ByVal Local As System.Windows.Forms.TreeNodeCollection, ByVal Chave As String, Optional ByVal Texto As String = "")
            If Texto = "" Then
                Texto = Chave
            End If
            Dim NovoNo As New System.Windows.Forms.TreeNode(Texto)
            NovoNo.Name = Chave
            Local.Add(NovoNo)
        End Sub

        ''' <summary>
        ''' Determina a quantidade de linhas que um bloco de texto pode conter.
        ''' </summary>
        ''' <param name="Texto">Texto.</param>
        ''' <param name="Tam">Tamanho.</param>
        ''' <param name="NrLinhas">Número de linhas.</param>
        ''' <returns>Retorna uma lista contendo o texto com o limite máximo.</returns>
        ''' <remarks></remarks>
        Shared Function LlimitTextBl(ByVal Texto As Object, ByVal Tam As Integer, ByVal ParamArray NrLinhas() As Object) As List(Of String)
            Dim It As New List(Of String)
            For Each Nr As Integer In NrLinhas
                Nr = NZ(Nr, 0)
                If Nr <> 0 Then
                    Texto = Trim(LLimitText(Texto, Tam, Nr))
                    Dim Linhas() As String = Split(Texto, vbCrLf)
                    Dim Result As String = ""
                    Texto = ""
                    For z As Integer = 0 To Linhas.Count - 1
                        If z < Nr Then
                            Result &= IIf(Result <> "", vbCrLf, "") & Linhas(z)
                        Else
                            Texto &= IIf(Texto <> "", vbCrLf, "") & Linhas(z)
                        End If
                    Next
                    It.Add(Result)
                Else
                    It.Add(Texto)
                End If
            Next

            Return It
        End Function

        ''' <summary>
        ''' Faz o tratamento de texto colocando-o no limite especificado.
        ''' </summary>
        ''' <param name="Texto">Texto.</param>
        ''' <param name="Tam">Tamanho do Texto.</param>
        ''' <param name="NrLinhas">Número de linhas.</param>
        ''' <returns>Texto formatado.</returns>
        ''' <remarks></remarks>
        Shared Function LLimitText(ByVal Texto As Object, ByVal Tam As Integer, Optional ByVal NrLinhas As Integer = 0) As String
            If Tam = 0 Then
                Throw New Exception("Tamanho precisa ser maior que zero em llimittext.")
            End If

            Dim POS As Integer = 1
            Dim LINHA As Integer = 1
            Do While POS <= Len(Texto)
                If NrLinhas <> 0 AndAlso LINHA > NrLinhas Then
                    Exit Do
                End If

                Dim PPOS As Integer = POS + Tam
                Dim PENTER As Integer = NZV(InStr(POS, Texto, vbCrLf), Len(Texto) + 1)
                PPOS = Math.Min(PENTER, PPOS)

                If Mid(Texto, PPOS, 2) <> vbCrLf And PPOS <= Len(Texto) Then
                    Dim Z As Integer = 0
                    For Z = PPOS To POS + 1 Step -1
                        If System.Text.RegularExpressions.Regex.Match(Mid(Texto, Z, 1), "[ ,\[\]\(\)\{\}]").Success Then Exit For
                    Next
                    If Z >= (POS + 1) Then
                        PPOS = Z
                    End If
                    Texto = Microsoft.VisualBasic.Left(Texto, PPOS - 1) & vbCrLf & LTrim(Mid(Texto, PPOS))
                End If
                LINHA += 1

                POS = PPOS + 2
            Loop

            Return Texto
        End Function

        ''' <summary>
        ''' Inclui linhas em uma tabela.
        ''' </summary>
        ''' <param name="TabDestino">Destino onde será inserido.</param>
        ''' <param name="Origem">Origem da tabela.</param>
        ''' <returns>Retorna mensagem de erro caso haja erro.</returns>
        ''' <remarks></remarks>
        Public Shared Function IncluiTabLinhas(ByVal TabDestino As System.Data.DataTable, ByVal Origem As Object) As String
            Dim Ret As String = ""
            Dim NLinha As Integer = 1
            For Each Item As System.Data.DataRow In Origem
                Try
                    IncluiTabLinha(TabDestino, Item)
                Catch ex As Exception
                    Ret &= IIf(Ret <> "", vbCrLf, "") & "Erro ao inserir linha " & NLinha & " em " & TabDestino.TableName & ": " & ex.Message
                End Try
                NLinha += 1
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Inclui conteúdo em uma linha de uma tabela.
        ''' </summary>
        ''' <param name="TabDestino">Destino onde será inserido.</param>
        ''' <param name="Linha">Linha que será inserido o conteúdo.</param>
        ''' <remarks></remarks>
        Public Shared Sub IncluiTabLinha(ByVal TabDestino As System.Data.DataTable, ByVal Linha As System.Data.DataRow)
            Dim Conteudos As New ArrayList
            For Each Col As System.Data.DataColumn In TabDestino.Columns
                Conteudos.Add(Linha(Col.ColumnName))
            Next
            TabDestino.Rows.Add(Conteudos.ToArray)
        End Sub

        ''' <summary>
        ''' Carrega o dicionário especificado.
        ''' </summary>
        ''' <param name="Dicionario">Dicionário que será carregado.</param>
        ''' <param name="Limpar">Se True limpa o dicionário, senão carrega o dicionário.</param>
        ''' <param name="Params">Parâmetros que serão passados.</param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaDict(ByRef Dicionario As Object, ByVal Limpar As Boolean, ByVal ParamArray Params() As String)
            If Limpar Then
                Dicionario.clear()
            End If
            For z As Integer = 0 To Params.Count - 1 Step 2
                If Dicionario.ContainsKey(Params(z)) Then
                    Dicionario(Params(z)) = Params(z + 1)
                Else
                    Dicionario.Add(Params(z), Params(z + 1))
                End If
            Next
        End Sub

        ''' <summary>
        ''' Formata números.
        ''' </summary>
        ''' <param name="Num">Objeto a ser formatado.</param>
        ''' <param name="Tam">Tamanho do objeto.</param>
        ''' <param name="Mascara">Máscara que será usada para formatação.</param>
        ''' <returns>Retorna o objeto formatado.</returns>
        ''' <remarks></remarks>
        Public Shared Function FormatNum(ByVal Num As Object, ByVal Tam As Integer, Optional ByVal Mascara As String = "0") As String
            If Len(Mascara) < Tam Then
                Mascara = New System.String(NZV(Mascara, "0").ToString.Chars(0), Tam)
            End If
            Return Microsoft.VisualBasic.Right(Format(Num, Mascara), Tam)
        End Function

        ''' <summary>
        ''' Formata textos.
        ''' </summary>
        ''' <param name="Texto">Texto a ser formatado.</param>
        ''' <param name="tam">Tamanho do texto.</param>
        ''' <param name="Preench">Texto que será preenchido.</param>
        ''' <returns>Retorna uma string contendo o texto formatado.</returns>
        ''' <remarks></remarks>
        Public Shared Function FormatTxt(ByVal Texto As String, ByVal tam As Integer, Optional ByVal Preench As String = " ") As String
            Return Microsoft.VisualBasic.Left(Texto & New String(Preench.Chars(0), tam), tam)
        End Function

        ''' <summary>
        ''' Substitui códigos.
        ''' </summary>
        ''' <param name="Texto">Texto que contém os códigos.</param>
        ''' <returns>Retorna o texto com as modificações.</returns>
        ''' <remarks></remarks>
        Public Shared Function CodInsercoes(ByVal Texto As String) As String
            Dim Ret As String = Texto
            Ret = Replace(Ret, """", "\'")
            Ret = Replace(Ret, "{{", "\{\{")
            Ret = Replace(Ret, "}}", "\}\}")
            Ret = Replace(Ret, vbCrLf, "{vbcrlf}")
            Return Ret
        End Function

        ''' <summary>
        ''' Substitui códigos.
        ''' </summary>
        ''' <param name="Texto">Texto que contém os códigos.</param>
        ''' <returns>Retorna o texto com as modificações.</returns>
        ''' <remarks></remarks>
        Public Shared Function DecodInsercoes(ByVal Texto As String) As String
            Dim Ret As String = Texto
            Ret = Replace(Ret, "{vbcrlf}", vbCrLf)
            Ret = Replace(Ret, "\'", Chr(34))
            Ret = Replace(Ret, "\|", vbCrLf)
            Ret = Replace(Ret, "\{\{", "{{")
            Ret = Replace(Ret, "\}\}", "}}")
            Return Ret
        End Function

        ''' <summary>
        ''' Verifica mediante uma string passada a correspondência com trecho de segurança específico.
        ''' </summary>
        ''' <param name="CurSeg">Segundo corrente.</param>
        ''' <param name="QtdMins">Quantidade de minutos.</param>
        ''' <returns>Retorna o resultado da comparação com a ocorrência de determinado evento, True ou False.</returns>
        ''' <remarks></remarks>
        Shared Function SegCheck(ByVal CurSeg As String, Optional ByVal QtdMins As Integer = 1) As Boolean
            If SegMin() = CurSeg Then
                Return True
            End If
            For z As Integer = 1 To QtdMins
                If SegMin(DateAdd(DateInterval.Minute, z, Now)) = CurSeg Then
                    Return True
                End If
            Next
            For z As Integer = -1 To -QtdMins Step -1
                If SegMin(DateAdd(DateInterval.Minute, z, Now)) = CurSeg Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Registra o momento de ocorrência de determinado evento.
        ''' </summary>
        ''' <param name="Momento">Momento do evento.</param>
        ''' <param name="Compl">Complemento.</param>
        ''' <returns>Retorna uma string contendo o momento e caso haja, o complemento.</returns>
        ''' <remarks></remarks>
        Public Shared Function SegMin(Optional ByVal Momento As Date = Nothing, Optional ByVal Compl As String = "") As String
            If Momento = CDate(Nothing) Then
                Momento = Now
            End If
            Return AbstrCarac(Format(Momento, "yyyyMMddHHmm") & Compl)
        End Function

        ''' <summary>
        ''' Retira as aspas do texto.
        ''' </summary>
        ''' <param name="Texto">Texto que será tratado.</param>
        ''' <returns>Texto sem aspas.</returns>
        ''' <remarks></remarks>
        Shared Function SemAspas(ByVal Texto As String) As String
            Return Texto.Trim("""", Chr(147), Chr(148))
        End Function

        ''' <summary>
        ''' Remove os espaços de um determinado texto inserindo ";" no final de cada linha.
        ''' </summary>
        ''' <param name="Texto">Texto a ser utilizado.</param>
        ''' <returns>Retorna uma lista contendo o texto modificado.</returns>
        ''' <remarks></remarks>
        Shared Function ListaEnterPVStr(ByVal Texto As Object) As List(Of String)
            Texto = NZ(Texto, "")
            Dim Lista As New List(Of String)
            For Each Linha As String In Split(Texto, vbCrLf)
                Linha = Trim(Linha)
                If Linha <> "" Then
                    For Each Item As String In Split(Linha, ";")
                        Item = Trim(Item)
                        If Item <> "" Then
                            Lista.Add(Item)
                        End If
                    Next
                End If
            Next
            Return Lista
        End Function

        ''' <summary>
        ''' Obtém código html do controle da página.
        ''' </summary>
        ''' <param name="Ctl">Controle que será renderizado.</param>
        ''' <returns>String contendo código html.</returns>
        ''' <remarks></remarks>
        Shared Function RenderTxt(ByVal Ctl As Control) As String
            Dim MM As New System.IO.MemoryStream
            Dim ST As New System.IO.StreamWriter(MM)
            Dim TX As New System.Web.UI.HtmlTextWriter(ST)
            Ctl.RenderControl(TX)
            ST.Flush()
            MM.Flush()
            MM.Position = 0
            Dim SR As New System.IO.StreamReader(MM, System.Text.Encoding.UTF8)
            Dim Result As String = SR.ReadToEnd
            TX.Close()
            ST.Close()
            SR.Close()
            MM.Close()
            Return Result
        End Function

        ''' <summary>
        ''' Classe para redimensionar automaticamente formulários.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class FormRedim
            Public ObjTam As New Dictionary(Of String, String)
            Public FormControle As System.Windows.Forms.Form = Nothing
            Public Tag As String = Nothing
            Public TamAnt As String = Nothing

            ''' <summary>
            ''' Inicia condição de redimensionamento de formulário.
            ''' </summary>
            ''' <param name="FormControle">Formulário a ser redimensionado automaticamente.</param>
            ''' <param name="Tag">Tag que será pesquisada para seguir redimensionamento.</param>
            ''' <remarks></remarks>
            Sub New(ByVal FormControle As System.Windows.Forms.Form, Optional ByVal Tag As String = "redim")
                Init(FormControle, Tag)
            End Sub

            ''' <summary>
            ''' Carrega valores iniciais para comparação de condição de mudança de tamanho.
            ''' </summary>
            ''' <param name="FormControle">Formulário a ser redimensionado.</param>
            ''' <param name="Tag">Tag que será pesquisada para seguir redimensionamento.</param>
            ''' <remarks></remarks>
            Sub Init(ByVal FormControle As System.Windows.Forms.Form, Optional ByVal Tag As String = "redim")
                TamAnt = FormControle.Width & ";" & FormControle.Height
                ObjTam.Clear()
                ObjTam("me") = FormControle.Width & ";" & FormControle.Height
                For Each Ctl As Object In Form.Controles(FormControle, "")
                    If Not IsNothing(CType(Ctl, System.Windows.Forms.Control).Tag) Then
                        Dim Elem As New ElementosStr(Prop(Ctl, "tag"))
                        If Elem(Tag).Conteudo <> "" AndAlso CType(Elem(Tag).Conteudo, Boolean) Then
                            ObjTam.Add(Ctl.Name, Ctl.Width & ";" & Ctl.hEIGHT)
                        ElseIf Elem(Tag & "x").Conteudo <> "" AndAlso CType(Elem(Tag & "x").Conteudo, Boolean) Then
                            ObjTam.Add(Ctl.Name, Ctl.Width & ";-1")
                        ElseIf Elem(Tag & "y").Conteudo <> "" AndAlso CType(Elem(Tag & "y").Conteudo, Boolean) Then
                            ObjTam.Add(Ctl.Name, "-1;" & Ctl.width)
                        End If
                    End If
                Next
                Me.FormControle = FormControle
                Me.Tag = Tag
                AddHandler FormControle.Resize, AddressOf Dimensiona
            End Sub

            ''' <summary>
            ''' Dimensiona o tamanho do formulário.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Sub Dimensiona(ByVal sender As Object, ByVal e As System.EventArgs)
                Dim TamNovo = FormControle.Width & ";" & FormControle.Height
                If TamAnt <> TamNovo Then
                    Dim Inicial As String = ObjTam("me")
                    Dim OBJINIC() As String = Split(Inicial, ";")
                    For Each Elem As String In ObjTam.Keys
                        If Elem <> "me" Then
                            Dim Ctl As System.Windows.Forms.Control = FormControle.Controls.Find(Elem, True)(0)

                            Dim OBJTAMCTL() As String = Split(ObjTam(Elem), ";")
                            If OBJTAMCTL(0) <> -1 Then
                                Ctl.Width = Math.Max(OBJTAMCTL(0) + FormControle.Width - OBJINIC(0), 0)
                            End If
                            If OBJTAMCTL(1) <> -1 Then
                                Ctl.Height = Math.Max(OBJTAMCTL(1) + FormControle.Height - OBJINIC(1), 0)
                            End If

                        End If
                    Next
                    TamAnt = TamNovo
                End If
            End Sub
        End Class

        ''' <summary>
        ''' Permite pesquisas em listas. Classe preparada para testes de performance com Litem antigo.
        ''' </summary>
        ''' <remarks></remarks>
        <Serializable()> Class InStrLista
            Public Texto As String

            ''' <summary>
            ''' Texto referente a classe InStrLista.
            ''' </summary>
            ''' <param name="Texto">Texto.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Texto As String)
                Me.Texto = Texto
            End Sub

            ''' <summary>
            ''' Inclui determinado item em um texto, caso este item já não esteja contido no texto.
            ''' </summary>
            ''' <param name="Item">Item a ser incluído.</param>
            ''' <remarks></remarks>
            Public Sub Inclui(ByVal Item As String)
                If Not Tem(Item) Then
                    Texto &= IIf(Texto.EndsWith(";"), "", ";") & Item & ";"
                End If
            End Sub

            ''' <summary>
            ''' Inclui determinado item em uma nova InStrLista.
            ''' </summary>
            ''' <param name="Texto">Texto que será inserido o item.</param>
            ''' <param name="Item">Item que será inserido no texto.</param>
            ''' <returns>Retorna o texto passado por parâmetro com o formato InStrLista.</returns>
            ''' <remarks></remarks>
            Public Shared Function Inclui(ByVal Texto As String, ByVal Item As String) As String
                Dim L As New InStrLista(Texto)
                L.Inclui(Item)
                Return L.Texto
            End Function

            ''' <summary>
            ''' Exclui um determinado item de um texto.
            ''' </summary>
            ''' <param name="Item">Item que deverá ser excluído.</param>
            ''' <remarks></remarks>
            Public Sub Exclui(ByVal Item As String)
                If Tem(Item) Then
                    Texto = Texto.Replace(";" & Item & ";", ";")
                End If
            End Sub

            ''' <summary>
            ''' Remove um determinado item de um texto.
            ''' </summary>
            ''' <param name="Texto">Texto do qual o item deverá ser removido.</param>
            ''' <param name="Item">Item que deverá ser removido.</param>
            ''' <returns>Retorna o texto após a alteração.</returns>
            ''' <remarks></remarks>
            Public Shared Function Exclui(ByVal Texto As String, ByVal Item As String) As String
                Dim L As New InStrLista(Texto)
                L.Exclui(Item)
                Return L.Texto
            End Function

            ''' <summary>
            ''' Procura por determinado item em um texto.
            ''' </summary>
            ''' <param name="Item">Item a ser procurado.</param>
            ''' <returns>Retorna True ou Falso, dependendo do resultado.</returns>
            ''' <remarks></remarks>
            Public Function Tem(ByVal Item As String) As Boolean
                Return InStr(Texto, ";" & Item & ";") <> 0
            End Function

            ''' <summary>
            ''' Verifica a existência de um determinado item dentro de um texto.
            ''' </summary>
            ''' <param name="Texto">Texto a ser verificado.</param>
            ''' <param name="Item">Item que deverá ser procurado.</param>
            ''' <returns>Retorna True ou False, dependendo do resultado da busca.</returns>
            ''' <remarks></remarks>
            Public Shared Function Tem(ByVal Texto As String, ByVal Item As String) As Boolean
                Dim L As New InStrLista(Texto)
                Return L.Tem(Item)
            End Function
        End Class

        ''' <summary>
        ''' Retorna texto protegido para uso em concatenações ORACLE (inicialmente).
        ''' </summary>
        ''' <param name="Texto">Texto a ser protegido.</param>
        ''' <returns>Retorna texto capaz de ser utilizado por concatenação de strings.</returns>
        ''' <remarks></remarks>
        Public Shared Function Tratex(ByVal Texto As String) As String
            Return Replace(Texto, "'", "''")
        End Function

        ''' <summary>
        ''' Obtém do gerador as especificações de gerador de tabela e campos.
        ''' </summary>
        ''' <remarks></remarks>
        Class Defs

            ''' <summary>
            ''' Atributos das tabelas do gerador.
            ''' </summary>
            ''' <param name="Sistema">Sistema que ele pertence.</param>
            ''' <param name="Tabelas">Tabela a ser usada.</param>
            ''' <param name="STRCONN">String de conexão.</param>
            ''' <param name="EsquemaGerador">Esquema ao qual o gerador irá acessar.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Sistema As String, ByVal Tabelas As String, ByVal StrConn As Object, ByVal EsquemaGerador As String)
                CarregaComum(Sistema, StrConn, EsquemaGerador)
                CarregaTabelas(Tabelas)
            End Sub

            ''' <summary>
            ''' Novo conjunto de definições quando proveniente de DATASET.
            ''' </summary>
            ''' <param name="DS">Dataset onde podemos encontrar os campos.</param>
            ''' <param name="Sistema">Sistema para busca das definições.</param>
            ''' <param name="Tabelas">Tabelas onde serão pesquisados os campos.</param>
            ''' <param name="STRCONN">String de conexão para busca das definições.</param>
            ''' <param name="EsquemaGerador">Esquema do gerador para obtenção das definições.</param>
            ''' <remarks></remarks>
            Sub New(ByVal DS As System.Data.DataSet, ByVal Sistema As String, ByVal Tabelas As String, ByVal StrConn As Object, ByVal EsquemaGerador As String)
                CarregaDS(DS, Sistema, Tabelas, StrConn, EsquemaGerador)
            End Sub

            ''' <summary>
            ''' Atributos referentes a classe Defs.
            ''' </summary>
            ''' <remarks></remarks>
            Public Campos As System.Data.DataSet
            Public Tabelas As System.Data.DataSet
            Public Relacionamentos As System.Data.DataSet
            Public Sistema As String
            Public StrConn As Object
            Public EsquemaGerador As String


            ''' <summary>
            ''' Novo dicionário.
            ''' </summary>
            ''' <remarks></remarks>
            Public Shared Ajato As New Dictionary(Of String, Object)

            ''' <summary>
            ''' Agrupa os elementos de cada coluna listada em um grupo correspondente.
            ''' </summary>
            ''' <param name="Tabela">Tabela a ser utilizada.</param>
            ''' <returns>Retorna uma lista contendo os grupos.</returns>
            ''' <remarks></remarks>
            Public Function Conjuntos(ByVal Tabela As String) As List(Of String)
                Try
                    Return (From p In Campos.Tables(0).Rows Where p!TABELA = Tabela Group By Conjunto = p!Conjunto Into MinOrdem = Min(CType(p!Ordem, Long)) Order By MinOrdem Select CType(Conjunto, String)).ToList
                Catch
                End Try

                Dim Lst As New List(Of String)
                Return Lst
            End Function

            ''' <summary>
            ''' Busca relacionamentos N1.
            ''' </summary>
            ''' <param name="TabelaN">Tabela N.</param>
            ''' <param name="CamposN">Campos lado N.</param>
            ''' <param name="Tabela1">Tabela 1.</param>
            ''' <param name="Campos1">Campos lado 1.</param>
            ''' <returns>Retorna lista de relacionamentos.</returns>
            ''' <remarks></remarks>
            Public Function RelsN1(Optional ByVal TabelaN As String = "", Optional ByVal CamposN As String = "", Optional ByVal Tabela1 As String = "", Optional ByVal Campos1 As String = "") As List(Of System.Data.DataRow)
                Dim CamposNAr() As String = Split(CamposN, ";")
                Dim Campos1Ar() As String = Split(Campos1, ";")
                Dim Ret As List(Of System.Data.DataRow) = (From x As System.Data.DataRow In Relacionamentos.Tables(0).Rows Where (TabelaN = "" OrElse x!TABELA_N = TabelaN) AndAlso (CamposN = "" Or TemNaLista(x!CAMPO_N, CamposNAr)) AndAlso (Campos1 = "" Or TemNaLista(x!CAMPO_1, Campos1Ar)) AndAlso (Tabela1 = "" OrElse x!TABELA_1 = Tabela1) Select x).ToList
                Return Ret
            End Function

            ''' <summary>
            ''' Busca relacionamentos 1N.
            ''' </summary>
            ''' <param name="Tabela1">Tabela lado 1.</param>
            ''' <param name="Campos1">Campos do lado 1.</param>
            ''' <param name="TabelaN">Tabela do lado N.</param>
            ''' <param name="CamposN">Campos do lado N.</param>
            ''' <returns>Lista de relacionamentos conforme solicitação.</returns>
            ''' <remarks></remarks>
            Public Function Rels1N(Optional ByVal Tabela1 As String = "", Optional ByVal Campos1 As String = "", Optional ByVal TabelaN As String = "", Optional ByVal CamposN As String = "") As List(Of System.Data.DataRow)
                Dim Campos1Ar() As String = Split(Campos1, ";")
                Dim CamposNAr() As String = Split(CamposN, ";")
                Dim Ret As List(Of System.Data.DataRow) = (From x As System.Data.DataRow In Relacionamentos.Tables(0).Rows Where (Tabela1 = "" OrElse x!TABELA_1 = Tabela1) AndAlso (Campos1 = "" Or TemNaLista(x!CAMPO_1, Campos1Ar)) AndAlso (CamposN = "" Or TemNaLista(x!CAMPO_N, CamposNAr)) AndAlso (TabelaN = "" OrElse x!TABELA_N = TabelaN) Select x).ToList
                Ret = (From X In Ret Where TemNaLista(Tabela(X!TABELA_N)!CHAVE_PRIMA, X!CAMPO_N) Select X).ToList
                Return Ret
            End Function

            ''' <summary>
            ''' Busca relacionamentos 1N1.
            ''' </summary>
            ''' <param name="Tabela1N">Tabela lado 1N.</param>
            ''' <param name="Campos1N">Campos no lado 1N.</param>
            ''' <param name="TabelaN1">Tabela lado N1.</param>
            ''' <param name="CamposN1">Campos lado N1.</param>
            ''' <param name="Tabela1N1">Tabela do meio 1N1.</param>
            ''' <returns>Lista de relacionamentos contendo a especificação solicitada.</returns>
            ''' <remarks></remarks>
            Public Function Rels1N1(ByVal Tabela1N As String, ByVal Campos1N As String, ByVal TabelaN1 As String, ByVal CamposN1 As String, Optional ByVal Tabela1N1 As String = "") As Object
                Dim Campos1NAr() As String = Split(Campos1N, ";")
                Dim CamposN1Ar() As String = Split(CamposN1, ";")
                Dim R1NT As List(Of System.Data.DataRow) = Rels1N(Tabela1N, Campos1N, Tabela1N1)
                Dim RN1T As List(Of System.Data.DataRow) = Rels1N(TabelaN1, CamposN1, Tabela1N1)
                Dim Ret = (From r1n As System.Data.DataRow In R1NT Group Join x As System.Data.DataRow In RN1T On r1n!tabela_n Equals x!tabela_n Into gr = Group From rn1 In gr Where r1n!NOME <> rn1!NOME Select r1n, rn1).ToList
                Return Ret
            End Function

            ''' <summary>
            ''' Carrega dados a partir de dataset.
            ''' </summary>
            ''' <param name="DS">Dataset contendo os campos a serem considerados.</param>
            ''' <param name="Sistema">Sistema para busca das definições.</param>
            ''' <param name="NomeTabelas">Nomes das tabelas para busca das definições.</param>
            ''' <param name="STRCONN">String de conexão.</param>
            ''' <param name="EsquemaGerador">Esquema no gerador para busca das definições.</param>
            ''' <param name="Limpa">Limpa antes de definir outro conjunto.</param>
            ''' <remarks></remarks>
            Private Sub CarregaDS(ByVal DS As System.Data.DataSet, ByVal Sistema As String, ByVal NomeTabelas As String, ByVal StrConn As Object, ByVal EsquemaGerador As String, Optional ByVal Limpa As Boolean = True)
                CarregaComum(Sistema, StrConn, EsquemaGerador, Limpa)

                Dim TabTemp As System.Data.DataSet = DSCarregaEstrut("SELECT TABELA, ORDEM, ETIQ, DESCR, CHAVE_PRIMA, CLASSE, CHAVE_APRES, CHAVE_FILTRO, PROP_EXTEND FROM " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_TABELA", StrConn)
                Dim CampoTemp As System.Data.DataSet = DSCarregaEstrut("SELECT CONJUNTO, TABELA, CAMPO, ORDEM, ETIQ, DESCR, PROP_EXTEND, TIPO_ACCESS, TIPO_ORACLE, TIPO_MYSQL, FORMATO, VALOR_PADRAO, VALOR_CHECK, ""AUTO"" FROM " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_CAMPO", StrConn)

                Dim Ordem As Integer = 1
                If Me.Tabelas.Tables.Count > 0 Then
                    Ordem = NZ(ColecAtribMax(Me.Tabelas.Tables(0).Rows, "ORDEM"), 0) + 1
                End If
                ' TABELA, ORDEM, ETIQ, DESCR, CHAVE_PRIMA, CLASSE, CHAVE_APRES, CHAVE_FILTRO, PROP_EXTEND
                TabTemp.Tables(0).Rows.Add("_CUSTOM", Ordem, "_CUSTOM", "_CUSTOM", "", "", "", "")

                Ordem = 0
                For Each Campo As System.Data.DataColumn In DS.Tables(0).Columns
                    ' CONJUNTO, TABELA, CAMPO, ORDEM, ETIQ, DESCR, PROP_EXTEND, TIPO_ACCESS, TIPO_ORACLE, TIPO_MYSQL, FORMATO, VALOR_PADRAO, VALOR_CHECK, AUTO
                    Ordem += 1
                    Dim TIPO As String = ""
                    If Campo.DataType.ToString = "System.String" Then
                        TIPO = "VARCHAR2 (200)"
                    ElseIf Campo.DataType.ToString = "System.DateTime" Then
                        TIPO = "DATE"
                    ElseIf Campo.DataType.ToString = "System.Decimal" Then
                        TIPO = "NUMBER(16,2)"
                    Else
                        Stop
                    End If
                    CampoTemp.Tables(0).Rows.Add("Geral", "_CUSTOM", Campo.ColumnName, Ordem, Campo.ColumnName, Campo.ColumnName, "", "", TIPO, "", "", "", "")
                Next

                Tabelas.Merge(TabTemp)
                Campos.Merge(CampoTemp)

                CarregaTabelas(NomeTabelas)
            End Sub

            ''' <summary>
            ''' Define parâmetros comuns aos carregamentos.
            ''' </summary>
            ''' <param name="Sistema">Sistema.</param>
            ''' <param name="STRCONN">String de conexão.</param>
            ''' <param name="EsquemaGerador">Esquema gerador.</param>
            ''' <param name="Limpa">Limpa antes.</param>
            ''' <remarks></remarks>
            Private Sub CarregaComum(ByVal Sistema As String, ByVal StrConn As Object, ByVal EsquemaGerador As String, Optional ByVal Limpa As Boolean = True)
                Me.Sistema = Sistema
                Me.StrConn = StrConn
                Me.EsquemaGerador = EsquemaGerador
                If Limpa Then
                    Me.Tabelas = New System.Data.DataSet
                    Me.Campos = New System.Data.DataSet
                    Me.Relacionamentos = New System.Data.DataSet
                End If
            End Sub

            ''' <summary>
            ''' Carga das tabelas.
            ''' </summary>
            ''' <param name="NomeTabelas">Nome das tabelas.</param>
            ''' <remarks></remarks>
            Private Sub CarregaTabelas(ByVal NomeTabelas As String)
                Dim StrTabelas As String = Join(Split(NomeTabelas, ";"), "', '")

                For Each NomeTabela As String In Split(NomeTabelas, ";")
                    Tabelas.Merge(DSCarrega("SELECT TABELA, ORDEM, ETIQ, DESCR, CHAVE_PRIMA, CLASSE, CHAVE_APRES, CHAVE_FILTRO, PROP_EXTEND FROM " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_TABELA WHERE SISTEMA=:SISTEMA AND TABELA = '" & Tratex(NomeTabela) & "'", StrConn, ":SISTEMA", Sistema))
                    Campos.Merge(DSCarrega("SELECT CONJUNTO, TABELA, CAMPO, ORDEM, ETIQ, DESCR, PROP_EXTEND, TIPO_ACCESS, TIPO_ORACLE, TIPO_MYSQL, FORMATO, VALOR_PADRAO, VALOR_CHECK, ""AUTO"" FROM " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_CAMPO WHERE SISTEMA=:SISTEMA AND TABELA = '" & Tratex(NomeTabela) & "'", StrConn, ":SISTEMA", Sistema))
                    Relacionamentos.Merge(DSCarrega("select r.nome as nome, r.tabela_1 as tabela_1, r.campo_1 as campo_1, r.tabela_n as tabela_n, r.campo_n as campo_n, r.obrig as obrig, r.chave_apres_1 as chave_apres_1, t1.chave_apres as chave_apres, r.prop_extend as prop_extend from " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_relacionamento r, " & IIf(EsquemaGerador <> "", EsquemaGerador & ".", "") & "GER_tabela t1 where r.sistema = t1.sistema and r.tabela_1 = t1.tabela and t1.sistema = :sistema and (tabela_n = '" & NomeTabela & "' or tabela_1 = '" & Tratex(NomeTabela) & "')", StrConn, ":sistema", Sistema))
                Next
            End Sub

            ''' <summary>
            ''' Cria um datarow com informações da linha 0 de determinada tabela.
            ''' </summary>
            ''' <param name="NomeTabela">Nome da tabela que será usada.</param>
            ''' <returns>Retorna os dados da linha 0 da tabela através de um datarow.</returns>
            ''' <remarks></remarks>
            Public Function Tabela(ByVal NomeTabela As String) As System.Data.DataRow
                Dim Linha() As System.Data.DataRow = Tabelas.Tables(0).Select("tabela='" & NomeTabela & "'")
                If Linha.Count = 0 Then
                    CarregaTabelas(NomeTabela)
                    Linha = Tabelas.Tables(0).Select("tabela='" & Tratex(NomeTabela) & "'")
                    If Linha.Count = 0 Then
                        Return Tabelas.Tables(0).NewRow()
                    End If
                End If
                Return Linha(0)
            End Function

            ''' <summary>
            ''' Consulta um determinado campo em uma tabela específica.
            ''' </summary>
            ''' <param name="Tabela">Tabela a ser consultada.</param>
            ''' <param name="NomeCampo">Nome do campo a ser consultado.</param>
            ''' <returns>Retorna a linha que contém a consulta.</returns>
            ''' <remarks></remarks>
            Public Function Campo(ByVal Tabela As String, ByVal NomeCampo As String) As System.Data.DataRow
                Dim Linha() As System.Data.DataRow = Campos.Tables(0).Select("tabela='" & Tabela & "' AND CAMPO = '" & NomeCampo & "'")
                If Linha.Count = 0 Then
                    Return Campos.Tables(0).NewRow()
                End If
                Return Linha(0)
            End Function

            ''' <summary>
            ''' Define características para um tipo de estrutura.
            ''' </summary>
            ''' <remarks></remarks>
            Class TipoDefEstrut
                Public Tipo As String
                Public Tamanho As Integer
                Public TamDecimal As Integer
            End Class

            ''' <summary>
            ''' Formata o campo da tabela.
            ''' </summary>
            ''' <param name="Tabela">Tabela a ser usada.</param>
            ''' <param name="NomeCampo">Nome do campo.</param>
            ''' <param name="DefCampo">Definições referentes ao padrão que o campo deve respeitar.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Function TipoDef(ByVal Tabela As String, ByVal NomeCampo As String, Optional ByVal DefCampo As System.Data.DataRow = Nothing) As TipoDefEstrut
                If IsNothing(DefCampo) Then
                    DefCampo = Campo(Tabela, NomeCampo)
                End If
                Dim Tipo As String = TipoScriptToOracle(DefCampo)
                Dim Pos1 As Integer = InStr(Tipo, "(")
                Dim Pos2 As Integer = 0

                Dim N As New TipoDefEstrut
                N.Tamanho = 0
                N.TamDecimal = 0

                If Pos1 <> 0 Then
                    N.Tamanho = Val(Mid(Tipo, Pos1 + 1))
                    Pos2 = InStr(Pos1 + 1, Tipo, ",")
                    If Pos2 <> 0 Then
                        N.TamDecimal = Val(Mid(Tipo, Pos2 + 1))
                    End If
                Else
                    Pos1 = Len(Tipo) + 1
                End If

                N.Tipo = Trim(Microsoft.VisualBasic.Left(Tipo, Pos1 - 1))
                Return N
            End Function

            ''' <summary>
            ''' De acordo com o tipo de estrutura do campo inserido, retorna uma informação correspondente.
            ''' </summary>
            ''' <param name="Tabela">Tabela a ser usada.</param>
            ''' <param name="NomeCampo">Nome do campo.</param>
            ''' <returns>Retorna uma mensagem de tamanho máximo de caracteres ou se for tipo data retorna data no formato dd/MM/yyyy</returns>
            ''' <remarks></remarks>
            Public Function ToolTip(ByVal Tabela As String, ByVal NomeCampo As String) As String
                If Ajato.ContainsKey("TOOLTIP_" & Tabela & "_" & NomeCampo) Then
                    Return Ajato("TOOLTIP_" & Tabela & "_" & NomeCampo)
                End If
                Dim Def As System.Data.DataRow = Campo(Tabela, NomeCampo)
                Dim Tip As String = NZV(Def("DESCR"), "")
                Dim TpDef As TipoDefEstrut = TipoDef(Tabela, NomeCampo, Def)

                If TpDef.Tipo = "VARCHAR2" OrElse TpDef.Tipo = "VARCHAR" Then
                    If TpDef.Tamanho <> 0 Then
                        Dim Tam As Integer = TpDef.Tamanho
                        Tip &= " [Máximo de " & Tam & " caracter" & Pl(Tam, "", "es") & "]"
                    End If
                ElseIf TpDef.Tipo = "DATE" Then
                    Tip &= " [Data no formato dd/MM/yyyy]"
                End If
                Tip &= "  >  " & Tabela & ";" & NomeCampo
                Ajato.Add("TOOLTIP_" & Tabela & "_" & NomeCampo, Tip)
                Return Tip
            End Function

            ''' <summary>
            ''' Verifica o tamanho máximo de determinado campo.
            ''' </summary>
            ''' <param name="Tabela">Tabela a ser usada.</param>
            ''' <param name="NomeCampo">Nome do campo.</param>
            ''' <returns>Retorna o valor do campo de acordo com a estrutura.</returns>
            ''' <remarks></remarks>
            Public Function TamMax(ByVal Tabela As String, ByVal NomeCampo As String) As String
                Dim Ret As Integer = 0
                If Ajato.ContainsKey("TAMMAX_" & Tabela & "_" & NomeCampo) Then
                    Return Ajato("TAMMAX_" & Tabela & "_" & NomeCampo)
                End If
                Dim Def As System.Data.DataRow = Campo(Tabela, NomeCampo)
                Dim TpDef As TipoDefEstrut = TipoDef(Tabela, NomeCampo, Def)
                If TpDef.Tipo = "VARCHAR2" OrElse TpDef.Tipo = "VARCHAR" Then
                    If TpDef.Tamanho <> 0 Then
                        Ret = TpDef.Tamanho
                    End If
                End If
                Ajato.Add("TAMMAX_" & Tabela & "_" & NomeCampo, Ret)
                Return Ret
            End Function
        End Class


        ''' <summary>
        ''' Cria uma lista com o nome das colunas.
        ''' </summary>
        ''' <param name="Origem">Origem da tabela que será usada.</param>
        ''' <param name="NomeColunas">Nome das colunas.</param>
        ''' <returns>Retorna uma lista contendo o nome das colunas.</returns>
        ''' <remarks></remarks>
        Public Shared Function ArrayDeColunas(ByVal Origem As Object, ByVal NomeColunas As String) As Object()
            Dim Ar As New List(Of System.Data.DataColumn)
            For Each Nome As String In Split(NomeColunas, ";")
                If TypeOf Origem Is System.Data.DataSet Then
                    Ar.Add(Origem.Tables(0).Columns(Nome))
                ElseIf TypeOf Origem Is System.Data.DataTable Then
                    Ar.Add(Origem.Columns(Nome))
                End If
            Next
            Return Ar.ToArray
        End Function

        ''' <summary>
        ''' Concatena valores passados por parâmetros considerando um determinado delimitador.
        ''' </summary>
        ''' <param name="DelimConteudo">Delimitador a ser considerado.</param>
        ''' <param name="Valores">Valores que serão concatenados.</param>
        ''' <returns>Retorna o resultado da concatenação.</returns>
        ''' <remarks></remarks>
        Public Shared Function ConcatValores(ByVal DelimConteudo As String, ByVal ParamArray Valores() As Object)
            Dim Par As ArrayList = ParamArrayToArrayList(Valores)
            Dim Concat As String = ""
            For Each Item As Object In Par
                Concat &= IIf(Concat <> "", DelimConteudo, "") & Item.ToString
            Next
            Return Concat
        End Function

        ''' <summary>
        ''' Concatena campos.
        ''' </summary>
        ''' <param name="Linha">Linha concatenada.</param>
        ''' <param name="Campos">Campos para serem postos na linha.</param>
        ''' <param name="DelimConteudo">Delimitador de conteúdo.</param>
        ''' <returns>Uma string com os campos concatenados.</returns>
        ''' <remarks></remarks>
        Public Shared Function ConcatCamposFLD(ByVal Linha As ArrayList, ByVal Campos As Object, Optional ByVal DelimConteudo As String = ";") As String
            Return ConcatCampos(ArrayFLDToDS(Linha).Tables(0).Rows(0), Campos, DelimConteudo)
        End Function

        ''' <summary>
        ''' Concatena campos.
        ''' </summary>
        ''' <param name="Linha">Linha concatenada.</param>
        ''' <param name="Campos">Campos para serem postos na linha.</param>
        ''' <param name="DelimConteudo">Delimitador de conteúdo.</param>
        ''' <returns>Uma string com os campos concatenados.</returns>
        ''' <remarks></remarks>
        Public Shared Function ConcatCampos(ByVal Linha As ArrayList, ByVal Campos As Object, Optional ByVal DelimConteudo As String = ";") As String
            Return ConcatCampos(ArrayToDS(Linha).Tables(0).Rows(0), Campos, DelimConteudo)
        End Function

        ''' <summary>
        ''' Concatena os valores dos campos de uma determinada linha de uma tabela.
        ''' </summary>
        ''' <param name="Linha">Linha a ser considerada.</param>
        ''' <param name="Campos">Campos que serão concatenados.</param>
        ''' <param name="DelimConteudo">Delimitador a ser usado.</param>
        ''' <returns>Retorna o resultado da concatenação.</returns>
        ''' <remarks></remarks>
        Public Shared Function ConcatCampos(ByVal Linha As System.Data.DataRow, ByVal Campos As Object, Optional ByVal DelimConteudo As String = ";") As String
            If TypeOf Campos Is String Then
                Campos = Split(Campos, ";")
            End If
            Dim Concat As String = ""
            For Each Campo As String In Campos
                Concat &= IIf(Concat <> "", DelimConteudo, "") & Linha(Campo)
            Next
            Return Concat
        End Function

        ''' <summary>
        ''' Formata números a partir de uma máscara.
        ''' </summary>
        ''' <param name="Mascara">Máscara que será usada para a formatação.</param>
        ''' <param name="Numero">Número a ser formatado.</param>
        ''' <param name="Compl">Complemento.</param>
        ''' <returns>Retorna o número formatado.</returns>
        ''' <remarks></remarks>
        Public Shared Function NumMask(ByVal Mascara As String, ByVal Numero As Decimal, Optional ByVal Compl As String = " ") As String
            Return Format(Numero, Replace(Mascara, "9", "#").Replace(",", ".")).PadLeft(Len(Mascara), Compl)
        End Function

        ''' <summary>
        ''' Formata o número a partir da máscara.
        ''' </summary>
        ''' <param name="sender">Objeto que dispara o evento.</param>
        ''' <remarks></remarks>
        Public Shared Sub FormataNumMask(ByVal sender As Object)
            Dim V As Decimal = Val(Replace(Replace(Trim(sender.text), ",", "."), " ", "X"))
            Dim Mascara As String = sender.mask
            Try
                sender.text = NumMask(sender.mask, V)
            Catch EX As Exception
                Stop
            End Try
        End Sub

        ''' <summary>
        ''' Verifica se texto corresponde à máscara numérica.
        ''' </summary>
        ''' <param name="Mascara">Máscara a ser testada.</param>
        ''' <returns>True caso seja máscara numérica e false caso contrário.</returns>
        ''' <remarks></remarks>
        Public Shared Function EMascaraDeNum(ByVal Mascara As String) As Boolean
            If Mascara = "" Then
                Return False
            End If
            Return (From x As Char In Mascara.ToArray Where InStr("09,.", x) = 0 Select x).Count = 0
        End Function




        ''' <summary>
        ''' Carrega registro a partir de origem SQL ou Dataset, atribuição simples de campo.
        ''' </summary>
        ''' <param name="Prefixo">Prefixo utilizado para filtro dos campos.</param>
        ''' <param name="Container">Painel onde estão estes campos.</param>
        ''' <param name="EsquemaTabelaOrigem">Origem que pode ser um ESQUEMA.TABELA ou dataset.</param>
        ''' <param name="Filtro">Filtro a ser aplicado na origem.</param>
        ''' <param name="STRCONN">String de conexão a ser utilizada.</param>
        ''' <param name="Params">Parâmetros.</param>
        ''' <returns>Retorna o dataset que foi pesquisado.</returns>
        ''' <remarks></remarks>
        Public Shared Function CarregaReg(ByVal Prefixo As String, ByVal Container As Object, ByVal EsquemaTabelaOrigem As Object, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As System.Data.DataSet
            Return CarregaRegOuNovo(False, Prefixo, Container, EsquemaTabelaOrigem, Filtro, StrConn, Params)
        End Function

        Public Shared Function CarregaRegOuNovo(ByVal PermiteNovo As Boolean, ByVal Prefixo As String, ByVal Container As Object, ByVal EsquemaTabelaOrigem As Object, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As System.Data.DataSet
            Dim Campos As New ArrayList
            Dim Controles As ArrayList
            If TypeOf Container Is ArrayList Then
                Controles = Container
            Else
                Controles = Form.Controles(Container, Prefixo)
            End If
            For Each Ctl As Object In Controles
                Campos.Add(Mid(ObtemIdentif(Ctl), Len(Prefixo) + 1))
            Next

            Dim DS As System.Data.DataSet = Nothing
            If TypeOf EsquemaTabelaOrigem Is String Then
                Dim SQL As String = EsquemaTabelaOrigem
                If Not SQL.StartsWith("SELECT ", StringComparison.OrdinalIgnoreCase) Then
                    SQL = "SELECT " & Join(Campos.ToArray, ", ") & " FROM " & EsquemaTabelaOrigem & IIf(Filtro <> "", " WHERE " & Filtro, "")
                ElseIf Filtro <> "" Then
                    SQL = "SELECT * FROM (" & SQL & ") WHERE " & Filtro
                End If
                DS = DSCarrega(SQL, StrConn, Params)
            ElseIf TypeOf EsquemaTabelaOrigem Is System.Windows.Forms.DataGridViewRow Then
                For Each ctl As Object In Controles
                    Dim NomeCampo As String = Mid(ObtemIdentif(ctl), Len(Prefixo) + 1)
                    'CtlProp(ctl, "TIPO") = EsquemaTabelaOrigem. ctl.DS.Tables(0).Columns(NomeCampo).DataType.ToString
                    Dim Result As Object = Nothing
                    If Not IsNothing(EsquemaTabelaOrigem) Then
                        Result = EsquemaTabelaOrigem.cells(NomeCampo).VALUE
                    Else
                        Result = ""
                    End If
                    DefineValorCtl(ctl, Result)
                    CtlProp(ctl, "ANTERIOR") = Result
                Next
                Return Nothing
            ElseIf Not IsNothing(EsquemaTabelaOrigem) Then
                DS = DSFiltra(EsquemaTabelaOrigem, Filtro)
            End If
            For Each ctl As Object In Controles
                Dim NomeCampo As String = Mid(ObtemIdentif(ctl), Len(Prefixo) + 1)
                Dim Result As Object = Nothing
                CtlProp(ctl, "TIPO") = DS.Tables(0).Columns(NomeCampo).DataType.ToString
                If Not IsNothing(DS) AndAlso DS.Tables(0).Rows.Count = 1 Then
                    Result = DS.Tables(0).Rows(0)(NomeCampo)
                ElseIf PermiteNovo Then
                    Result = ""
                End If
                DefineValorCtl(ctl, Result)
                CtlProp(ctl, "ANTERIOR") = Result
            Next

            Return DS
        End Function


        ''' <summary>
        ''' Grava o registro.
        ''' </summary>
        ''' <param name="Prefixo">Prefixo do registro.</param>
        ''' <param name="Container">Lista dos containers.</param>
        ''' <param name="EsquemaTabelaOrigem">Informações do banco que serão usadas na conexão.</param>
        ''' <param name="Filtro">Filtro a ser considerado.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="AtribAdic">Lista de atributos adicionais.</param>
        ''' <param name="Params">Parâmetros que serão passados.</param>
        ''' <remarks></remarks>
        Public Shared Sub GravaReg(ByVal Prefixo As String, ByVal Container As Object, ByVal EsquemaTabelaOrigem As Object, ByVal Filtro As String, ByVal StrConn As Object, ByVal AtribAdic As ArrayList, ByVal ParamArray Params() As Object)
            Dim Campos As New ArrayList
            Dim NomeCampos As New ArrayList
            Dim Controles As ArrayList = Nothing
            Dim Definir As New ArrayList
            If EsquemaTabelaOrigem.ToString.Contains("WHERE") Then
                EsquemaTabelaOrigem = Split(EsquemaTabelaOrigem.ToString, " WHERE ")(0) & ")"
            End If


            If TypeOf Container Is ArrayList Then
                Controles = Container
            ElseIf TypeOf Container Is System.Data.DataRow Then
                Controles = New ArrayList(CType(Container, System.Data.DataRow).Table.Columns)
            ElseIf TypeOf Container Is System.Windows.Forms.DataGridViewRow Then
                Controles = New ArrayList(CType(Container, System.Windows.Forms.DataGridViewRow).DataGridView.Columns)
            Else
                Controles = Form.Controles(Container, Prefixo)
            End If
            Dim UPD As String = ""
            Dim ListaParametrosTextosGrandes As New ArrayList
            For Each Ctl As Object In Controles

                Try

                    Dim NomeCampo As String = ""
                    If TypeOf Container Is System.Data.DataRow Then
                        NomeCampo = Ctl.COLUMNNAME
                    Else
                        NomeCampo = Mid(ObtemIdentif(Ctl), Len(Prefixo) + 1)
                    End If

                    If NomeCampo = "__ord" OrElse NomeCampo = "__tipo" Then Continue For

                    NomeCampos.Add(NomeCampo)

                    ' variáveis autônomas
                    Dim Dado As Object = Nothing
                    Dim Auto As String = ""
                    Dim Formato As String = ""
                    Dim Tipo As String = ""
                    Dim Extrair As String = ""
                    If TypeOf Container Is System.Data.DataRow Then
                        Dado = Container(NomeCampo)
                        Auto = NZ(CType(Ctl, System.Data.DataColumn).ExtendedProperties("Auto"), "")
                        Formato = NZ(CType(Ctl, System.Data.DataColumn).ExtendedProperties("Formato"), "")
                        Tipo = NZ(CType(Ctl, System.Data.DataColumn).ExtendedProperties("Tipo"), "")
                        Extrair = NZ(CType(Ctl, System.Data.DataColumn).ExtendedProperties("Extrair"), "")
                        If Extrair = "PRIM_PARAM" AndAlso TypeOf Dado Is String Then
                            Dado = Trim(Split(Dado, ComboSepDefault)(0))
                        End If
                    ElseIf Not TypeOf Container Is System.Windows.Forms.DataGridViewRow Then
                        Dado = ObtemValorCtl(Ctl)
                        Auto = CtlProp(Ctl, "AUTO")
                        Formato = CtlProp(Ctl, "FORMATO")
                        Tipo = CtlProp(Ctl, "TIPO")
                        Extrair = CtlProp(Ctl, "EXTRAIR")
                        If Extrair = "PRIM_PARAM" AndAlso TypeOf Dado Is String Then
                            Dado = Trim(Split(Dado, ComboSepDefault)(0))
                        End If
                    Else
                        Dado = ObtemValorCtl(NomeCampo, Container)
                        Dim Elem As New ElementosStr(Ctl.tag)
                        Auto = Elem.Items("AUTO").Conteudo
                        Formato = Elem.Items("FORMATO").Conteudo
                        Tipo = Elem.Items("TIPO").Conteudo
                    End If


                    Dim TextoGrande As Boolean = False
                    If IsNothing(Dado) Then
                        Dado = Convert.DBNull
                    ElseIf Auto = "PROXSEQ" AndAlso TypeOf Container Is System.Data.DataRow Then
                        If Val(NZV(Dado, "")) = 0 Then
                            Dim AutoFiltro As String = ""
                            Dim AutoParams As New ArrayList
                            For Each Ctl2 As System.Data.DataColumn In Ctl.TABLE.COLUMNS
                                If Ctl2.ColumnName = Ctl.COLUMNNAME Then
                                    Dado = DSProxSeq(NomeCampo, EsquemaTabelaOrigem, StrConn, AutoFiltro, AutoParams)
                                    Definir.Add(Ctl)
                                    Definir.Add(Dado)
                                    Exit For
                                End If
                                Dim NomeCampo2 As String = Ctl2.ColumnName
                                AutoFiltro &= IIf(AutoFiltro <> "", " AND ", "") & NomeCampo2 & " = :" & NomeCampo2
                                AutoParams.Add(":" & NomeCampo2)
                                AutoParams.Add(Container(Ctl2.ColumnName))
                            Next
                        End If
                    ElseIf Auto = "PROXSEQ" AndAlso (Not Ctl.VISIBLE OrElse Val(NZV(Dado, "")) = 0) Then
                        Dim AutoFiltro As String = ""
                        Dim AutoParams As New ArrayList
                        For Each Ctl2 As Object In Controles
                            If ObtemIdentif(Ctl2) = ObtemIdentif(Ctl) Then
                                Dado = DSProxSeq(NomeCampo, EsquemaTabelaOrigem, StrConn, AutoFiltro, AutoParams)
                                Definir.Add(Ctl)
                                Definir.Add(Dado)
                                Exit For
                            End If
                            Dim NomeCampo2 As String = Mid(ObtemIdentif(Ctl2), Len(Prefixo) + 1)
                            AutoFiltro &= IIf(AutoFiltro <> "", " AND ", "") & NomeCampo2 & " = :" & NomeCampo2
                            AutoParams.Add(":" & NomeCampo2)
                            If Not TypeOf Container Is System.Windows.Forms.DataGridViewRow Then
                                AutoParams.Add(ObtemValorCtl(Ctl2))
                            Else
                                AutoParams.Add(ObtemValorCtl(ObtemIdentif(Ctl2), Container))
                            End If
                        Next
                    ElseIf Formato = "REF" Then
                        Dado = DSRef(Dado, NomeCampo, EsquemaTabelaOrigem, StrConn)
                        If Not IsDBNull(Dado) Then
                            Definir.Add(Ctl)
                            Definir.Add(Dado)
                        End If
                    ElseIf Formato = "ETIQREF" Then
                        Dim Ref As String = Dado.ToString.Replace(" ", "").Replace("..", ".")
                        If System.Text.RegularExpressions.Regex.Match(Ref, "[0-90-9]{2,2}\.").Success Then
                            If Len(Ref) < 11 Then
                                If Len(Ref) < 3 Then ' YY.
                                    Ref &= "."
                                End If
                                If Len(Ref) < 5 Then ' YY.MM
                                    Ref &= Format(Now, "MM")
                                End If
                                If Len(Ref) < 6 Then ' YY.MM.
                                    Ref &= "."
                                End If
                                Dim RefU As String = NZV(DSValor("MAX(SUBSTR(" & NomeCampo & "," & Len(Ref) + 1 & "))", EsquemaTabelaOrigem, StrConn, NomeCampo & " LIKE '" & Ref & "%'"), "0")
                                Dim Masc As String = Format(Val(RefU) + 1, New String("0", 11 - Len(Ref)))
                                If Len(Masc) > (11 - Len(Ref)) Then
                                    Throw New Exception("Não existe mais sequencial disponível para esta referência neste segmento. Última: " & Ref & RefU & ".")
                                End If
                                Ref = Ref & Masc
                                Dado = Ref
                                Definir.Add(Ctl)
                                Definir.Add(Dado)
                            End If
                        Else
                            Dado = Convert.DBNull
                        End If
                    ElseIf Not IsDBNull(Dado) And Tipo <> "" Then

                        If Len(Dado) > ClobBufferTamMax Then
                            ListaParametrosTextosGrandes.Add(Dado)
                            ListaParametrosTextosGrandes.Add(NomeCampo)
                            TextoGrande = True
                        End If

                        Dado = CTypeStr(Dado, Tipo)
                    End If

                    If Not TextoGrande Then
                        Campos.Add(":" & NomeCampo)
                        Campos.Add(Dado)
                        UPD &= IIf(UPD <> "", ", ", "") & NomeCampo & " = :" & NomeCampo
                    End If



                Catch EX As Exception
                    Throw New Exception(EX.Message & " ao tratar campo " & ObtemIdentif(Ctl))
                End Try
            Next
            If Not IsNothing(AtribAdic) Then
                For Z As Integer = 0 To AtribAdic.Count - 1 Step 2
                    If Not AtribAdic(Z).ToString.StartsWith(":") Then
                        Throw New Exception("Gravareg identificou atributo adicional incorreto: " & AtribAdic(Z).ToString & ". Formato certo é: :CAMPO, CONTEUDO, :CAMPO2, CONTEUDO2.")
                    End If
                    Dim NomeCampo As String = Mid(AtribAdic(Z), 2)
                    Campos.Add(AtribAdic(Z))
                    Campos.Add(AtribAdic(Z + 1))
                    UPD &= IIf(UPD <> "", ", ", "") & NomeCampo & " = :" & NomeCampo
                    NomeCampos.Add(NomeCampo)
                Next
            End If
            Dim NomeCamposA() As Object = NomeCampos.ToArray
            Dim Qtd As Integer = DSValor("count(*)", EsquemaTabelaOrigem, StrConn, Filtro, Params)
            If Qtd = 0 Then
                DSGrava("INSERT INTO " & EsquemaTabelaOrigem & " (" & Join(NomeCamposA, ", ") & ") VALUES (:" & Join(NomeCamposA, ", :") & ")", StrConn, Params, Campos)
            Else
                DSGrava("UPDATE " & EsquemaTabelaOrigem & " SET " & UPD & " WHERE " & Filtro, StrConn, Params, Campos)
            End If

            If ListaParametrosTextosGrandes.Count > 0 Then
                If StrConnObj(StrConn).ProviderName = Oracle Then
                    For Z As Integer = 0 To ListaParametrosTextosGrandes.Count - 1 Step 2
                        ClobGrava(ListaParametrosTextosGrandes.Item(Z), ListaParametrosTextosGrandes.Item(Z + 1), EsquemaTabelaOrigem, Filtro, StrConn, Params)
                    Next
                End If
            End If

            For z As Integer = 0 To Definir.Count - 1 Step 2
                Try
                    If TypeOf Definir(z) Is DataColumn Then
                        Container(Definir(z).columnname) = Definir(z + 1)
                    Else
                        DefineValorCtl(Definir(z), Definir(z + 1))
                    End If
                Catch
                End Try
            Next
        End Sub



        ''' <summary>
        ''' Exclui determinado registro.
        ''' </summary>
        ''' <param name="Prefixo">Prefixo do registro.</param>
        ''' <param name="Container">Lista dos containers.</param>
        ''' <param name="EsquemaTabelaOrigem">Informações do banco que serão usadas na conexão.</param>
        ''' <param name="Filtro">Filtro a ser considerado.</param>
        ''' <param name="STRCONN">String de conexão.</param>
        ''' <param name="Params">Parâmetros que serão passados.</param>
        ''' <returns>Retorna a quantidade atual de registros.</returns>
        ''' <remarks></remarks>
        Shared Function ExcluiReg(ByVal Prefixo As String, ByVal Container As Object, ByVal EsquemaTabelaOrigem As Object, ByVal Filtro As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As Integer
            Dim Controles As ArrayList = Nothing
            If TypeOf Container Is ArrayList Then
                Controles = Container
            ElseIf TypeOf Container Is System.Data.DataRow Then
                Controles = New ArrayList(CType(Container, System.Data.DataRow).Table.Columns)
            ElseIf TypeOf Container Is System.Windows.Forms.DataGridViewRow Then
                Controles = New ArrayList(CType(Container, System.Windows.Forms.DataGridViewRow).DataGridView.Columns)
            Else
                Controles = Form.Controles(Container, Prefixo)
            End If
            Dim QtdAntes As Integer = DSValor("count(*)", EsquemaTabelaOrigem, StrConn, Filtro, Params)
            DSGrava("DELETE FROM " & EsquemaTabelaOrigem & " WHERE " & Filtro, StrConn, Params)
            Dim QtdDepois As Integer = DSValor("count(*)", EsquemaTabelaOrigem, StrConn, Filtro, Params)
            Return QtdAntes - QtdDepois
        End Function

        ''' <summary>
        ''' Muda o focus para o próximo registro do controle.
        ''' </summary>
        ''' <param name="Controles">Lista de controles.</param>
        ''' <param name="UltimoComFoco">Controles do último registro com foco.</param>
        ''' <remarks></remarks>
        Public Shared Sub ProxFoco(ByVal Controles As ArrayList, Optional ByVal UltimoComFoco As System.Windows.Forms.Control = Nothing)
            Dim ProcurarEm = Nothing
            If IsNothing(UltimoComFoco) Then
                ProcurarEm = Controles
            Else
                Dim Ind As Integer = Controles.IndexOf(UltimoComFoco)
                If Ind = -1 Then
                    ProcurarEm = Controles
                Else
                    ProcurarEm = Controles.GetRange(Ind + 1, Controles.Count - Ind - 1)
                End If
            End If
            Dim Pri As System.Windows.Forms.Control = Nothing
            For Each Ctl As Object In ProcurarEm
                If Not TypeOf Ctl Is System.Windows.Forms.TextBox And Not TypeOf Ctl Is System.Windows.Forms.MaskedTextBox Then
                    Pri = Ctl
                    Exit For
                ElseIf Not Ctl.readonly And Not Ctl.BackColor = System.Drawing.SystemColors.InactiveBorder Then
                    Pri = Ctl
                    Exit For
                End If
            Next
            If Not IsNothing(Pri) Then
                Pri.Focus()
            End If
        End Sub

        ''' <summary>
        ''' Propriedade de um controle num container.
        ''' </summary>
        ''' <param name="Controle">Controle a ser pesquisado.</param>
        ''' <param name="Propriedade">Propriedade a ser pesquisada.</param>
        ''' <param name="Container">Local onde será pesquisado o controle.</param>
        ''' <value>Valor da propriedade.</value>
        ''' <returns>Valor da propriedade.</returns>
        ''' <remarks></remarks>
        Shared Property P(ByVal Controle As String, Optional ByVal Propriedade As String = "", Optional ByVal Container As Object = Nothing) As Object
            Get
                If IsNothing(Container) Then
                    Container = System.Windows.Forms.Form.ActiveForm
                End If
                Dim Obj As System.Windows.Forms.Control = Nothing
                If TypeOf Container Is ArrayList Then
                    For Each Ctl In Container
                        If Ctl.name = Controle Then
                            Obj = Ctl
                            Exit For
                        End If
                    Next
                ElseIf TypeOf Container Is System.Windows.Forms.TabControl OrElse TypeOf Container Is System.Windows.Forms.TabControlAction Then
                    Dim Objs() As System.Windows.Forms.Control = Container.Controls.Find(Controle, True)
                    If Objs.Count > 0 Then
                        Obj = Objs(0)
                    End If
                Else
                    Throw New Exception("Tipo de container não especificado: " & Container.GetType.ToString & ".")
                End If
                If IsNothing(Obj) Then
                    Return Nothing
                End If
                If Propriedade = "" Then
                    If TypeOf Obj Is System.Windows.Forms.CheckBox OrElse TypeOf Obj Is System.Windows.Forms.RadioButton Then
                        Propriedade = "checked"
                    Else
                        Propriedade = "text"
                    End If
                End If
                Return Obj.GetType.GetProperty(Propriedade, Reflection.BindingFlags.Public + Reflection.BindingFlags.Static + Reflection.BindingFlags.Instance + Reflection.BindingFlags.IgnoreCase).GetValue(Obj, Nothing)
            End Get
            Set(ByVal value As Object)
                If IsNothing(Container) Then
                    Container = System.Windows.Forms.Form.ActiveForm
                End If
                Dim Objs() As System.Windows.Forms.Control = Container.Controls.Find(Controle, True)
                Dim Obj As System.Windows.Forms.Control = Nothing
                If Objs.Count > 0 Then
                    Obj = Objs(0)
                End If
                If IsNothing(Obj) Then
                    Throw New Exception("Controle " & Controle & " não encontrado.")
                End If
                If Propriedade = "" Then
                    If TypeOf Obj Is System.Windows.Forms.CheckBox OrElse TypeOf Obj Is System.Windows.Forms.RadioButton Then
                        Propriedade = "checked"
                    Else
                        Propriedade = "text"
                    End If
                End If
                Obj.GetType.GetProperty(Propriedade, Reflection.BindingFlags.Public + Reflection.BindingFlags.Static + Reflection.BindingFlags.Instance + Reflection.BindingFlags.IgnoreCase).SetValue(Obj, value, Nothing)
            End Set
        End Property

        ''' <summary>
        ''' Cria um formulário para mensagens.
        ''' </summary>
        ''' <param name="Conteudo">Conteúdo da mensagem.</param>
        ''' <param name="Titulo">Título da mensagem.</param>
        ''' <returns>Retorna o formulário contendo a mensagem.</returns>
        ''' <remarks></remarks>
        Shared Function MsgConteudo(ByVal Conteudo As String, Optional ByVal Titulo As String = "") As System.Windows.Forms.Form
            Dim w As New System.Windows.Forms.Form
            w.Text = NZV(Titulo, "Conteúdo")
            w.Width = 500
            w.Height = 350
            Dim t As New System.Windows.Forms.TextBox
            t.Dock = System.Windows.Forms.DockStyle.Fill
            t.ReadOnly = True
            t.Name = "txtConteudo"
            t.Multiline = True
            t.Text = NZV(Conteudo, "")
            w.Controls.Add(t)
            w.ShowDialog()
            Return w
        End Function

        ''' <summary>
        ''' Comportamento de campo para edição em formulário.
        ''' </summary>
        ''' <remarks></remarks>
        Class Fld
            ''' <summary>
            ''' Objeto que permite programação de tooltip no campo.
            ''' </summary>
            ''' <remarks></remarks>
            Private AplToolTip As New System.Windows.Forms.ToolTip

            ''' <summary>
            ''' Ferramenta de construção do controle.
            ''' </summary>
            ''' <param name="Nome">Nome do controle.</param>
            ''' <param name="Tooltip">Tooltip a ser apresentado.</param>
            ''' <param name="Formato">Formato que será utilizado para criação do controle.</param>
            ''' <param name="Auto">Se é um tipo de campo auto como PROXSEQ.</param>
            ''' <param name="TamMax">Tamanho máximo do campo.</param>
            ''' <param name="X">Posição X na tela.</param>
            ''' <param name="Y">Posição Y na tela.</param>
            ''' <param name="Largura">Largura do controle a ser criado.</param>
            ''' <param name="Altura">Altura do controle a ser criado.</param>
            ''' <param name="Validating">Se é um controle com validação.</param>
            ''' <param name="Rels">Se está vinculado a relatórios.</param>
            ''' <param name="Tipo">Tipo do controle a ser considerado para leitura e gravação em banco de dados.</param>
            ''' <param name="STRCONN">String de conexão que controle utilizará para busca das informações caso seja um combo.</param>
            ''' <param name="EsquemaPrinc">Esquema que será utilizado para busca das informações caso seja um combo.</param>
            ''' <param name="EsquemaGerador">Esquema gerador capaz de fornecer meta-informações do controle.</param>
            ''' <param name="TabelaStr">Definições já carregadas sobre tabela relacionada com controle.</param>
            ''' <param name="CampoStr">Campos já carregados relacionados com o controle.</param>
            ''' <param name="Defs">Registro de definições capaz de fazer carga de dados tornar-se mais rápida.</param>
            ''' <param name="TabelaDataRow">Datarow onde rotina foi buscar a informação.</param>
            ''' <param name="CampoDataRow">Column onde rotina foi buscar a informação.</param>
            ''' <returns>Controle criado.</returns>
            ''' <remarks></remarks>
            Public Function Ctl(ByVal Nome As String, ByVal Tooltip As String, ByVal Formato As String, ByVal Auto As String, ByVal TamMax As Integer, ByVal X As Integer, ByVal Y As Integer, ByVal Largura As Integer, ByVal Altura As Integer, ByVal Validating As Boolean, Optional ByVal Rels As List(Of System.Data.DataRow) = Nothing, Optional ByVal Tipo As Defs.TipoDefEstrut = Nothing, Optional ByVal StrConn As Object = Nothing, Optional ByVal EsquemaPrinc As String = "", Optional ByVal EsquemaGerador As String = "", Optional ByVal TabelaStr As String = "", Optional ByVal CampoStr As String = "", Optional ByVal Defs As Defs = Nothing, Optional ByVal TabelaDataRow As System.Data.DataRow = Nothing, Optional ByVal CampoDataRow As System.Data.DataRow = Nothing)
                Dim RelsN1SQL As String = ""
                Dim ATUALIZADO_POR As String = ""
                Dim RelQtdCols As Integer = 0
                Dim Descr As String = Tooltip

                Dim RelsTips As System.Text.RegularExpressions.MatchCollection = Nothing
                If Not IsNothing(Rels) AndAlso Rels.Count > 0 Then
                    Dim chave_apres As String = NZ(Rels(0)("chave_apres_1"), "")

                    Dim CAMPOS() As String = Split(Rels(0)("CAMPO_1"), ";")
                    Dim CamposRel() As String = Split(Rels(0)("CAMPO_N"), ";")
                    Dim Pos As Integer = Array.IndexOf(CamposRel, CampoDataRow!Campo)


                    If chave_apres = "" Then
                        chave_apres = NZ(Rels(0)("chave_apres"), "")
                    End If

                    Dim Chaves() As String = Split(chave_apres, "|")
                    If Pos > Chaves.Length - 1 Then
                        chave_apres = ""
                    Else
                        chave_apres = Chaves(Pos)
                    End If

                    If chave_apres <> "" Then
                        Dim chave_apres_array() As String = Split(chave_apres, ";")
                        chave_apres = ""
                        For Each ItemAdd As String In chave_apres_array
                            If ItemAdd <> CAMPOS(Pos) Then
                                chave_apres &= ", " & ItemAdd
                                RelQtdCols += 1
                            End If
                        Next
                    End If


                    Dim RELELEM As New ElementosStr(NZV(Rels(0)("PROP_EXTEND"), ""))
                    Dim RELFILTRO As String = RELELEM.Items("FILTRO").Conteudo

                    ' filtra relacionamento com base no campo anterior
                    For Z As Integer = 0 To Pos - 1
                        RELFILTRO &= IIf(RELFILTRO <> "", " AND ", "") & CAMPOS(Z) & " = [:FLD" & CamposRel(Z) & "]"
                        ATUALIZADO_POR &= IIf(ATUALIZADO_POR <> "", ";", "") & "FLD" & CamposRel(Z)
                    Next

                    RelQtdCols += 1
                    RelsN1SQL = "select " & CAMPOS(Pos) & chave_apres & " from " & EsquemaPrinc & "." & Rels(0)("TABELA_1").ToString.ToLower & IIf(RELFILTRO <> "", " WHERE " & RELFILTRO & " ORDER BY 1", "")
                Else
                    RelsTips = RegularExpressions.Regex.Matches(NZ(Tooltip, ""), "\b(\w+)=(\w+)\b")
                End If

                Dim fld As Object = CtlForma(StrConn, Formato, Tipo, RelsN1SQL, RelQtdCols, RelsTips, ATUALIZADO_POR, Tooltip, TamMax, Validating, , EsquemaPrinc)

                fld.Left = X
                fld.Top = Y

                If Largura <> 0 Then
                    fld.width = Largura
                End If
                If Altura <> 0 Then
                    fld.height = Altura
                End If

                If Nome <> "" Then
                    fld.name = Nome
                Else
                    fld.Name = "FLD" & CampoDataRow!CAMPO
                End If

                AplToolTip.SetToolTip(fld, Tooltip)

                If Not IsNothing(CampoDataRow) Then
                    CtlProp(fld, "VALOR_PADRAO") = CampoDataRow!VALOR_PADRAO
                End If
                CtlProp(fld, "AUTO") = Auto
                CtlProp(fld, "FORMATO") = Formato
                CtlProp(fld, "TOOLTIP") = Tooltip
                CtlProp(fld, "DESCR") = Descr

                Return fld
            End Function

            ''' <summary>
            ''' Formata os campos de acordo com o valor atribuido para eles.
            ''' </summary>
            ''' <param name="StrConn">String de conexão.</param>
            ''' <param name="Formato">Formato que ele vai receber.</param>
            ''' <param name="Tipo">Tipo do dado.</param>
            ''' <param name="RelsN1SQL"></param>
            ''' <param name="RelQtdCols"></param>
            ''' <param name="RelsTips"></param>
            ''' <param name="AtualizadoPor"></param>
            ''' <param name="ToolTip">Tooltip do objeto.</param>
            ''' <param name="TamMax">Tamamnho máximo.</param>
            ''' <param name="Validating">Estado de validação.</param>
            ''' <param name="Fld">Campo a ser formatado.</param>
            ''' <param name="EsquemaPrinc">Esquema principal.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Shared Function CtlForma(ByVal StrConn As Object, ByVal Formato As String, ByVal Tipo As Defs.TipoDefEstrut, ByVal RelsN1SQL As String, ByVal RelQtdCols As Integer, ByVal RelsTips As System.Text.RegularExpressions.MatchCollection, ByVal AtualizadoPor As String, ByVal ToolTip As String, ByVal TamMax As Integer, ByVal Validating As Boolean, Optional ByVal Fld As Object = Nothing, Optional ByVal EsquemaPrinc As String = "") As Object
                'formatos
                ' descrição dos formatos e tipos previstos para tratamento automático
                ' (relacionamento entre tabelas)
                ' (condições em tips "s=sim;n=não")
                ' REF = BHC0-00-00001 OK
                ' TEL = (99) 9999-9999 OK
                ' ETIQREF = 99.99.99999 OK
                ' NCM = 9999.99.99 OK
                ' RADIO_OPC;LISTA:'1;SIM;0;NÃO' OK
                ' LISTA_OPC;LISTA:'1;SIM;0;NÃO' OK
                ' EMAIL OK
                ' EMAILS OK
                ' MOMENTO = 00/00/0000 00:00:00 OK
                ' DATE = 00/00/0000 OK
                ' (máscara numérica) 9990.00 OK
                ' FLOAT = 99999999999990.0000 OK
                ' NUMBER = ...99990.00... OK
                ' CNPJ = 00.000.000/0000-00 OK
                ' CPF = 000.000.000-00 OK
                ' CPF_SEM_PONTO = 000000000-00 OK
                ' CEP = 00000-000 OK
                ' SENHA = ********* OK
                ' > (todas as letras maiúsculas) OK
                ' < (todas as letras minúsculas) OK
                ' ESTADO OK
                ' ESTADO_SEM_EX OK
                ' PAISES OK
                ' MEMO OK
                ' HTML OK
                ' NOTIFICA OK
                ' IDENTIDADE (RG) OK
                ' DECLARAÇÃO DE IMPORTAÇÃO (DI) = 99/9999999-9 OK
                ' TEU OK
                ' GERADOR_FORMATO OK
                ' IMAGEM OK
                ' SOMENTE NÚMEROS
                ' 
                If RelsN1SQL <> "" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.ComboBox
                    End If
                    AcertaCombo(Fld)
                    CarregaComboVinc(Fld, RelQtdCols, False, "", RelsN1SQL, StrConn, , AtualizadoPor)
                    Fld.Width = TamCampo
                    Fld.Height = AltTexto
                ElseIf RelsTips.Count > 0 Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.ComboBox
                    End If
                    AcertaCombo(Fld)
                    Fld.Width = TamCampo
                    Fld.Height = AltTexto
                    For Each R As Match In RelsTips
                        Fld.Items.Add(New ListItem(Replace(R.Groups(0).Value, "=", ComboSepDefault), R.Groups(1).Value))
                    Next
                ElseIf Formato = "REF" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = ">AAAA\-99\-99999"
                    Fld.Width = 100
                    Fld.Height = AltTexto
                    ToolTip &= " [Ref no formato TTTT-AA-SSSSS onde T=tipo, A=ano, S=sequencial]"
                ElseIf Formato = "TEU" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = ">AAAA9999999"
                    Fld.Width = 100
                    Fld.Height = AltTexto
                    ToolTip &= " [Ref no formato AAAUSSSSSSX onde A=codigo da empresa, U=categoria, S=serial do container, X=validador]"
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaTEU
                    End If
                ElseIf Formato = "IMAGEM" Then
                    Fld.width = TamCampo + 3
                    Fld.height = AltMemo * 2
                    ToolTip &= "[Imagem]"
                ElseIf Formato = "IMAGEM_INCORPORADA" Then
                    Fld.width = TamCampo + 3
                    Fld.height = AltMemo * 2
                    ToolTip &= "[Imagem Incorporada com possibilidade de salvar como Array de Bytes.]"
                ElseIf Formato = "TEL" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = ">\(99\)\-9999\-9999"
                    Fld.Width = 100
                    Fld.Height = AltTexto
                    ToolTip &= " [Telefones no formato (99)9999-9999]"

                ElseIf Formato = "ETIQREF" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "99\.99\.99999"
                    Fld.Width = 100
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Inclua o ano (99) referente a sequencia desejada, ou ano (99) e mes (01-12)]"

                ElseIf Formato = "NCM" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "9999\.99\.99"
                    Fld.Width = 100
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Padrão no formato 9999.99.99 os numeros sao informados de acordo com tabelas divulgadas pelo Ministerio da Fazenda]"

                ElseIf Formato = "DI" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "99\/9999999\-9"
                    Fld.Width = 100
                    Fld.Height = AltTexto
                    ToolTip &= " [Declaração de Importação no formato 99/9999999-9]"
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum

                ElseIf Formato.StartsWith("LISTA_OPC;") Then
                    Dim Elem As New ElementosStr(Mid(Formato, 11))
                    Dim QtdCols As Integer = NZV(Elem.Items("QTDCOLS").Conteudo, 2)
                    Dim Lista As String = TrimCarac(Elem.Items("LISTA").Conteudo, New String() {"'"})
                    Dim OcultaValor As Boolean = NZV(Elem.Items("OCULTAVALOR").Conteudo, False)
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.ComboBox
                    End If
                    Fld.Width = TamCampo
                    CtlProp(Fld, "EXTRAIR") = "PRIM_PARAM"
                    CarregaCombo(Fld, QtdCols, OcultaValor, ComboSepDefault, True, Split(Lista, ";"))
                    TamMax = 0
                ElseIf Formato = "EMAIL" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    Fld.Height = AltTexto
                    DefineLargura(Fld, TamMax, TamCampo, TamCarac, TamCaracCompl)
                    ToolTip &= " [Email]"
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaEmail
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                ElseIf Formato = "EMAILS" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    Fld.Multiline = True
                    Fld.ScrollBars = ScrollBars.Vertical
                    Fld.Height = AltMemo
                    DefineLargura(Fld, 0, TamCampo, TamCarac, TamCaracCompl)
                    ToolTip &= " [Lista de emails]"
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaEmails
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                ElseIf Formato = "MOMENTO" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "00/00/0000 00:00:00"
                    Fld.Width = 115
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.Control).KeyDown, AddressOf CharNaData
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaData
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.Control).MouseDoubleClick, AddressOf ExpandeData
                    ToolTip &= " ["";"" para momento atual ou duplo-click para calendário]"
                ElseIf Tipo.Tipo = "DATE" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "00/00/0000"
                    Fld.Width = 80
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.Control).KeyDown, AddressOf CharNaData
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaData
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.Control).MouseDoubleClick, AddressOf ExpandeData
                    ToolTip &= " ["";"" para data atual ou duplo-click para calendário]"
                ElseIf Formato <> "" AndAlso EMascaraDeNum(Formato) Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = Formato
                    Fld.Width = Len(Fld.MASk) * TamCarac * 0.6 + TamCaracCompl
                    Fld.Height = AltTexto
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaNum
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.Control).KeyPress, AddressOf EntraTeclaFracion
                ElseIf Tipo.Tipo = "FLOAT" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = New String("9", 13) & "0" & "." & New String("0", 4)
                    Fld.Width = Len(Fld.MASk) * TamCarac * 0.6 + TamCaracCompl
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Duplo-click para Zoom] "
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaNum
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.Control).KeyPress, AddressOf EntraTeclaFracion
                ElseIf Tipo.Tipo = "NUMBER" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = New String("9", Tipo.Tamanho - 1) & "0" & IIf(Tipo.TamDecimal <> 0, "." & New String("0", Tipo.TamDecimal), "")
                    Fld.Width = Len(Fld.MASk) * TamCarac * 0.6 + TamCaracCompl
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Duplo-click para Zoom] "
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaNum
                    End If
                    If Tipo.TamDecimal <> 0 Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).KeyPress, AddressOf EntraTeclaFracion
                    End If
                ElseIf Formato = "CNPJ" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "00\.000\.000\/0000\-00"
                    Fld.Width = 130
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Duplo-click para Zoom] "
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaCNPJ
                    End If
                ElseIf Formato = "CPF" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "000\.000\.000\-00"
                    Fld.Width = 130
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Duplo-click para Zoom] "
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaCPF
                    End If

                ElseIf Formato = "RG" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "00\.000\.000\-0"
                    Fld.Width = 130
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.MaskedTextBox).MouseDoubleClick, AddressOf ExpandeNum
                    ToolTip &= " [Duplo-click para Zoom] "

                ElseIf Formato = "CPF_SEM_PONTO" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "000000000\-00"
                    Fld.Width = 120
                    Fld.height = AltTexto
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.Control).Validating, AddressOf ValidaCPF1
                    End If

                ElseIf Formato = "CEP" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.MaskedTextBox
                    End If
                    Fld.Mask = "00000\-000"
                    Fld.Width = 80
                    Fld.Height = AltTexto
                ElseIf Formato = "SENHA" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    Fld.PasswordChar = "*"
                    Fld.Width = 200
                    Fld.Height = AltTexto
                ElseIf Formato = ">" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).KeyPress, AddressOf TudoMaiusc
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.TextBox).Validating, AddressOf ValidaTudoMaiusc
                    End If
                    ToolTip &= " [Apenas letras maiúsculas]"
                    Fld.Width = TamCampo
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                ElseIf Formato = "COD128B" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).KeyPress, AddressOf TudoMaiuscSemAcento
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.TextBox).Validating, AddressOf ValidaTudoMaiusc
                    End If
                    ToolTip &= " [Apenas letras maiúsculas]"
                    Fld.Width = TamCampo
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                ElseIf Formato = "<" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).KeyPress, AddressOf TudoMinusc
                    If Validating Then
                        AddHandler CType(Fld, System.Windows.Forms.TextBox).Validating, AddressOf ValidaTudoMinusc
                    End If
                    ToolTip &= " [Apenas letras minúsculas]"
                    Fld.Width = TamCampo
                    Fld.Height = AltTexto
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                ElseIf Formato = "ESTADO" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.ComboBox
                    End If
                    AcertaCombo(Fld)
                    CarregaComboSimpl(Fld, True, EstadosDoBrasil)
                    Fld.Width = 50
                    Fld.Height = AltTexto

                ElseIf Formato = "ESTADO_SEM_EX" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.ComboBox
                    End If
                    AcertaCombo(Fld)
                    Dim EstadosDoBrasilSemEx As New ArrayList
                    For Each Item As String In EstadosDoBrasil
                        If Item <> "EX" Then
                            EstadosDoBrasilSemEx.Add(Item)
                        End If
                    Next
                    CarregaComboSimpl(Fld, True, EstadosDoBrasilSemEx)
                    Fld.Width = 50
                    Fld.Height = AltTexto
                ElseIf Formato = "PAIS" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.ComboBox
                    End If
                    AcertaCombo(Fld)
                    CarregaComboSimpl(Fld, True, ListaDePaises)
                    Fld.Width = 210
                    Fld.Height = AltTexto
                ElseIf Formato = "MEMO" Then
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    Fld.Multiline = True
                    Fld.ScrollBars = ScrollBars.Vertical
                    Fld.Width = TamCampo
                    Fld.Height = AltMemo
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                Else
                    If IsNothing(Fld) Then
                        Fld = New System.Windows.Forms.TextBox
                    End If
                    Fld.Height = AltTexto
                    DefineLargura(Fld, TamMax, TamCampo, TamCarac, TamCaracCompl)
                    AddHandler CType(Fld, System.Windows.Forms.TextBox).MouseDoubleClick, AddressOf ExpandeTexto
                    ToolTip &= " [Duplo-click para Zoom]"
                End If
                Return Fld
            End Function

            ''' <summary>
            ''' Criação de controle baseado em definição de campo.
            ''' </summary>
            ''' <param name="STRCONN">String de conexão.</param>
            ''' <param name="EsquemaPrinc">Esquema principal.</param>
            ''' <param name="EsquemaGerador">Esquema do gerador.</param>
            ''' <param name="TabelaStr">Tabela.</param>
            ''' <param name="campoStr">Campo.</param>
            ''' <param name="Defs">Lista de definições.</param>
            ''' <param name="X">Posição X.</param>
            ''' <param name="Y">Posição Y.</param>
            ''' <param name="Validating">Validação do controle.</param>
            ''' <returns>Controle criado.</returns>
            ''' <remarks></remarks>
            Public Function CtlFld(ByVal StrConn As Object, ByVal EsquemaPrinc As String, ByVal EsquemaGerador As String, ByVal TabelaStr As String, ByVal campoStr As String, ByVal Defs As Defs, ByVal X As Integer, ByVal Y As Integer, ByVal Validating As Boolean)
                Dim TabelaDataRow As System.Data.DataRow = Defs.Tabela(TabelaStr)
                Dim CampoDataRow As System.Data.DataRow = Defs.Campo(TabelaStr, campoStr)
                Dim Rels As List(Of System.Data.DataRow) = Defs.RelsN1(TabelaStr, campoStr)
                Dim Tooltip As String = Defs.ToolTip(TabelaStr, campoStr)
                Dim Formato As String = NZV(CampoDataRow!FORMATO, "")
                Dim Auto As String = NZV(CampoDataRow!AUTO, "")
                Dim TamMax As Integer = Defs.TamMax(TabelaStr, campoStr)
                Dim Tipo As Defs.TipoDefEstrut = Defs.TipoDef(TabelaStr, campoStr, CampoDataRow)

                Return Ctl("", Tooltip, Formato, Auto, TamMax, X, Y, 0, 0, Validating, Rels, Tipo, StrConn, EsquemaPrinc, EsquemaGerador, TabelaStr, campoStr, Defs, TabelaDataRow, CampoDataRow)

            End Function

            ''' <summary>
            ''' Corrige configurações do combobox.
            ''' </summary>
            ''' <param name="Combo">Combobox a ser corrigido.</param>
            ''' <remarks></remarks>
            Private Shared Sub AcertaCombo(ByVal Combo As System.Windows.Forms.ComboBox)
                Combo.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.Suggest
                Combo.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.ListItems
            End Sub

            ''' <summary>
            ''' Verifica se o formato está de acordo com um formato válido.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="Formato">Formato a ser comparado.</param>
            ''' <returns>Retorna True ou Falso de acordo com o resultado da validação.</returns>
            ''' <remarks></remarks>
            Public Shared Function EValido(ByVal sender As System.Windows.Forms.Control, Optional ByVal Formato As String = "") As Boolean
                Dim Result As Boolean = True

                If Formato = "" Then
                    Formato = CtlProp(sender, "FORMATO")
                End If

                If Formato = "EMAIL" Then
                    If sender.Text <> "" Then
                        If Not Email.Valida(sender.Text) Then
                            MsgBox(sender.Text & " não é email válido. Informe email válido no formato 'Nome' [email@dominio.com.br] ou simplesmente email@dominio.com.br.", MsgBoxStyle.Critical, "Digitando Email")
                            Result = False
                        Else
                            Dim M As New Email(sender.Text)
                            sender.Text = M.Completo
                        End If
                    End If
                ElseIf Formato = "EMAILS" Then
                    If sender.Text <> "" Then
                        Dim Ret As String = ""
                        For Each Item As String In ListaEnterPVStr(sender.Text)
                            If Not Email.Valida(Item) Then
                                MsgBox(Item & " não é email válido. Informe lista de emails separados por ponto e vírgula ou enter estando cada um no formato 'Nome' [email@dominio.com.br] ou simplesmente email@dominio.com.br.", MsgBoxStyle.Critical, "Digitando Lista de Emails")
                                Result = False
                                Exit Function
                            Else
                                Dim EM As New Email(Item)
                                Ret &= IIf(Ret <> "", "; ", "") & EM.Completo
                            End If
                        Next
                        sender.Text = Ret
                    End If
                ElseIf Formato = "DATE" Then
                    If Trim(sender.Text) <> "/  /" Then
                        If Not IsDate(sender.Text) Then
                            MsgBox("Data inválida.")
                            Result = False
                        ElseIf sender.Text.Length < 10 Then
                            MsgBox("Favor digitar a data no formato dd/mm/aaaa.")
                            Result = False
                        End If
                    End If

                ElseIf Formato = "MOMENTO" Then
                    Dim DataStr As String = sender.Text
                    If Trim(DataStr) <> "/  /       :  :" Then
                        Try
                            Dim DataStr2 = Mid(DataStr, 7, 4) & "-" & Mid(DataStr, 4, 2) & "-" & Mid(DataStr, 1, 2) & " " & Mid(DataStr, 11)
                            sender.Text = ExibeData(DataStr2, "")
                        Catch
                            MsgBox("Momento inválido " & DataStr & ".", MsgBoxStyle.Critical, "Digitando Momento")
                            sender.Text = ""
                            Result = False
                        End Try
                    End If
                ElseIf Formato = "FLOAT" OrElse Formato = "NUMBER" Then
                    Dim ValorStr As String = Trim(sender.Text)
                    If ValorStr <> "" AndAlso ValorStr <> "," Then
                        FormataNumMask(sender)
                    End If
                ElseIf Formato = ">" Then
                    sender.Text = UCase(sender.Text)
                ElseIf Formato = "<" Then
                    sender.Text = LCase(sender.Text)
                End If


                If Formato = "CNPJ" Then
                    If sender.Text <> "  .   .   /    -" Then
                        Dim Ctl As System.Windows.Forms.MaskedTextBox = sender
                        Dim CNPJ As String = TrocaTexto(Ctl.Text, ".", "", "-", "", "/", "", ",", "")
                        Dim Txt As String
                        Txt = CNPJ.Substring(0, 12)
                        Dim DV1 As Integer = DacMod11CNPJ(Txt)
                        Dim DV2 As Integer = DacMod11CNPJ(Txt & DV1)
                        If DV1 & DV2 <> CNPJ.Substring(12) Or Len(CNPJ) <> 14 Then
                            MsgBox("CNPJ inválido, por favor digite novamente.")
                            sender.Text = ""
                            Result = False
                        End If
                    Else
                        Result = True
                    End If
                End If

                If Formato = "CPF" Then
                    If sender.Text <> "   .   .   -" Then
                        Dim Ctl As System.Windows.Forms.MaskedTextBox = sender
                        Dim CPF As String = TrocaTexto(Trim(Ctl.Text), ".", "", "-", "")
                        If Len(CPF) < 11 Then
                            MsgBox("CPF inválido, quantidade incorreta de dígitos. Por favor digite novamente.")
                            sender.Text = ""
                            Result = False
                            Exit Function
                        End If
                        Dim Txt As String
                        Txt = CPF.Substring(0, 9)
                        Dim DV1 As Integer = DacMod11CPF(Txt)
                        Dim DV2 As Integer = DacMod11CPF(Txt & DV1)
                        If DV1 & DV2 <> CPF.Substring(9) Then
                            MsgBox("CPF inválido, por favor digite novamente.")
                            sender.Text = ""
                            Result = False
                        End If
                    Else
                        Result = True
                    End If
                End If

                If Formato = "TEU" Then
                    If sender.Text <> "" Then
                        Try
                            Dim Ctl As System.Windows.Forms.MaskedTextBox = sender
                            Dim Prefixo As String = sender.Text.Substring(0, 4)
                            Dim Serial As String = sender.Text.Substring(4, 6)
                            Dim Check As String = sender.Text.Substring(10.1)
                            If Not IsNumeric(Serial & Check) Then
                                MsgBox("Número do container inválido! Serial de identificação do container deve ser numérico (7 números)")
                                Result = False
                            ElseIf IsNumeric(Prefixo) Then
                                MsgBox("Número do container inválido! O prefixo deve começar com 4 letras indicando o fabricante do cainter, seguido pelo tipo de container.")
                                Result = False
                            ElseIf Len(sender.Text) < 11 Then
                                MsgBox("Número do container inválido! A identificação do container deve conter 11 dígitos, sendo 4 letras e 7 números")
                                Result = False
                            End If
                        Catch ex As Exception
                        End Try
                    End If
                End If

                If Formato = "CPF_SEM_PONTO" Then
                    If sender.Text <> "         -" Then
                        Dim Ctl As System.Windows.Forms.MaskedTextBox = sender
                        Dim CPF As String = TrocaTexto(Trim(Ctl.Text), ".", "", "-", "")
                        If Len(CPF) < 11 Then
                            MsgBox("CPF inválido, quantidade incorreta de dígitos. Por favor digite novamente.")
                            sender.Text = ""
                            Result = False
                            Exit Function
                        End If
                        Dim Txt As String
                        Txt = CPF.Substring(0, 9)
                        Dim DV1 As Integer = DacMod11CPF(Txt)
                        Dim DV2 As Integer = DacMod11CPF(Txt & DV1)
                        If DV1 & DV2 <> CPF.Substring(9) Then
                            MsgBox("CPF inválido, por favor digite novamente.")
                            sender.Text = ""
                            Result = False
                        End If
                    Else
                        Result = True
                    End If
                End If
                Return Result
            End Function

            ''' <summary>
            ''' Define a largura de um campo.
            ''' </summary>
            ''' <param name="fld">Campo a ser definido.</param>
            ''' <param name="TamMax">Tamanho máximo.</param>
            ''' <param name="TamCampo">Tamanho atual do campo.</param>
            ''' <param name="TamCarac">Tamanho de caracteres.</param>
            ''' <param name="TamCaracCompl">Tamanho de caracter complementar.</param>
            ''' <remarks></remarks>
            Public Shared Sub DefineLargura(ByRef fld As System.Windows.Forms.Control, ByVal TamMax As Integer, ByVal TamCampo As Integer, ByVal TamCarac As Integer, ByVal TamCaracCompl As Integer)
                If TamMax > 0 Then
                    Dim Tam As Integer = Math.Min(TamMax * TamCarac + TamCaracCompl, TamCampo)
                    fld.Width = Tam
                Else
                    fld.Width = TamCampo
                End If
            End Sub

            ''' <summary>
            ''' Verifica se o conteúdo de sender está todo em maiúsculo.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaTudoMaiusc(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, ">")
            End Sub

            ''' <summary>
            ''' Valida os valores dos obejtos como maiúsculo e sem acento.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Private Sub ValidaTudoMaiuscSemAcento(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "COD128B")
            End Sub
            ''' <summary>
            ''' Verifica se o CNPJ é valido.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaCNPJ(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "CNPJ")
            End Sub
            ''' <summary>
            ''' Verifica se o CPF é valido.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaCPF(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "CPF")
            End Sub
            ''' <summary>
            ''' Valida o formato de numeração do container.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaTEU(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "TEU")
            End Sub

            ''' <summary>
            ''' Valida formato de CPF sem ponto.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaCPF1(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "CPF_SEM_PONTO")
            End Sub

            ''' <summary>
            ''' Verifica se o conteúdo de sender está todo em minúsculo.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaTudoMinusc(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "<")
            End Sub

            ''' <summary>
            ''' Verifica a formatação de números reais, se está com ",".
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaNum(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "FLOAT")
            End Sub

            ''' <summary>
            ''' Verifica se a data está de acordo com o padrão "dd/MM/yyyy".
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaData(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender)
            End Sub

            ''' <summary>
            ''' Verifica se o email está no formato padrão.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaEmail(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "EMAIL")
            End Sub

            ''' <summary>
            ''' Verifica se os emails estão no formato padrão.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ValidaEmails(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
                e.Cancel = Not EValido(sender, "EMAILS")
            End Sub

            ''' <summary>
            ''' Expande o tamanho do texto dando um zoom.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ExpandeTexto(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
                Dim Zoom As New FormAplIcraft(sender, "Zoom em " & CtlProp(sender, "DESCR"), FormAplIcraft.TipoOpc.Assistente)
                Dim Txt As New System.Windows.Forms.TextBox
                Txt.Name = "FLDTXT"
                Zoom.Padding = New System.Windows.Forms.Padding(5)
                Txt.Multiline = True
                Txt.Dock = System.Windows.Forms.DockStyle.Fill
                Txt.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
                Txt.Text = sender.Text
                Txt.MaxLength = sender.MaxLength
                Zoom.Size = New Size(Math.Min(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width - 30, 600), Math.Min(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width - 30, 400))
                Zoom.Miolo.Controls.Add(Txt)
                If Zoom.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                    DefineValorCtl(sender, Txt.Text)
                End If
            End Sub

            ''' <summary>
            ''' Define um array de objetos que recebe os controles da tela de zoom.
            ''' </summary>
            ''' <param name="TelaZoom">Tela de Zoom.</param>
            ''' <remarks></remarks>
            Private Shared Sub ExpandFormatoOK_Click(ByVal TelaZoom As System.Windows.Forms.Form)
                Dim ctl() As Object = TelaZoom.Controls.Find("ctlFormato", True)
            End Sub

            ''' <summary>
            ''' Calculadora.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Public Shared Sub ExpandeNum(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
                Dim processID As Integer = 0
                processID = Shell("CALC.EXE", AppWinStyle.NormalFocus)
                AppActivate(processID)

                ' Projeto de calculadora financeira.
                'Dim Zoom As New FormAplIcraft(sender, "Zoom em " & CtlProp(sender, "TOOLTIP"), FormAplIcraft.TipoOpc.Assistente)
                'Dim Calc As New IcftFCalc
                'Calc.Location = New System.Drawing.Point(0, 0)
                'Zoom.Padding = New System.Windows.Forms.Padding(5)
                'Zoom.Size = New Size(Math.Min(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width - 30, 600), Math.Min(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width - 30, 400))
                'Zoom.Miolo.Controls.Add(Calc)
                'If Zoom.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                '    DefineValorCtl(sender, Calc.Text)
                'End If
            End Sub

            ''' <summary>
            ''' Converte para os padrões "dd/MM/yyyy HH:mm:ss" ou "dd/MM/yyyy".
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub CharNaData(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
                If e.KeyValue = 191 Then
                    If CtlProp(sender, "FORMATO") = "MOMENTO" Then
                        sender.TEXT = Format("dd/MM/yyyy HH:mm:ss")
                    Else
                        sender.TEXT = Format(Now, "dd/MM/yyyy")
                    End If
                    e.SuppressKeyPress = True
                End If
            End Sub

            ''' <summary>
            ''' Converte para maiúsculo.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub TudoMaiusc(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
                e.KeyChar = UCase(e.KeyChar)
            End Sub

            ''' <summary>
            ''' Deixa o valor do campo como maiúsculo e sem acento.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Public Shared Sub TudoMaiuscSemAcento(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
                Dim Ascii As Integer = Asc(e.KeyChar)

                If Not ((Ascii <= 27) Or (Ascii >= 32 And Ascii <= 126) Or (Ascii >= 200 And Ascii <= 211)) Then
                    e.KeyChar = ""
                End If
                e.KeyChar = UCase(TiraAcento(e.KeyChar))
            End Sub

            ''' <summary>
            ''' Converte para minúsculo.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub TudoMinusc(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
                e.KeyChar = LCase(e.KeyChar)
            End Sub

            ''' <summary>
            ''' Exibe o tamanho da data dando um zoom.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub ExpandeData(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
                Dim Zoom As New FormAplIcraft(sender, "Zoom em " & CtlProp(sender, "TOOLTIP"), FormAplIcraft.TipoOpc.Assistente)
                Zoom.Padding = New System.Windows.Forms.Padding(5)
                Zoom.Size = New Size(Math.Min(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width - 30, 492), Math.Min(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width - 30, 390))
                Dim CalendaData As New System.Windows.Forms.MonthCalendar
                With CalendaData
                    .Name = "FLDDATA"
                    CalendaData = New System.Windows.Forms.MonthCalendar
                    .Location = New System.Drawing.Point(12, 18)
                    .MaxSelectionCount = 1
                    .Name = "CalendaData"
                    .Dock = System.Windows.Forms.DockStyle.Fill
                End With
                Dim Valor As Object = ObtemValorCtl(sender)
                If Not IsDBNull(Valor) Then
                    CalendaData.SetDate(Valor)
                End If
                Zoom.Miolo.Controls.Add(CalendaData)
                Zoom.AutoSize = True
                If Zoom.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                    DefineValorCtl(sender, CalendaData.SelectionStart)
                End If
            End Sub

            ''' <summary>
            ''' Formata o objeto passado de acordo com a máscara.
            ''' </summary>
            ''' <param name="sender">Objeto que dispara o evento.</param>
            ''' <param name="e">Argumento padrão do sistema.</param>
            ''' <remarks></remarks>
            Public Shared Sub EntraTeclaFracion(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
                If e.KeyChar = "," OrElse e.KeyChar = "." Then
                    FormataNumMask(sender)
                    Dim Pos As Integer = InStr(sender.text, ",")
                    sender.text = Microsoft.VisualBasic.Left(sender.text, Pos)
                    sender.SelectionStart = Pos
                End If
            End Sub

        End Class


        ''' <summary>
        ''' Montagem de filtro com base na especificação de campos e chave.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ChaveFiltroSQL
            Public CondicaoSel As String = ""
            Public CamposUpd As String = ""
            Public CamposIns As String = ""
            Public VariaveisIns As String = ""
            Public Params As New ArrayList
            Public Esquema As String
            Public Tabela As String

            ''' <summary>
            ''' Converte para o formato de linguagem SQL.
            ''' </summary>
            ''' <param name="SQL">Padrão de linguagem SQL.</param>
            ''' <param name="ParamsNoSQL">Se o parâmetro já estiver em SQL, retorna a string contendo as instruções em SQL.</param>
            ''' <returns>Retorna uma string com sequência de comandos em SQL.</returns>
            ''' <remarks></remarks>
            Function Traduz(ByVal SQL As String, ByVal ParamsNoSQL As Boolean) As String
                If Not ParamsNoSQL Then
                    Return SQL
                End If
                SQL = TransfBindEmMacroParam(SQL)
                SQL = MacroSubstSQLText(SQL, Params)
                Return SQL
            End Function

            ''' <summary>
            ''' Monta comando DEL.
            ''' </summary>
            ''' <param name="ParamsNoSQL">Incluir parâmetros no SQL.</param>
            ''' <returns>Texto contendo comando DEL.</returns>
            ''' <remarks></remarks>
            Public Function ComandoDel(Optional ByVal ParamsNoSQL As Boolean = False) As String
                Return Traduz("DELETE FROM " & Esquema & "." & Tabela & " WHERE " & CondicaoSel, ParamsNoSQL)
            End Function

            ''' <summary>
            ''' Comando update.
            ''' </summary>
            ''' <param name="ParamsNoSQL">Incluir parâmetros no SQL.</param>
            ''' <returns>Retorna comando de update.</returns>
            ''' <remarks></remarks>
            Public Function ComandoUpd(Optional ByVal ParamsNoSQL As Boolean = False) As String
                Return Traduz("UPDATE " & Esquema & "." & Tabela & " SET " & CamposUpd & " WHERE " & CondicaoSel, ParamsNoSQL)
            End Function

            ''' <summary>
            ''' Comando de Insert.
            ''' </summary>
            ''' <param name="ParamsNoSQL">Incluir parâmetros no SQL.</param>
            ''' <returns>Retorna comando de insert.</returns>
            ''' <remarks></remarks>
            Public Function ComandoIns(Optional ByVal ParamsNoSQL As Boolean = False) As String
                Return Traduz("INSERT INTO " & Esquema & "." & Tabela & " (" & CamposIns & ") VALUES (" & VariaveisIns & ")", ParamsNoSQL)
            End Function

            ''' <summary>
            ''' Monta critério de filtro para obtenção de comandos baseados em campos e chave.
            ''' </summary>
            ''' <param name="Esquema">Esquema padrão.</param>
            ''' <param name="Tabela">Tabela tratada.</param>
            ''' <param name="DSChave">Lista de campos.</param>
            ''' <param name="Chave">Campos de chave (texto ou coleção de campos).</param>
            ''' <param name="DSCampos">Definições de campos caso seja possível pesquisar em alguma.</param>
            ''' <param name="Campos">Campos a serem considerados nos critérios de um modo geral.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Esquema As String, ByVal Tabela As String, ByVal DSChave As System.Data.DataRow, ByVal Chave As Object, ByVal DSCampos As System.Data.DataRow, ByVal Campos As Object)
                Me.Esquema = Esquema
                Me.Tabela = Tabela
                If TypeOf Chave Is String Then
                    Chave = Split(Chave, ";")
                End If
                If TypeOf Campos Is String Then
                    Campos = Split(Campos, ";")
                End If
                If Not IsNothing(Chave) AndAlso (Chave.length > 1 OrElse Chave(0) <> "") Then
                    DefineChave(DSChave, Chave)
                End If
                If Not IsNothing(Campos) AndAlso (Campos.length > 1 OrElse Campos(0) <> "") Then
                    DefineCampos(DSCampos, Campos)
                End If
            End Sub

            ''' <summary>
            ''' Defini campos para lista de comandos a serem obtidos.
            ''' </summary>
            ''' <param name="DSR">DS onde estão os conteúdos a serem pesquisados.</param>
            ''' <param name="Campos">Campos que serão definidos.</param>
            ''' <remarks></remarks>
            Sub DefineCampos(ByVal DSR As System.Data.DataRow, ByVal Campos As Object)
                For Each Campo As String In Campos
                    If Campo <> "" Then
                        CamposUpd &= IIf(CamposUpd <> "", ", ", "") & Campo & " = :" & Campo
                        CamposIns &= IIf(CamposIns <> "", ", ", "") & Campo
                        VariaveisIns &= IIf(VariaveisIns <> "", ", ", "") & ":" & Campo
                        Params.Add(":" & Campo)
                        Params.Add(DSR(Campo))
                    End If
                Next
            End Sub

            ''' <summary>
            ''' Define chaves a partir de DS.
            ''' </summary>
            ''' <param name="DSR">Dataset a ser considerado para obtenção dos campos de chave.</param>
            ''' <param name="Chave">Campos de chave a serem definidos.</param>
            ''' <remarks></remarks>
            Sub DefineChave(ByVal DSR As System.Data.DataRow, ByVal Chave As Object)
                For Each Campo As String In Chave
                    If Campo <> "" Then
                        CondicaoSel &= IIf(CondicaoSel <> "", " AND ", "") & Campo & " = :CH__" & Campo
                        Params.Add(":CH__" & Campo)
                        Params.Add(DSR(Campo))
                    End If
                Next
            End Sub

        End Class

        ''' <summary>
        ''' Transforma variáveis do tipo bind (oracle=? sqlserver=@ ou mysql=? msaccess=@) em formato de macro-substituição [:...]. 
        ''' </summary>
        ''' <param name="SQL">Expressão SQL a ser tratada.</param>
        ''' <returns>Retorna texto SQL tratado.</returns>
        ''' <remarks></remarks>
        Public Shared Function TransfBindEmMacroParam(ByVal SQL As String) As String
            Return Regex.Replace(SQL, "[:@\?](\w+)", "[:$1]", RegexOptions.Multiline)
        End Function

        ''' <summary>
        ''' Monta nome de controle considerando sua hierarquia.
        ''' </summary>
        ''' <param name="Controle">Controle inicial.</param>
        ''' <param name="Delim">Delimitador do nome.</param>
        ''' <param name="Compl">Complemento.</param>
        ''' <returns>Nome do controle da forma hierarquizada PAINEL1_CONTROLE1.</returns>
        ''' <remarks></remarks>
        Public Shared Function HierarqNome(ByVal Controle As System.Windows.Forms.Control, Optional ByVal Delim As String = "_", Optional ByVal Compl As String = "") As String
            Try
                If Not IsNothing(Controle.Parent) Then
                    Compl = ExprExpr("_", ".", HierarqNome(Controle.Parent, Delim), Compl)
                End If
                Return ExprExpr(Delim, ".", Compl, Controle.Name)
            Catch ex As Exception
            End Try
            Return Nothing
        End Function

        ''' <summary>
        ''' Busca na origem os parâmetros solicitados.
        ''' </summary>
        ''' <param name="Params">Atualiza na lista de parâmetro os valores [:VARIAVEL], VALOR, ....</param>
        ''' <param name="ParamsOrig">Origens a ser pesquisada.</param>
        ''' <param name="Container">Primeiro objeto onde acontecerá a pesquisa.</param>
        ''' <remarks></remarks>
        Public Shared Sub ParamsMacroSubstBaseOrig(ByRef Params As ArrayList, ByRef ParamsOrig As ArrayList, ByVal Container As Object)
            If IsNothing(ParamsOrig) Then
                ParamsOrig = Params.Clone
            End If
            For Z As Integer = 0 To Params.Count - 1 Step 2
                If ParamsOrig(Z + 1).ToString.StartsWith("[:") And ParamsOrig(Z + 1).ToString.EndsWith("]") Then
                    Dim V As String = Mid(ParamsOrig(Z + 1), 3, Len(ParamsOrig(Z + 1)) - 3)
                    Dim Conteudo As Object = NZ(ObtemValorCtl("FLD" & V, Container), Convert.DBNull)
                    Params(Z + 1) = Conteudo
                End If
            Next
        End Sub

        ''' <summary>
        ''' Objeto que possibilita especificar tooltips em form.
        ''' </summary>
        ''' <remarks></remarks>
        Public Shared AplToolTip As New System.Windows.Forms.ToolTip

        ''' <summary>
        ''' Cria um DataSet para gravar um arquivo.
        ''' </summary>
        ''' <param name="ArquivoNoDisco">Arquivo a ser gravado no disco.</param>
        ''' <param name="DiretorioNoServidor">Diretório do servidor.</param>
        ''' <param name="ArquivoNoServidor">Arquivo no servidor.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <param name="EsquemaPrinc">Esquema principal.</param>
        ''' <returns>DataSet com o conteúdo do arquivo.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSGravaArq(ByVal ArquivoNoDisco As String, ByVal DiretorioNoServidor As String, ByVal ArquivoNoServidor As String, ByVal StrConn As Object, ByVal EsquemaPrinc As String) As String
            Dim ArquivoBin() As Byte = CarregaArqBin(ArquivoNoDisco)

            Dim conexao As New OracleClient.OracleConnection()
            conexao.ConnectionString = StrConnObj(StrConn).ConnectionString

            Dim comm As New OracleClient.OracleCommand()
            comm.Connection = conexao
            comm.Connection.Open()

            comm.Transaction = conexao.BeginTransaction

            Dim AR As New ArrayList

            AR.AddRange(New Object() {":DADOS", New Byte() {}})
            DSGrava(AR, conexao, comm, "DECLARE LOBC BLOB;BEGIN DBMS_LOB.CREATETEMPORARY(LOBC, FALSE); :DADOS := LOBC; END;", StrConn)

            AR.Clear()
            AR.AddRange(New Object() {":ARQUIVO", ArquivoNoServidor, ":DIRETORIO", DiretorioNoServidor, ":DADOS", ArquivoBin})
            Dim DS As System.Data.DataSet = DSCarrega(AR, conexao, comm, "SELECT " & EsquemaPrinc & ".DBMS_ICRAFT.GRAVA_ARQUIVO(:ARQUIVO, :DADOS, :DIRETORIO) FROM DUAL", StrConn)

            comm.Transaction.Commit()
            Return DS.Tables(0).Rows(0)(0)
        End Function

        ''' <summary>
        ''' Carrega um arquivo através do banco de dados.
        ''' </summary>
        ''' <param name="ArquivoOuSQLComCaminho"></param>
        ''' <param name="STRCONN">Consulta de carga de arquivo.</param>
        ''' <param name="IgnoraErro">Ignora erro.</param>
        ''' <param name="EsquemaPacote">Busca no esquema.</param>
        ''' <returns>Objeto retornado.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSArquivo(ByVal ArquivoOuSQLComCaminho As String, ByVal StrConn As Object, Optional ByVal IgnoraErro As Boolean = True, Optional ByVal EsquemaPacote As String = "") As Object
            Try
                If EsquemaPacote = "" Then
                    EsquemaPacote = "IM"
                End If

                Dim SQL As String = ""
                If Not ArquivoOuSQLComCaminho.StartsWith("SELECT ") Then
                    SQL = "SELECT " & EsquemaPacote & ".DBMS_ICRAFT.CARREGA_ARQUIVO('" & Tratex(ArquivoOuSQLComCaminho) & "') FROM DUAL"
                Else
                    SQL = "SELECT " & EsquemaPacote & ".DBMS_ICRAFT.CARREGA_ARQUIVO(CAMINHO) FROM (" & ArquivoOuSQLComCaminho & ")"
                End If

                Dim DS As System.Data.DataSet = DSCarrega(SQL, StrConn)
                Dim Ret As Object = DS.Tables(0).Rows(0).Item(0)
                If IsNothing(Ret) Or IsDBNull(Ret) Then
                    Return Nothing
                End If
                Return DS.Tables(0).Rows(0).Item(0)
            Catch ex As Exception
                If Not IgnoraErro Then
                    Throw ex
                End If
            End Try
            Return Nothing
        End Function

        ''' <summary>
        ''' Adiciona uma imagem a um controle PictureBox.
        ''' </summary>
        ''' <param name="PB">Controle que irá receber a imagem.</param>
        ''' <param name="Imagem">Imagem a ser adicionada.</param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaPB(ByVal PB As System.Windows.Forms.PictureBox, ByVal Imagem As Object)
            If IsNothing(Imagem) OrElse IsDBNull(Imagem) Then
                PB.Image = Nothing
            Else
                Dim arr() As Byte
                arr = Imagem
                Dim MEM As New System.IO.MemoryStream(arr)
                Dim BMP As New System.Drawing.Bitmap(MEM)
                PB.Image = BMP
            End If
        End Sub

        ''' <summary>
        ''' Classe utilizada para criação de boletos.
        ''' </summary>
        ''' <remarks></remarks>
        Class Boleto

            ''' <summary>
            ''' Especificação em XML para obtenção de parâmetros de boleto.
            ''' </summary>
            ''' <remarks></remarks>
            Public DSDef As XDocument = <?xml version="1.0" encoding="utf-8"?>
                                        <xs:schema id="BoletoRelItau" targetNamespace="http://tempuri.org/BoletoRelItau.xsd" xmlns:mstns="http://tempuri.org/BoletoRelItau.xsd" xmlns="http://tempuri.org/BoletoRelItau.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" attributeFormDefault="qualified" elementFormDefault="qualified">
                                            <xs:annotation>
                                                <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
                                                    <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
                                                        <Connections/>
                                                        <Tables/>
                                                        <Sources/>
                                                    </DataSource>
                                                </xs:appinfo>
                                            </xs:annotation>
                                            <xs:element name="BoletoRelItau" msdata:IsDataSet="true" msdata:UseCurrentLocale="true">
                                                <xs:complexType>
                                                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                                                        <xs:element name="TB_BOLETORELITAU">
                                                            <xs:complexType>
                                                                <xs:sequence>
                                                                    <xs:element name="SEQ" type="xs:long" minOccurs="0"/>
                                                                    <xs:element name="BANCO_LOGOTIPO" type="xs:base64Binary" minOccurs="0"/>
                                                                    <xs:element name="BANCO_NOME" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="BANCO_NUMERO_DAC" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_NOME" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_ENDERECO" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_CNPJ" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_AG" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_AG_DAC" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_CONTA" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_ESPEC" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="VENCIMENTO" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="SACADO_NOME" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="DOC_VALOR" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="NOSSO_NUM" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="DOC_NUM" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="LOCAL_PAG" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="DOC_DATA" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="DOC_ESPEC" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="ACEITE" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="DATA_PROCESS" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="USO_BANCO" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CARTEIRA" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="QUANTIDADE" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="INSTRUCOES" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="COD_BARRAS_IMG" type="xs:base64Binary" minOccurs="0"/>
                                                                    <xs:element name="LINHA_DIGITAVEL" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="SACADO_ESPEC" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="INSTRUCOES_SUP" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="INSTR_CAIXA" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="ESPEC_MOEDA" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="CEDENTE_LOGO" type="xs:base64Binary" minOccurs="0"/>
                                                                    <xs:element name="COD_CLIENTE" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="COD_CLIENTE_DAC" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="NOTAS" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="SACADO_COMPL" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="SACADO_ID" type="xs:string" minOccurs="0"/>
                                                                    <xs:element name="SACADO_CPF" type="xs:string" minOccurs="0"/>
                                                                </xs:sequence>
                                                            </xs:complexType>
                                                        </xs:element>
                                                    </xs:choice>
                                                </xs:complexType>
                                            </xs:element>
                                        </xs:schema>


            Public pnlPrinc As New System.Web.UI.WebControls.Panel

            ''' <summary>
            ''' Nome do sacado.
            ''' </summary>
            ''' <value>Nome do sacado.</value>
            ''' <returns>Nome do sacado.</returns>
            ''' <remarks></remarks>
            Public Property SacadoNome() As String
                Get
                    Return pnlPrinc.Attributes("SACADO_NOME")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("SACADO_NOME") = value
                End Set
            End Property

            Public Property SacadoCPF() As String
                Get
                    Return pnlPrinc.Attributes("SACADO_CPF")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("SACADO_CPF") = value
                End Set
            End Property



            ''' <summary>
            ''' Variável auxiliar da propriedade StrConn.
            ''' </summary>
            ''' <remarks></remarks>
            Private _StrConn As Object

            ''' <summary>
            ''' Propriedade de string de conexão.
            ''' </summary>
            ''' <value>Objeto.</value>
            ''' <returns>String de conexão como objeto.</returns>
            ''' <remarks></remarks>
            Public Property StrConn() As Object
                Get
                    Return _StrConn
                End Get
                Set(ByVal value As Object)
                    _StrConn = value
                End Set
            End Property

            ''' <summary>
            ''' Local de pagamento.
            ''' </summary>
            ''' <value>Local de pagamento.</value>
            ''' <returns>Local de pagamento.</returns>
            ''' <remarks></remarks>
            Public Property LocaldePagamento() As String
                Get
                    Dim NomeBanco As String = BancoDet(BancoNumero, BancoDetOpc.NomeParaBoleto)
                    If UCase(NomeBanco).Equals("CAIXA") Then
                        Return NZV(pnlPrinc.Attributes("LOCAL_PAGAMENTO"), "Preferencialmente nas casas lotéricas até o valor limite.")
                    Else
                        Return NZV(pnlPrinc.Attributes("LOCAL_PAGAMENTO"), "Até o vencimento, preferencialmente no " & IIf(Not NomeBanco Like "Banco*", "banco ", "") & NomeBanco & "." & vbCrLf & "Após vencimento, somente no " & IIf(Not NomeBanco Like "Banco*", "banco ", "") & NomeBanco & ".")
                    End If

                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("LOCAL_PAGAMENTO") = value
                End Set
            End Property

            ''' <summary>
            ''' Critério de fator de vencimento.
            ''' </summary>
            ''' <param name="Data">Data para cálculo do fator de vencimento.</param>
            ''' <returns>Fator de vencimento.</returns>
            ''' <remarks></remarks>
            Private Function VencimentoFator(ByVal Data As Date) As String
                If Data = CDate(Nothing) Then
                    Return "0000"
                End If
                Return Format(DateDiff(DateInterval.Day, CDate("2000-07-03"), Data) + 1000, "0000")
            End Function

            ''' <summary>
            ''' Linha digitável do documento.
            ''' </summary>
            ''' <returns>Linha digitável do documento.</returns>
            ''' <remarks></remarks>
            Public Function LinhaDigitavelTxt() As String
                Dim Linha As String = LinhaDigitavel()
                Return Mid(Linha, 1, 5) & "." & Mid(Linha, 6, 5) & " " & Mid(Linha, 11, 5) & "." & Mid(Linha, 16, 6) & " " & Mid(Linha, 22, 5) & "." & Mid(Linha, 27, 6) & " " & Mid(Linha, 33, 1) & " " & Mid(Linha, 34, 14)
            End Function

            ''' <summary>
            ''' Código de barras do documento.
            ''' </summary>
            ''' <returns>Código de barras do documento.</returns>
            ''' <remarks></remarks>
            Public Function CodBarras() As String
                Dim Barras As String = CodBarrasSemDac()
                Return Microsoft.VisualBasic.Left(Barras, 4) & DacMod11(Barras) & Mid(Barras, 5)
            End Function

            ''' <summary>
            ''' Cálculo de texto a ser utilizado para geração do código de barras.
            ''' </summary>
            ''' <returns>Texto a ser utilizado para geração do código de barras.</returns>
            ''' <remarks></remarks>
            Public Function CodBarrasSemDac() As String
                Dim Cod As String = ""
                If TemNaLista("341109;341174;341175;341176;341109", BancoNumero & CarteiraTxt) Then

                    'AAA ----------------------------------------------------- (BANCO)
                    '   B ---------------------------------------------------- (9=MOEDA)
                    '    C --------------------------------------------------- (CARTEIRA)
                    '      CC ------------------------------------------------ (CARTEIRA)
                    '        DD ---------------------------------------------- (NOSSONUM)
                    '          X --------------------------------------------- (DAC)
                    '            DDDDD D ------------------------------------- (NOSSONUM)
                    '                   EEEE --------------------------------- (NÚMERO DO DOCUMENTO)
                    '                       Y -------------------------------- (DAC)
                    '                         EEE ---------------------------- (NÚMERO DO DOCUMENTO)
                    '                            FF FFF ---------------------- (CÓDIGO DO CLIENTE)
                    '                                  G --------------------- (DAC CARTEIRA NOSSONUM E CODCLIENTE)
                    '                                   H -------------------- (ZERO)
                    '                                    Z ------------------- (DAC)
                    '                                      K ----------------- (DAC COD BARRAS)
                    '                                        UUUU ------------ (VENCIMENTO)
                    '                                            VVVVVVVVVV -- (VALOR)

                    Cod = BancoNumeroTxt() ' banco                        AAA   
                    Cod &= "9" '                                          B  
                    ' sem dac.. é calculado depois                        (DAC ESTÁ SENDO ADICIONADO PELA FUNÇÃO)
                    Cod &= VencimentoFator(VencimentoData) '              UUUU  
                    Cod &= Format(DocValor() * 100, "0000000000") '       VVVVVVVVVV    
                    Cod &= Format(Carteira, "000") '                      CCC
                    Cod &= NossoNumero8DacTxt() '                         DDDDDDDD X
                    Cod &= AgenciaTxt '                                   FFFF
                    Cod &= ContaDacTxt '                                  GGGGGG  
                    Cod &= "000" '                                        000
                ElseIf BancoNumero & CarteiraTxt = "341198" Then

                    ' CÓDIGO DE BARRAS CARTEIRA 198

                    'BBB ------------------------------------------- (BANCO)
                    '   9 ------------------------------------------ (MOEDA)
                    '    X ----------------------------------------- (DAC CÓDIGO DE BARRAS)
                    '     FFFF ------------------------------------- (FATOR DE VENCIMENTO)
                    '         VVVVVVVVVV --------------------------- (VALOR)
                    '                   CCC ------------------------ (CARTEIRA)
                    '                      NNNNNNNN ---------------- (NOSSO NÚMERO)
                    '                              SSSSSSS --------- (SEU NÚMERO)
                    '                                     ZZZZZ ---- (CÓDIGO DO CLIENTE)
                    '                                          D --- (DAC DOS CAMPOS ACIMA)
                    '                                           0 -- (ZERO)


                    Cod = BancoNumeroTxt() ' banco                        AAA   
                    Cod &= "9" '                                          B
                    ' sem dac.. é calculado depois                        (DAC ESTÁ SENDO ADICIONADO PELA FUNÇÃO)
                    Cod &= VencimentoFator(VencimentoData) '              UUUU  
                    Cod &= Format(DocValor() * 100, "0000000000") '       VVVVVVVVVV    

                    ' trecho com dac separado
                    Dim Cod2 = CarteiraTxt '                              CCC
                    Cod2 &= NossoNumero15Txt()  '                         NNNNNNNNNNNNNNN
                    Cod2 &= CodClienteTxt '                               IIIII

                    Cod &= Cod2 & DacMod10(Cod2) '        X
                    Cod &= "0" '                                          0

                ElseIf BancoNumero = BancoOpc.Caixa Then
                    Cod = BancoNumeroTxt()
                    Cod &= "9"
                    ' sem dac.. é calculado depois
                    Cod &= VencimentoFator(VencimentoData)
                    Cod &= FormatNum(DocValor() * 100, 10)
                    Cod &= CodClienteTxt6            ' COD LIVRE COMEÇA NO CLIENTE E VAI ATÉ FINAL DA REF DE 15 POSIÇÕES
                    Cod &= DacMod11CNPJ(CodClienteTxt6)
                    Dim Noss As String = FormatNum(NossoNumero8, 15)
                    Dim Cart As String = FormatNum(Carteira, 2)
                    Cod &= Mid(Noss, 1, 3)
                    Cod &= Mid(Cart, 1, 1)
                    Cod &= Mid(Noss, 4, 3)
                    Cod &= Mid(Cart, 2, 1)
                    Cod &= Mid(Noss, 7, 9)
                    Cod &= DacMod11CNPJ(Mid(Cod, 19, 24))
                ElseIf BancoNumero = BancoOpc.Santander Then
                    Cod = BancoNumeroTxt()
                    Cod &= "9"
                    ' sem dac.. é calculado depois
                    Cod &= VencimentoFator(VencimentoData)
                    Cod &= Format(DocValor() * 100, "0000000000")
                    Cod &= "9"
                    Cod &= CodClienteTxt7
                    Cod &= NossoNumero12DacTxt()
                    Cod &= "0" ' NUNCA PERCENTUAL DE SEGURADORA (VERIFICAR DEPOIS)
                    Cod &= CarteiraTxt
                ElseIf BancoNumero = BancoOpc.HSBC Then
                    Cod = BancoNumeroTxt()
                    Cod &= "9"
                    ' sem dac.. é calculado depois
                    Cod &= VencimentoFator(VencimentoData)
                    Cod &= Format(DocValor() * 100, "0000000000")
                    Cod &= NossoNumero11Txt()
                    Cod &= AgenciaTxt
                    Cod &= ContaDacTxt
                    Cod &= Format(Carteira, "00")
                    Cod &= "1"
                ElseIf BancoNumero = BancoOpc.Bradesco Then
                    Cod = BancoNumeroTxt() '                            1-3    XXX
                    Cod &= "9" '                                        4         X
                    ' sem dac.. é calculado depois                      5          X
                    Cod &= VencimentoFator(VencimentoData) '            6-9         XXXX
                    Cod &= Format(DocValor() * 100, "0000000000") '     10-19           XXXXXXXXXX
                    Cod &= AgenciaTxt '                                 20-23                     XXXX
                    Cod &= Format(Carteira, "00") '                     24-25                         XX
                    Cod &= NossoNumero11Txt() '                         26-36                           XXXXXXXXXXX
                    Cod &= Format(ContaDac(), "0000000") '   37-43                                      XXXXXXX
                    Cod &= "0" '                                        44-44                                             X
                End If
                Return Cod
            End Function
            ''' <summary>
            ''' Nosso Numero
            ''' </summary>
            ''' <returns></returns>
            Function NossoNumero13Txt() As String
                Return NossoNumero12DacTxt()
            End Function
            ''' <summary>
            ''' Nosso Numero banco Itau
            ''' </summary>
            ''' <returns></returns>
            Function NossoNumero11Txt() As String
                Return Format(NossoNumero, "00000000000")
            End Function
            ''' <summary>
            ''' Nosso Numero Banco Santander
            ''' </summary>
            ''' <returns></returns>
            Function NossoNumero17() As String
                Return Format(Carteira, "00") & NossoNumero15Txt
            End Function

            ''' <summary>
            ''' Cálculo da linha digitável do boleto.
            ''' </summary>
            ''' <returns>Linha digitável do boleto.</returns>
            ''' <remarks></remarks>
            Public Function LinhaDigitavel() As String
                Dim Cod As String = ""
                If TemNaLista("341109;341174;341175;341176;341109", BancoNumero & CarteiraTxt) Then


                    ' LINHA DIGITÁVEL

                    'AAA ---------------------------------------------- (CÓDIGO DO BANCO NA CÂMARA DE COMPENSAÇÃO)
                    '   B --------------------------------------------- (CÓDIGO DA MOEDA)
                    '    CCC ------------------------------------------ (CÓDIGO DA CARTEIRA DE COBRANÇA)
                    '       DD ---------------------------------------- (DOIS PRIMEIROS DÍGITOS DO NOSSO NÚMERO)
                    '         X --------------------------------------- (DAC QUE AMARRA O CAMPO 1)
                    '          DDDDDD --------------------------------- (RESTANTE DO NOSSO NÚMERO)
                    '                E -------------------------------- (DAC DO CAMPO [AGÊNCIA/CONTA/CARTEIRA/NOSSO NÚMERO])
                    '                 FFF ----------------------------- (TRÊS PRIMEIROS NÚMEROS QUE IDENTIFICAM A AGÊNCIA)
                    '                    Y ---------------------------- (DAC QUE AMARRA O CAMPO 2)
                    '                     F --------------------------- (RESTANTE DO NÚMERO QUE IDENTIFICA A AGÊNCIA)
                    '                      GGGGGG --------------------- (RESTANTE DO NÚMERO QUE IDENTIFICA A AGÊNCIA)
                    '                            HHH ------------------ (NUMERO DA CONTA CORRENTE)
                    '                               Z ----------------- (ZEROS)
                    '                                K ---------------- (DAC DO CÓDIGO DE BARRAS)
                    '                                 UUUU ------------ (FATOR DE VENCIMENTO)
                    '                                     VVVVVVVVVV –- (VALOR)



                    Cod = BancoNumeroTxt() ' banco                                              AAA   
                    Cod &= "9" '                                                                B  
                    Cod &= Format(Carteira, "000") '                                            CCC
                    Cod &= Microsoft.VisualBasic.Left(NossoNumero8Txt, 2) '                     DD
                    Cod &= DacMod10(Microsoft.VisualBasic.Left(Cod, 9)) '                       X
                    Cod &= Mid(NossoNumero8Txt, 3) '                      DDDDDD
                    Cod &= DacMod10(AgenciaTxt & ContaSemDacTxt() & CarteiraTxt & NossoNumero8Txt) ' agencia conta carteira nosso número 
                    Cod &= Microsoft.VisualBasic.Left(AgenciaTxt, 3) '                          FFF 
                    Cod &= DacMod10(Mid(Cod, 11, 10)) '                         X
                    Cod &= Mid(AgenciaTxt, 4, 1) '                                              F
                    Cod &= ContaDacTxt '                                                        GGGGGG  
                    Cod &= "000" '                                                              HHH 
                    Cod &= DacMod10(Mid(Cod, 22, 10)) '                         X 
                    Cod &= DacMod11(CodBarrasSemDac) '                          X
                    Cod &= VencimentoFator(VencimentoData) '                                    UUUU  
                    Cod &= Format(DocValor() * 100, "0000000000") '                             VVVVVVVVVV    
                ElseIf BancoNumero & CarteiraTxt = "341198" Then

                    'AAA ----------------------------------------------------- (BANCO)
                    '   B ---------------------------------------------------- (9=MOEDA)
                    '    C --------------------------------------------------- (CARTEIRA)
                    '      CC ------------------------------------------------ (CARTEIRA)
                    '        DD ---------------------------------------------- (NOSSONUM)
                    '          X --------------------------------------------- (DAC)
                    '            DDDDD D ------------------------------------- (NOSSONUM)
                    '                   EEEE --------------------------------- (NÚMERO DO DOCUMENTO)
                    '                       Y -------------------------------- (DAC)
                    '                         EEE ---------------------------- (NÚMERO DO DOCUMENTO)
                    '                            FF FFF ---------------------- (CÓDIGO DO CLIENTE)
                    '                                  G --------------------- (DAC CARTEIRA NOSSONUM E CODCLIENTE)
                    '                                   H -------------------- (ZERO)
                    '                                    Z ------------------- (DAC)
                    '                                      K ----------------- (DAC COD BARRAS)
                    '                                        UUUU ------------ (VENCIMENTO)
                    '                                            VVVVVVVVVV -- (VALOR)

                    Cod = BancoNumeroTxt() '               banco                                AAA    
                    Cod &= "9" '                                                                B  
                    Cod &= Format(Carteira, "000") '                                            CCC
                    Cod &= Microsoft.VisualBasic.Left(NossoNumero8Txt, 2) '                     DD
                    Cod &= DacMod10(Microsoft.VisualBasic.Left(Cod, 9)) '       X

                    Cod &= Mid(NossoNumero8Txt, 3) '                                            DDDDDD
                    Cod &= Microsoft.VisualBasic.Left(DocNumeroTxt, 4) '                        EEEE 
                    Cod &= DacMod10(Mid(Cod, 11, 10)) '                         Y

                    Cod &= Mid(DocNumeroTxt, 5) '                                               EEE 
                    Cod &= CodClienteTxt '                                                      FFFFF
                    Cod &= DacMod10(CarteiraTxt & NossoNumero8Txt & DocNumeroTxt & CodClienteTxt) ' G
                    Cod &= "0" '                                                                H
                    Cod &= DacMod10(Mid(Cod, 22, 10)) '                         Z

                    Cod &= DacMod11(CodBarrasSemDac) '                          K
                    Cod &= VencimentoFator(VencimentoData) '                                    UUUU  
                    Cod &= Format(DocValor() * 100, "0000000000") '                             VVVVVVVVVV    

                ElseIf BancoNumero = BancoOpc.Caixa Then
                    Dim CB As String = CodBarras()
                    Cod = Mid(CB, 1, 4)
                    Cod &= Mid(CB, 20, 5)
                    Cod &= DacMod10(Mid(Cod, 1, 9))

                    Cod &= Mid(CB, 25, 10)
                    Cod &= DacMod10(Mid(CB, 25, 10))

                    Cod &= Mid(CB, 35, 10)
                    Cod &= DacMod10(Mid(CB, 35, 10))

                    Cod &= Mid(CB, 5, 1)

                    Cod &= Mid(CB, 6, 4)
                    Cod &= Mid(CB, 10, 10)

                ElseIf BancoNumero = BancoOpc.Santander Then
                    Dim CB As String = CodBarras()

                    Cod = BancoNumeroTxt()
                    Cod &= "99"
                    Cod &= Microsoft.VisualBasic.Left(CodClienteTxt7, 4)
                    Cod &= DacMod10(Mid(Cod, 1, 9))

                    Cod &= Mid(CodClienteTxt7, 5, 3)
                    Cod &= Microsoft.VisualBasic.Left(NossoNumero13Txt, 7)
                    Cod &= DacMod10(Mid(Cod, 11, 10))

                    Cod &= Mid(NossoNumero13Txt, 8, 6)
                    Cod &= "0"
                    Cod &= CarteiraTxt
                    Cod &= DacMod10(Mid(Cod, 22, 10))

                    Cod &= Mid(CB, 5, 1)

                    Cod &= VencimentoFator(VencimentoData) '                                    UUUU  
                    Cod &= Format(DocValor() * 100, "0000000000") '                             VVVVVVVVVV    
                ElseIf BancoNumero = BancoOpc.HSBC Then
                    Dim CB As String = CodBarras()

                    Cod = BancoNumeroTxt() '                     XXX
                    Cod &= "9" '                                    X
                    Cod &= Mid(NossoNumero11Txt(), 1, 5) '           XXXXX
                    Cod &= DacMod10(Mid(Cod, 1, 9)) '                     D

                    Cod &= Mid(NossoNumero11Txt, 6, 6) '                   XXXXXX
                    Cod &= AgenciaTxt '                                          XXXX
                    Cod &= DacMod10(Mid(Cod, 11, 10)) '                              D

                    Cod &= ContaDacTxt '                                              XXXXXXX
                    Cod &= Format(Carteira, "00") '                                          XX
                    Cod &= "1" '                                                               X
                    Cod &= DacMod10(Mid(Cod, 22, 10)) '                                         D

                    Cod &= Mid(CB, 5, 1) '                                                       D

                    Cod &= VencimentoFator(VencimentoData) '                                      XXXX
                    Cod &= Format(DocValor() * 100, "0000000000") '                                   XXXXXXXXXX
                ElseIf BancoNumero = BancoOpc.Bradesco Then
                    Dim CB As String = CodBarras()
                    Cod = Mid(CB, 1, 4)
                    Cod &= Mid(CB, 20, 5)
                    Cod &= DacMod10(Mid(Cod, 1, 9))

                    Cod &= Mid(CB, 25, 10)
                    Cod &= DacMod10(Mid(CB, 25, 10))

                    Cod &= Mid(CB, 35, 10)
                    Cod &= DacMod10(Mid(CB, 35, 10))

                    Cod &= Mid(CB, 5, 1)

                    Cod &= Mid(CB, 6, 4)
                    Cod &= Mid(CB, 10, 10)

                End If
                Return Cod
            End Function

            ''' <summary>
            ''' Nome do cedente.
            ''' </summary>
            ''' <value>Nome do cedente.</value>
            ''' <returns>Nome do cedente.</returns>
            ''' <remarks></remarks>
            Public Property CedenteNome() As String
                Get
                    Return pnlPrinc.Attributes("CEDENTE_NOME")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CEDENTE_NOME") = value
                End Set
            End Property

            ''' <summary>
            ''' Endereco do cedente.
            ''' </summary>
            ''' <value>Endereco do cedente.</value>
            ''' <returns>Endereco do cedente.</returns>
            ''' <remarks></remarks>
            Public Property CedenteEndereco() As String
                Get
                    Return pnlPrinc.Attributes("CEDENTE_ENDERECO")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CEDENTE_ENDERECO") = value
                End Set
            End Property

            ''' <summary>
            ''' Conta sem dígito verificador.
            ''' </summary>
            ''' <returns></returns>
            Function ContaSemDacTxt() As String
                Dim C As String = ContaDacTxt
                Return Microsoft.VisualBasic.Left(C, Len(C) - 1)
            End Function

            ''' <summary>
            ''' CNPJ do cedente.
            ''' </summary>
            ''' <value>CNPJ do cedente.</value>
            ''' <returns>CNPJ do cedente.</returns>
            ''' <remarks></remarks>
            Public Property CedenteCNPJ() As String
                Get
                    Return pnlPrinc.Attributes("CEDENTE_CNPJ")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CEDENTE_CNPJ") = value
                End Set
            End Property

            ''' <summary>
            ''' Logotipo do cedente, caminho de imagens no disco.
            ''' </summary>
            ''' <value>Logotipo do cedente, caminho de imagens no disco.</value>
            ''' <returns>Logotipo do cedente, caminho de imagens no disco.</returns>
            ''' <remarks></remarks>
            Public Property CedenteLogo() As String
                Get
                    Return pnlPrinc.Attributes("CEDENTE_LOGO")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CEDENTE_LOGO") = value
                End Set
            End Property

            ''' <summary>
            ''' Produto do cedente que será considerado para apresentação.
            ''' </summary>
            ''' <value>Produto do cedente que será considerado para apresentação.</value>
            ''' <returns>Produto do cedente que será considerado para apresentação.</returns>
            ''' <remarks></remarks>
            Public Property CedenteProduto() As String
                Get
                    Return pnlPrinc.Attributes("CEDENTE_PRODUTO")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CEDENTE_PRODUTO") = value
                End Set
            End Property

            ''' <summary>
            ''' Propriedade para cumprir com a norma da FEBRABAN, concatena nome do beneficiário, endereço e CPF/CNPJ.
            ''' </summary>
            ''' <returns>Especificação do Cedente (beneficiário).</returns>
            Public Property CedenteEspec() As String
                Get
                    Return pnlPrinc.Attributes("CEDENTE_ESPEC")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CEDENTE_ESPEC") = value
                End Set
            End Property

            ''' <summary>
            ''' Primeira linha de especificação do sacado.
            ''' </summary>
            ''' <value>Primeira linha de especificação do sacado.</value>
            ''' <returns>Primeira linha de especificação do sacado.</returns>
            ''' <remarks></remarks>
            Public Property SacadoEspec1() As String
                Get
                    Return pnlPrinc.Attributes("SACADO_ESPEC1")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("SACADO_ESPEC1") = value
                End Set
            End Property

            ''' <summary>
            ''' Segunda linha de especificação do sacado.
            ''' </summary>
            ''' <value>Segunda linha de especificação do sacado.</value>
            ''' <returns>Segunda linha de especificação do sacado.</returns>
            ''' <remarks></remarks>
            Public Property SacadoEspec2() As String
                Get
                    Return pnlPrinc.Attributes("SACADO_ESPEC2")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("SACADO_ESPEC2") = value
                End Set
            End Property

            ''' <summary>
            ''' Número de agência formatado.
            ''' </summary>
            ''' <value>Número de agência formatado.</value>
            ''' <returns>Número de agência formatado.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property AgenciaTxt() As String
                Get
                    Return Format(Agencia, "0000")
                End Get
            End Property

            ''' <summary>
            ''' Número da agência.
            ''' </summary>
            ''' <value>Número da agência.</value>
            ''' <returns>Número da agência.</returns>
            ''' <remarks></remarks>
            Public Property Agencia() As Integer
                Get
                    Return pnlPrinc.Attributes("AGENCIA")
                End Get
                Set(ByVal value As Integer)
                    pnlPrinc.Attributes("AGENCIA") = value
                End Set
            End Property

            Public Property AgenciaDAC() As Integer
                Get
                    Return pnlPrinc.Attributes("AGENCIA_DAC")
                End Get
                Set(ByVal value As Integer)
                    pnlPrinc.Attributes("AGENCIA_DAC") = value
                End Set
            End Property

            ''' <summary>
            ''' Formatação de conta e DAC juntos.
            ''' </summary>
            ''' <value>Formatação de conta e DAC juntos.</value>
            ''' <returns>Formatação de conta e DAC juntos.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property ContaDacTxt() As String
                Get
                    Return Format(ContaDac, "000000")
                End Get
            End Property

            ''' <summary>
            ''' DAC da conta.
            ''' </summary>
            ''' <value>DAC da conta.</value>
            ''' <returns>DAC da conta.</returns>
            ''' <remarks></remarks>
            Public Property ContaDac() As Integer
                Get
                    Return pnlPrinc.Attributes("CONTA_DAC")
                End Get
                Set(ByVal value As Integer)
                    pnlPrinc.Attributes("CONTA_DAC") = value
                End Set
            End Property

            ''' <summary>
            ''' Número da conta.
            ''' </summary>
            ''' <value>Número da conta.</value>
            ''' <returns>Número da conta.</returns>
            ''' <remarks></remarks>
            Public Property Conta() As Integer
                Get
                    Return Microsoft.VisualBasic.Left(Format(pnlPrinc.Attributes("CONTA_DAC"), "000000"), 5)
                End Get
                Set(ByVal value As Integer)
                    pnlPrinc.Attributes("CONTA_DAC") = Format(value, "00000") & DacMod10(Format(value, "00000"))
                End Set
            End Property

            ''' <summary>
            ''' Data do documento.
            ''' </summary>
            ''' <value>Data do documento.</value>
            ''' <returns>Data do documento.</returns>
            ''' <remarks></remarks>
            Public Property DocData() As Date
                Get
                    Return pnlPrinc.Attributes("DOC_DATA")
                End Get
                Set(ByVal value As Date)
                    pnlPrinc.Attributes("DOC_DATA") = value
                End Set
            End Property

            ''' <summary>
            ''' Data de vencimento.
            ''' </summary>
            ''' <value>Data de vencimento.</value>
            ''' <returns>Data de vencimento.</returns>
            ''' <remarks></remarks>
            Public Property VencimentoData() As Date
                Get
                    Return pnlPrinc.Attributes("VENCIMENTO_DATA")
                End Get
                Set(ByVal value As Date)
                    pnlPrinc.Attributes("VENCIMENTO_DATA") = value
                End Set
            End Property

            ''' <summary>
            ''' Valor do documento.
            ''' </summary>
            ''' <value>Valor do documento.</value>
            ''' <returns>Valor do documento.</returns>
            ''' <remarks></remarks>
            Public Property DocValor() As Double
                Get
                    Return pnlPrinc.Attributes("DOC_VALOR")
                End Get
                Set(ByVal value As Double)
                    pnlPrinc.Attributes("DOC_VALOR") = CDbl(value)
                End Set
            End Property

            Public Property InstrCaixa() As String
                Get
                    Return pnlPrinc.Attributes("INSTR_CAIXA")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTR_CAIXA") = value
                End Set
            End Property


            Public Property Notas() As String
                Get
                    Return pnlPrinc.Attributes("NOTAS")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("NOTAS") = value
                End Set
            End Property

            Public Property SacadoCompl() As String
                Get
                    Return pnlPrinc.Attributes("SACADO_COMPL")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("SACADO_COMPL") = value
                End Set
            End Property


            ''' <summary>
            ''' Linha de instrução superior número 1.
            ''' </summary>
            ''' <value>Linha de instrução superior número 1.</value>
            ''' <returns>Linha de instrução superior número 1.</returns>
            ''' <remarks></remarks>
            Public Property InstrucSup1() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_SUP1")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_SUP1") = value
                End Set
            End Property

            ''' <summary>
            ''' Linha de instrução superior número 2.
            ''' </summary>
            ''' <value>Linha de instrução superior número 2.</value>
            ''' <returns>Linha de instrução superior número 2.</returns>
            ''' <remarks></remarks>
            Public Property InstrucSup2() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_SUP2")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_SUP2") = value
                End Set
            End Property


            Public Property InstrucSup3() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_SUP3")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_SUP3") = value
                End Set
            End Property


            Public Property InstrucSup4() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_SUP4")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_SUP4") = value
                End Set
            End Property


            Public Property InstrucSup5() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_SUP5")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_SUP5") = value
                End Set
            End Property


            Public Property InstrucSup6() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_SUP6")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_SUP6") = value
                End Set
            End Property


            ''' <summary>
            ''' Linha de instrução inferior número 1.
            ''' </summary>
            ''' <value>Linha de instrução inferior número 1.</value>
            ''' <returns>Linha de instrução inferior número 1.</returns>
            ''' <remarks></remarks>
            Public Property InstrucInf1() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_INF1")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_INF1") = value
                End Set
            End Property

            ''' <summary>
            ''' Linha de instrução inferior número 2.
            ''' </summary>
            ''' <value>Linha de instrução inferior número 2.</value>
            ''' <returns>Linha de instrução inferior número 2.</returns>
            ''' <remarks></remarks>
            Public Property InstrucInf2() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_INF2")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_INF2") = value
                End Set
            End Property

            Public Property CodClienteDAC() As String
                Get
                    Return pnlPrinc.Attributes("COD_CLIENTE_DAC")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("COD_CLIENTE_DAC") = value
                End Set
            End Property


            ''' <summary>
            ''' Número de cliente.
            ''' </summary>
            ''' <value>Número de cliente.</value>
            ''' <returns>Número de cliente.</returns>
            ''' <remarks></remarks>
            Public Property CodCliente() As Long
                Get
                    Return pnlPrinc.Attributes("COD_CLIENTE")
                End Get
                Set(ByVal value As Long)
                    pnlPrinc.Attributes("COD_CLIENTE") = value
                End Set
            End Property

            Public ReadOnly Property CodClienteTxt6() As String
                Get
                    Return Format(CodCliente, "000000")
                End Get
            End Property

            Public ReadOnly Property CodClienteTxt7() As String
                Get
                    Return Format(CodCliente, "0000000")
                End Get
            End Property

            ''' <summary>
            ''' Número de cliente formatado.
            ''' </summary>
            ''' <value>Número de cliente formatado.</value>
            ''' <returns>Número de cliente formatado.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property CodClienteTxt() As String
                Get
                    Return Format(CodCliente, "00000")
                End Get
            End Property

            ''' <summary>
            ''' Linha de instrução inferior número 3.
            ''' </summary>
            ''' <value>Linha de instrução inferior número 3.</value>
            ''' <returns>Linha de instrução inferior número 3.</returns>
            ''' <remarks></remarks>
            Public Property InstrucInf3() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_INF3")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_INF3") = value
                End Set
            End Property

            ''' <summary>
            ''' Linha de instrução inferior número 4.
            ''' </summary>
            ''' <value>Linha de instrução inferior número 4.</value>
            ''' <returns>Linha de instrução inferior número 4.</returns>
            ''' <remarks></remarks>
            Public Property InstrucInf4() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_INF4")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_INF4") = value
                End Set
            End Property

            ''' <summary>
            ''' Número de banco formatado.
            ''' </summary>
            ''' <returns>Número de banco formatado.</returns>
            ''' <remarks></remarks>
            Public Function BancoNumeroTxt() As String
                Return Format(Val(BancoNumero), "000")
            End Function

            ''' <summary>
            ''' Opção padronizada de banco para especificação do boleto em questão.
            ''' </summary>
            ''' <value>Opção padronizada de banco para especificação do boleto em questão.</value>
            ''' <returns>Opção padronizada de banco para especificação do boleto em questão.</returns>
            ''' <remarks></remarks>
            Public Property BancoNumero() As BancoOpc
                Get
                    Return pnlPrinc.Attributes("BANCO_NUMERO")
                End Get
                Set(ByVal value As BancoOpc)
                    pnlPrinc.Attributes("BANCO_NUMERO") = value
                End Set
            End Property

            ''' <summary>
            ''' Número do banco que será utilizado para composição do boleto em questão.
            ''' </summary>
            ''' <value>Número do banco que será utilizado para composição do boleto em questão.</value>
            ''' <returns>Número do banco que será utilizado para composição do boleto em questão.</returns>
            ''' <remarks></remarks>
            Public Property Banco() As String
                Get
                    Return BancoNumero.ToString
                End Get
                Set(ByVal value As String)
                    BancoNumero = System.Enum.Parse(GetType(BancoOpc), value)
                End Set
            End Property

            ''' <summary>
            ''' Número do banco formatado.
            ''' </summary>
            ''' <returns>Número do banco formatado.</returns>
            ''' <remarks></remarks>
            Public Function BancoNumeroDacTxt() As String
                Return BancoNumeroTxt() & DacMod11CNPJ(BancoNumeroTxt)
            End Function

            ''' <summary>
            ''' Linha de instrução inferior de número 5.
            ''' </summary>
            ''' <value>Linha de instrução inferior de número 5.</value>
            ''' <returns>Linha de instrução inferior de número 5.</returns>
            ''' <remarks></remarks>
            Public Property InstrucInf5() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_INF5")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_INF5") = value
                End Set
            End Property

            ''' <summary>
            ''' Linha de instrução inferior de número 6.
            ''' </summary>
            ''' <value>Linha de instrução inferior de número 6.</value>
            ''' <returns>Linha de instrução inferior de número 6.</returns>
            ''' <remarks></remarks>
            Public Property InstrucInf6() As String
                Get
                    Return pnlPrinc.Attributes("INSTRUC_INF6")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("INSTRUC_INF6") = value
                End Set
            End Property

            ''' <summary>
            ''' Espécie do documento, campo que aparece no boleto.
            ''' </summary>
            ''' <value>Espécie do documento, campo que aparece no boleto.</value>
            ''' <returns>Espécie do documento, campo que aparece no boleto.</returns>
            ''' <remarks></remarks>
            Public Property DocEspec() As String
                Get
                    Return NZ(pnlPrinc.Attributes("DOC_ESPEC"), "RC")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("DOC_ESPEC") = value
                End Set
            End Property

            ''' <summary>
            ''' Aceite, campo que aparece no documento.
            ''' </summary>
            ''' <value>Aceite, campo que aparece no documento.</value>
            ''' <returns>Aceite, campo que aparece no documento.</returns>
            ''' <remarks></remarks>
            Public Property Aceite() As String
                Get
                    Return NZ(pnlPrinc.Attributes("ACEITE"), "")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("ACEITE") = value
                End Set
            End Property

            ''' <summary>
            ''' Data de processamento que aparece no documento.
            ''' </summary>
            ''' <value>Data de processamento que aparece no documento.</value>
            ''' <returns>Data de processamento que aparece no documento.</returns>
            ''' <remarks></remarks>
            Public Property ProcessData() As Date
                Get
                    Return NZV(pnlPrinc.Attributes("PROCESS_DATA"), DocData)
                End Get
                Set(ByVal value As Date)
                    pnlPrinc.Attributes("PROCESS_DATA") = value
                End Set
            End Property

            ''' <summary>
            ''' Campo que aparece no documento para uso do banco.
            ''' </summary>
            ''' <value>Campo que aparece no documento para uso do banco.</value>
            ''' <returns>Campo que aparece no documento para uso do banco.</returns>
            ''' <remarks></remarks>
            Public Property UsoBanco() As String
                Get
                    Return NZ(pnlPrinc.Attributes("USO_BANCO"), "")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("USO_BANCO") = value
                End Set
            End Property

            ''' <summary>
            ''' Número de carteira que boleto terá como base para emissão do documento.
            ''' </summary>
            ''' <value>Número de carteira que boleto terá como base para emissão do documento.</value>
            ''' <returns>Número de carteira que boleto terá como base para emissão do documento.</returns>
            ''' <remarks></remarks>
            Public Property Carteira() As Integer
                Get
                    Return pnlPrinc.Attributes("CARTEIRA")
                End Get
                Set(ByVal value As Integer)
                    pnlPrinc.Attributes("CARTEIRA") = value
                End Set
            End Property


            ''' <summary>
            ''' Período dos eventos do documento.
            ''' </summary>
            ''' <value>Data dos eventos do documento.</value>
            ''' <returns>Data dos eventos do documento.</returns>
            ''' <remarks></remarks>
            Public Property Periodo() As String
                Get
                    Return pnlPrinc.Attributes("PERIODO")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("PERIODO") = value
                End Set
            End Property

            ''' <summary>
            ''' Número da carteira formatado.
            ''' </summary>
            ''' <value>Número da carteira formatado.</value>
            ''' <returns>Número da carteira formatado.</returns>
            ''' <remarks></remarks>
            Public Property CarteiraTxt() As String
                Get
                    Return NZV(pnlPrinc.Attributes("CARTEIRA_TXT"), Format(Carteira, "000"))
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("CARTEIRA_TXT") = value
                End Set
            End Property

            ''' <summary>
            ''' Moeda que aparece no boleto.
            ''' </summary>
            ''' <value>Moeda que aparece no boleto.</value>
            ''' <returns>Moeda que aparece no boleto.</returns>
            ''' <remarks></remarks>
            Public Property EspecMoeda() As String
                Get
                    Return NZV(pnlPrinc.Attributes("ESPEC_MOEDA"), "R$")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("ESPEC_MOEDA") = value
                End Set
            End Property

            ''' <summary>
            ''' Quantidade que aparece no boleto.
            ''' </summary>
            ''' <value>Quantidade que aparece no boleto.</value>
            ''' <returns>Quantidade que aparece no boleto.</returns>
            ''' <remarks></remarks>
            Public Property Quantidade() As String
                Get
                    Return pnlPrinc.Attributes("QUANTIDADE")
                End Get
                Set(ByVal value As String)
                    pnlPrinc.Attributes("QUANTIDADE") = value
                End Set
            End Property

            ''' <summary>
            ''' Opções de banco.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum BancoOpc
                Itau = 341
                Santander = 33
                BancodoBrasil = 1
                Bradesco = 237
                Unibanco = 409
                Caixa = 104
                HSBC = 399
            End Enum

            ''' <summary>
            ''' Tipos de detalhes das carteiras.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum CarteiraDetOpc
                CarteiraNum
                Cod
            End Enum

            ''' <summary>
            ''' Detalhes das carteiras.
            ''' </summary>
            ''' <remarks></remarks>
            Shared CarteiraDets(,) As Object = {
                {175, "I"},
                {176, "I"},
                {109, "I"},
                {198, "I"}
            }

            ''' <summary>
            ''' Detalhes de carteira de banco específico suportado pelo sistema.
            ''' </summary>
            ''' <param name="Banco">Banco que contém a especificação de detalhes da carteira.</param>
            ''' <param name="Carteira">Número da carteira suportada.</param>
            ''' <param name="Detalhe">Detalhe desejado da carteira.</param>
            ''' <returns>Valor do detalhe especificado em constante daquela carteira daquele banco.</returns>
            ''' <remarks></remarks>
            Public Shared Function CarteiraDet(ByVal Banco As Integer, ByVal Carteira As Integer, ByVal Detalhe As CarteiraDetOpc) As Object
                For z As Integer = 0 To BancoDets.Length
                    If CarteiraDets(z, CarteiraDetOpc.CarteiraNum) = Carteira Then
                        Return CarteiraDets(z, Detalhe)
                    End If
                Next
                Return Nothing
            End Function

            ''' <summary>
            ''' Opções de parâmetros existentes em detalhes de banco.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum BancoDetOpc
                Numero
                RazaoCompleta
                NomeParaBoleto
                Imagem
            End Enum

            ''' <summary>
            ''' Variável auxiliar da propriedade Esquema.
            ''' </summary>
            ''' <remarks></remarks>
            Private _Esquema As String

            ''' <summary>
            ''' Propriedade esquema.
            ''' </summary>
            ''' <value>Texto.</value>
            ''' <returns>Esquema do banco de dados como string.</returns>
            ''' <remarks></remarks>
            Public Property Esquema() As String
                Get
                    Return _Esquema
                End Get
                Set(ByVal value As String)
                    _Esquema = value
                End Set
            End Property

            ''' <summary>
            ''' Código, razão social e nome de apresentação dos bancos suportados pela ferramenta de boleto.
            ''' </summary>
            ''' <remarks></remarks>
            Shared BancoDets(,) As Object = {
                {BancoOpc.Itau, "Banco Itaú S.A.", "Banco Itaú S.A.", New Byte() _
                                        {255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 2, 1, 0, 72, 0, 72, 0, 0, 255,
                                        237, 0, 44, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 51, 46, 48, 0, 56, 66,
                                        73, 77, 3, 237, 0, 0, 0, 0, 0, 16, 0, 72, 0, 0, 0, 1, 0, 1, 0, 72, 0, 0, 0, 1, 0,
                                        1, 255, 225, 65, 112, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111,
                                        98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 0, 60, 63, 120,
                                        112, 97, 99, 107, 101, 116, 32, 98, 101, 103, 105, 110, 61, 34, 239, 187, 191, 34,
                                        32, 105, 100, 61, 34, 87, 53, 77, 48, 77, 112, 67, 101, 104, 105, 72, 122, 114, 101,
                                        83, 122, 78, 84, 99, 122, 107, 99, 57, 100, 34, 63, 62, 10, 60, 120, 58, 120, 109,
                                        112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111,
                                        98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112,
                                        116, 107, 61, 34, 65, 100, 111, 98, 101, 32, 88, 77, 80, 32, 67, 111, 114, 101, 32,
                                        53, 46, 48, 45, 99, 48, 54, 48, 32, 54, 49, 46, 49, 51, 52, 55, 55, 55, 44, 32, 50,
                                        48, 49, 48, 47, 48, 50, 47, 49, 50, 45, 49, 55, 58, 51, 50, 58, 48, 48, 32, 32, 32,
                                        32, 32, 32, 32, 32, 34, 62, 10, 32, 32, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32,
                                        120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47,
                                        119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47,
                                        50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34,
                                        62, 10, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105,
                                        112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34,
                                        10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58,
                                        100, 99, 61, 34, 104, 116, 116, 112, 58, 47, 47, 112, 117, 114, 108, 46, 111, 114,
                                        103, 47, 100, 99, 47, 101, 108, 101, 109, 101, 110, 116, 115, 47, 49, 46, 49, 47,
                                        34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 100, 99, 58, 102, 111, 114, 109,
                                        97, 116, 62, 105, 109, 97, 103, 101, 47, 106, 112, 101, 103, 60, 47, 100, 99, 58,
                                        102, 111, 114, 109, 97, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 100,
                                        99, 58, 116, 105, 116, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 60, 114, 100, 102, 58, 65, 108, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 108, 105, 32, 120, 109, 108,
                                        58, 108, 97, 110, 103, 61, 34, 120, 45, 100, 101, 102, 97, 117, 108, 116, 34, 62,
                                        73, 109, 112, 114, 101, 115, 115, 97, 204, 131, 111, 60, 47, 114, 100, 102, 58, 108,
                                        105, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102,
                                        58, 65, 108, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 100, 99, 58,
                                        116, 105, 116, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58,
                                        68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32,
                                        32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32,
                                        114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104,
                                        116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109,
                                        47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 71, 73, 109, 103, 61, 34,
                                        104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111,
                                        109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 103, 47, 105, 109, 103, 47, 34, 62, 10,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 77, 101, 116, 97, 100,
                                        97, 116, 97, 68, 97, 116, 101, 62, 50, 48, 49, 48, 45, 48, 56, 45, 50, 48, 84, 49,
                                        53, 58, 52, 54, 58, 51, 51, 45, 48, 51, 58, 48, 48, 60, 47, 120, 109, 112, 58, 77,
                                        101, 116, 97, 100, 97, 116, 97, 68, 97, 116, 101, 62, 10, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 60, 120, 109, 112, 58, 77, 111, 100, 105, 102, 121, 68, 97, 116, 101,
                                        62, 50, 48, 49, 48, 45, 48, 56, 45, 50, 48, 84, 49, 56, 58, 52, 54, 58, 51, 57, 90,
                                        60, 47, 120, 109, 112, 58, 77, 111, 100, 105, 102, 121, 68, 97, 116, 101, 62, 10,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 67, 114, 101, 97, 116,
                                        101, 68, 97, 116, 101, 62, 50, 48, 49, 48, 45, 48, 56, 45, 50, 48, 84, 49, 53, 58,
                                        52, 54, 58, 51, 50, 45, 48, 51, 58, 48, 48, 60, 47, 120, 109, 112, 58, 67, 114, 101,
                                        97, 116, 101, 68, 97, 116, 101, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120,
                                        109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 65, 100, 111,
                                        98, 101, 32, 73, 108, 108, 117, 115, 116, 114, 97, 116, 111, 114, 32, 67, 83, 53,
                                        60, 47, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62,
                                        10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 84, 104, 117, 109,
                                        98, 110, 97, 105, 108, 115, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        60, 114, 100, 102, 58, 65, 108, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 108, 105, 32, 114, 100, 102, 58, 112,
                                        97, 114, 115, 101, 84, 121, 112, 101, 61, 34, 82, 101, 115, 111, 117, 114, 99, 101,
                                        34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        60, 120, 109, 112, 71, 73, 109, 103, 58, 119, 105, 100, 116, 104, 62, 50, 53, 54,
                                        60, 47, 120, 109, 112, 71, 73, 109, 103, 58, 119, 105, 100, 116, 104, 62, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109,
                                        112, 71, 73, 109, 103, 58, 104, 101, 105, 103, 104, 116, 62, 50, 53, 54, 60, 47,
                                        120, 109, 112, 71, 73, 109, 103, 58, 104, 101, 105, 103, 104, 116, 62, 10, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112,
                                        71, 73, 109, 103, 58, 102, 111, 114, 109, 97, 116, 62, 74, 80, 69, 71, 60, 47, 120,
                                        109, 112, 71, 73, 109, 103, 58, 102, 111, 114, 109, 97, 116, 62, 10, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 71,
                                        73, 109, 103, 58, 105, 109, 97, 103, 101, 62, 47, 57, 106, 47, 52, 65, 65, 81, 83,
                                        107, 90, 74, 82, 103, 65, 66, 65, 103, 69, 65, 83, 65, 66, 73, 65, 65, 68, 47, 55,
                                        81, 65, 115, 85, 71, 104, 118, 100, 71, 57, 122, 97, 71, 57, 119, 73, 68, 77, 117,
                                        77, 65, 65, 52, 81, 107, 108, 78, 65, 43, 48, 65, 65, 65, 65, 65, 65, 66, 65, 65,
                                        83, 65, 65, 65, 65, 65, 69, 65, 38, 35, 120, 65, 59, 65, 81, 66, 73, 65, 65, 65,
                                        65, 65, 81, 65, 66, 47, 43, 52, 65, 68, 107, 70, 107, 98, 50, 74, 108, 65, 71, 84,
                                        65, 65, 65, 65, 65, 65, 102, 47, 98, 65, 73, 81, 65, 66, 103, 81, 69, 66, 65, 85,
                                        69, 66, 103, 85, 70, 66, 103, 107, 71, 66, 81, 89, 74, 67, 119, 103, 71, 66, 103,
                                        103, 76, 68, 65, 111, 75, 67, 119, 111, 75, 38, 35, 120, 65, 59, 68, 66, 65, 77,
                                        68, 65, 119, 77, 68, 65, 119, 81, 68, 65, 52, 80, 69, 65, 56, 79, 68, 66, 77, 84,
                                        70, 66, 81, 84, 69, 120, 119, 98, 71, 120, 115, 99, 72, 120, 56, 102, 72, 120, 56,
                                        102, 72, 120, 56, 102, 72, 119, 69, 72, 66, 119, 99, 78, 68, 65, 48, 89, 69, 66,
                                        65, 89, 71, 104, 85, 82, 70, 82, 111, 102, 72, 120, 56, 102, 38, 35, 120, 65, 59,
                                        72, 120, 56, 102, 72, 120, 56, 102, 72, 120, 56, 102, 72, 120, 56, 102, 72, 120,
                                        56, 102, 72, 120, 56, 102, 72, 120, 56, 102, 72, 120, 56, 102, 72, 120, 56, 102,
                                        72, 120, 56, 102, 72, 120, 56, 102, 72, 120, 56, 102, 72, 120, 56, 102, 72, 120,
                                        56, 102, 72, 120, 56, 102, 47, 56, 65, 65, 69, 81, 103, 66, 65, 65, 69, 65, 65, 119,
                                        69, 82, 38, 35, 120, 65, 59, 65, 65, 73, 82, 65, 81, 77, 82, 65, 102, 47, 69, 65,
                                        97, 73, 65, 65, 65, 65, 72, 65, 81, 69, 66, 65, 81, 69, 65, 65, 65, 65, 65, 65, 65,
                                        65, 65, 65, 65, 81, 70, 65, 119, 73, 71, 65, 81, 65, 72, 67, 65, 107, 75, 67, 119,
                                        69, 65, 65, 103, 73, 68, 65, 81, 69, 66, 65, 81, 69, 65, 65, 65, 65, 65, 65, 65,
                                        65, 65, 38, 35, 120, 65, 59, 65, 81, 65, 67, 65, 119, 81, 70, 66, 103, 99, 73, 67,
                                        81, 111, 76, 69, 65, 65, 67, 65, 81, 77, 68, 65, 103, 81, 67, 66, 103, 99, 68, 66,
                                        65, 73, 71, 65, 110, 77, 66, 65, 103, 77, 82, 66, 65, 65, 70, 73, 82, 73, 120, 81,
                                        86, 69, 71, 69, 50, 69, 105, 99, 89, 69, 85, 77, 112, 71, 104, 66, 120, 87, 120,
                                        81, 105, 80, 66, 38, 35, 120, 65, 59, 85, 116, 72, 104, 77, 120, 90, 105, 56, 67,
                                        82, 121, 103, 118, 69, 108, 81, 122, 82, 84, 107, 113, 75, 121, 89, 51, 80, 67, 78,
                                        85, 81, 110, 107, 54, 79, 122, 78, 104, 100, 85, 90, 72, 84, 68, 48, 117, 73, 73,
                                        74, 111, 77, 74, 67, 104, 103, 90, 104, 74, 82, 70, 82, 113, 83, 48, 86, 116, 78,
                                        86, 75, 66, 114, 121, 52, 47, 80, 69, 38, 35, 120, 65, 59, 49, 79, 84, 48, 90, 88,
                                        87, 70, 108, 97, 87, 49, 120, 100, 88, 108, 57, 87, 90, 50, 104, 112, 97, 109, 116,
                                        115, 98, 87, 53, 118, 89, 51, 82, 49, 100, 110, 100, 52, 101, 88, 112, 55, 102, 72,
                                        49, 43, 102, 51, 79, 69, 104, 89, 97, 72, 105, 73, 109, 75, 105, 52, 121, 78, 106,
                                        111, 43, 67, 107, 53, 83, 86, 108, 112, 101, 89, 109, 90, 38, 35, 120, 65, 59, 113,
                                        98, 110, 74, 50, 101, 110, 53, 75, 106, 112, 75, 87, 109, 112, 54, 105, 112, 113,
                                        113, 117, 115, 114, 97, 54, 118, 111, 82, 65, 65, 73, 67, 65, 81, 73, 68, 66, 81,
                                        85, 69, 66, 81, 89, 69, 67, 65, 77, 68, 98, 81, 69, 65, 65, 104, 69, 68, 66, 67,
                                        69, 83, 77, 85, 69, 70, 85, 82, 78, 104, 73, 103, 90, 120, 103, 90, 69, 121, 38,
                                        35, 120, 65, 59, 111, 98, 72, 119, 70, 77, 72, 82, 52, 83, 78, 67, 70, 86, 74, 105,
                                        99, 118, 69, 122, 74, 68, 82, 68, 103, 104, 97, 83, 85, 121, 87, 105, 89, 55, 76,
                                        67, 66, 51, 80, 83, 78, 101, 74, 69, 103, 120, 100, 85, 107, 119, 103, 74, 67, 104,
                                        103, 90, 74, 106, 90, 70, 71, 105, 100, 107, 100, 70, 85, 51, 56, 113, 79, 122, 119,
                                        121, 103, 112, 38, 35, 120, 65, 59, 48, 43, 80, 122, 104, 74, 83, 107, 116, 77, 84,
                                        85, 53, 80, 82, 108, 100, 89, 87, 86, 112, 98, 88, 70, 49, 101, 88, 49, 82, 108,
                                        90, 109, 100, 111, 97, 87, 112, 114, 98, 71, 49, 117, 98, 50, 82, 49, 100, 110, 100,
                                        52, 101, 88, 112, 55, 102, 72, 49, 43, 102, 51, 79, 69, 104, 89, 97, 72, 105, 73,
                                        109, 75, 105, 52, 121, 78, 106, 111, 38, 35, 120, 65, 59, 43, 68, 108, 74, 87, 87,
                                        108, 53, 105, 90, 109, 112, 117, 99, 110, 90, 54, 102, 107, 113, 79, 107, 112, 97,
                                        97, 110, 113, 75, 109, 113, 113, 54, 121, 116, 114, 113, 43, 118, 47, 97, 65, 65,
                                        119, 68, 65, 81, 65, 67, 69, 81, 77, 82, 65, 68, 56, 65, 57, 85, 52, 113, 55, 70,
                                        88, 110, 102, 53, 108, 47, 110, 110, 53, 77, 56, 105, 66, 55, 38, 35, 120, 65, 59,
                                        87, 52, 107, 79, 111, 54, 50, 70, 113, 109, 108, 87, 120, 72, 78, 97, 103, 69, 101,
                                        115, 43, 54, 120, 65, 49, 55, 49, 98, 119, 66, 120, 86, 56, 52, 101, 98, 102, 43,
                                        99, 109, 47, 119, 65, 122, 78, 100, 100, 52, 55, 71, 53, 84, 81, 114, 74, 116, 108,
                                        104, 115, 108, 72, 113, 48, 47, 121, 112, 51, 53, 80, 88, 51, 84, 106, 103, 86, 53,
                                        38, 35, 120, 65, 59, 114, 113, 102, 109, 72, 88, 57, 86, 89, 116, 113, 109, 112,
                                        51, 100, 43, 120, 78, 83, 98, 113, 101, 83, 89, 49, 56, 102, 106, 90, 115, 86, 83,
                                        47, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113,
                                        55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113,
                                        55, 70, 88, 89, 38, 35, 120, 65, 59, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113,
                                        109, 71, 109, 101, 89, 100, 102, 48, 112, 103, 50, 108, 54, 110, 100, 50, 68, 65,
                                        49, 66, 116, 90, 53, 73, 84, 88, 120, 43, 66, 108, 120, 86, 54, 88, 53, 82, 47, 53,
                                        121, 99, 47, 77, 122, 81, 53, 73, 52, 57, 81, 117, 73, 57, 101, 115, 86, 111, 71,
                                        104, 118, 86, 65, 108, 52, 57, 43, 38, 35, 120, 65, 59, 77, 54, 65, 80, 121, 57,
                                        51, 53, 102, 76, 70, 88, 48, 108, 43, 87, 118, 53, 50, 43, 84, 80, 80, 105, 67, 51,
                                        115, 53, 84, 89, 54, 121, 66, 87, 84, 83, 114, 111, 103, 83, 109, 110, 85, 120, 77,
                                        80, 104, 108, 88, 53, 98, 43, 73, 71, 70, 88, 111, 71, 75, 117, 120, 86, 50, 75,
                                        118, 65, 47, 122, 43, 47, 80, 57, 47, 76, 55, 122, 38, 35, 120, 65, 59, 101, 86,
                                        80, 75, 115, 119, 47, 84, 86, 79, 79, 111, 54, 107, 117, 47, 49, 87, 116, 80, 51,
                                        99, 100, 82, 81, 121, 107, 100, 84, 43, 120, 47, 114, 102, 90, 86, 102, 75, 77, 48,
                                        48, 48, 56, 122, 122, 84, 79, 48, 115, 48, 114, 70, 53, 90, 88, 74, 90, 109, 90,
                                        106, 86, 109, 90, 106, 117, 83, 84, 49, 79, 66, 86, 109, 75, 117, 120, 86, 38, 35,
                                        120, 65, 59, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 85, 116, 55, 109, 52, 116, 114, 105, 79, 52, 116, 112,
                                        88, 103, 117, 73, 38, 35, 120, 65, 59, 87, 68, 119, 122, 82, 115, 85, 100, 72, 85,
                                        49, 86, 108, 90, 97, 69, 69, 72, 111, 82, 105, 114, 54, 50, 47, 73, 80, 56, 47, 70,
                                        56, 48, 76, 70, 53, 89, 56, 122, 121, 104, 80, 77, 83, 67, 108, 108, 101, 109, 105,
                                        114, 101, 75, 111, 114, 120, 97, 108, 65, 74, 103, 66, 47, 115, 118, 110, 104, 86,
                                        55, 110, 105, 114, 122, 118, 56, 56, 47, 38, 35, 120, 65, 59, 122, 76, 72, 107, 84,
                                        121, 90, 74, 99, 87, 114, 113, 78, 98, 49, 69, 109, 50, 48, 112, 68, 81, 56, 88,
                                        112, 56, 99, 49, 67, 68, 85, 82, 75, 97, 47, 54, 120, 65, 55, 52, 113, 43, 71, 90,
                                        112, 112, 112, 53, 110, 109, 109, 100, 112, 90, 112, 87, 76, 121, 121, 117, 83, 122,
                                        77, 122, 71, 114, 77, 122, 72, 99, 107, 110, 113, 99, 67, 114, 38, 35, 120, 65, 59,
                                        77, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100,
                                        105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114,
                                        115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86,
                                        100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105,
                                        113, 112, 98, 88, 70, 120, 98, 38, 35, 120, 65, 59, 88, 69, 86, 122, 98, 121, 78,
                                        68, 99, 81, 79, 115, 107, 77, 121, 69, 113, 54, 79, 104, 53, 75, 121, 115, 78, 119,
                                        81, 82, 85, 72, 70, 88, 51, 84, 43, 83, 88, 53, 108, 74, 53, 56, 56, 109, 82, 88,
                                        108, 119, 81, 78, 90, 115, 83, 76, 88, 86, 89, 120, 116, 87, 85, 67, 113, 121, 103,
                                        102, 121, 121, 114, 118, 56, 65, 79, 111, 55, 89, 38, 35, 120, 65, 59, 86, 102, 78,
                                        110, 47, 79, 84, 102, 109, 49, 57, 100, 47, 77, 121, 53, 115, 89, 51, 53, 87, 87,
                                        104, 73, 116, 108, 67, 111, 54, 101, 114, 84, 110, 79, 51, 122, 53, 116, 119, 80,
                                        43, 114, 103, 86, 53, 76, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114,
                                        115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86,
                                        100, 38, 35, 120, 65, 59, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114,
                                        115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86,
                                        100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 101, 116,
                                        47, 56, 52, 120, 43, 98, 112, 78, 68, 47, 65, 68, 77, 116, 57, 80, 107, 107, 52,
                                        50, 79, 118, 82, 116, 90, 84, 75, 84, 56, 80, 38, 35, 120, 65, 59, 113, 103, 70,
                                        52, 71, 112, 47, 78, 122, 72, 65, 102, 54, 120, 120, 86, 53, 110, 53, 103, 49, 78,
                                        57, 86, 49, 55, 85, 116, 85, 99, 108, 110, 118, 55, 113, 101, 53, 90, 106, 49, 74,
                                        109, 107, 90, 121, 84, 47, 119, 87, 75, 111, 68, 70, 88, 89, 113, 55, 70, 88, 89,
                                        113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 38, 35, 120,
                                        65, 59, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88,
                                        89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88,
                                        89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 109, 72, 108, 51, 85, 122, 112,
                                        88, 109, 68, 84, 78, 85, 85, 108, 87, 115, 76, 117, 67, 53, 68, 68, 113, 68, 68,
                                        38, 35, 120, 65, 59, 73, 114, 49, 50, 47, 119, 66, 88, 70, 85, 118, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 38, 35, 120, 65, 59, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 38, 35, 120, 65, 59, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 38, 35, 120, 65,
                                        59, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 38, 35, 120, 65, 59, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 38, 35, 120, 65, 59, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 38, 35, 120, 65, 59, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 38, 35, 120,
                                        65, 59, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 38, 35, 120, 65, 59, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 38, 35, 120, 65, 59, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 38, 35, 120, 65, 59, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 113, 107, 70, 116,
                                        99, 51, 68, 108, 76, 101, 74, 53, 110, 65, 53, 70, 89, 49, 76, 71, 110, 38, 35, 120,
                                        65, 59, 83, 116, 66, 88, 120, 120, 86, 88, 47, 81, 43, 114, 47, 119, 68, 76, 68,
                                        99, 102, 56, 105, 110, 47, 112, 105, 114, 118, 48, 80, 113, 47, 47, 65, 67, 119,
                                        51, 72, 47, 73, 112, 47, 119, 67, 109, 75, 111, 97, 83, 75, 83, 75, 82, 111, 53,
                                        85, 90, 74, 70, 50, 90, 71, 66, 66, 66, 57, 119, 99, 86, 87, 52, 113, 114, 87, 57,
                                        106, 101, 38, 35, 120, 65, 59, 51, 67, 108, 114, 101, 51, 107, 109, 86, 84, 82, 106,
                                        71, 106, 77, 65, 102, 101, 103, 79, 75, 113, 118, 54, 72, 49, 102, 47, 65, 74, 89,
                                        98, 106, 47, 107, 85, 47, 119, 68, 84, 70, 87, 110, 48, 114, 86, 69, 82, 110, 101,
                                        122, 110, 86, 70, 66, 90, 109, 97, 78, 119, 65, 66, 117, 83, 83, 82, 105, 113, 70,
                                        120, 86, 50, 75, 117, 120, 86, 38, 35, 120, 65, 59, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 116, 86, 90, 50, 67, 113, 67, 122, 77, 97, 75, 111, 51, 74, 74,
                                        55, 68, 70, 85, 86, 43, 104, 57, 88, 47, 53, 89, 98, 106, 47, 65, 74, 70, 80, 47,
                                        84, 70, 88, 102, 111, 102, 86, 47, 119, 68, 108, 38, 35, 120, 65, 59, 104, 117, 80,
                                        43, 82, 84, 47, 48, 120, 86, 68, 122, 50, 56, 56, 68, 43, 110, 80, 71, 48, 85, 108,
                                        75, 56, 72, 85, 113, 97, 72, 50, 79, 75, 114, 77, 86, 100, 105, 114, 115, 86, 100,
                                        105, 114, 115, 86, 101, 52, 47, 119, 68, 79, 73, 88, 47, 107, 121, 116, 83, 47, 55,
                                        89, 48, 47, 47, 85, 86, 98, 89, 113, 43, 118, 77, 75, 117, 120, 38, 35, 120, 65,
                                        59, 86, 56, 71, 47, 110, 112, 47, 53, 78, 118, 122, 78, 47, 119, 65, 120, 102, 47,
                                        77, 116, 99, 67, 115, 69, 120, 86, 57, 87, 102, 56, 52, 100, 47, 119, 68, 75, 75,
                                        54, 47, 47, 65, 77, 120, 48, 102, 47, 74, 107, 89, 113, 43, 103, 99, 75, 115, 97,
                                        47, 77, 55, 47, 65, 77, 108, 114, 53, 115, 47, 55, 89, 50, 111, 102, 57, 81, 115,
                                        109, 38, 35, 120, 65, 59, 75, 118, 122, 51, 119, 75, 55, 70, 88, 89, 113, 55, 70,
                                        88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70,
                                        88, 89, 113, 55, 70, 88, 89, 113, 43, 104, 47, 43, 99, 88, 118, 121, 107, 70, 47,
                                        100, 76, 53, 54, 49, 109, 71, 116, 110, 97, 117, 86, 48, 83, 66, 120, 116, 74, 79,
                                        104, 111, 49, 119, 102, 38, 35, 120, 65, 59, 56, 109, 77, 47, 67, 110, 43, 86, 118,
                                        43, 122, 105, 114, 54, 109, 119, 113, 56, 50, 47, 79, 98, 56, 53, 116, 75, 47, 76,
                                        55, 83, 118, 82, 104, 52, 88, 102, 109, 83, 55, 81, 109, 119, 115, 67, 97, 104, 65,
                                        100, 118, 88, 110, 112, 117, 73, 119, 101, 103, 54, 115, 100, 104, 51, 73, 86, 102,
                                        70, 79, 116, 54, 51, 113, 117, 117, 97, 114, 99, 38, 35, 120, 65, 59, 54, 116, 113,
                                        49, 121, 57, 51, 113, 70, 50, 53, 107, 110, 110, 107, 78, 83, 83, 101, 119, 55, 65,
                                        65, 98, 65, 68, 89, 68, 89, 89, 70, 81, 79, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 118, 99, 102, 43, 99, 81, 118, 47, 65, 67, 90, 87, 112, 102, 56, 65, 98,
                                        71, 110, 47, 65, 79, 111, 113, 50, 120, 86, 57, 101, 89, 86, 100, 38, 35, 120, 65,
                                        59, 105, 114, 52, 78, 47, 80, 84, 47, 65, 77, 109, 51, 53, 109, 47, 53, 105, 47,
                                        56, 65, 109, 87, 117, 66, 87, 67, 89, 113, 43, 114, 80, 43, 99, 79, 47, 43, 85, 86,
                                        49, 47, 47, 109, 79, 106, 47, 119, 67, 84, 73, 120, 86, 57, 65, 52, 86, 89, 49, 43,
                                        90, 51, 47, 107, 116, 102, 78, 110, 47, 98, 71, 49, 68, 47, 65, 75, 104, 90, 38,
                                        35, 120, 65, 59, 77, 86, 102, 110, 118, 103, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 115, 52, 47, 75, 68, 56, 116, 76, 51, 122, 57, 53, 116, 104,
                                        48, 49, 81, 48, 101, 108, 87, 49, 74, 57, 87, 117, 108, 47, 51, 88, 67, 68, 57, 108,
                                        84, 47, 80, 38, 35, 120, 65, 59, 73, 102, 104, 88, 54, 84, 48, 66, 120, 86, 57, 50,
                                        54, 102, 112, 57, 108, 112, 49, 104, 98, 50, 70, 106, 67, 116, 118, 90, 50, 107,
                                        97, 119, 50, 56, 67, 67, 105, 112, 71, 103, 52, 113, 111, 43, 81, 71, 70, 87, 66,
                                        47, 110, 72, 43, 98, 43, 108, 102, 108, 57, 111, 104, 52, 115, 108, 120, 53, 104,
                                        117, 48, 80, 54, 78, 115, 68, 118, 55, 38, 35, 120, 65, 59, 101, 116, 77, 65, 81,
                                        82, 71, 112, 47, 119, 67, 67, 79, 119, 55, 107, 75, 118, 105, 84, 87, 57, 98, 49,
                                        88, 88, 78, 86, 117, 100, 87, 49, 97, 53, 101, 55, 49, 67, 55, 99, 121, 84, 122,
                                        121, 71, 112, 74, 80, 89, 100, 103, 65, 78, 103, 66, 115, 66, 115, 77, 67, 111, 72,
                                        70, 88, 89, 113, 55, 70, 88, 89, 113, 55, 70, 88, 89, 113, 38, 35, 120, 65, 59, 57,
                                        120, 47, 53, 120, 67, 47, 56, 109, 86, 113, 88, 47, 98, 71, 110, 47, 119, 67, 111,
                                        113, 50, 120, 86, 57, 101, 89, 86, 100, 105, 114, 52, 78, 47, 80, 84, 47, 119, 65,
                                        109, 51, 53, 109, 47, 53, 105, 47, 43, 90, 97, 52, 70, 82, 51, 107, 98, 56, 103,
                                        118, 80, 72, 110, 84, 121, 47, 72, 114, 117, 107, 83, 50, 75, 87, 85, 107, 106, 38,
                                        35, 120, 65, 59, 120, 75, 116, 120, 76, 73, 107, 110, 75, 77, 48, 98, 90, 89, 51,
                                        72, 52, 52, 113, 43, 107, 80, 56, 65, 110, 72, 47, 56, 115, 118, 77, 88, 107, 68,
                                        82, 78, 85, 115, 116, 99, 101, 50, 101, 97, 56, 117, 86, 109, 104, 78, 113, 55, 83,
                                        76, 120, 87, 77, 75, 101, 82, 90, 69, 51, 114, 104, 86, 54, 112, 105, 113, 84, 43,
                                        99, 57, 73, 117, 38, 35, 120, 65, 59, 116, 90, 56, 110, 54, 55, 111, 57, 111, 85,
                                        70, 49, 113, 87, 110, 51, 100, 112, 98, 109, 81, 107, 73, 74, 74, 52, 72, 106, 84,
                                        107, 81, 67, 81, 79, 84, 98, 55, 89, 113, 43, 85, 47, 56, 65, 111, 85, 118, 56, 48,
                                        80, 56, 65, 108, 111, 48, 118, 47, 112, 73, 108, 47, 119, 67, 113, 79, 66, 87, 65,
                                        47, 109, 74, 43, 87, 110, 109, 72, 38, 35, 120, 65, 59, 121, 68, 113, 86, 114, 112,
                                        43, 117, 80, 98, 118, 80, 100, 119, 47, 87, 73, 106, 97, 117, 48, 105, 56, 79, 82,
                                        84, 99, 115, 113, 98, 49, 88, 70, 87, 75, 89, 113, 110, 118, 108, 98, 121, 76, 53,
                                        118, 56, 49, 51, 66, 103, 56, 118, 97, 86, 99, 97, 103, 121, 110, 105, 56, 107, 97,
                                        48, 105, 81, 48, 114, 82, 53, 110, 75, 120, 112, 47, 115, 38, 35, 120, 65, 59, 109,
                                        71, 75, 118, 87, 116, 68, 47, 65, 79, 99, 82, 80, 80, 70, 48, 103, 107, 49, 98, 85,
                                        55, 72, 84, 65, 119, 114, 54, 97, 99, 55, 109, 85, 101, 122, 66, 82, 71, 110, 51,
                                        79, 99, 86, 90, 90, 90, 47, 56, 52, 98, 54, 79, 105, 106, 54, 53, 53, 109, 117, 74,
                                        109, 111, 97, 109, 71, 49, 83, 73, 86, 114, 116, 115, 48, 107, 118, 98, 38, 35, 120,
                                        65, 59, 70, 86, 97, 88, 47, 110, 68, 114, 121, 48, 85, 73, 105, 56, 119, 51, 105,
                                        80, 50, 90, 111, 89, 109, 72, 51, 68, 106, 43, 118, 67, 114, 69, 47, 77, 72, 47,
                                        65, 68, 105, 66, 53, 115, 116, 73, 106, 74, 111, 101, 115, 50, 109, 113, 70, 100,
                                        122, 70, 80, 71, 57, 109, 53, 57, 108, 43, 75, 100, 75, 47, 78, 104, 103, 86, 52,
                                        122, 53, 109, 38, 35, 120, 65, 59, 56, 111, 101, 90, 118, 75, 57, 47, 57, 81, 56,
                                        119, 97, 100, 78, 112, 49, 121, 81, 83, 105, 121, 106, 52, 88, 65, 54, 109, 78, 49,
                                        113, 106, 106, 51, 85, 110, 70, 85, 111, 120, 86, 50, 75, 118, 83, 102, 73, 51, 53,
                                        66, 101, 101, 80, 79, 110, 108, 43, 80, 88, 100, 73, 108, 115, 85, 115, 112, 74,
                                        72, 105, 86, 98, 105, 87, 82, 74, 79, 38, 35, 120, 65, 59, 85, 90, 111, 50, 121,
                                        120, 117, 80, 120, 120, 86, 107, 72, 47, 81, 112, 102, 53, 111, 102, 56, 116, 71,
                                        108, 47, 119, 68, 83, 82, 76, 47, 49, 82, 120, 86, 76, 80, 77, 51, 47, 65, 68, 106,
                                        88, 43, 89, 88, 108, 51, 81, 98, 55, 88, 76, 43, 98, 84, 50, 115, 57, 80, 105, 77,
                                        48, 54, 120, 84, 83, 77, 53, 86, 101, 118, 69, 71, 74, 38, 35, 120, 65, 59, 81, 84,
                                        57, 79, 75, 115, 70, 56, 118, 43, 101, 102, 78, 47, 108, 50, 67, 87, 68, 81, 116,
                                        88, 117, 100, 78, 104, 110, 89, 80, 77, 108, 116, 73, 89, 119, 122, 65, 85, 66, 97,
                                        110, 88, 98, 70, 85, 49, 47, 53, 88, 72, 43, 97, 102, 47, 85, 48, 54, 106, 47, 121,
                                        80, 102, 70, 85, 118, 48, 54, 49, 56, 122, 101, 102, 118, 78, 57, 116, 38, 35, 120,
                                        65, 59, 90, 121, 51, 112, 118, 78, 98, 49, 87, 81, 82, 76, 100, 88, 115, 106, 71,
                                        112, 86, 100, 117, 98, 48, 99, 103, 66, 86, 112, 48, 120, 86, 54, 82, 47, 48, 75,
                                        88, 43, 97, 72, 47, 76, 82, 112, 102, 47, 83, 82, 76, 47, 49, 82, 120, 86, 51, 47,
                                        65, 69, 75, 88, 43, 97, 72, 47, 65, 67, 48, 97, 88, 47, 48, 107, 83, 47, 56, 65,
                                        38, 35, 120, 65, 59, 86, 72, 70, 88, 110, 102, 110, 47, 65, 77, 103, 97, 53, 53,
                                        71, 49, 120, 78, 70, 49, 112, 52, 72, 117, 51, 103, 83, 53, 66, 116, 110, 90, 48,
                                        52, 79, 122, 75, 78, 50, 86, 68, 87, 113, 72, 116, 105, 114, 71, 115, 86, 100, 105,
                                        114, 115, 86, 100, 105, 114, 51, 72, 47, 110, 69, 76, 47, 119, 65, 109, 86, 113,
                                        88, 47, 65, 71, 120, 112, 38, 35, 120, 65, 59, 47, 119, 68, 113, 75, 116, 115, 86,
                                        102, 88, 109, 70, 88, 89, 113, 43, 68, 102, 122, 48, 47, 119, 68, 74, 116, 43, 90,
                                        118, 43, 89, 118, 47, 65, 74, 108, 114, 103, 86, 57, 76, 47, 119, 68, 79, 76, 102,
                                        56, 65, 53, 75, 83, 48, 47, 119, 67, 89, 117, 54, 47, 53, 79, 89, 86, 101, 116, 52,
                                        113, 55, 70, 88, 89, 113, 55, 70, 88, 121, 38, 35, 120, 65, 59, 102, 47, 122, 109,
                                        70, 47, 121, 109, 101, 104, 47, 57, 115, 52, 47, 56, 110, 51, 119, 70, 88, 103, 97,
                                        78, 119, 100, 87, 111, 71, 52, 107, 72, 105, 50, 52, 78, 79, 120, 120, 86, 43, 105,
                                        102, 107, 117, 53, 48, 101, 55, 56, 112, 54, 82, 101, 97, 78, 98, 82, 87, 101, 109,
                                        88, 86, 112, 68, 80, 97, 50, 48, 67, 76, 71, 107, 97, 121, 111, 38, 35, 120, 65,
                                        59, 72, 52, 104, 86, 50, 70, 75, 48, 79, 70, 85, 53, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 112, 84, 53, 111, 56, 113, 101, 88, 47, 78, 79, 107, 83, 54, 84, 114, 116,
                                        109, 108, 53, 90, 83, 47, 115, 117, 75, 77, 106, 100, 110, 106, 99, 102, 69, 106,
                                        68, 115, 82, 105, 114, 52, 100, 47, 78, 114, 56, 115, 55, 47, 56, 65, 76, 47, 122,
                                        83, 38, 35, 120, 65, 59, 43, 108, 121, 117, 49, 120, 112, 49, 119, 112, 110, 48,
                                        117, 57, 73, 112, 54, 107, 74, 78, 75, 78, 84, 98, 49, 69, 79, 122, 68, 53, 72, 111,
                                        82, 103, 86, 104, 87, 75, 118, 116, 76, 47, 110, 70, 118, 47, 121, 85, 108, 112,
                                        47, 122, 70, 51, 88, 47, 65, 67, 99, 119, 113, 57, 98, 120, 86, 104, 80, 53, 49,
                                        47, 56, 65, 107, 113, 80, 78, 38, 35, 120, 65, 59, 72, 47, 77, 68, 74, 47, 68, 70,
                                        88, 119, 82, 103, 86, 50, 75, 115, 55, 47, 73, 118, 47, 119, 65, 109, 51, 53, 90,
                                        47, 53, 105, 47, 43, 90, 98, 89, 113, 43, 56, 115, 75, 117, 120, 86, 56, 100, 47,
                                        56, 65, 79, 87, 110, 47, 65, 74, 78, 67, 51, 47, 55, 90, 100, 118, 56, 65, 56, 110,
                                        90, 115, 67, 118, 70, 115, 86, 100, 105, 114, 38, 35, 120, 65, 59, 115, 86, 100,
                                        105, 114, 51, 72, 47, 65, 74, 120, 67, 47, 119, 68, 74, 108, 97, 108, 47, 50, 120,
                                        112, 47, 43, 111, 113, 50, 120, 86, 57, 101, 89, 86, 100, 105, 114, 52, 78, 47, 80,
                                        84, 47, 121, 98, 102, 109, 98, 47, 109, 76, 47, 65, 79, 90, 97, 52, 70, 90, 116,
                                        43, 85, 51, 47, 65, 68, 107, 88, 112, 47, 107, 88, 121, 100, 68, 53, 38, 35, 120,
                                        65, 59, 102, 110, 48, 83, 87, 43, 107, 105, 109, 108, 108, 78, 119, 107, 54, 120,
                                        103, 105, 86, 117, 86, 79, 74, 82, 117, 110, 122, 120, 86, 57, 65, 47, 108, 76, 43,
                                        97, 49, 114, 43, 89, 117, 109, 88, 49, 47, 98, 54, 99, 43, 110, 76, 89, 122, 114,
                                        65, 85, 107, 107, 69, 112, 89, 115, 110, 79, 116, 81, 113, 48, 119, 113, 122, 118,
                                        70, 85, 117, 56, 38, 35, 120, 65, 59, 121, 97, 121, 109, 104, 43, 88, 100, 85, 49,
                                        112, 52, 106, 79, 109, 108, 50, 99, 57, 54, 48, 75, 110, 105, 88, 70, 118, 69, 48,
                                        112, 85, 69, 103, 48, 53, 99, 97, 86, 120, 86, 52, 76, 47, 48, 79, 82, 112, 72, 47,
                                        85, 115, 88, 72, 47, 83, 85, 110, 47, 86, 80, 70, 88, 107, 72, 53, 48, 47, 109, 110,
                                        98, 102, 109, 76, 114, 108, 104, 38, 35, 120, 65, 59, 113, 86, 118, 112, 55, 54,
                                        99, 116, 110, 98, 102, 86, 106, 72, 74, 73, 74, 83, 120, 57, 82, 110, 53, 86, 67,
                                        114, 84, 55, 87, 66, 88, 110, 109, 75, 118, 112, 76, 56, 111, 47, 43, 99, 103, 47,
                                        75, 47, 108, 76, 56, 113, 111, 78, 80, 49, 112, 112, 114, 110, 86, 100, 80, 117,
                                        74, 111, 76, 76, 84, 52, 70, 53, 83, 83, 81, 77, 82, 75, 38, 35, 120, 65, 59, 106,
                                        108, 50, 52, 111, 113, 75, 48, 106, 76, 117, 97, 55, 98, 65, 52, 113, 120, 122, 122,
                                        76, 47, 122, 108, 110, 43, 89, 71, 111, 79, 54, 97, 74, 98, 87, 109, 105, 50, 53,
                                        43, 119, 119, 84, 54, 49, 79, 80, 109, 56, 111, 57, 77, 47, 119, 68, 73, 114, 70,
                                        87, 71, 121, 47, 110, 122, 43, 98, 115, 114, 108, 50, 56, 122, 88, 73, 74, 55, 38,
                                        35, 120, 65, 59, 73, 115, 75, 68, 47, 103, 86, 81, 68, 70, 85, 122, 48, 76, 47, 110,
                                        74, 76, 56, 50, 116, 76, 117, 85, 107, 108, 49, 86, 100, 84, 116, 119, 102, 106,
                                        116, 98, 50, 71, 78, 49, 98, 101, 118, 50, 48, 87, 79, 85, 102, 81, 43, 75, 118,
                                        114, 76, 56, 115, 118, 122, 65, 48, 47, 122, 53, 53, 83, 116, 57, 101, 116, 73, 47,
                                        81, 107, 90, 109, 38, 35, 120, 65, 59, 103, 118, 98, 81, 116, 122, 77, 78, 120, 72,
                                        81, 117, 110, 75, 103, 113, 75, 77, 114, 75, 97, 100, 67, 77, 75, 115, 114, 120,
                                        86, 53, 80, 47, 65, 77, 53, 77, 43, 85, 111, 116, 100, 47, 76, 75, 55, 118, 108,
                                        83, 116, 55, 111, 84, 114, 102, 87, 55, 68, 114, 54, 100, 81, 107, 54, 47, 76, 48,
                                        50, 53, 102, 78, 82, 105, 114, 52, 113, 119, 38, 35, 120, 65, 59, 75, 43, 48, 118,
                                        43, 99, 87, 47, 47, 74, 83, 87, 110, 47, 77, 88, 100, 102, 56, 65, 74, 122, 67, 114,
                                        49, 118, 70, 87, 69, 47, 110, 88, 47, 119, 67, 83, 111, 56, 48, 102, 56, 119, 77,
                                        110, 56, 77, 86, 102, 66, 71, 66, 88, 89, 113, 122, 118, 56, 105, 47, 47, 65, 67,
                                        98, 102, 108, 110, 47, 109, 76, 47, 53, 108, 116, 105, 114, 55, 38, 35, 120, 65,
                                        59, 121, 119, 113, 55, 70, 88, 120, 51, 47, 119, 65, 53, 97, 102, 56, 65, 107, 48,
                                        76, 102, 47, 116, 108, 50, 47, 119, 68, 121, 100, 109, 119, 75, 56, 87, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 118, 99, 102, 56, 65, 110, 69, 76, 47, 65, 77, 109,
                                        86, 113, 88, 47, 98, 71, 110, 47, 54, 105, 114, 98, 70, 88, 49, 53, 104, 86, 50,
                                        75, 118, 38, 35, 120, 65, 59, 103, 51, 56, 57, 80, 47, 74, 116, 43, 90, 118, 43,
                                        89, 118, 56, 65, 53, 108, 114, 103, 86, 103, 109, 75, 118, 113, 122, 47, 65, 74,
                                        119, 55, 47, 119, 67, 85, 86, 49, 47, 47, 65, 74, 106, 111, 47, 119, 68, 107, 121,
                                        77, 86, 102, 81, 79, 70, 87, 78, 102, 109, 100, 47, 119, 67, 83, 49, 56, 50, 102,
                                        57, 115, 98, 85, 80, 43, 111, 87, 38, 35, 120, 65, 59, 84, 70, 88, 53, 55, 52, 70,
                                        100, 105, 114, 115, 86, 88, 119, 119, 122, 84, 122, 74, 68, 66, 71, 48, 115, 48,
                                        106, 66, 89, 52, 48, 66, 90, 109, 89, 55, 65, 75, 66, 117, 83, 99, 86, 101, 114,
                                        101, 85, 118, 43, 99, 90, 102, 122, 78, 49, 53, 69, 117, 76, 117, 51, 105, 48, 79,
                                        48, 102, 99, 80, 102, 115, 86, 109, 75, 43, 48, 67, 66, 38, 35, 120, 65, 59, 110,
                                        66, 57, 110, 52, 52, 113, 57, 78, 48, 106, 47, 65, 74, 119, 54, 48, 67, 78, 81, 100,
                                        89, 56, 119, 51, 100, 121, 43, 51, 73, 87, 107, 77, 100, 117, 66, 52, 103, 71, 81,
                                        51, 72, 51, 48, 119, 113, 121, 83, 49, 47, 53, 120, 83, 47, 75, 113, 70, 81, 74,
                                        66, 113, 70, 121, 97, 65, 99, 112, 98, 107, 65, 49, 56, 102, 51, 97, 82, 38, 35,
                                        120, 65, 59, 106, 70, 87, 102, 43, 82, 80, 121, 57, 56, 116, 43, 82, 57, 78, 110,
                                        48, 55, 81, 73, 53, 73, 114, 87, 53, 109, 78, 120, 75, 115, 115, 104, 108, 80, 113,
                                        70, 86, 83, 111, 76, 101, 121, 68, 70, 87, 83, 89, 113, 107, 118, 110, 97, 121, 87,
                                        43, 56, 109, 97, 57, 90, 77, 65, 86, 117, 100, 79, 117, 52, 83, 68, 85, 68, 52, 52,
                                        72, 88, 38, 35, 120, 65, 59, 113, 78, 43, 43, 75, 118, 122, 115, 119, 75, 43, 48,
                                        118, 43, 99, 87, 47, 119, 68, 121, 85, 108, 112, 47, 122, 70, 51, 88, 47, 74, 122,
                                        67, 114, 49, 118, 70, 87, 69, 47, 110, 88, 47, 53, 75, 106, 122, 82, 47, 122, 65,
                                        121, 102, 119, 120, 86, 56, 69, 89, 70, 100, 105, 114, 79, 47, 121, 76, 47, 56, 109,
                                        51, 53, 90, 47, 119, 67, 89, 38, 35, 120, 65, 59, 118, 47, 109, 87, 50, 75, 118,
                                        118, 76, 67, 114, 115, 86, 102, 72, 102, 47, 79, 87, 110, 47, 107, 48, 76, 102, 47,
                                        116, 108, 50, 47, 56, 65, 121, 100, 109, 119, 75, 56, 87, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 118, 99, 102, 43, 99, 81, 118, 47, 65, 67, 90, 87, 112, 102, 56, 65,
                                        98, 71, 110, 47, 65, 79, 111, 113, 50, 120, 86, 57, 38, 35, 120, 65, 59, 101, 89,
                                        86, 100, 105, 114, 52, 78, 47, 80, 84, 47, 65, 77, 109, 51, 53, 109, 47, 53, 105,
                                        47, 56, 65, 109, 87, 117, 66, 87, 67, 89, 113, 43, 114, 80, 43, 99, 79, 47, 43, 85,
                                        86, 49, 47, 47, 109, 79, 106, 47, 119, 67, 84, 73, 120, 86, 57, 65, 52, 86, 89, 49,
                                        43, 90, 51, 47, 107, 116, 102, 78, 110, 47, 98, 71, 49, 68, 47, 38, 35, 120, 65,
                                        59, 65, 75, 104, 90, 77, 86, 102, 110, 118, 103, 86, 50, 75, 112, 104, 53, 102, 48,
                                        72, 86, 80, 77, 71, 116, 87, 109, 106, 97, 86, 67, 98, 106, 85, 76, 54, 81, 82, 81,
                                        82, 68, 97, 112, 54, 107, 107, 57, 108, 86, 81, 83, 120, 55, 68, 70, 88, 50, 120,
                                        43, 86, 72, 53, 74, 43, 87, 80, 73, 86, 108, 72, 79, 73, 48, 118, 47, 77, 84, 38,
                                        35, 120, 65, 59, 113, 80, 114, 87, 113, 121, 76, 85, 113, 83, 80, 105, 83, 51, 66,
                                        47, 117, 48, 47, 52, 90, 117, 53, 54, 65, 70, 88, 111, 117, 75, 117, 120, 86, 76,
                                        98, 55, 122, 78, 53, 98, 115, 71, 75, 88, 50, 114, 87, 100, 111, 119, 114, 86, 90,
                                        55, 105, 75, 77, 105, 110, 88, 90, 109, 71, 75, 116, 54, 78, 53, 107, 56, 117, 54,
                                        52, 107, 114, 54, 38, 35, 120, 65, 59, 76, 113, 108, 110, 113, 105, 81, 69, 76, 77,
                                        49, 108, 80, 70, 99, 66, 67, 49, 83, 65, 120, 105, 90, 117, 78, 97, 98, 86, 120,
                                        86, 77, 99, 86, 83, 47, 122, 70, 47, 121, 106, 43, 112, 47, 56, 119, 107, 47, 47,
                                        65, 67, 98, 98, 70, 88, 53, 120, 89, 70, 102, 97, 88, 47, 79, 76, 102, 47, 107, 112,
                                        76, 84, 47, 109, 76, 117, 118, 43, 38, 35, 120, 65, 59, 84, 109, 70, 88, 114, 101,
                                        75, 115, 74, 47, 79, 118, 47, 119, 65, 108, 82, 53, 111, 47, 53, 103, 90, 80, 52,
                                        89, 113, 43, 67, 77, 67, 117, 120, 86, 110, 102, 53, 70, 47, 43, 84, 98, 56, 115,
                                        47, 119, 68, 77, 88, 47, 122, 76, 98, 70, 88, 51, 108, 104, 86, 50, 75, 118, 106,
                                        118, 47, 110, 76, 84, 47, 119, 65, 109, 104, 98, 47, 57, 38, 35, 120, 65, 59, 115,
                                        117, 51, 47, 65, 79, 84, 115, 50, 66, 88, 105, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 55, 106, 47, 119, 65, 52, 104, 102, 56, 65, 107, 121, 116, 83, 47, 119,
                                        67, 50, 78, 80, 56, 65, 57, 82, 86, 116, 105, 114, 54, 56, 119, 113, 55, 70, 88,
                                        119, 98, 43, 101, 110, 47, 107, 50, 47, 77, 51, 47, 77, 88, 47, 65, 77, 121, 49,
                                        38, 35, 120, 65, 59, 119, 75, 119, 84, 70, 88, 49, 88, 47, 119, 65, 52, 100, 77,
                                        118, 43, 70, 47, 77, 67, 49, 72, 73, 88, 48, 90, 73, 55, 48, 77, 79, 51, 54, 115,
                                        75, 118, 111, 76, 70, 87, 80, 102, 109, 76, 98, 121, 88, 80, 53, 102, 101, 90, 55,
                                        97, 76, 101, 87, 98, 83, 98, 54, 78, 65, 102, 53, 110, 116, 110, 65, 47, 88, 105,
                                        114, 56, 56, 56, 38, 35, 120, 65, 59, 67, 117, 120, 86, 57, 75, 102, 56, 52, 102,
                                        56, 65, 108, 79, 51, 107, 102, 87, 118, 78, 99, 54, 66, 112, 89, 87, 88, 84, 114,
                                        74, 105, 80, 115, 69, 113, 74, 90, 122, 56, 121, 68, 71, 80, 108, 88, 120, 120, 86,
                                        57, 77, 52, 86, 83, 76, 122, 120, 53, 117, 115, 80, 75, 72, 108, 88, 85, 102, 77,
                                        78, 56, 112, 101, 71, 120, 106, 53, 76, 38, 35, 120, 65, 59, 67, 112, 111, 48, 107,
                                        106, 69, 74, 72, 71, 67, 102, 53, 110, 89, 67, 118, 98, 114, 105, 114, 52, 108, 56,
                                        56, 102, 110, 72, 53, 43, 56, 52, 88, 99, 114, 54, 104, 113, 99, 116, 118, 89, 117,
                                        84, 54, 101, 109, 87, 114, 78, 68, 98, 73, 112, 47, 90, 75, 113, 97, 121, 102, 78,
                                        121, 84, 103, 86, 104, 79, 75, 118, 113, 76, 47, 110, 68, 102, 38, 35, 120, 65, 59,
                                        47, 106, 107, 101, 90, 47, 56, 65, 109, 73, 116, 102, 43, 73, 83, 89, 86, 102, 82,
                                        101, 75, 112, 102, 53, 105, 47, 53, 82, 47, 85, 47, 43, 89, 83, 102, 47, 65, 74,
                                        78, 116, 105, 114, 56, 52, 115, 67, 118, 116, 68, 47, 110, 70, 108, 108, 98, 56,
                                        112, 98, 85, 65, 103, 108, 98, 121, 54, 68, 65, 72, 111, 101, 89, 78, 68, 57, 66,
                                        119, 38, 35, 120, 65, 59, 113, 57, 100, 120, 86, 106, 110, 53, 106, 54, 82, 78, 114,
                                        72, 107, 68, 122, 70, 112, 107, 67, 56, 55, 105, 54, 48, 43, 53, 83, 66, 79, 116,
                                        90, 102, 83, 89, 120, 106, 98, 47, 65, 67, 103, 77, 86, 102, 110, 114, 103, 86, 50,
                                        75, 118, 81, 47, 43, 99, 102, 55, 67, 54, 118, 80, 122, 100, 56, 118, 67, 51, 81,
                                        118, 54, 69, 122, 122, 122, 38, 35, 120, 65, 59, 69, 65, 48, 87, 79, 79, 74, 121,
                                        122, 69, 57, 118, 68, 53, 110, 70, 88, 51, 86, 104, 86, 50, 75, 118, 106, 118, 56,
                                        65, 53, 121, 48, 47, 56, 109, 104, 98, 47, 119, 68, 98, 76, 116, 47, 43, 84, 115,
                                        50, 66, 88, 105, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 55, 106, 47, 122, 105,
                                        70, 47, 53, 77, 114, 85, 118, 43, 50, 78, 80, 38, 35, 120, 65, 59, 47, 119, 66, 82,
                                        86, 116, 105, 114, 54, 56, 119, 113, 55, 70, 88, 119, 98, 43, 101, 110, 47, 107,
                                        50, 47, 77, 51, 47, 77, 88, 47, 122, 76, 88, 65, 114, 66, 77, 86, 102, 84, 72, 47,
                                        79, 71, 49, 56, 110, 68, 122, 84, 89, 71, 103, 99, 71, 122, 110, 84, 120, 73, 80,
                                        114, 73, 51, 51, 102, 68, 57, 43, 73, 86, 57, 75, 52, 86, 87, 38, 35, 120, 65, 59,
                                        121, 120, 82, 121, 120, 80, 70, 73, 111, 101, 79, 82, 83, 114, 113, 101, 104, 86,
                                        104, 81, 103, 52, 113, 43, 77, 80, 122, 66, 47, 119, 67, 99, 98, 47, 80, 117, 104,
                                        54, 49, 99, 47, 111, 76, 84, 112, 78, 90, 48, 78, 51, 76, 87, 85, 57, 115, 81, 56,
                                        113, 120, 115, 102, 104, 106, 108, 106, 114, 122, 53, 76, 87, 110, 73, 67, 104, 54,
                                        43, 38, 35, 120, 65, 59, 119, 67, 118, 80, 80, 77, 118, 107, 55, 122, 78, 53, 89,
                                        108, 116, 111, 100, 102, 48, 43, 84, 84, 112, 114, 117, 80, 49, 111, 73, 112, 117,
                                        73, 99, 120, 56, 105, 116, 83, 111, 74, 75, 55, 106, 111, 49, 77, 86, 102, 85, 47,
                                        56, 65, 122, 105, 80, 76, 98, 116, 43, 87, 100, 52, 107, 89, 112, 76, 72, 113, 115,
                                        52, 110, 54, 86, 76, 71, 67, 38, 35, 120, 65, 59, 65, 104, 117, 118, 56, 116, 66,
                                        57, 71, 70, 88, 116, 117, 75, 118, 78, 118, 43, 99, 104, 57, 65, 49, 68, 87, 47,
                                        121, 112, 49, 97, 68, 84, 52, 50, 109, 117, 98, 85, 120, 88, 102, 111, 111, 75, 115,
                                        121, 81, 83, 66, 112, 75, 65, 100, 119, 108, 87, 43, 106, 70, 88, 119, 51, 103, 86,
                                        69, 97, 100, 112, 49, 47, 113, 86, 57, 68, 89, 97, 38, 35, 120, 65, 59, 102, 98,
                                        121, 88, 100, 55, 99, 78, 119, 103, 116, 111, 86, 76, 121, 79, 120, 55, 75, 113,
                                        49, 74, 120, 86, 57, 115, 47, 107, 72, 43, 87, 78, 49, 53, 68, 56, 111, 80, 70, 113,
                                        82, 72, 54, 97, 49, 83, 81, 88, 78, 47, 71, 112, 68, 76, 70, 82, 101, 77, 99, 73,
                                        73, 50, 89, 111, 75, 108, 105, 79, 53, 80, 98, 67, 114, 48, 122, 70, 38, 35, 120,
                                        65, 59, 85, 118, 56, 65, 77, 88, 47, 75, 80, 54, 110, 47, 65, 77, 119, 107, 47, 119,
                                        68, 121, 98, 98, 70, 88, 53, 120, 89, 70, 102, 86, 110, 47, 65, 68, 104, 57, 114,
                                        115, 99, 51, 108, 98, 87, 57, 68, 90, 54, 122, 87, 86, 52, 116, 50, 113, 110, 47,
                                        65, 72, 51, 99, 120, 104, 78, 118, 89, 78, 65, 97, 47, 80, 67, 114, 54, 66, 120,
                                        86, 38, 35, 120, 65, 59, 50, 75, 118, 108, 84, 56, 51, 47, 65, 80, 110, 71, 102,
                                        122, 72, 70, 114, 108, 122, 114, 80, 107, 117, 50, 70, 47, 112, 108, 52, 55, 84,
                                        83, 97, 97, 114, 112, 72, 78, 98, 117, 53, 76, 77, 113, 66, 121, 113, 118, 72, 85,
                                        47, 67, 70, 80, 73, 100, 75, 98, 86, 119, 75, 56, 54, 48, 122, 56, 105, 80, 122,
                                        97, 49, 67, 53, 87, 67, 80, 38, 35, 120, 65, 59, 121, 53, 99, 119, 86, 73, 68, 83,
                                        51, 80, 67, 67, 78, 81, 101, 53, 97, 82, 108, 113, 66, 55, 86, 120, 86, 57, 81, 47,
                                        107, 108, 43, 83, 116, 110, 43, 88, 116, 104, 76, 100, 88, 107, 113, 88, 110, 109,
                                        79, 43, 81, 74, 100, 51, 77, 100, 102, 84, 105, 106, 66, 53, 101, 106, 67, 87, 65,
                                        98, 106, 85, 86, 90, 105, 66, 121, 111, 78, 104, 38, 35, 120, 65, 59, 84, 67, 114,
                                        48, 47, 70, 88, 89, 113, 43, 79, 47, 43, 99, 116, 80, 47, 74, 111, 87, 47, 119, 68,
                                        50, 121, 55, 102, 47, 65, 74, 79, 122, 89, 70, 101, 76, 89, 113, 55, 70, 88, 89,
                                        113, 55, 70, 88, 117, 80, 47, 79, 73, 88, 47, 107, 121, 116, 83, 47, 55, 89, 48,
                                        47, 56, 65, 49, 70, 87, 50, 75, 118, 114, 122, 67, 114, 115, 86, 38, 35, 120, 65,
                                        59, 102, 66, 118, 53, 54, 102, 56, 65, 107, 50, 47, 77, 51, 47, 77, 88, 47, 119,
                                        65, 121, 49, 119, 75, 119, 84, 70, 88, 112, 51, 47, 79, 79, 47, 110, 101, 51, 56,
                                        113, 102, 109, 80, 97, 116, 101, 121, 105, 72, 84, 100, 86, 106, 97, 119, 117, 112,
                                        71, 78, 70, 81, 121, 69, 78, 69, 55, 86, 50, 65, 69, 105, 113, 67, 101, 119, 74,
                                        120, 86, 38, 35, 120, 65, 59, 57, 118, 52, 86, 100, 105, 114, 115, 86, 102, 74, 47,
                                        47, 79, 89, 88, 47, 75, 90, 54, 72, 47, 50, 122, 106, 47, 121, 102, 102, 65, 86,
                                        81, 72, 47, 79, 76, 102, 53, 105, 87, 118, 108, 55, 122, 86, 99, 101, 88, 116, 82,
                                        108, 69, 86, 104, 114, 47, 65, 75, 97, 50, 56, 114, 71, 105, 112, 100, 120, 49, 69,
                                        89, 78, 101, 110, 113, 104, 117, 38, 35, 120, 65, 59, 80, 122, 52, 52, 113, 43, 118,
                                        56, 75, 117, 120, 86, 103, 79, 118, 102, 107, 80, 56, 65, 108, 80, 114, 108, 53,
                                        74, 101, 51, 118, 108, 43, 74, 76, 113, 86, 105, 48, 107, 108, 116, 74, 78, 98, 66,
                                        109, 74, 113, 120, 75, 81, 118, 71, 104, 74, 55, 110, 106, 88, 70, 85, 55, 56, 113,
                                        102, 108, 122, 53, 73, 56, 112, 66, 118, 56, 80, 97, 80, 38, 35, 120, 65, 59, 66,
                                        89, 121, 79, 79, 76, 122, 103, 78, 74, 77, 86, 56, 68, 78, 75, 88, 107, 73, 57, 117,
                                        87, 75, 112, 56, 49, 51, 97, 114, 100, 112, 90, 116, 77, 103, 117, 53, 73, 51, 109,
                                        106, 116, 121, 119, 57, 82, 111, 52, 121, 113, 117, 52, 88, 113, 86, 86, 112, 70,
                                        66, 80, 117, 77, 86, 86, 99, 86, 83, 47, 122, 70, 47, 121, 106, 43, 112, 47, 38,
                                        35, 120, 65, 59, 56, 119, 107, 47, 47, 74, 116, 115, 86, 102, 110, 70, 103, 86, 110,
                                        118, 53, 74, 47, 109, 71, 80, 73, 51, 110, 113, 49, 49, 75, 53, 100, 104, 112, 78,
                                        48, 68, 97, 97, 113, 111, 66, 97, 107, 69, 104, 66, 69, 110, 69, 100, 52, 51, 67,
                                        116, 52, 48, 113, 66, 49, 120, 86, 57, 50, 119, 84, 119, 88, 69, 69, 99, 56, 69,
                                        105, 121, 119, 84, 38, 35, 120, 65, 59, 75, 74, 73, 112, 85, 73, 90, 87, 82, 104,
                                        86, 87, 85, 106, 89, 103, 106, 112, 104, 86, 102, 105, 114, 115, 86, 100, 105, 113,
                                        86, 43, 90, 118, 77, 117, 106, 43, 87, 116, 68, 117, 57, 97, 49, 101, 100, 98, 101,
                                        120, 115, 48, 76, 121, 77, 83, 75, 115, 102, 50, 85, 81, 102, 116, 79, 53, 50, 85,
                                        100, 122, 105, 113, 73, 48, 88, 85, 82, 113, 38, 35, 120, 65, 59, 101, 106, 87, 71,
                                        112, 66, 80, 83, 70, 57, 98, 120, 88, 73, 105, 114, 88, 106, 54, 113, 66, 43, 78,
                                        100, 113, 48, 53, 89, 113, 106, 77, 86, 102, 72, 102, 47, 65, 68, 108, 112, 47, 119,
                                        67, 84, 81, 116, 47, 43, 50, 88, 98, 47, 65, 80, 74, 50, 98, 65, 114, 120, 98, 70,
                                        88, 89, 113, 55, 70, 88, 89, 113, 57, 76, 47, 73, 72, 56, 38, 35, 120, 65, 59, 119,
                                        116, 65, 56, 105, 101, 99, 98, 122, 86, 57, 99, 69, 120, 116, 74, 57, 79, 107, 116,
                                        69, 43, 114, 111, 74, 72, 57, 82, 53, 52, 90, 66, 85, 70, 108, 50, 52, 120, 72, 70,
                                        88, 118, 118, 47, 65, 69, 78, 104, 43, 86, 110, 56, 117, 111, 47, 57, 73, 54, 102,
                                        57, 86, 77, 75, 117, 47, 119, 67, 104, 115, 80, 121, 115, 47, 108, 49, 72, 38, 35,
                                        120, 65, 59, 47, 112, 72, 84, 47, 113, 112, 105, 114, 53, 101, 47, 77, 51, 122, 70,
                                        112, 47, 109, 84, 122, 55, 114, 87, 117, 97, 100, 122, 70, 108, 102, 122, 43, 114,
                                        66, 54, 113, 104, 88, 52, 56, 86, 72, 120, 75, 67, 97, 100, 80, 72, 65, 114, 71,
                                        77, 86, 100, 105, 114, 51, 118, 56, 112, 118, 43, 99, 110, 114, 122, 121, 47, 89,
                                        50, 43, 104, 43, 98, 38, 35, 120, 65, 59, 111, 74, 100, 82, 48, 50, 65, 67, 79, 50,
                                        49, 75, 73, 104, 114, 113, 74, 66, 115, 69, 107, 86, 121, 66, 75, 113, 57, 106, 85,
                                        77, 66, 47, 78, 105, 114, 51, 98, 83, 118, 122, 49, 47, 75, 98, 85, 52, 82, 74, 68,
                                        53, 107, 116, 89, 97, 105, 112, 83, 54, 76, 87, 122, 68, 50, 73, 109, 67, 102, 104,
                                        104, 86, 70, 88, 80, 53, 121, 47, 38, 35, 120, 65, 59, 108, 88, 98, 120, 109, 83,
                                        84, 122, 84, 112, 122, 75, 79, 48, 99, 54, 121, 116, 47, 119, 77, 102, 74, 118, 119,
                                        120, 86, 56, 120, 102, 56, 65, 79, 82, 47, 53, 105, 43, 85, 47, 79, 50, 118, 54,
                                        86, 80, 53, 99, 110, 101, 54, 104, 115, 98, 101, 83, 71, 97, 52, 97, 74, 52, 103,
                                        120, 90, 119, 121, 56, 82, 73, 70, 99, 103, 98, 57, 86, 38, 35, 120, 65, 59, 71,
                                        66, 88, 107, 73, 74, 66, 113, 78, 105, 79, 104, 120, 86, 57, 65, 102, 108, 104, 47,
                                        122, 108, 82, 113, 71, 107, 87, 115, 79, 107, 43, 99, 52, 74, 100, 84, 115, 52, 103,
                                        69, 104, 49, 87, 71, 104, 117, 108, 85, 98, 65, 83, 113, 120, 86, 90, 97, 102, 122,
                                        86, 68, 101, 80, 73, 52, 113, 57, 119, 48, 110, 56, 57, 47, 121, 108, 49, 79, 38,
                                        35, 120, 65, 59, 73, 83, 81, 43, 90, 76, 97, 65, 57, 48, 117, 43, 100, 115, 119,
                                        57, 118, 51, 121, 112, 43, 71, 70, 85, 86, 100, 102, 110, 78, 43, 86, 86, 116, 69,
                                        90, 74, 80, 78, 79, 110, 115, 111, 55, 82, 84, 67, 86, 118, 43, 66, 106, 53, 116,
                                        43, 71, 75, 118, 79, 118, 79, 102, 47, 79, 87, 110, 108, 67, 119, 104, 107, 104,
                                        56, 114, 87, 115, 50, 38, 35, 120, 65, 59, 115, 88, 104, 66, 69, 100, 122, 77, 114,
                                        87, 57, 113, 68, 50, 74, 68, 48, 109, 98, 47, 65, 70, 101, 75, 47, 80, 70, 88, 108,
                                        51, 53, 88, 47, 110, 105, 98, 72, 56, 121, 57, 83, 56, 51, 43, 101, 98, 109, 52,
                                        117, 122, 101, 97, 100, 74, 90, 82, 102, 86, 52, 119, 119, 106, 76, 84, 119, 121,
                                        74, 72, 72, 72, 121, 85, 74, 71, 113, 120, 38, 35, 120, 65, 59, 116, 48, 55, 57,
                                        97, 107, 107, 52, 70, 101, 121, 102, 57, 68, 89, 102, 108, 90, 47, 76, 113, 80, 56,
                                        65, 48, 106, 112, 47, 49, 85, 119, 113, 104, 78, 88, 47, 65, 79, 99, 112, 118, 121,
                                        119, 117, 57, 75, 118, 98, 87, 74, 100, 81, 57, 87, 101, 67, 87, 75, 79, 116, 117,
                                        111, 72, 74, 48, 75, 105, 118, 55, 122, 120, 79, 75, 118, 107, 76, 38, 35, 120, 65,
                                        59, 65, 114, 115, 86, 101, 116, 102, 108, 78, 47, 122, 107, 78, 53, 105, 56, 107,
                                        82, 82, 54, 84, 113, 69, 90, 49, 102, 121, 54, 112, 47, 100, 50, 55, 78, 120, 110,
                                        116, 119, 84, 47, 65, 76, 111, 99, 49, 72, 72, 47, 65, 67, 71, 50, 56, 67, 77, 86,
                                        102, 82, 79, 103, 102, 56, 53, 70, 102, 108, 76, 114, 69, 83, 107, 54, 121, 78, 79,
                                        110, 38, 35, 120, 65, 59, 89, 65, 116, 98, 51, 56, 98, 119, 108, 97, 57, 105, 57,
                                        71, 105, 43, 53, 56, 75, 112, 50, 47, 53, 118, 47, 108, 99, 105, 70, 106, 53, 113,
                                        48, 119, 103, 100, 101, 78, 122, 71, 120, 43, 52, 69, 110, 70, 87, 72, 43, 97, 102,
                                        43, 99, 111, 118, 121, 121, 48, 105, 71, 82, 100, 77, 109, 109, 49, 50, 56, 85, 69,
                                        74, 70, 97, 120, 116, 72, 38, 35, 120, 65, 59, 70, 121, 55, 99, 112, 112, 103, 103,
                                        52, 43, 54, 66, 118, 108, 105, 114, 53, 109, 47, 77, 122, 56, 50, 118, 78, 80, 53,
                                        103, 88, 54, 83, 54, 111, 54, 50, 43, 110, 87, 55, 69, 50, 87, 108, 119, 69, 105,
                                        71, 79, 117, 51, 73, 49, 51, 101, 83, 110, 86, 106, 57, 65, 65, 50, 119, 75, 43,
                                        103, 118, 76, 102, 47, 79, 85, 80, 53, 90, 54, 38, 35, 120, 65, 59, 100, 53, 100,
                                        48, 118, 84, 55, 104, 100, 81, 43, 115, 87, 100, 110, 66, 98, 122, 99, 98, 100, 83,
                                        118, 79, 75, 74, 85, 97, 104, 57, 84, 112, 85, 89, 86, 84, 72, 47, 111, 98, 68, 56,
                                        114, 80, 53, 100, 82, 47, 54, 82, 48, 47, 54, 113, 89, 113, 43, 102, 102, 122, 52,
                                        56, 43, 54, 70, 53, 52, 56, 54, 120, 97, 122, 111, 103, 109, 70, 38, 35, 120, 65,
                                        59, 109, 108, 108, 70, 98, 72, 54, 119, 103, 106, 102, 109, 106, 121, 77, 100, 103,
                                        87, 50, 111, 52, 119, 75, 56, 53, 120, 86, 50, 75, 112, 106, 53, 107, 48, 115, 54,
                                        84, 53, 105, 49, 84, 83, 105, 75, 72, 84, 55, 117, 101, 49, 73, 80, 47, 70, 77, 114,
                                        82, 57, 54, 47, 121, 52, 113, 108, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 38, 35, 120, 65, 59, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86,
                                        50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 77, 102, 76, 101, 108, 78, 113,
                                        47, 109, 76, 83, 57, 75, 38, 35, 120, 65, 59, 85, 69, 109, 47, 117, 52, 76, 85, 65,
                                        100, 102, 51, 48, 105, 112, 50, 112, 47, 78, 105, 114, 48, 51, 47, 65, 74, 121, 103,
                                        56, 111, 121, 54, 74, 43, 90, 77, 50, 112, 111, 104, 70, 106, 114, 56, 97, 51, 99,
                                        84, 48, 43, 72, 49, 107, 65, 106, 110, 84, 53, 56, 103, 72, 80, 56, 65, 114, 52,
                                        113, 56, 104, 120, 86, 50, 75, 117, 120, 86, 38, 35, 120, 65, 59, 50, 75, 117, 120,
                                        86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117,
                                        120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75,
                                        117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50, 75, 117, 120, 86, 50,
                                        75, 117, 120, 86, 50, 75, 118, 88, 47, 56, 65, 110, 70, 47, 121, 38, 35, 120, 65,
                                        59, 104, 74, 114, 102, 53, 107, 82, 97, 112, 73, 104, 78, 108, 111, 69, 90, 117,
                                        53, 87, 112, 56, 74, 109, 99, 71, 79, 66, 75, 43, 78, 83, 88, 72, 43, 114, 105, 114,
                                        54, 81, 47, 79, 114, 56, 116, 107, 56, 43, 101, 83, 53, 114, 67, 69, 75, 117, 115,
                                        87, 90, 78, 49, 112, 77, 112, 111, 80, 51, 121, 103, 103, 120, 69, 57, 108, 108,
                                        88, 52, 38, 35, 120, 65, 59, 102, 89, 48, 80, 98, 67, 114, 52, 85, 117, 98, 97, 52,
                                        116, 98, 109, 87, 50, 117, 89, 109, 104, 117, 73, 72, 97, 79, 97, 71, 81, 70, 88,
                                        82, 48, 80, 70, 108, 90, 84, 117, 67, 67, 75, 69, 89, 70, 85, 56, 86, 100, 105, 114,
                                        115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86,
                                        100, 105, 114, 115, 86, 100, 105, 38, 35, 120, 65, 59, 114, 115, 86, 100, 105, 114,
                                        115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86,
                                        100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105,
                                        113, 116, 90, 50, 100, 49, 101, 51, 99, 78, 110, 97, 82, 78, 80, 100, 88, 76, 114,
                                        70, 66, 66, 71, 67, 122, 118, 73, 53, 52, 113, 113, 103, 100, 83, 83, 97, 38, 35,
                                        120, 65, 59, 89, 113, 43, 55, 80, 121, 90, 47, 76, 101, 76, 121, 70, 53, 77, 103,
                                        48, 54, 85, 75, 50, 114, 88, 82, 43, 115, 54, 116, 77, 117, 52, 77, 55, 68, 43, 55,
                                        85, 57, 49, 106, 88, 52, 82, 52, 55, 110, 118, 104, 86, 110, 101, 75, 118, 68, 102,
                                        122, 55, 47, 73, 77, 101, 97, 104, 76, 53, 109, 56, 115, 120, 113, 110, 109, 74,
                                        70, 114, 101, 38, 35, 120, 65, 59, 87, 101, 121, 114, 101, 75, 111, 111, 67, 67,
                                        100, 104, 77, 65, 75, 98, 55, 78, 51, 120, 86, 56, 107, 51, 100, 112, 100, 87, 100,
                                        122, 76, 97, 51, 99, 76, 50, 57, 122, 65, 120, 83, 97, 67, 86, 83, 106, 111, 121,
                                        55, 70, 87, 86, 113, 69, 69, 89, 70, 85, 115, 86, 100, 105, 114, 115, 86, 100, 105,
                                        114, 115, 86, 100, 105, 114, 115, 86, 100, 38, 35, 120, 65, 59, 105, 114, 115, 86,
                                        100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105,
                                        114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115, 86, 100, 105, 114, 115,
                                        86, 100, 105, 114, 115, 86, 100, 105, 113, 118, 89, 50, 78, 55, 102, 51, 107, 78,
                                        108, 89, 119, 83, 88, 78, 51, 99, 77, 69, 103, 116, 52, 108, 76, 117, 55, 72, 111,
                                        70, 38, 35, 120, 65, 59, 86, 97, 107, 110, 70, 88, 49, 53, 43, 81, 51, 53, 67, 120,
                                        43, 84, 111, 48, 56, 119, 43, 89, 86, 83, 98, 122, 78, 75, 104, 69, 69, 65, 73, 90,
                                        76, 78, 72, 71, 52, 66, 54, 78, 75, 82, 115, 122, 68, 89, 100, 66, 51, 74, 75, 118,
                                        97, 115, 86, 100, 105, 114, 115, 86, 89, 76, 43, 89, 51, 53, 77, 43, 83, 118, 80,
                                        107, 102, 113, 38, 35, 120, 65, 59, 54, 110, 98, 109, 50, 49, 86, 86, 52, 120, 97,
                                        114, 97, 48, 83, 99, 65, 100, 70, 101, 111, 75, 121, 76, 55, 77, 78, 117, 120, 71,
                                        75, 118, 110, 76, 122, 98, 47, 119, 65, 52, 114, 47, 109, 74, 112, 68, 118, 74, 111,
                                        120, 104, 49, 54, 122, 70, 83, 112, 104, 89, 81, 51, 70, 66, 47, 78, 68, 75, 81,
                                        75, 43, 121, 79, 50, 66, 88, 109, 38, 35, 120, 65, 59, 117, 111, 43, 82, 102, 79,
                                        117, 109, 77, 121, 54, 104, 111, 71, 111, 87, 118, 72, 113, 90, 98, 87, 90, 86, 50,
                                        55, 104, 105, 116, 67, 77, 86, 83, 55, 57, 68, 54, 118, 56, 65, 56, 115, 78, 120,
                                        47, 119, 65, 105, 110, 47, 112, 105, 114, 118, 48, 80, 113, 47, 56, 65, 121, 119,
                                        51, 72, 47, 73, 112, 47, 54, 89, 113, 55, 57, 68, 54, 118, 38, 35, 120, 65, 59, 47,
                                        119, 65, 115, 78, 120, 47, 121, 75, 102, 56, 65, 112, 105, 114, 118, 48, 80, 113,
                                        47, 47, 76, 68, 99, 102, 56, 105, 110, 47, 112, 105, 114, 118, 48, 80, 113, 47, 119,
                                        68, 121, 119, 51, 72, 47, 65, 67, 75, 102, 43, 109, 75, 117, 47, 81, 43, 114, 47,
                                        119, 68, 76, 68, 99, 102, 56, 105, 110, 47, 112, 105, 114, 118, 48, 80, 113, 47,
                                        47, 38, 35, 120, 65, 59, 65, 67, 119, 51, 72, 47, 73, 112, 47, 119, 67, 109, 75,
                                        117, 47, 81, 43, 114, 47, 56, 115, 78, 120, 47, 121, 75, 102, 43, 109, 75, 117, 47,
                                        81, 43, 114, 47, 65, 80, 76, 68, 99, 102, 56, 65, 73, 112, 47, 54, 89, 113, 55, 57,
                                        68, 54, 118, 47, 65, 77, 115, 78, 120, 47, 121, 75, 102, 43, 109, 75, 117, 47, 81,
                                        43, 114, 47, 56, 65, 38, 35, 120, 65, 59, 76, 68, 99, 102, 56, 105, 110, 47, 65,
                                        75, 89, 113, 55, 57, 68, 54, 118, 47, 121, 119, 51, 72, 47, 73, 112, 47, 54, 89,
                                        113, 55, 57, 68, 54, 118, 56, 65, 56, 115, 78, 120, 47, 119, 65, 105, 110, 47, 112,
                                        105, 114, 118, 48, 80, 113, 47, 56, 65, 121, 119, 51, 72, 47, 73, 112, 47, 54, 89,
                                        113, 55, 57, 68, 54, 118, 47, 119, 65, 115, 38, 35, 120, 65, 59, 78, 120, 47, 121,
                                        75, 102, 56, 65, 112, 105, 114, 118, 48, 80, 113, 47, 47, 76, 68, 99, 102, 56, 105,
                                        110, 47, 112, 105, 114, 118, 48, 80, 113, 47, 119, 68, 121, 119, 51, 72, 47, 65,
                                        67, 75, 102, 43, 109, 75, 117, 47, 81, 43, 114, 47, 119, 68, 76, 68, 99, 102, 56,
                                        105, 110, 47, 112, 105, 114, 118, 48, 80, 113, 47, 47, 65, 67, 119, 51, 38, 35, 120,
                                        65, 59, 72, 47, 73, 112, 47, 119, 67, 109, 75, 117, 47, 81, 43, 114, 47, 56, 115,
                                        78, 120, 47, 121, 75, 102, 43, 109, 75, 117, 47, 81, 43, 114, 47, 65, 80, 76, 68,
                                        99, 102, 56, 65, 73, 112, 47, 54, 89, 113, 55, 57, 68, 54, 118, 47, 65, 77, 115,
                                        78, 120, 47, 121, 75, 102, 43, 109, 75, 112, 106, 112, 118, 107, 84, 122, 116, 113,
                                        98, 113, 117, 38, 35, 120, 65, 59, 110, 54, 66, 113, 70, 49, 122, 112, 82, 111, 114,
                                        87, 90, 108, 51, 55, 108, 103, 118, 69, 68, 51, 74, 120, 86, 54, 88, 53, 82, 47,
                                        53, 120, 87, 47, 77, 80, 86, 53, 69, 107, 49, 112, 111, 100, 65, 115, 122, 57, 111,
                                        121, 115, 74, 55, 105, 110, 43, 84, 68, 69, 51, 72, 47, 103, 110, 88, 70, 88, 48,
                                        102, 43, 88, 80, 53, 80, 56, 65, 38, 35, 120, 65, 59, 107, 122, 121, 72, 66, 88,
                                        83, 114, 89, 122, 54, 109, 54, 56, 90, 57, 86, 117, 75, 80, 99, 77, 68, 49, 67, 109,
                                        108, 73, 49, 47, 121, 86, 43, 109, 117, 70, 87, 98, 52, 113, 55, 70, 88, 47, 50,
                                        81, 61, 61, 60, 47, 120, 109, 112, 71, 73, 109, 103, 58, 105, 109, 97, 103, 101,
                                        62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114,
                                        100, 102, 58, 108, 105, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60,
                                        47, 114, 100, 102, 58, 65, 108, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        60, 47, 120, 109, 112, 58, 84, 104, 117, 109, 98, 110, 97, 105, 108, 115, 62, 10,
                                        32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112,
                                        116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101,
                                        115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117,
                                        116, 61, 34, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108,
                                        110, 115, 58, 120, 109, 112, 77, 77, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110,
                                        115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48,
                                        47, 109, 109, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109,
                                        108, 110, 115, 58, 115, 116, 82, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47,
                                        110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49,
                                        46, 48, 47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 82,
                                        101, 102, 35, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108,
                                        110, 115, 58, 115, 116, 69, 118, 116, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110,
                                        115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48,
                                        47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 69, 118, 101,
                                        110, 116, 35, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112,
                                        77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 120, 109, 112, 46, 105,
                                        105, 100, 58, 51, 48, 52, 51, 48, 49, 52, 49, 56, 66, 65, 67, 68, 70, 49, 49, 65,
                                        57, 53, 54, 66, 67, 66, 68, 56, 53, 67, 54, 54, 51, 65, 56, 60, 47, 120, 109, 112,
                                        77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 10, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110,
                                        116, 73, 68, 62, 120, 109, 112, 46, 100, 105, 100, 58, 51, 48, 52, 51, 48, 49, 52,
                                        49, 56, 66, 65, 67, 68, 70, 49, 49, 65, 57, 53, 54, 66, 67, 66, 68, 56, 53, 67, 54,
                                        54, 51, 65, 56, 60, 47, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110,
                                        116, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77,
                                        58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73,
                                        68, 62, 117, 117, 105, 100, 58, 53, 68, 50, 48, 56, 57, 50, 52, 57, 51, 66, 70, 68,
                                        66, 49, 49, 57, 49, 52, 65, 56, 53, 57, 48, 68, 51, 49, 53, 48, 56, 67, 56, 60, 47,
                                        120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117,
                                        109, 101, 110, 116, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120,
                                        109, 112, 77, 77, 58, 82, 101, 110, 100, 105, 116, 105, 111, 110, 67, 108, 97, 115,
                                        115, 62, 112, 114, 111, 111, 102, 58, 112, 100, 102, 60, 47, 120, 109, 112, 77, 77,
                                        58, 82, 101, 110, 100, 105, 116, 105, 111, 110, 67, 108, 97, 115, 115, 62, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 68, 101, 114, 105,
                                        118, 101, 100, 70, 114, 111, 109, 32, 114, 100, 102, 58, 112, 97, 114, 115, 101,
                                        84, 121, 112, 101, 61, 34, 82, 101, 115, 111, 117, 114, 99, 101, 34, 62, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 82, 101, 102, 58, 105,
                                        110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 117, 117, 105, 100, 58, 97, 98, 49,
                                        102, 101, 99, 54, 98, 45, 98, 57, 99, 49, 45, 57, 52, 52, 56, 45, 57, 54, 55, 100,
                                        45, 50, 50, 51, 102, 48, 51, 50, 97, 57, 54, 97, 97, 60, 47, 115, 116, 82, 101, 102,
                                        58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 60, 115, 116, 82, 101, 102, 58, 100, 111, 99, 117, 109, 101,
                                        110, 116, 73, 68, 62, 120, 109, 112, 46, 100, 105, 100, 58, 70, 67, 55, 70, 49, 49,
                                        55, 52, 48, 55, 50, 48, 54, 56, 49, 49, 56, 48, 56, 51, 67, 55, 65, 49, 53, 66, 52,
                                        66, 50, 66, 50, 57, 60, 47, 115, 116, 82, 101, 102, 58, 100, 111, 99, 117, 109, 101,
                                        110, 116, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115,
                                        116, 82, 101, 102, 58, 111, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109,
                                        101, 110, 116, 73, 68, 62, 117, 117, 105, 100, 58, 53, 68, 50, 48, 56, 57, 50, 52,
                                        57, 51, 66, 70, 68, 66, 49, 49, 57, 49, 52, 65, 56, 53, 57, 48, 68, 51, 49, 53, 48,
                                        56, 67, 56, 60, 47, 115, 116, 82, 101, 102, 58, 111, 114, 105, 103, 105, 110, 97,
                                        108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 60, 115, 116, 82, 101, 102, 58, 114, 101, 110, 100, 105,
                                        116, 105, 111, 110, 67, 108, 97, 115, 115, 62, 112, 114, 111, 111, 102, 58, 112,
                                        100, 102, 60, 47, 115, 116, 82, 101, 102, 58, 114, 101, 110, 100, 105, 116, 105,
                                        111, 110, 67, 108, 97, 115, 115, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60,
                                        47, 120, 109, 112, 77, 77, 58, 68, 101, 114, 105, 118, 101, 100, 70, 114, 111, 109,
                                        62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 72, 105,
                                        115, 116, 111, 114, 121, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        60, 114, 100, 102, 58, 83, 101, 113, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 108, 105, 32, 114, 100, 102, 58, 112,
                                        97, 114, 115, 101, 84, 121, 112, 101, 61, 34, 82, 101, 115, 111, 117, 114, 99, 101,
                                        34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        60, 115, 116, 69, 118, 116, 58, 97, 99, 116, 105, 111, 110, 62, 115, 97, 118, 101,
                                        100, 60, 47, 115, 116, 69, 118, 116, 58, 97, 99, 116, 105, 111, 110, 62, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116,
                                        69, 118, 116, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 120, 109, 112,
                                        46, 105, 105, 100, 58, 51, 48, 52, 51, 48, 49, 52, 49, 56, 66, 65, 67, 68, 70, 49,
                                        49, 65, 57, 53, 54, 66, 67, 66, 68, 56, 53, 67, 54, 54, 51, 65, 56, 60, 47, 115,
                                        116, 69, 118, 116, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116,
                                        69, 118, 116, 58, 119, 104, 101, 110, 62, 50, 48, 49, 48, 45, 48, 56, 45, 50, 48,
                                        84, 49, 53, 58, 52, 54, 58, 51, 51, 45, 48, 51, 58, 48, 48, 60, 47, 115, 116, 69,
                                        118, 116, 58, 119, 104, 101, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 69, 118, 116, 58, 115, 111, 102, 116,
                                        119, 97, 114, 101, 65, 103, 101, 110, 116, 62, 65, 100, 111, 98, 101, 32, 73, 108,
                                        108, 117, 115, 116, 114, 97, 116, 111, 114, 32, 67, 83, 53, 60, 47, 115, 116, 69,
                                        118, 116, 58, 115, 111, 102, 116, 119, 97, 114, 101, 65, 103, 101, 110, 116, 62,
                                        10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115,
                                        116, 69, 118, 116, 58, 99, 104, 97, 110, 103, 101, 100, 62, 47, 60, 47, 115, 116,
                                        69, 118, 116, 58, 99, 104, 97, 110, 103, 101, 100, 62, 10, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 108, 105, 62, 10,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 83, 101,
                                        113, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 120, 109, 112, 77, 77, 58,
                                        72, 105, 115, 116, 111, 114, 121, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100,
                                        102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32,
                                        32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111,
                                        110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 105, 108, 108, 117,
                                        115, 116, 114, 97, 116, 111, 114, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115,
                                        46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 105, 108, 108, 117, 115, 116, 114,
                                        97, 116, 111, 114, 47, 49, 46, 48, 47, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 60, 105, 108, 108, 117, 115, 116, 114, 97, 116, 111, 114, 58, 83, 116, 97, 114,
                                        116, 117, 112, 80, 114, 111, 102, 105, 108, 101, 62, 80, 114, 105, 110, 116, 60,
                                        47, 105, 108, 108, 117, 115, 116, 114, 97, 116, 111, 114, 58, 83, 116, 97, 114, 116,
                                        117, 112, 80, 114, 111, 102, 105, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47,
                                        114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32,
                                        32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116,
                                        105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 112, 100,
                                        102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101,
                                        46, 99, 111, 109, 47, 112, 100, 102, 47, 49, 46, 51, 47, 34, 62, 10, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 60, 112, 100, 102, 58, 80, 114, 111, 100, 117, 99, 101, 114,
                                        62, 65, 100, 111, 98, 101, 32, 80, 68, 70, 32, 108, 105, 98, 114, 97, 114, 121, 32,
                                        57, 46, 57, 48, 60, 47, 112, 100, 102, 58, 80, 114, 111, 100, 117, 99, 101, 114,
                                        62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114,
                                        105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32, 60, 47, 114, 100, 102, 58, 82,
                                        68, 70, 62, 10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                                        32, 32, 32, 32, 32, 32, 32, 32, 10, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32,
                                        101, 110, 100, 61, 34, 119, 34, 63, 62, 255, 238, 0, 14, 65, 100, 111, 98, 101, 0,
                                        100, 192, 0, 0, 0, 1, 255, 219, 0, 132, 0, 10, 7, 7, 7, 8, 7, 10, 8, 8, 10, 15, 10,
                                        8, 10, 15, 18, 13, 10, 10, 13, 18, 20, 16, 16, 18, 16, 16, 20, 20, 15, 17, 17, 17,
                                        17, 15, 20, 20, 23, 24, 26, 24, 23, 20, 31, 31, 33, 33, 31, 31, 45, 44, 44, 44, 45,
                                        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 11, 10, 10, 11, 12, 11, 14, 12, 12, 14,
                                        18, 14, 14, 14, 18, 20, 14, 14, 14, 14, 20, 24, 17, 17, 18, 17, 17, 24, 32, 23, 20,
                                        20, 20, 20, 23, 32, 28, 30, 26, 26, 26, 30, 28, 34, 34, 32, 32, 34, 34, 43, 43, 41,
                                        43, 43, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 255, 192, 0, 17, 8, 0, 33, 0, 33,
                                        3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 1, 162, 0, 0, 0, 7, 1, 1, 1, 1, 1, 0,
                                        0, 0, 0, 0, 0, 0, 0, 4, 5, 3, 2, 6, 1, 0, 7, 8, 9, 10, 11, 1, 0, 2, 2, 3, 1, 1, 1,
                                        1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 0, 2, 1, 3,
                                        3, 2, 4, 2, 6, 7, 3, 4, 2, 6, 2, 115, 1, 2, 3, 17, 4, 0, 5, 33, 18, 49, 65, 81, 6,
                                        19, 97, 34, 113, 129, 20, 50, 145, 161, 7, 21, 177, 66, 35, 193, 82, 209, 225, 51,
                                        22, 98, 240, 36, 114, 130, 241, 37, 67, 52, 83, 146, 162, 178, 99, 115, 194, 53,
                                        68, 39, 147, 163, 179, 54, 23, 84, 100, 116, 195, 210, 226, 8, 38, 131, 9, 10, 24,
                                        25, 132, 148, 69, 70, 164, 180, 86, 211, 85, 40, 26, 242, 227, 243, 196, 212, 228,
                                        244, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 102, 118, 134, 150, 166, 182,
                                        198, 214, 230, 246, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247,
                                        56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 41, 57, 73, 89, 105,
                                        121, 137, 153, 169, 185, 201, 217, 233, 249, 42, 58, 74, 90, 106, 122, 138, 154,
                                        170, 186, 202, 218, 234, 250, 17, 0, 2, 2, 1, 2, 3, 5, 5, 4, 5, 6, 4, 8, 3, 3, 109,
                                        1, 0, 2, 17, 3, 4, 33, 18, 49, 65, 5, 81, 19, 97, 34, 6, 113, 129, 145, 50, 161,
                                        177, 240, 20, 193, 209, 225, 35, 66, 21, 82, 98, 114, 241, 51, 36, 52, 67, 130, 22,
                                        146, 83, 37, 162, 99, 178, 194, 7, 115, 210, 53, 226, 68, 131, 23, 84, 147, 8, 9,
                                        10, 24, 25, 38, 54, 69, 26, 39, 100, 116, 85, 55, 242, 163, 179, 195, 40, 41, 211,
                                        227, 243, 132, 148, 164, 180, 196, 212, 228, 244, 101, 117, 133, 149, 165, 181, 197,
                                        213, 229, 245, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 71, 87,
                                        103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 56, 72, 88, 104, 120, 136, 152,
                                        168, 184, 200, 216, 232, 248, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217,
                                        233, 249, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250, 255,
                                        218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 133, 249, 251, 206, 186, 254, 167, 230,
                                        93, 66, 47, 174, 205, 5, 149, 173, 196, 144, 91, 90, 197, 35, 34, 42, 196, 198, 62,
                                        68, 33, 21, 102, 165, 73, 57, 25, 253, 51, 172, 127, 203, 125, 199, 252, 142, 127,
                                        249, 171, 23, 243, 55, 252, 164, 154, 183, 252, 198, 220, 127, 201, 215, 194, 204,
                                        85, 25, 250, 103, 88, 255, 0, 150, 251, 143, 249, 28, 255, 0, 243, 86, 9, 211, 252,
                                        211, 230, 61, 58, 238, 59, 187, 77, 74, 225, 38, 140, 130, 43, 35, 50, 154, 118,
                                        100, 98, 85, 135, 177, 194, 172, 216, 171, 214, 191, 229, 126, 106, 127, 245, 109,
                                        139, 239, 111, 235, 155, 57, 46, 108, 85, 236, 122, 69, 182, 155, 47, 150, 252, 244,
                                        250, 138, 145, 108, 186, 171, 137, 230, 141, 85, 166, 72, 140, 203, 234, 24, 249,
                                        3, 241, 113, 173, 48, 79, 159, 188, 181, 229, 189, 91, 206, 90, 46, 155, 198, 241,
                                        110, 167, 180, 6, 88, 108, 162, 142, 159, 87, 95, 93, 146, 77, 197, 3, 153, 5, 24,
                                        157, 128, 166, 68, 252, 195, 175, 106, 94, 90, 147, 205, 94, 85, 184, 177, 28, 117,
                                        123, 185, 46, 22, 225, 201, 83, 233, 187, 242, 141, 208, 82, 140, 24, 12, 89, 127,
                                        56, 245, 1, 121, 97, 168, 54, 147, 106, 218, 141, 164, 70, 218, 226, 231, 226, 13,
                                        52, 7, 253, 215, 226, 159, 23, 197, 212, 138, 246, 197, 83, 139, 239, 201, 221, 30,
                                        43, 221, 23, 210, 184, 189, 183, 180, 212, 110, 94, 210, 230, 222, 225, 173, 222,
                                        226, 54, 16, 205, 58, 178, 201, 111, 202, 47, 247, 73, 168, 223, 174, 2, 58, 52,
                                        26, 143, 148, 60, 197, 98, 79, 213, 109, 188, 167, 60, 169, 108, 176, 42, 171, 92,
                                        178, 179, 129, 37, 219, 184, 102, 102, 219, 246, 74, 143, 110, 152, 93, 115, 249,
                                        179, 114, 32, 211, 160, 210, 180, 139, 93, 58, 45, 50, 243, 235, 182, 209, 161, 103,
                                        67, 84, 150, 55, 71, 95, 134, 188, 189, 102, 36, 138, 98, 215, 223, 154, 183, 90,
                                        173, 134, 161, 163, 89, 104, 54, 246, 231, 89, 28, 101, 250, 177, 99, 43, 220, 75,
                                        240, 188, 135, 138, 252, 108, 230, 148, 29, 125, 206, 42, 243, 156, 217, 54, 255,
                                        0, 149, 67, 231, 159, 249, 98, 95, 249, 24, 51, 98, 175, 74, 252, 224, 251, 26, 111,
                                        206, 79, 225, 156, 199, 33, 185, 177, 86, 101, 146, 191, 203, 79, 249, 75, 45, 191,
                                        212, 147, 254, 35, 156, 139, 54, 42, 251, 51, 54, 120, 207, 54, 42, 255, 0, 255,
                                        217}},
                {BancoOpc.Santander, "Banco Santander Brasil S.A.", "Santander", New Byte() {137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 140, 0, 0, 0, 37, 8, 2, 0, 0, 0, 31, 177, 150, 79, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 37, 0, 0, 128, 131, 0, 0, 249, 255, 0, 0, 128, 233, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 111, 146, 95, 197, 70, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 195, 0, 0, 14, 195, 1, 199, 111, 168, 100, 0, 0, 17, 142, 73, 68, 65, 84, 104, 67, 237, 90, 9, 152, 85, 197, 149, 174, 229, 110, 111, 235, 247, 122, 7, 26, 144, 69, 16, 26, 27, 104, 4, 199, 132, 29, 145, 69, 180, 1, 81, 70, 109, 70, 37, 38, 99, 102, 62, 63, 151, 9, 160, 25, 163, 72, 68, 81, 212, 47, 110, 64, 220, 102, 24, 28, 53, 142, 113, 67, 81, 52, 98, 84, 208, 32, 26, 37, 177, 1, 101, 13, 107, 211, 221, 244, 246, 222, 221, 239, 173, 170, 57, 247, 190, 6, 183, 110, 194, 250, 125, 24, 187, 122, 121, 221, 247, 213, 173, 58, 117, 150, 255, 252, 231, 220, 135, 107, 202, 7, 50, 198, 80, 251, 56, 85, 53, 32, 136, 132, 247, 245, 47, 99, 188, 221, 72, 167, 170, 137, 16, 250, 202, 72, 88, 32, 124, 234, 202, 249, 131, 150, 76, 80, 218, 18, 73, 96, 36, 34, 142, 81, 23, 96, 221, 99, 189, 245, 24, 119, 252, 33, 221, 38, 4, 37, 228, 120, 14, 12, 225, 39, 48, 102, 24, 131, 141, 219, 199, 201, 211, 192, 113, 25, 137, 32, 142, 28, 7, 11, 38, 142, 107, 153, 147, 119, 186, 127, 144, 149, 143, 75, 187, 216, 117, 141, 241, 35, 164, 142, 167, 33, 230, 255, 131, 232, 227, 148, 60, 198, 113, 24, 137, 49, 55, 63, 191, 112, 206, 173, 40, 25, 229, 94, 59, 222, 157, 68, 243, 30, 187, 145, 176, 231, 165, 187, 247, 144, 186, 118, 163, 99, 134, 113, 207, 250, 193, 146, 195, 150, 131, 115, 142, 252, 147, 5, 39, 199, 98, 36, 12, 116, 157, 217, 84, 112, 201, 242, 184, 231, 39, 175, 250, 87, 109, 224, 32, 223, 50, 57, 62, 58, 75, 113, 12, 180, 16, 115, 224, 149, 66, 112, 132, 128, 128, 192, 10, 112, 241, 251, 51, 128, 55, 33, 198, 28, 164, 167, 153, 36, 161, 142, 69, 130, 4, 42, 128, 139, 39, 118, 28, 147, 145, 28, 215, 41, 29, 224, 140, 58, 39, 182, 105, 131, 183, 185, 10, 199, 226, 241, 133, 247, 73, 29, 82, 194, 53, 209, 17, 151, 91, 192, 248, 37, 29, 22, 50, 5, 241, 153, 134, 25, 119, 184, 217, 12, 167, 165, 140, 163, 163, 52, 246, 137, 213, 200, 145, 175, 38, 48, 116, 1, 176, 232, 222, 135, 255, 228, 234, 196, 115, 255, 151, 188, 123, 97, 112, 65, 156, 120, 228, 167, 191, 40, 46, 6, 71, 6, 219, 31, 137, 249, 97, 30, 76, 115, 184, 23, 157, 55, 55, 46, 20, 247, 237, 215, 61, 139, 69, 206, 159, 72, 10, 242, 113, 223, 51, 253, 183, 222, 22, 158, 135, 3, 90, 15, 130, 30, 110, 61, 32, 132, 182, 16, 100, 194, 4, 229, 186, 107, 148, 113, 227, 98, 231, 142, 143, 93, 114, 25, 29, 57, 134, 117, 40, 70, 123, 118, 33, 203, 66, 248, 88, 188, 167, 85, 253, 102, 207, 118, 36, 167, 59, 114, 243, 100, 103, 82, 56, 133, 166, 145, 11, 38, 170, 19, 46, 76, 14, 40, 163, 117, 53, 198, 11, 47, 134, 155, 157, 80, 47, 35, 71, 169, 11, 208, 61, 71, 220, 207, 73, 72, 253, 202, 212, 9, 19, 212, 220, 34, 182, 252, 229, 218, 135, 22, 81, 132, 162, 63, 30, 22, 189, 246, 58, 225, 50, 138, 192, 189, 14, 119, 94, 129, 125, 159, 99, 101, 214, 127, 230, 61, 248, 27, 186, 113, 151, 123, 247, 125, 13, 243, 239, 172, 127, 106, 41, 234, 219, 179, 96, 238, 60, 185, 71, 47, 225, 186, 71, 171, 175, 182, 230, 131, 133, 56, 18, 1, 174, 158, 4, 43, 249, 68, 82, 93, 151, 60, 188, 184, 233, 161, 135, 64, 128, 147, 176, 67, 203, 177, 142, 194, 97, 3, 15, 129, 218, 21, 156, 220, 245, 68, 109, 157, 84, 218, 87, 158, 117, 131, 134, 185, 191, 232, 190, 186, 151, 95, 4, 59, 197, 174, 172, 148, 255, 105, 48, 115, 109, 204, 225, 191, 54, 7, 115, 28, 54, 106, 116, 254, 213, 87, 56, 175, 45, 55, 239, 191, 19, 213, 212, 170, 245, 77, 228, 245, 183, 234, 127, 126, 157, 91, 87, 139, 37, 249, 235, 119, 134, 216, 209, 166, 134, 179, 205, 142, 240, 237, 64, 182, 111, 220, 136, 67, 7, 100, 156, 200, 82, 224, 218, 173, 129, 144, 104, 13, 155, 130, 99, 134, 129, 124, 112, 57, 192, 153, 111, 223, 156, 5, 10, 64, 108, 248, 226, 170, 132, 148, 111, 200, 124, 72, 140, 240, 70, 248, 21, 44, 248, 45, 117, 100, 87, 60, 40, 115, 43, 91, 124, 125, 254, 17, 27, 9, 115, 151, 250, 136, 187, 200, 181, 229, 140, 110, 188, 181, 18, 182, 137, 253, 236, 231, 74, 229, 12, 213, 208, 237, 185, 115, 27, 63, 255, 148, 202, 154, 52, 118, 12, 202, 232, 30, 118, 125, 10, 169, 5, 216, 64, 43, 131, 184, 136, 12, 42, 135, 99, 17, 223, 147, 224, 144, 208, 246, 32, 68, 78, 68, 213, 237, 59, 140, 215, 222, 228, 50, 57, 148, 147, 178, 106, 135, 64, 96, 60, 224, 23, 223, 180, 1, 242, 160, 150, 22, 66, 225, 88, 134, 254, 112, 208, 36, 230, 140, 28, 178, 39, 232, 69, 48, 43, 237, 245, 232, 25, 157, 61, 155, 186, 62, 35, 130, 195, 252, 67, 223, 72, 102, 28, 68, 4, 9, 67, 172, 63, 56, 96, 2, 3, 46, 128, 92, 134, 121, 176, 167, 112, 131, 189, 191, 99, 96, 80, 59, 92, 133, 57, 196, 135, 53, 120, 171, 78, 4, 225, 27, 228, 93, 198, 5, 103, 110, 184, 251, 161, 125, 90, 206, 5, 116, 41, 216, 14, 94, 24, 101, 135, 11, 245, 35, 49, 18, 8, 201, 145, 109, 68, 154, 45, 146, 147, 116, 7, 12, 228, 49, 202, 94, 120, 190, 121, 211, 6, 9, 33, 117, 222, 237, 244, 162, 203, 212, 234, 234, 134, 251, 22, 2, 72, 209, 222, 253, 104, 249, 217, 146, 34, 71, 154, 12, 228, 57, 173, 26, 137, 19, 166, 232, 58, 72, 172, 140, 157, 72, 43, 166, 81, 71, 231, 142, 5, 66, 74, 17, 149, 47, 126, 192, 255, 244, 51, 164, 168, 65, 12, 16, 36, 27, 54, 119, 29, 39, 21, 115, 115, 4, 113, 154, 65, 111, 89, 251, 193, 185, 136, 105, 96, 211, 17, 138, 230, 9, 211, 228, 142, 159, 80, 9, 165, 146, 110, 133, 26, 133, 31, 193, 141, 180, 211, 229, 180, 232, 61, 119, 196, 186, 246, 245, 211, 181, 76, 215, 195, 84, 23, 116, 146, 49, 32, 129, 215, 236, 231, 96, 172, 169, 220, 182, 36, 219, 99, 36, 171, 64, 193, 29, 155, 232, 38, 150, 162, 200, 231, 204, 118, 168, 18, 115, 99, 18, 136, 7, 28, 238, 80, 104, 241, 32, 130, 12, 154, 177, 153, 164, 178, 130, 28, 30, 213, 144, 243, 109, 124, 14, 242, 160, 109, 59, 158, 229, 39, 99, 36, 39, 46, 57, 158, 176, 236, 172, 173, 225, 102, 201, 176, 65, 106, 55, 162, 16, 55, 67, 225, 214, 100, 194, 215, 232, 97, 90, 107, 127, 167, 193, 26, 216, 223, 54, 92, 36, 75, 131, 202, 181, 139, 166, 69, 70, 143, 81, 10, 242, 27, 175, 185, 146, 191, 186, 34, 61, 120, 104, 135, 199, 127, 27, 235, 88, 194, 76, 179, 241, 170, 127, 105, 250, 203, 186, 162, 231, 255, 144, 234, 223, 199, 229, 76, 236, 218, 237, 188, 243, 142, 251, 242, 75, 118, 213, 95, 21, 170, 250, 154, 76, 190, 30, 84, 174, 103, 244, 234, 211, 113, 217, 19, 106, 65, 17, 135, 103, 89, 107, 222, 111, 94, 186, 140, 255, 233, 67, 228, 121, 44, 66, 37, 46, 11, 66, 0, 35, 184, 101, 145, 178, 242, 200, 229, 211, 228, 62, 3, 181, 188, 132, 241, 198, 42, 253, 209, 69, 82, 186, 73, 72, 146, 175, 70, 105, 105, 169, 82, 49, 25, 251, 78, 211, 243, 207, 229, 94, 123, 77, 100, 208, 16, 212, 168, 219, 207, 62, 231, 62, 179, 140, 35, 15, 162, 75, 154, 126, 89, 10, 88, 73, 170, 216, 252, 219, 110, 103, 213, 74, 162, 168, 162, 166, 218, 124, 230, 89, 209, 88, 231, 247, 27, 160, 204, 152, 153, 211, 187, 135, 90, 92, 108, 124, 180, 198, 122, 96, 49, 170, 174, 6, 84, 116, 52, 74, 122, 149, 202, 147, 46, 136, 157, 86, 210, 248, 240, 163, 90, 229, 212, 196, 176, 81, 128, 237, 198, 242, 229, 214, 146, 199, 176, 231, 112, 10, 208, 137, 184, 109, 120, 37, 29, 35, 149, 87, 70, 135, 14, 17, 105, 27, 194, 25, 171, 17, 109, 240, 32, 241, 217, 186, 218, 202, 43, 8, 2, 26, 206, 93, 219, 242, 202, 6, 167, 102, 86, 210, 14, 133, 88, 74, 8, 219, 242, 31, 127, 212, 250, 96, 141, 36, 203, 126, 36, 66, 123, 151, 74, 83, 199, 201, 68, 58, 176, 244, 127, 243, 238, 152, 159, 42, 43, 109, 94, 180, 200, 124, 104, 49, 209, 180, 239, 184, 117, 208, 96, 61, 28, 187, 11, 16, 95, 55, 156, 126, 103, 70, 230, 221, 158, 59, 251, 166, 88, 89, 153, 22, 139, 65, 41, 35, 13, 28, 98, 125, 244, 137, 84, 181, 182, 118, 219, 206, 228, 184, 115, 213, 88, 130, 118, 234, 98, 188, 250, 70, 244, 146, 11, 35, 197, 157, 36, 76, 164, 84, 74, 41, 47, 87, 166, 78, 67, 249, 69, 206, 166, 245, 180, 217, 70, 210, 215, 66, 22, 122, 239, 117, 123, 26, 170, 190, 208, 202, 6, 210, 130, 124, 165, 91, 119, 117, 114, 5, 25, 242, 35, 63, 221, 136, 182, 126, 137, 169, 2, 158, 33, 217, 46, 187, 234, 103, 133, 191, 186, 209, 122, 238, 57, 253, 177, 165, 94, 215, 46, 177, 202, 203, 72, 135, 206, 222, 31, 222, 194, 12, 153, 21, 147, 18, 179, 102, 21, 12, 27, 202, 11, 11, 121, 97, 138, 110, 220, 106, 174, 93, 75, 203, 250, 43, 21, 21, 212, 231, 226, 253, 213, 110, 142, 130, 139, 82, 174, 156, 35, 245, 238, 237, 87, 239, 99, 239, 174, 230, 122, 131, 187, 103, 15, 173, 250, 210, 174, 152, 156, 247, 235, 121, 228, 181, 151, 154, 30, 123, 82, 207, 203, 235, 112, 105, 37, 234, 221, 221, 121, 253, 109, 225, 216, 198, 216, 145, 169, 89, 55, 22, 142, 157, 0, 98, 243, 220, 60, 101, 203, 22, 88, 214, 235, 213, 59, 103, 194, 36, 17, 143, 241, 119, 222, 242, 21, 140, 44, 87, 31, 116, 118, 238, 178, 167, 227, 93, 58, 103, 238, 90, 144, 89, 250, 76, 102, 221, 90, 52, 120, 80, 188, 71, 15, 84, 189, 207, 120, 241, 37, 8, 33, 223, 177, 248, 196, 139, 139, 158, 92, 34, 62, 249, 196, 156, 123, 123, 102, 213, 74, 58, 122, 116, 226, 250, 27, 252, 189, 59, 156, 207, 254, 226, 77, 24, 31, 159, 115, 83, 98, 196, 104, 154, 136, 226, 62, 3, 208, 238, 29, 70, 83, 51, 241, 109, 246, 206, 187, 88, 86, 90, 75, 15, 184, 117, 35, 5, 229, 37, 33, 220, 118, 237, 81, 99, 58, 44, 121, 56, 121, 230, 0, 5, 114, 111, 192, 148, 130, 202, 147, 166, 146, 180, 111, 63, 251, 237, 85, 114, 85, 149, 205, 72, 124, 196, 112, 145, 208, 154, 107, 235, 139, 166, 78, 33, 74, 224, 11, 89, 196, 145, 100, 73, 26, 56, 64, 29, 80, 110, 174, 122, 19, 59, 14, 36, 158, 22, 9, 0, 207, 101, 89, 221, 177, 195, 124, 109, 133, 213, 120, 128, 20, 21, 171, 5, 5, 106, 231, 18, 109, 210, 5, 14, 37, 206, 218, 245, 20, 249, 72, 86, 148, 251, 22, 168, 123, 246, 103, 230, 221, 69, 155, 246, 167, 235, 106, 114, 46, 173, 84, 138, 243, 172, 229, 175, 82, 91, 71, 159, 111, 116, 234, 247, 39, 39, 94, 128, 247, 236, 105, 254, 247, 235, 248, 123, 127, 20, 107, 86, 91, 142, 145, 26, 127, 190, 72, 38, 50, 203, 95, 21, 204, 67, 107, 215, 155, 37, 69, 121, 163, 206, 101, 159, 127, 106, 220, 58, 151, 125, 190, 65, 218, 254, 69, 131, 26, 137, 205, 159, 31, 117, 121, 243, 173, 183, 75, 250, 1, 239, 203, 109, 145, 202, 74, 173, 107, 103, 251, 245, 149, 168, 177, 94, 221, 190, 59, 189, 105, 115, 116, 250, 116, 98, 103, 204, 107, 255, 205, 89, 185, 2, 173, 253, 184, 121, 199, 246, 212, 37, 211, 113, 73, 177, 254, 202, 43, 114, 198, 212, 243, 19, 133, 15, 63, 146, 83, 82, 220, 56, 99, 166, 183, 246, 3, 74, 16, 221, 187, 47, 157, 201, 36, 167, 76, 197, 213, 251, 141, 23, 95, 36, 174, 111, 116, 235, 94, 244, 216, 18, 121, 215, 238, 198, 155, 126, 9, 169, 145, 234, 134, 89, 159, 201, 175, 184, 64, 62, 163, 143, 190, 226, 21, 242, 233, 95, 245, 166, 3, 5, 19, 39, 65, 126, 212, 111, 158, 227, 63, 177, 212, 250, 227, 251, 108, 215, 46, 106, 234, 160, 221, 86, 141, 212, 122, 78, 18, 132, 1, 248, 184, 157, 59, 23, 46, 152, 31, 203, 43, 12, 184, 90, 72, 80, 224, 15, 8, 102, 184, 71, 29, 60, 40, 249, 235, 123, 212, 104, 156, 61, 251, 116, 211, 150, 42, 146, 44, 232, 116, 203, 109, 82, 44, 153, 221, 35, 64, 228, 16, 228, 97, 190, 58, 100, 72, 242, 39, 51, 57, 243, 15, 101, 223, 32, 43, 248, 76, 68, 21, 201, 74, 163, 197, 191, 173, 173, 188, 184, 122, 206, 205, 205, 95, 110, 7, 2, 81, 120, 237, 13, 137, 113, 227, 160, 179, 14, 238, 224, 47, 121, 50, 243, 200, 3, 72, 246, 113, 34, 55, 126, 122, 95, 134, 124, 149, 16, 74, 32, 149, 83, 202, 125, 40, 121, 33, 75, 16, 195, 82, 45, 147, 196, 83, 34, 145, 139, 26, 13, 216, 81, 86, 163, 68, 33, 138, 47, 161, 152, 134, 85, 13, 208, 73, 166, 146, 136, 71, 112, 44, 202, 180, 84, 10, 106, 205, 167, 159, 213, 23, 47, 225, 196, 166, 82, 76, 42, 45, 69, 176, 43, 166, 4, 216, 10, 200, 199, 156, 168, 23, 180, 118, 136, 203, 152, 240, 80, 180, 208, 207, 77, 224, 218, 90, 102, 102, 100, 37, 78, 85, 13, 120, 169, 52, 102, 116, 78, 239, 62, 30, 4, 196, 214, 141, 56, 145, 15, 202, 0, 100, 165, 146, 22, 232, 49, 204, 42, 220, 117, 163, 19, 207, 151, 147, 57, 182, 170, 68, 231, 222, 174, 205, 95, 168, 222, 123, 127, 244, 210, 139, 154, 54, 108, 116, 27, 154, 212, 68, 82, 245, 188, 168, 7, 96, 129, 88, 245, 62, 190, 249, 11, 148, 151, 138, 48, 87, 218, 178, 3, 172, 217, 106, 10, 15, 228, 105, 245, 13, 136, 22, 228, 58, 126, 89, 239, 72, 135, 14, 173, 77, 16, 192, 86, 162, 21, 147, 180, 235, 111, 20, 117, 53, 206, 7, 107, 37, 130, 35, 201, 248, 183, 201, 28, 60, 72, 12, 57, 25, 62, 103, 56, 1, 189, 1, 223, 12, 31, 105, 16, 134, 173, 142, 133, 154, 136, 192, 131, 97, 148, 74, 196, 50, 174, 244, 187, 167, 234, 102, 76, 175, 251, 96, 53, 188, 171, 76, 62, 15, 35, 9, 11, 223, 93, 246, 104, 99, 77, 131, 54, 251, 182, 216, 130, 59, 229, 33, 103, 201, 128, 99, 135, 50, 111, 11, 73, 6, 46, 135, 1, 178, 179, 68, 26, 19, 26, 56, 71, 192, 102, 131, 255, 15, 177, 37, 248, 35, 91, 131, 7, 67, 198, 252, 119, 203, 210, 95, 108, 208, 174, 191, 69, 189, 119, 65, 124, 232, 8, 28, 44, 27, 82, 233, 208, 187, 0, 63, 194, 215, 16, 55, 194, 107, 45, 87, 194, 101, 129, 200, 73, 157, 123, 6, 51, 116, 39, 160, 174, 193, 156, 111, 149, 202, 112, 102, 68, 186, 117, 5, 238, 74, 255, 252, 153, 53, 231, 63, 156, 95, 205, 118, 111, 187, 133, 223, 60, 219, 190, 236, 226, 204, 149, 87, 224, 154, 122, 31, 178, 99, 150, 167, 128, 123, 0, 190, 5, 176, 3, 28, 9, 220, 169, 205, 209, 186, 145, 136, 160, 92, 70, 184, 230, 0, 247, 221, 239, 22, 24, 112, 100, 10, 42, 65, 40, 241, 211, 159, 210, 51, 251, 113, 73, 205, 10, 251, 157, 181, 192, 27, 5, 248, 59, 95, 191, 142, 115, 87, 10, 84, 21, 216, 17, 59, 86, 116, 230, 213, 102, 105, 23, 98, 67, 27, 9, 113, 40, 140, 18, 121, 241, 154, 253, 250, 127, 45, 3, 166, 35, 128, 165, 113, 96, 183, 190, 122, 247, 61, 93, 158, 255, 189, 95, 87, 171, 223, 113, 151, 253, 212, 50, 2, 89, 173, 69, 111, 129, 234, 14, 115, 36, 152, 22, 86, 48, 193, 8, 172, 197, 56, 208, 237, 176, 98, 17, 220, 23, 210, 172, 217, 157, 160, 170, 3, 234, 182, 240, 254, 244, 99, 143, 48, 230, 67, 52, 4, 53, 111, 200, 206, 219, 24, 161, 78, 49, 162, 140, 120, 144, 111, 16, 242, 11, 114, 57, 168, 21, 216, 102, 203, 38, 1, 143, 5, 251, 80, 78, 129, 151, 251, 141, 245, 240, 134, 114, 122, 119, 192, 3, 41, 157, 246, 109, 91, 216, 14, 134, 250, 197, 179, 61, 18, 248, 233, 209, 150, 189, 173, 203, 197, 8, 131, 172, 161, 174, 223, 88, 247, 212, 83, 193, 233, 218, 144, 157, 106, 170, 114, 211, 156, 156, 145, 163, 91, 125, 31, 40, 6, 37, 216, 222, 188, 209, 120, 98, 41, 162, 212, 167, 217, 117, 192, 31, 133, 156, 215, 57, 121, 213, 21, 190, 7, 207, 12, 161, 34, 129, 47, 15, 16, 70, 36, 115, 192, 157, 236, 15, 214, 184, 150, 206, 207, 25, 155, 87, 121, 149, 248, 242, 11, 182, 232, 65, 86, 189, 211, 147, 32, 74, 2, 68, 18, 64, 163, 161, 200, 135, 85, 178, 45, 103, 104, 204, 2, 57, 206, 6, 10, 32, 96, 104, 136, 144, 46, 3, 210, 98, 213, 12, 30, 115, 137, 104, 46, 180, 65, 124, 51, 237, 153, 25, 167, 172, 52, 121, 253, 47, 208, 158, 157, 252, 222, 133, 108, 251, 22, 23, 192, 10, 152, 36, 212, 41, 186, 46, 28, 55, 8, 62, 63, 184, 87, 64, 233, 3, 235, 103, 131, 41, 0, 234, 176, 234, 5, 136, 86, 49, 251, 248, 35, 207, 227, 90, 191, 126, 234, 216, 73, 78, 115, 3, 2, 254, 111, 154, 182, 18, 207, 86, 6, 190, 109, 1, 65, 119, 223, 94, 197, 124, 87, 26, 88, 174, 205, 152, 225, 24, 38, 53, 12, 110, 185, 174, 101, 72, 106, 92, 65, 212, 7, 120, 129, 165, 66, 89, 143, 240, 57, 92, 235, 196, 33, 27, 141, 192, 194, 188, 53, 239, 154, 72, 40, 253, 250, 67, 233, 19, 250, 98, 208, 101, 9, 149, 18, 76, 225, 2, 197, 122, 246, 146, 115, 160, 226, 104, 185, 18, 122, 112, 136, 4, 193, 139, 200, 188, 247, 174, 121, 211, 45, 98, 239, 46, 162, 68, 66, 210, 17, 192, 144, 203, 28, 249, 220, 177, 169, 138, 139, 112, 126, 30, 219, 186, 205, 53, 211, 88, 139, 89, 227, 199, 37, 127, 57, 7, 127, 242, 39, 227, 193, 7, 133, 240, 189, 226, 146, 228, 180, 169, 80, 64, 64, 105, 236, 246, 232, 170, 141, 158, 160, 13, 44, 151, 85, 205, 85, 41, 152, 222, 218, 177, 83, 25, 57, 60, 57, 98, 20, 216, 204, 122, 99, 5, 178, 61, 15, 121, 226, 236, 179, 82, 99, 199, 33, 215, 215, 95, 93, 41, 140, 102, 64, 76, 147, 211, 72, 69, 133, 210, 253, 52, 86, 84, 64, 74, 251, 42, 37, 37, 86, 221, 129, 212, 180, 105, 164, 48, 15, 252, 0, 117, 232, 130, 207, 59, 15, 250, 247, 178, 166, 1, 24, 160, 168, 34, 54, 111, 241, 7, 148, 37, 47, 172, 0, 119, 106, 122, 125, 133, 84, 83, 11, 245, 19, 239, 93, 150, 154, 126, 9, 192, 145, 183, 98, 149, 219, 84, 163, 238, 218, 219, 20, 73, 228, 14, 30, 164, 142, 252, 145, 76, 176, 136, 231, 136, 81, 99, 162, 83, 39, 170, 93, 187, 211, 88, 220, 73, 64, 126, 113, 232, 186, 207, 204, 88, 92, 27, 60, 88, 29, 250, 99, 165, 99, 137, 136, 70, 68, 175, 94, 202, 148, 41, 226, 156, 179, 189, 117, 31, 1, 135, 242, 135, 13, 207, 29, 53, 218, 119, 29, 227, 141, 55, 145, 110, 66, 158, 15, 27, 126, 109, 132, 2, 228, 204, 54, 26, 172, 45, 104, 43, 65, 6, 121, 255, 195, 244, 123, 239, 57, 140, 225, 142, 29, 113, 60, 22, 118, 88, 90, 90, 126, 129, 109, 130, 212, 25, 188, 130, 254, 193, 12, 80, 109, 194, 86, 174, 101, 235, 171, 223, 179, 22, 220, 105, 60, 244, 32, 207, 52, 83, 37, 26, 192, 88, 75, 39, 36, 168, 245, 141, 28, 197, 43, 44, 210, 134, 13, 85, 38, 79, 69, 195, 207, 83, 167, 79, 139, 156, 53, 216, 255, 253, 11, 230, 130, 59, 21, 64, 251, 136, 20, 217, 245, 183, 102, 230, 70, 206, 236, 79, 70, 140, 198, 88, 182, 95, 90, 206, 114, 146, 172, 190, 134, 87, 109, 244, 62, 93, 231, 14, 47, 151, 206, 159, 194, 234, 107, 13, 219, 114, 78, 239, 41, 54, 85, 89, 103, 157, 163, 85, 76, 230, 205, 105, 35, 147, 246, 123, 246, 112, 106, 246, 144, 250, 134, 232, 190, 221, 205, 59, 183, 147, 78, 37, 209, 254, 3, 32, 119, 138, 215, 222, 97, 59, 55, 155, 141, 13, 114, 191, 114, 40, 248, 112, 44, 225, 188, 178, 220, 115, 161, 198, 100, 124, 211, 6, 246, 201, 159, 189, 62, 253, 208, 229, 255, 140, 27, 50, 14, 212, 82, 221, 122, 248, 219, 183, 186, 221, 122, 169, 51, 47, 39, 105, 221, 174, 171, 246, 78, 235, 197, 160, 125, 85, 83, 205, 63, 250, 80, 223, 187, 85, 116, 44, 137, 78, 185, 68, 30, 51, 148, 25, 186, 245, 248, 127, 243, 78, 133, 254, 238, 189, 242, 198, 141, 124, 125, 149, 236, 217, 214, 199, 171, 141, 93, 123, 164, 84, 129, 54, 110, 100, 100, 236, 68, 84, 122, 6, 222, 191, 31, 253, 207, 211, 172, 177, 78, 31, 127, 94, 108, 82, 133, 223, 116, 192, 110, 50, 252, 51, 250, 82, 112, 176, 157, 59, 32, 179, 102, 53, 222, 202, 0, 253, 102, 63, 119, 215, 214, 167, 133, 124, 42, 8, 52, 106, 28, 61, 232, 137, 150, 116, 146, 75, 251, 72, 103, 244, 17, 221, 123, 68, 186, 116, 83, 138, 242, 81, 34, 78, 36, 25, 18, 175, 208, 211, 168, 182, 193, 218, 83, 237, 236, 222, 38, 182, 108, 227, 27, 171, 216, 182, 29, 92, 184, 40, 2, 56, 32, 75, 2, 18, 219, 87, 184, 74, 5, 114, 60, 27, 46, 72, 133, 133, 36, 217, 17, 107, 148, 155, 25, 111, 247, 62, 172, 235, 36, 26, 9, 232, 99, 104, 107, 102, 155, 36, 191, 131, 144, 37, 182, 127, 63, 184, 44, 137, 198, 152, 109, 67, 253, 4, 180, 144, 69, 98, 2, 90, 241, 194, 9, 248, 144, 18, 129, 28, 6, 252, 158, 113, 151, 121, 46, 196, 187, 175, 197, 21, 206, 178, 89, 16, 66, 205, 214, 98, 138, 70, 105, 83, 134, 43, 64, 15, 37, 97, 155, 172, 32, 95, 142, 40, 222, 190, 253, 50, 231, 94, 92, 19, 64, 105, 12, 3, 202, 76, 55, 158, 128, 188, 193, 61, 71, 97, 132, 107, 113, 10, 98, 19, 207, 131, 143, 84, 57, 1, 144, 250, 170, 28, 65, 12, 178, 37, 225, 30, 179, 45, 55, 18, 213, 10, 139, 128, 94, 177, 253, 213, 20, 83, 47, 158, 68, 86, 90, 113, 125, 161, 69, 152, 12, 24, 234, 49, 11, 9, 89, 86, 10, 10, 96, 1, 116, 224, 0, 55, 154, 177, 26, 197, 80, 137, 43, 64, 78, 253, 240, 113, 1, 71, 74, 66, 130, 130, 196, 11, 30, 168, 181, 241, 169, 186, 160, 152, 253, 59, 70, 250, 42, 85, 3, 78, 1, 146, 186, 46, 224, 53, 132, 15, 1, 62, 26, 215, 16, 20, 207, 112, 108, 200, 205, 174, 69, 50, 38, 182, 28, 232, 32, 4, 74, 150, 101, 232, 57, 102, 179, 72, 192, 183, 190, 233, 30, 1, 5, 15, 46, 3, 61, 128, 126, 27, 64, 102, 72, 166, 36, 80, 233, 87, 158, 4, 23, 195, 196, 3, 141, 52, 129, 128, 67, 67, 248, 130, 122, 2, 80, 8, 56, 1, 164, 145, 108, 49, 22, 146, 94, 193, 224, 24, 97, 139, 242, 96, 172, 182, 32, 114, 48, 35, 187, 63, 244, 207, 194, 15, 70, 181, 76, 128, 84, 5, 147, 41, 52, 94, 3, 76, 14, 89, 67, 176, 110, 86, 210, 175, 164, 61, 216, 130, 58, 180, 108, 203, 134, 89, 151, 15, 229, 15, 32, 4, 30, 247, 5, 216, 14, 141, 135, 160, 149, 154, 117, 198, 150, 69, 64, 249, 193, 28, 1, 52, 139, 3, 151, 11, 223, 10, 78, 148, 205, 10, 225, 119, 224, 143, 135, 35, 18, 71, 96, 164, 54, 96, 18, 78, 229, 7, 249, 57, 224, 165, 193, 14, 20, 1, 221, 11, 187, 189, 237, 227, 4, 107, 224, 56, 62, 119, 7, 12, 29, 218, 147, 208, 194, 161, 225, 16, 18, 1, 103, 60, 193, 226, 181, 47, 119, 80, 3, 71, 210, 5, 111, 69, 91, 16, 175, 65, 20, 7, 81, 13, 43, 64, 16, 101, 203, 237, 246, 113, 82, 52, 112, 140, 70, 58, 41, 178, 180, 47, 218, 134, 6, 218, 141, 244, 61, 112, 141, 118, 35, 181, 27, 233, 123, 160, 129, 239, 129, 136, 237, 145, 244, 125, 48, 18, 20, 113, 80, 249, 182, 115, 179, 83, 214, 86, 65, 205, 91, 61, 176, 63, 180, 80, 78, 89, 17, 219, 5, 131, 135, 79, 255, 15, 149, 233, 220, 181, 239, 64, 0, 99, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130}},
                {BancoOpc.BancodoBrasil, "Banco do Brasil S.A.", "Banco do Brasil", New Byte() {255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 72, 0, 72, 0, 0, 255, 219, 0, 67, 0, 6, 4, 4, 4, 5, 4, 6, 5, 5, 6, 9, 6, 5, 6, 9, 11, 8, 6, 6, 8, 11, 12, 10, 10, 11, 10, 10, 12, 16, 12, 12, 12, 12, 12, 12, 16, 12, 14, 15, 16, 15, 14, 12, 19, 19, 20, 20, 19, 19, 28, 27, 27, 27, 28, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 255, 219, 0, 67, 1, 7, 7, 7, 13, 12, 13, 24, 16, 16, 24, 26, 21, 17, 21, 26, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 255, 192, 0, 17, 8, 0, 40, 0, 150, 3, 1, 17, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 28, 0, 1, 0, 3, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 1, 3, 7, 2, 8, 255, 196, 0, 65, 16, 0, 0, 4, 4, 2, 7, 5, 3, 8, 10, 3, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 6, 17, 18, 33, 7, 19, 22, 49, 84, 162, 210, 20, 34, 65, 81, 97, 21, 50, 240, 8, 23, 35, 37, 66, 67, 113, 129, 36, 51, 53, 82, 99, 114, 115, 161, 177, 193, 145, 209, 241, 255, 196, 0, 27, 1, 0, 2, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 255, 196, 0, 53, 17, 0, 1, 3, 2, 2, 8, 5, 4, 1, 3, 5, 0, 0, 0, 0, 0, 1, 0, 2, 3, 4, 17, 18, 33, 5, 6, 19, 20, 49, 81, 162, 209, 22, 34, 65, 97, 177, 50, 82, 83, 113, 161, 21, 35, 66, 36, 114, 129, 145, 178, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 247, 151, 211, 249, 178, 79, 92, 38, 69, 236, 66, 40, 114, 148, 48, 147, 112, 26, 193, 225, 31, 55, 210, 58, 122, 178, 41, 158, 214, 191, 32, 227, 108, 155, 194, 255, 0, 165, 216, 138, 154, 60, 34, 227, 136, 93, 27, 71, 57, 226, 57, 9, 211, 25, 124, 69, 94, 120, 63, 248, 111, 101, 102, 226, 206, 73, 180, 115, 158, 35, 144, 157, 48, 13, 98, 173, 252, 157, 45, 236, 150, 235, 23, 47, 148, 218, 57, 207, 17, 200, 78, 152, 94, 36, 173, 251, 250, 91, 217, 61, 210, 46, 95, 41, 180, 115, 158, 35, 144, 157, 48, 55, 88, 171, 173, 245, 244, 183, 178, 55, 56, 249, 124, 166, 209, 206, 120, 142, 66, 116, 193, 226, 58, 239, 191, 165, 189, 146, 20, 145, 242, 249, 77, 163, 156, 241, 28, 132, 233, 128, 107, 37, 109, 254, 190, 150, 246, 72, 82, 71, 203, 229, 54, 142, 115, 196, 114, 19, 166, 31, 137, 43, 126, 254, 150, 246, 83, 52, 145, 114, 254, 74, 109, 28, 231, 136, 228, 39, 76, 47, 17, 87, 125, 253, 45, 236, 163, 185, 199, 203, 229, 54, 142, 115, 196, 114, 19, 166, 15, 18, 86, 253, 253, 45, 236, 141, 206, 62, 95, 41, 180, 115, 158, 35, 144, 157, 49, 47, 17, 86, 254, 78, 150, 246, 70, 231, 31, 36, 218, 57, 207, 17, 200, 78, 152, 94, 34, 173, 252, 157, 45, 236, 141, 206, 62, 95, 41, 180, 115, 158, 35, 144, 157, 48, 120, 142, 183, 239, 233, 111, 100, 110, 145, 223, 135, 242, 83, 104, 231, 60, 71, 33, 58, 97, 141, 97, 174, 252, 157, 45, 236, 152, 163, 103, 47, 229, 54, 142, 115, 196, 114, 19, 166, 23, 136, 235, 79, 249, 244, 183, 178, 91, 156, 124, 190, 83, 104, 231, 60, 71, 33, 58, 96, 26, 199, 92, 120, 63, 165, 189, 147, 220, 227, 229, 242, 155, 71, 57, 226, 57, 9, 211, 0, 214, 74, 223, 89, 58, 91, 217, 45, 206, 62, 95, 41, 180, 115, 158, 35, 144, 157, 48, 13, 99, 173, 252, 157, 45, 236, 141, 206, 62, 73, 180, 115, 158, 35, 144, 157, 48, 188, 73, 91, 247, 244, 183, 178, 55, 56, 249, 124, 170, 249, 251, 214, 140, 156, 191, 116, 237, 98, 32, 217, 37, 84, 50, 171, 40, 32, 82, 148, 184, 135, 120, 141, 128, 34, 186, 138, 89, 37, 173, 144, 52, 98, 59, 71, 124, 149, 38, 60, 8, 197, 249, 5, 229, 47, 52, 214, 233, 211, 165, 220, 82, 244, 251, 137, 213, 61, 45, 55, 214, 147, 34, 92, 185, 127, 0, 163, 190, 215, 190, 127, 240, 27, 227, 210, 195, 170, 153, 127, 116, 217, 231, 209, 102, 53, 185, 217, 90, 203, 52, 174, 218, 160, 155, 203, 88, 211, 12, 22, 126, 131, 129, 3, 204, 94, 156, 48, 38, 213, 63, 180, 7, 13, 248, 239, 151, 248, 197, 25, 42, 245, 104, 195, 27, 156, 243, 107, 112, 86, 54, 112, 93, 101, 167, 168, 234, 234, 114, 155, 69, 21, 167, 79, 74, 205, 53, 204, 36, 72, 198, 3, 154, 231, 15, 14, 225, 77, 108, 188, 194, 56, 84, 122, 30, 106, 151, 218, 33, 123, 5, 124, 210, 6, 149, 6, 73, 164, 138, 30, 120, 248, 140, 37, 115, 116, 151, 120, 167, 234, 209, 177, 200, 99, 91, 49, 194, 7, 41, 113, 13, 188, 132, 99, 69, 102, 129, 168, 136, 98, 35, 36, 132, 227, 130, 210, 199, 39, 100, 251, 95, 209, 93, 140, 12, 151, 63, 31, 22, 255, 0, 168, 70, 23, 218, 232, 178, 224, 127, 183, 199, 172, 73, 180, 175, 244, 74, 214, 245, 92, 134, 118, 245, 220, 16, 141, 60, 128, 219, 213, 7, 246, 129, 97, 221, 157, 247, 126, 63, 249, 9, 209, 188, 100, 228, 219, 251, 72, 147, 233, 159, 111, 100, 95, 221, 32, 109, 51, 139, 113, 4, 112, 245, 85, 85, 13, 81, 33, 167, 89, 17, 236, 233, 217, 89, 181, 57, 245, 69, 84, 197, 49, 131, 29, 177, 0, 119, 110, 59, 130, 52, 208, 232, 233, 170, 93, 102, 12, 212, 36, 144, 52, 92, 170, 185, 70, 147, 232, 57, 187, 228, 216, 48, 156, 34, 171, 197, 114, 73, 19, 2, 137, 226, 31, 32, 19, 148, 185, 198, 250, 141, 1, 82, 198, 99, 228, 169, 101, 75, 15, 210, 181, 63, 30, 89, 254, 113, 199, 216, 201, 234, 10, 208, 15, 186, 124, 7, 172, 13, 165, 125, 177, 55, 128, 82, 35, 221, 63, 222, 232, 91, 7, 59, 63, 69, 27, 251, 164, 76, 211, 186, 200, 191, 186, 69, 27, 50, 19, 88, 95, 148, 2, 52, 98, 178, 103, 101, 169, 93, 172, 214, 206, 21, 22, 61, 156, 76, 42, 25, 107, 223, 36, 189, 195, 229, 188, 77, 184, 60, 66, 61, 230, 134, 219, 127, 81, 126, 17, 118, 237, 29, 255, 0, 165, 207, 155, 14, 200, 126, 130, 252, 218, 216, 239, 26, 32, 179, 38, 194, 178, 40, 40, 5, 81, 211, 66, 169, 128, 199, 46, 88, 12, 237, 80, 18, 149, 50, 220, 114, 32, 127, 155, 12, 125, 82, 71, 53, 239, 196, 240, 185, 35, 159, 162, 244, 157, 5, 26, 140, 94, 165, 85, 211, 153, 130, 166, 170, 77, 114, 182, 72, 46, 131, 115, 39, 134, 198, 193, 152, 25, 81, 182, 253, 102, 99, 190, 195, 190, 60, 94, 186, 109, 246, 94, 81, 229, 91, 168, 176, 28, 207, 21, 121, 242, 149, 214, 12, 190, 157, 192, 0, 39, 237, 135, 194, 3, 123, 95, 9, 109, 186, 246, 8, 227, 106, 96, 201, 196, 253, 170, 234, 227, 193, 84, 77, 253, 172, 211, 75, 244, 203, 170, 217, 6, 109, 4, 108, 12, 205, 41, 247, 4, 224, 107, 20, 87, 21, 44, 107, 0, 142, 126, 155, 188, 99, 210, 236, 219, 45, 51, 154, 206, 107, 46, 48, 31, 154, 206, 150, 188, 181, 112, 141, 111, 237, 49, 18, 169, 56, 58, 7, 149, 235, 46, 96, 151, 224, 41, 10, 166, 0, 240, 193, 112, 221, 190, 9, 116, 83, 29, 6, 11, 12, 65, 170, 82, 76, 113, 131, 127, 42, 183, 86, 117, 53, 144, 105, 50, 113, 85, 21, 193, 213, 146, 50, 155, 3, 25, 138, 32, 34, 36, 4, 29, 16, 112, 168, 5, 221, 144, 151, 47, 91, 66, 101, 12, 50, 196, 216, 109, 103, 241, 67, 164, 56, 174, 56, 42, 218, 81, 117, 167, 211, 122, 82, 157, 152, 57, 89, 89, 43, 199, 111, 214, 112, 137, 85, 57, 65, 81, 3, 8, 148, 4, 74, 32, 63, 118, 1, 249, 196, 170, 232, 163, 165, 132, 184, 15, 238, 40, 178, 75, 187, 62, 10, 238, 173, 150, 182, 148, 26, 75, 73, 203, 170, 37, 38, 18, 89, 164, 236, 72, 253, 161, 23, 184, 183, 38, 36, 202, 45, 132, 229, 49, 141, 96, 3, 13, 192, 214, 204, 47, 190, 57, 180, 35, 106, 215, 72, 89, 103, 134, 171, 36, 182, 49, 99, 146, 208, 82, 105, 123, 11, 75, 149, 37, 53, 46, 81, 84, 228, 97, 44, 237, 32, 204, 199, 58, 133, 34, 150, 71, 118, 49, 17, 251, 211, 69, 21, 80, 178, 88, 24, 231, 11, 59, 26, 152, 30, 114, 47, 149, 151, 158, 177, 106, 44, 244, 64, 74, 197, 171, 183, 40, 84, 40, 76, 181, 68, 114, 87, 42, 216, 196, 191, 184, 36, 19, 96, 183, 142, 232, 232, 136, 218, 93, 179, 112, 242, 225, 85, 129, 228, 38, 249, 221, 104, 218, 181, 45, 90, 251, 72, 83, 57, 218, 203, 25, 204, 157, 47, 171, 0, 171, 40, 152, 55, 192, 69, 12, 6, 41, 74, 32, 0, 32, 36, 13, 240, 84, 83, 182, 2, 198, 198, 60, 174, 226, 148, 121, 131, 136, 168, 85, 188, 209, 252, 211, 64, 52, 203, 215, 203, 10, 238, 76, 243, 9, 151, 56, 220, 68, 18, 215, 166, 81, 17, 222, 61, 210, 197, 122, 34, 22, 71, 94, 224, 50, 184, 77, 239, 59, 31, 249, 93, 149, 17, 103, 72, 86, 116, 59, 138, 197, 171, 54, 204, 241, 144, 25, 158, 83, 239, 152, 74, 100, 176, 235, 197, 76, 236, 2, 98, 110, 191, 141, 163, 166, 214, 176, 237, 0, 227, 114, 169, 14, 204, 44, 249, 10, 7, 144, 46, 177, 5, 218, 83, 247, 179, 227, 177, 151, 77, 251, 74, 169, 55, 64, 10, 36, 54, 173, 91, 155, 8, 98, 196, 97, 14, 239, 246, 8, 166, 72, 90, 72, 14, 183, 208, 167, 139, 43, 251, 169, 218, 65, 170, 31, 47, 84, 204, 102, 37, 156, 1, 29, 210, 189, 137, 179, 86, 250, 204, 29, 173, 100, 141, 250, 65, 128, 151, 239, 88, 247, 17, 244, 136, 210, 104, 200, 68, 101, 182, 182, 52, 58, 67, 97, 101, 121, 56, 215, 39, 56, 115, 87, 85, 140, 222, 206, 232, 217, 177, 17, 94, 94, 241, 155, 181, 136, 12, 147, 86, 216, 74, 100, 147, 57, 55, 0, 129, 115, 27, 95, 212, 99, 35, 233, 153, 128, 197, 15, 214, 223, 101, 44, 88, 78, 124, 20, 26, 134, 102, 7, 152, 87, 199, 150, 185, 83, 217, 229, 148, 75, 206, 194, 199, 63, 117, 51, 25, 174, 17, 46, 33, 184, 8, 148, 127, 24, 214, 202, 0, 24, 204, 124, 82, 14, 185, 54, 94, 223, 66, 40, 99, 80, 212, 234, 138, 9, 140, 115, 203, 25, 137, 142, 97, 17, 19, 8, 183, 37, 196, 99, 230, 26, 98, 59, 84, 62, 195, 44, 75, 169, 11, 252, 161, 68, 210, 157, 31, 55, 170, 166, 137, 75, 82, 118, 147, 89, 32, 57, 85, 89, 161, 76, 145, 21, 81, 65, 3, 253, 25, 83, 3, 128, 218, 249, 220, 110, 17, 215, 135, 75, 50, 146, 121, 92, 7, 159, 104, 239, 146, 168, 115, 11, 152, 223, 208, 88, 119, 58, 30, 170, 229, 130, 230, 85, 75, 206, 200, 149, 51, 53, 0, 73, 242, 111, 8, 85, 86, 65, 60, 251, 169, 28, 75, 222, 1, 1, 27, 5, 203, 254, 227, 179, 30, 183, 196, 246, 226, 144, 121, 194, 173, 212, 217, 89, 109, 232, 141, 28, 83, 84, 123, 77, 92, 177, 12, 78, 206, 22, 93, 242, 182, 50, 199, 31, 230, 11, 97, 47, 160, 71, 149, 211, 90, 193, 45, 97, 181, 252, 188, 150, 168, 169, 195, 66, 239, 172, 168, 58, 126, 175, 65, 178, 51, 114, 170, 100, 218, 156, 84, 71, 84, 113, 32, 220, 66, 222, 94, 81, 151, 70, 105, 167, 209, 230, 19, 150, 6, 57, 82, 183, 208, 165, 16, 146, 199, 114, 98, 57, 114, 236, 201, 153, 36, 221, 56, 112, 162, 134, 79, 24, 8, 8, 144, 71, 32, 27, 14, 67, 108, 163, 171, 226, 249, 207, 211, 144, 80, 221, 99, 42, 201, 93, 25, 82, 42, 210, 101, 165, 197, 160, 251, 48, 160, 0, 67, 253, 245, 192, 250, 203, 235, 45, 123, 223, 198, 50, 55, 89, 167, 218, 226, 186, 150, 236, 204, 54, 95, 45, 180, 101, 75, 35, 44, 155, 75, 176, 44, 179, 105, 200, 39, 219, 133, 85, 4, 230, 17, 72, 44, 65, 41, 173, 145, 131, 206, 45, 118, 178, 78, 231, 135, 140, 136, 79, 118, 104, 22, 80, 67, 67, 84, 105, 37, 140, 153, 32, 14, 91, 154, 92, 169, 214, 100, 245, 37, 196, 174, 19, 50, 182, 19, 217, 75, 91, 60, 33, 149, 162, 94, 42, 168, 47, 187, 243, 85, 138, 64, 23, 215, 204, 229, 20, 50, 99, 75, 5, 39, 6, 19, 57, 237, 163, 48, 50, 166, 237, 125, 166, 214, 214, 235, 127, 8, 109, 214, 89, 139, 239, 123, 5, 33, 72, 219, 43, 42, 111, 71, 242, 9, 11, 183, 143, 219, 153, 195, 185, 139, 240, 2, 185, 126, 241, 81, 89, 115, 16, 62, 200, 26, 214, 8, 207, 54, 159, 154, 79, 47, 160, 82, 142, 153, 141, 7, 221, 84, 179, 208, 165, 8, 216, 168, 37, 169, 114, 187, 54, 234, 107, 147, 100, 171, 149, 78, 223, 89, 251, 218, 171, 225, 17, 252, 162, 217, 53, 150, 164, 139, 122, 240, 80, 20, 77, 255, 0, 165, 34, 117, 162, 106, 94, 105, 50, 122, 252, 84, 120, 197, 105, 153, 112, 76, 72, 209, 115, 34, 147, 143, 234, 147, 198, 254, 49, 54, 107, 44, 224, 91, 212, 38, 234, 70, 28, 212, 185, 198, 141, 169, 73, 173, 56, 206, 157, 89, 186, 137, 74, 88, 24, 170, 54, 69, 37, 4, 166, 12, 0, 33, 153, 132, 51, 247, 134, 254, 113, 150, 29, 96, 150, 41, 182, 191, 228, 84, 140, 13, 195, 101, 2, 89, 161, 202, 37, 132, 197, 188, 196, 82, 112, 245, 219, 65, 3, 53, 51, 183, 10, 44, 4, 49, 70, 229, 18, 148, 114, 238, 142, 97, 120, 219, 46, 181, 84, 158, 25, 93, 67, 117, 10, 71, 205, 85, 33, 179, 239, 100, 34, 138, 162, 197, 243, 161, 122, 183, 210, 14, 176, 23, 17, 47, 120, 134, 240, 247, 109, 20, 55, 88, 102, 199, 138, 247, 176, 76, 83, 140, 54, 93, 242, 157, 27, 82, 146, 201, 27, 217, 50, 45, 69, 86, 211, 1, 84, 206, 84, 88, 117, 138, 152, 85, 40, 20, 194, 10, 90, 225, 186, 42, 126, 178, 212, 189, 225, 196, 253, 40, 101, 48, 195, 101, 86, 93, 11, 82, 29, 132, 178, 243, 175, 49, 90, 90, 76, 187, 1, 222, 170, 40, 88, 6, 246, 18, 0, 132, 106, 241, 92, 183, 184, 226, 82, 20, 161, 220, 84, 215, 26, 41, 163, 214, 52, 204, 117, 42, 166, 89, 171, 116, 90, 58, 76, 138, 8, 23, 82, 223, 6, 172, 164, 203, 43, 106, 130, 27, 53, 158, 163, 154, 5, 32, 5, 78, 166, 104, 105, 117, 60, 34, 12, 30, 190, 20, 245, 101, 68, 137, 174, 228, 234, 38, 66, 23, 113, 72, 81, 184, 22, 214, 240, 140, 53, 122, 101, 210, 155, 158, 42, 77, 142, 203, 87, 50, 253, 164, 235, 250, 202, 15, 52, 98, 210, 78, 255, 0, 83, 47, 251, 221, 242, 85, 144, 100, 193, 250, 81, 190, 47, 24, 21, 137, 9, 9, 18, 186, 107, 136, 73, 46, 114, 134, 227, 116, 210, 34, 145, 72, 97, 50, 144, 33, 33, 0, 149, 146, 4, 36, 8, 72, 119, 66, 66, 60, 110, 132, 129, 22, 72, 149, 208, 144, 129, 65, 205, 33, 89, 52, 130, 200, 95, 255, 217}},
                {BancoOpc.Bradesco, "Banco Bradesco S.A.", "Bradesco", New Byte() {255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 96, 0, 96, 0, 0, 255, 225, 0, 90, 69, 120, 105, 102, 0, 0, 77, 77, 0, 42, 0, 0, 0, 8, 0, 5, 3, 1, 0, 5, 0, 0, 0, 1, 0, 0, 0, 74, 3, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 81, 16, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 81, 17, 0, 4, 0, 0, 0, 1, 0, 0, 14, 195, 81, 18, 0, 4, 0, 0, 0, 1, 0, 0, 14, 195, 0, 0, 0, 0, 0, 1, 134, 160, 0, 0, 177, 143, 255, 219, 0, 67, 0, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 3, 3, 3, 3, 3, 6, 4, 4, 3, 5, 7, 6, 7, 7, 7, 6, 7, 7, 8, 9, 11, 9, 8, 8, 10, 8, 7, 7, 10, 13, 10, 10, 11, 12, 12, 12, 12, 7, 9, 14, 15, 13, 12, 14, 11, 12, 12, 12, 255, 219, 0, 67, 1, 2, 2, 2, 3, 3, 3, 6, 3, 3, 6, 12, 8, 7, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 255, 192, 0, 17, 8, 0, 44, 0, 45, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 196, 0, 31, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 249, 147, 7, 113, 37, 190, 99, 212, 147, 235, 235, 235, 223, 147, 70, 27, 113, 27, 122, 117, 249, 79, 249, 207, 183, 90, 189, 225, 223, 15, 222, 120, 187, 94, 178, 211, 116, 248, 140, 247, 186, 132, 201, 4, 8, 29, 87, 46, 205, 181, 65, 98, 64, 28, 145, 201, 56, 29, 200, 175, 209, 159, 248, 39, 215, 236, 47, 240, 239, 246, 95, 248, 117, 169, 124, 120, 248, 233, 172, 248, 79, 85, 209, 180, 123, 132, 131, 76, 183, 176, 185, 26, 213, 157, 157, 201, 151, 203, 103, 144, 64, 36, 73, 230, 14, 202, 170, 145, 151, 84, 218, 204, 121, 80, 83, 242, 76, 22, 14, 166, 38, 124, 169, 217, 45, 223, 68, 127, 174, 252, 105, 198, 216, 30, 27, 193, 251, 124, 66, 117, 42, 73, 168, 211, 165, 13, 103, 82, 109, 218, 49, 140, 117, 223, 189, 173, 100, 247, 118, 71, 193, 62, 19, 253, 157, 126, 33, 120, 247, 72, 93, 67, 67, 240, 39, 139, 245, 157, 61, 193, 100, 186, 176, 209, 110, 110, 97, 112, 58, 144, 232, 164, 17, 238, 13, 115, 26, 214, 131, 127, 225, 141, 82, 91, 61, 70, 198, 234, 202, 242, 220, 226, 91, 123, 136, 154, 57, 34, 62, 140, 173, 200, 252, 69, 126, 176, 252, 89, 253, 191, 124, 25, 241, 215, 196, 70, 61, 7, 246, 192, 212, 62, 29, 90, 177, 219, 105, 99, 101, 240, 246, 120, 173, 162, 92, 225, 119, 74, 227, 204, 39, 145, 156, 202, 171, 199, 10, 181, 202, 252, 107, 253, 150, 190, 47, 254, 208, 95, 5, 175, 167, 183, 241, 95, 195, 175, 218, 163, 195, 41, 106, 235, 167, 234, 54, 82, 65, 101, 226, 45, 22, 125, 172, 85, 224, 157, 1, 12, 3, 16, 94, 9, 37, 125, 225, 74, 132, 86, 33, 135, 165, 83, 40, 131, 79, 234, 243, 114, 107, 183, 43, 252, 20, 155, 95, 115, 63, 58, 203, 252, 91, 198, 194, 172, 30, 127, 134, 134, 22, 19, 105, 90, 127, 88, 167, 37, 126, 156, 245, 176, 244, 232, 201, 174, 171, 218, 71, 201, 189, 15, 205, 127, 4, 124, 64, 215, 254, 21, 234, 233, 169, 248, 115, 92, 213, 244, 13, 66, 60, 17, 115, 167, 93, 201, 109, 40, 199, 35, 230, 66, 15, 7, 158, 78, 43, 246, 95, 254, 9, 37, 255, 0, 5, 49, 187, 253, 165, 190, 14, 234, 218, 103, 196, 11, 203, 52, 241, 71, 131, 101, 130, 9, 53, 18, 22, 33, 170, 65, 50, 185, 141, 217, 70, 0, 145, 76, 110, 27, 0, 2, 54, 30, 164, 215, 226, 206, 187, 160, 223, 120, 103, 86, 184, 211, 181, 27, 27, 205, 58, 250, 202, 86, 138, 226, 214, 234, 38, 138, 123, 121, 1, 195, 43, 171, 0, 202, 70, 64, 32, 143, 230, 43, 232, 159, 248, 39, 181, 196, 246, 231, 197, 254, 68, 134, 60, 155, 61, 216, 239, 254, 191, 252, 107, 44, 155, 27, 90, 134, 37, 65, 61, 30, 235, 228, 207, 95, 198, 46, 5, 202, 248, 147, 32, 156, 171, 70, 62, 214, 46, 46, 21, 18, 92, 203, 222, 73, 171, 245, 78, 46, 214, 219, 103, 186, 71, 205, 155, 118, 247, 61, 49, 156, 227, 29, 107, 237, 31, 136, 62, 48, 255, 0, 132, 207, 254, 8, 89, 224, 75, 29, 53, 221, 143, 132, 62, 32, 75, 105, 172, 164, 127, 122, 51, 34, 94, 207, 17, 126, 251, 49, 113, 24, 7, 166, 112, 63, 135, 35, 227, 6, 66, 192, 246, 233, 138, 237, 126, 26, 252, 112, 214, 126, 25, 120, 31, 198, 30, 26, 129, 109, 111, 188, 61, 227, 107, 21, 180, 212, 172, 46, 67, 24, 252, 200, 223, 204, 130, 229, 48, 70, 38, 138, 65, 185, 79, 66, 9, 4, 16, 107, 131, 7, 93, 83, 231, 82, 251, 81, 107, 239, 62, 219, 138, 178, 42, 153, 138, 194, 214, 163, 103, 60, 61, 120, 85, 73, 232, 157, 185, 163, 37, 235, 203, 57, 56, 244, 230, 73, 59, 39, 117, 141, 240, 199, 225, 134, 189, 241, 155, 199, 54, 62, 24, 240, 190, 155, 62, 177, 174, 106, 140, 203, 105, 101, 14, 208, 211, 21, 70, 145, 177, 184, 133, 225, 84, 158, 181, 219, 248, 79, 199, 63, 20, 63, 224, 158, 159, 180, 28, 166, 214, 107, 255, 0, 7, 248, 187, 66, 150, 63, 182, 216, 200, 224, 164, 232, 200, 178, 249, 51, 160, 37, 101, 71, 86, 86, 32, 231, 174, 120, 97, 154, 251, 23, 254, 9, 201, 251, 57, 248, 103, 192, 222, 37, 253, 145, 62, 34, 88, 71, 120, 190, 36, 241, 214, 167, 226, 120, 181, 71, 146, 114, 240, 184, 182, 142, 246, 40, 182, 39, 240, 225, 64, 207, 92, 226, 188, 191, 254, 10, 73, 241, 62, 15, 131, 95, 240, 86, 127, 136, 126, 34, 155, 195, 186, 55, 138, 46, 108, 30, 194, 75, 27, 93, 85, 89, 173, 33, 184, 26, 125, 153, 73, 100, 141, 72, 243, 66, 224, 144, 140, 118, 146, 121, 4, 113, 93, 191, 82, 246, 56, 120, 226, 37, 59, 62, 101, 183, 68, 227, 205, 247, 234, 124, 79, 250, 245, 28, 231, 136, 107, 240, 221, 60, 52, 107, 97, 214, 30, 172, 154, 146, 87, 149, 74, 120, 135, 135, 148, 29, 223, 47, 35, 113, 118, 109, 109, 175, 145, 216, 127, 193, 120, 236, 52, 13, 79, 198, 191, 10, 252, 91, 6, 153, 14, 141, 227, 47, 24, 120, 115, 237, 158, 32, 176, 24, 19, 66, 160, 68, 96, 50, 12, 114, 224, 188, 241, 239, 60, 145, 16, 31, 194, 43, 197, 255, 0, 224, 158, 253, 60, 92, 125, 126, 196, 127, 73, 235, 197, 254, 49, 124, 97, 241, 71, 199, 239, 136, 90, 135, 138, 188, 97, 171, 207, 174, 107, 186, 139, 3, 53, 212, 184, 94, 0, 194, 170, 168, 27, 85, 84, 96, 5, 80, 0, 3, 240, 30, 209, 255, 0, 4, 247, 251, 158, 44, 250, 89, 127, 237, 122, 113, 196, 70, 190, 99, 237, 98, 172, 159, 249, 61, 126, 103, 78, 27, 135, 43, 100, 60, 17, 12, 167, 17, 83, 158, 84, 162, 147, 119, 109, 43, 212, 79, 149, 55, 175, 44, 111, 203, 27, 235, 100, 180, 71, 130, 252, 67, 240, 70, 163, 240, 195, 226, 14, 175, 225, 189, 98, 221, 237, 181, 77, 2, 246, 107, 27, 164, 32, 252, 146, 70, 229, 27, 30, 217, 28, 30, 224, 138, 202, 105, 198, 222, 255, 0, 149, 126, 223, 127, 193, 73, 63, 224, 156, 255, 0, 13, 62, 63, 248, 91, 85, 241, 238, 165, 101, 127, 165, 248, 179, 78, 182, 12, 247, 250, 92, 235, 11, 95, 132, 27, 81, 103, 86, 70, 87, 218, 14, 3, 96, 62, 48, 55, 96, 0, 63, 30, 245, 127, 133, 58, 117, 150, 169, 123, 110, 178, 222, 24, 237, 102, 104, 211, 46, 185, 32, 19, 215, 229, 235, 197, 70, 97, 149, 79, 13, 89, 211, 77, 53, 211, 208, 236, 240, 215, 196, 92, 63, 22, 100, 244, 243, 8, 83, 148, 37, 180, 211, 181, 185, 150, 143, 149, 221, 221, 95, 107, 164, 252, 143, 173, 191, 101, 127, 219, 183, 225, 191, 194, 239, 4, 254, 202, 182, 58, 198, 171, 121, 13, 199, 194, 237, 75, 196, 147, 248, 132, 37, 132, 178, 11, 69, 188, 55, 94, 65, 82, 20, 239, 207, 154, 191, 119, 56, 230, 190, 123, 255, 0, 130, 143, 124, 114, 240, 239, 237, 31, 251, 105, 248, 207, 198, 190, 19, 186, 154, 251, 195, 218, 212, 150, 141, 105, 113, 36, 13, 9, 144, 71, 101, 4, 77, 242, 176, 4, 124, 200, 221, 69, 112, 246, 191, 13, 108, 103, 156, 169, 150, 236, 109, 25, 200, 117, 207, 167, 167, 242, 167, 92, 252, 50, 177, 133, 73, 19, 94, 31, 156, 39, 44, 189, 8, 207, 247, 106, 107, 87, 173, 86, 138, 160, 237, 101, 111, 194, 42, 63, 146, 58, 242, 110, 6, 202, 242, 220, 230, 121, 222, 30, 83, 117, 101, 26, 176, 105, 181, 203, 106, 181, 229, 94, 90, 90, 247, 231, 147, 182, 186, 70, 201, 223, 115, 139, 50, 174, 58, 215, 209, 191, 240, 79, 131, 133, 241, 96, 246, 178, 255, 0, 218, 245, 228, 127, 240, 173, 108, 127, 231, 173, 223, 253, 244, 191, 252, 77, 125, 17, 251, 7, 248, 2, 206, 194, 211, 196, 206, 146, 92, 147, 43, 90, 134, 203, 47, 97, 47, 183, 189, 78, 93, 70, 94, 221, 75, 250, 216, 244, 56, 214, 186, 89, 45, 107, 127, 119, 255, 0, 75, 137, 255, 217}},
                {BancoOpc.Caixa, "Caixa", "Caixa", New Byte() {255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 2, 1, 0, 72, 0, 72, 0, 0, 255, 225, 11, 56, 69, 120, 105, 102, 0, 0, 77, 77, 0, 42, 0, 0, 0, 8, 0, 7, 1, 18, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 26, 0, 5, 0, 0, 0, 1, 0, 0, 0, 98, 1, 27, 0, 5, 0, 0, 0, 1, 0, 0, 0, 106, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 28, 0, 0, 0, 114, 1, 50, 0, 2, 0, 0, 0, 20, 0, 0, 0, 142, 135, 105, 0, 4, 0, 0, 0, 1, 0, 0, 0, 164, 0, 0, 0, 208, 0, 10, 252, 128, 0, 0, 39, 16, 0, 10, 252, 128, 0, 0, 39, 16, 65, 100, 111, 98, 101, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 67, 83, 52, 32, 87, 105, 110, 100, 111, 119, 115, 0, 50, 48, 49, 53, 58, 48, 57, 58, 48, 56, 32, 49, 53, 58, 52, 53, 58, 51, 52, 0, 0, 0, 0, 3, 160, 1, 0, 3, 0, 0, 0, 1, 255, 255, 0, 0, 160, 2, 0, 4, 0, 0, 0, 1, 0, 0, 0, 140, 160, 3, 0, 4, 0, 0, 0, 1, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 6, 1, 3, 0, 3, 0, 0, 0, 1, 0, 6, 0, 0, 1, 26, 0, 5, 0, 0, 0, 1, 0, 0, 1, 30, 1, 27, 0, 5, 0, 0, 0, 1, 0, 0, 1, 38, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 2, 1, 0, 4, 0, 0, 0, 1, 0, 0, 1, 46, 2, 2, 0, 4, 0, 0, 0, 1, 0, 0, 10, 2, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 72, 0, 0, 0, 1, 255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 2, 0, 0, 72, 0, 72, 0, 0, 255, 237, 0, 12, 65, 100, 111, 98, 101, 95, 67, 77, 0, 2, 255, 238, 0, 14, 65, 100, 111, 98, 101, 0, 100, 128, 0, 0, 0, 1, 255, 219, 0, 132, 0, 12, 8, 8, 8, 9, 8, 12, 9, 9, 12, 17, 11, 10, 11, 17, 21, 15, 12, 12, 15, 21, 24, 19, 19, 21, 19, 19, 24, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 13, 11, 11, 13, 14, 13, 16, 14, 14, 16, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 255, 192, 0, 17, 8, 0, 37, 0, 140, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 221, 0, 4, 0, 9, 255, 196, 1, 63, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 1, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 0, 1, 4, 1, 3, 2, 4, 2, 5, 7, 6, 8, 5, 3, 12, 51, 1, 0, 2, 17, 3, 4, 33, 18, 49, 5, 65, 81, 97, 19, 34, 113, 129, 50, 6, 20, 145, 161, 177, 66, 35, 36, 21, 82, 193, 98, 51, 52, 114, 130, 209, 67, 7, 37, 146, 83, 240, 225, 241, 99, 115, 53, 22, 162, 178, 131, 38, 68, 147, 84, 100, 69, 194, 163, 116, 54, 23, 210, 85, 226, 101, 242, 179, 132, 195, 211, 117, 227, 243, 70, 39, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 17, 0, 2, 2, 1, 2, 4, 4, 3, 4, 5, 6, 7, 7, 6, 5, 53, 1, 0, 2, 17, 3, 33, 49, 18, 4, 65, 81, 97, 113, 34, 19, 5, 50, 129, 145, 20, 161, 177, 66, 35, 193, 82, 209, 240, 51, 36, 98, 225, 114, 130, 146, 67, 83, 21, 99, 115, 52, 241, 37, 6, 22, 162, 178, 131, 7, 38, 53, 194, 210, 68, 147, 84, 163, 23, 100, 69, 85, 54, 116, 101, 226, 242, 179, 132, 195, 211, 117, 227, 243, 70, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 245, 66, 161, 117, 213, 83, 91, 173, 181, 237, 174, 182, 137, 115, 220, 64, 0, 121, 184, 167, 123, 154, 214, 151, 56, 195, 90, 36, 147, 216, 5, 228, 127, 91, 254, 180, 223, 214, 179, 29, 69, 47, 115, 58, 117, 46, 45, 174, 177, 160, 121, 7, 249, 235, 20, 252, 183, 47, 44, 243, 225, 26, 1, 243, 73, 139, 54, 97, 142, 54, 117, 39, 96, 246, 249, 159, 227, 15, 234, 222, 53, 142, 173, 182, 191, 32, 180, 234, 106, 105, 45, 255, 0, 61, 92, 232, 191, 91, 186, 55, 90, 200, 56, 216, 111, 120, 188, 52, 187, 101, 140, 45, 208, 114, 188, 183, 165, 253, 92, 235, 61, 89, 134, 204, 12, 103, 89, 83, 76, 122, 132, 134, 182, 124, 26, 235, 11, 87, 85, 254, 47, 186, 62, 110, 7, 93, 203, 110, 117, 14, 162, 218, 168, 0, 7, 119, 222, 241, 171, 93, 244, 93, 244, 21, 156, 220, 175, 47, 12, 114, 169, 222, 72, 14, 255, 0, 247, 44, 24, 243, 230, 148, 197, 199, 211, 35, 219, 246, 190, 130, 247, 53, 140, 47, 113, 13, 107, 65, 46, 113, 208, 0, 57, 43, 152, 119, 248, 197, 250, 180, 215, 17, 234, 90, 96, 145, 34, 183, 66, 143, 248, 194, 235, 159, 179, 250, 79, 216, 234, 116, 100, 231, 75, 7, 136, 172, 127, 58, 239, 251, 226, 242, 209, 85, 134, 183, 88, 214, 147, 93, 112, 30, 238, 192, 187, 232, 74, 111, 41, 201, 199, 44, 12, 230, 104, 29, 34, 187, 152, 230, 37, 9, 112, 199, 126, 175, 180, 116, 63, 172, 157, 51, 174, 122, 163, 1, 238, 113, 162, 55, 135, 180, 183, 233, 78, 222, 127, 170, 180, 50, 242, 106, 197, 198, 179, 38, 227, 21, 210, 210, 247, 145, 224, 53, 94, 101, 254, 45, 50, 253, 30, 187, 110, 57, 48, 50, 105, 48, 60, 216, 119, 143, 250, 46, 114, 237, 126, 187, 100, 253, 159, 234, 198, 115, 184, 54, 48, 86, 223, 139, 200, 106, 139, 55, 46, 33, 156, 99, 27, 30, 26, 242, 146, 252, 121, 184, 177, 25, 157, 197, 180, 63, 241, 202, 250, 181, 19, 55, 255, 0, 219, 71, 251, 215, 64, 206, 163, 85, 157, 56, 117, 22, 53, 238, 165, 213, 250, 205, 104, 111, 188, 182, 55, 253, 5, 225, 172, 97, 115, 154, 208, 36, 184, 128, 7, 197, 123, 182, 29, 30, 134, 29, 24, 253, 170, 173, 181, 255, 0, 154, 208, 213, 39, 57, 203, 99, 193, 193, 195, 103, 136, 155, 179, 217, 111, 47, 154, 121, 56, 175, 166, 207, 50, 127, 198, 103, 213, 225, 195, 50, 15, 246, 63, 218, 182, 58, 39, 214, 62, 157, 214, 241, 237, 200, 196, 115, 154, 218, 12, 90, 219, 6, 210, 52, 221, 187, 250, 171, 205, 254, 187, 116, 63, 217, 29, 97, 207, 165, 187, 113, 114, 230, 218, 96, 104, 29, 254, 18, 191, 236, 56, 172, 222, 143, 212, 108, 194, 200, 115, 91, 97, 101, 57, 3, 101, 237, 28, 56, 79, 183, 119, 245, 83, 242, 242, 152, 207, 44, 115, 97, 4, 203, 135, 138, 32, 159, 154, 191, 65, 24, 179, 203, 223, 24, 242, 17, 24, 153, 112, 241, 87, 203, 127, 164, 250, 171, 254, 181, 244, 230, 60, 180, 7, 188, 2, 70, 224, 52, 49, 220, 43, 125, 59, 172, 81, 212, 92, 225, 77, 111, 13, 111, 47, 112, 128, 185, 62, 147, 210, 174, 234, 54, 195, 37, 180, 180, 251, 236, 254, 3, 249, 75, 182, 197, 198, 167, 22, 150, 211, 72, 218, 198, 8, 255, 0, 122, 192, 228, 242, 243, 57, 143, 22, 74, 142, 62, 213, 172, 157, 158, 115, 15, 43, 132, 8, 99, 185, 228, 234, 120, 180, 139, 91, 172, 245, 108, 110, 143, 129, 102, 126, 84, 250, 117, 192, 13, 111, 210, 113, 58, 53, 141, 92, 207, 254, 58, 93, 39, 254, 226, 100, 127, 209, 255, 0, 201, 44, 111, 241, 143, 214, 254, 215, 212, 25, 210, 233, 116, 211, 135, 238, 182, 56, 54, 187, 243, 127, 235, 108, 92, 149, 152, 247, 85, 85, 87, 61, 187, 107, 188, 23, 84, 73, 228, 52, 236, 115, 128, 254, 178, 232, 185, 94, 75, 28, 177, 137, 101, 190, 41, 109, 173, 104, 225, 230, 230, 102, 38, 68, 42, 131, 237, 125, 19, 172, 81, 214, 112, 43, 207, 199, 107, 153, 93, 132, 141, 142, 228, 22, 152, 215, 106, 209, 92, 63, 248, 174, 203, 245, 58, 102, 86, 33, 58, 211, 104, 120, 30, 79, 31, 249, 138, 238, 21, 95, 187, 143, 189, 123, 63, 163, 197, 95, 224, 179, 251, 167, 217, 247, 58, 211, 255, 208, 239, 190, 181, 223, 102, 55, 213, 206, 161, 117, 95, 206, 54, 151, 71, 207, 219, 252, 87, 139, 68, 15, 37, 238, 249, 216, 149, 230, 225, 221, 137, 111, 243, 119, 177, 204, 119, 204, 47, 21, 235, 29, 31, 55, 163, 102, 59, 23, 45, 133, 160, 31, 209, 217, 249, 175, 111, 103, 49, 203, 79, 225, 147, 136, 19, 134, 210, 58, 253, 26, 92, 236, 77, 198, 93, 0, 125, 127, 234, 251, 240, 223, 209, 177, 62, 196, 90, 104, 21, 52, 0, 222, 198, 61, 251, 191, 149, 189, 90, 171, 51, 14, 223, 84, 213, 107, 44, 244, 14, 219, 92, 211, 59, 72, 27, 246, 185, 223, 213, 114, 240, 218, 242, 175, 165, 142, 109, 87, 62, 182, 59, 233, 53, 174, 45, 7, 251, 32, 237, 93, 87, 237, 65, 210, 126, 162, 85, 141, 91, 182, 229, 117, 103, 216, 233, 157, 69, 83, 182, 203, 63, 180, 193, 177, 71, 155, 145, 49, 32, 241, 241, 25, 202, 128, 243, 223, 137, 118, 62, 104, 17, 242, 215, 12, 119, 113, 190, 179, 245, 147, 214, 122, 205, 249, 83, 250, 6, 159, 79, 28, 120, 49, 186, 110, 255, 0, 174, 125, 37, 112, 83, 211, 235, 250, 146, 248, 200, 173, 217, 249, 25, 12, 180, 210, 28, 55, 134, 48, 250, 64, 109, 255, 0, 61, 235, 23, 167, 96, 223, 212, 179, 106, 193, 196, 0, 221, 105, 218, 208, 76, 13, 4, 151, 21, 185, 157, 245, 11, 174, 224, 97, 93, 155, 127, 164, 107, 161, 133, 239, 13, 116, 186, 7, 59, 116, 87, 103, 237, 64, 67, 25, 152, 135, 9, 4, 15, 222, 225, 107, 14, 57, 113, 79, 132, 202, 238, 207, 103, 59, 234, 214, 103, 216, 186, 246, 14, 68, 192, 22, 181, 142, 63, 201, 179, 244, 78, 255, 0, 170, 93, 239, 248, 205, 200, 217, 208, 170, 164, 31, 231, 239, 104, 143, 38, 130, 245, 229, 237, 176, 53, 193, 205, 112, 5, 186, 131, 230, 23, 103, 254, 48, 186, 165, 121, 152, 157, 28, 181, 224, 139, 169, 57, 7, 226, 224, 193, 252, 83, 51, 227, 18, 230, 112, 203, 166, 183, 254, 15, 169, 118, 41, 17, 135, 36, 124, 158, 111, 161, 99, 253, 167, 172, 225, 81, 200, 178, 246, 3, 240, 14, 146, 189, 193, 121, 7, 212, 42, 91, 145, 245, 159, 20, 242, 42, 15, 176, 252, 154, 99, 254, 169, 119, 95, 88, 58, 251, 70, 236, 60, 55, 251, 184, 182, 209, 219, 254, 13, 171, 63, 227, 92, 204, 49, 16, 100, 118, 142, 131, 196, 183, 126, 23, 203, 207, 53, 198, 35, 121, 106, 122, 68, 33, 250, 205, 212, 58, 102, 99, 155, 135, 118, 53, 121, 172, 164, 238, 151, 151, 0, 29, 199, 177, 204, 219, 253, 165, 205, 103, 91, 245, 123, 14, 163, 101, 157, 42, 130, 79, 208, 102, 231, 201, 63, 231, 45, 14, 157, 129, 127, 80, 200, 21, 84, 32, 79, 189, 253, 128, 92, 215, 214, 190, 153, 153, 211, 250, 205, 180, 94, 93, 99, 116, 117, 22, 70, 133, 135, 194, 22, 103, 194, 79, 55, 206, 103, 60, 89, 165, 135, 0, 215, 128, 30, 30, 47, 234, 197, 210, 248, 148, 121, 78, 83, 16, 140, 113, 12, 185, 228, 43, 142, 95, 163, 253, 121, 62, 159, 245, 99, 51, 11, 55, 163, 99, 223, 133, 91, 105, 172, 183, 107, 170, 110, 187, 94, 223, 107, 217, 37, 27, 174, 117, 90, 186, 71, 75, 191, 58, 205, 77, 109, 246, 52, 254, 115, 206, 140, 103, 249, 203, 128, 255, 0, 23, 125, 105, 216, 61, 73, 221, 58, 249, 24, 249, 177, 233, 146, 12, 11, 71, 209, 255, 0, 61, 190, 212, 79, 241, 145, 214, 31, 149, 156, 206, 151, 64, 113, 167, 19, 223, 113, 0, 193, 177, 195, 255, 0, 69, 181, 106, 253, 208, 14, 103, 219, 31, 37, 241, 95, 245, 28, 175, 188, 19, 135, 140, 252, 231, 79, 240, 158, 62, 235, 108, 200, 185, 246, 218, 233, 178, 215, 23, 61, 199, 93, 92, 101, 206, 91, 191, 90, 114, 58, 67, 241, 250, 94, 63, 76, 189, 183, 140, 74, 61, 43, 54, 181, 195, 89, 221, 62, 240, 223, 165, 47, 64, 250, 189, 245, 99, 55, 175, 91, 115, 42, 112, 199, 109, 0, 23, 62, 192, 98, 79, 13, 1, 88, 250, 193, 245, 47, 59, 161, 226, 215, 144, 251, 155, 146, 44, 126, 205, 181, 53, 210, 52, 221, 43, 74, 89, 48, 251, 176, 143, 29, 74, 27, 64, 124, 191, 107, 76, 71, 39, 4, 143, 14, 146, 220, 183, 127, 197, 158, 95, 163, 215, 108, 198, 38, 27, 147, 73, 129, 252, 166, 29, 203, 212, 101, 120, 175, 213, 171, 114, 48, 186, 246, 14, 71, 166, 240, 27, 104, 107, 165, 174, 225, 255, 0, 163, 61, 191, 148, 189, 169, 65, 56, 1, 207, 227, 55, 243, 2, 111, 196, 70, 76, 177, 36, 242, 211, 29, 136, 255, 0, 165, 23, 255, 209, 245, 69, 79, 168, 254, 204, 244, 15, 237, 47, 75, 208, 239, 235, 109, 219, 255, 0, 77, 124, 196, 146, 81, 249, 134, 255, 0, 224, 238, 137, 109, 211, 252, 39, 232, 106, 63, 230, 39, 170, 61, 15, 176, 122, 147, 166, 221, 147, 43, 71, 39, 246, 4, 213, 246, 191, 179, 125, 31, 208, 250, 155, 62, 143, 252, 31, 242, 23, 205, 9, 41, 101, 184, 254, 115, 235, 251, 24, 198, 199, 228, 126, 152, 196, 253, 133, 235, 143, 177, 253, 155, 215, 143, 111, 165, 179, 116, 119, 141, 158, 229, 118, 239, 75, 209, 119, 175, 183, 210, 131, 191, 124, 109, 142, 251, 167, 218, 190, 90, 73, 50, 95, 48, 249, 191, 194, 249, 151, 199, 111, 209, 255, 0, 7, 103, 233, 49, 255, 0, 54, 59, 125, 142, 63, 235, 104, 214, 254, 194, 219, 95, 173, 246, 109, 187, 127, 67, 191, 100, 108, 255, 0, 131, 221, 249, 171, 230, 100, 147, 206, 227, 231, 90, 58, 252, 143, 211, 152, 223, 178, 61, 79, 213, 62, 207, 234, 65, 254, 107, 102, 232, 252, 239, 160, 159, 252, 149, 172, 250, 51, 58, 253, 30, 87, 204, 73, 40, 50, 239, 211, 254, 171, 187, 46, 29, 142, 255, 0, 245, 39, 234, 58, 62, 203, 175, 161, 179, 207, 100, 127, 223, 82, 183, 236, 187, 191, 77, 233, 238, 237, 190, 39, 254, 146, 249, 113, 36, 161, 252, 184, 21, 61, 255, 0, 239, 223, 168, 91, 246, 45, 195, 103, 165, 187, 182, 221, 178, 157, 223, 100, 220, 119, 250, 123, 187, 206, 217, 95, 46, 164, 159, 215, 170, 206, 159, 162, 253, 75, 95, 163, 7, 210, 219, 231, 178, 63, 239, 169, 221, 233, 199, 190, 35, 249, 94, 43, 229, 148, 146, 235, 252, 173, 61, 58, 126, 199, 234, 79, 213, 187, 108, 158, 220, 34, 47, 149, 210, 75, 175, 84, 116, 232, 255, 0, 255, 217, 255, 237, 15, 204, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 51, 46, 48, 0, 56, 66, 73, 77, 4, 37, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 66, 73, 77, 3, 237, 0, 0, 0, 0, 0, 16, 0, 72, 0, 0, 0, 1, 0, 2, 0, 72, 0, 0, 0, 1, 0, 2, 56, 66, 73, 77, 4, 38, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 128, 0, 0, 56, 66, 73, 77, 4, 13, 0, 0, 0, 0, 0, 4, 0, 0, 0, 30, 56, 66, 73, 77, 4, 25, 0, 0, 0, 0, 0, 4, 0, 0, 0, 30, 56, 66, 73, 77, 3, 243, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 56, 66, 73, 77, 39, 16, 0, 0, 0, 0, 0, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 56, 66, 73, 77, 3, 245, 0, 0, 0, 0, 0, 72, 0, 47, 102, 102, 0, 1, 0, 108, 102, 102, 0, 6, 0, 0, 0, 0, 0, 1, 0, 47, 102, 102, 0, 1, 0, 161, 153, 154, 0, 6, 0, 0, 0, 0, 0, 1, 0, 50, 0, 0, 0, 1, 0, 90, 0, 0, 0, 6, 0, 0, 0, 0, 0, 1, 0, 53, 0, 0, 0, 1, 0, 45, 0, 0, 0, 6, 0, 0, 0, 0, 0, 1, 56, 66, 73, 77, 3, 248, 0, 0, 0, 0, 0, 112, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 232, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 232, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 232, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 232, 0, 0, 56, 66, 73, 77, 4, 8, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 2, 64, 0, 0, 2, 64, 0, 0, 0, 0, 56, 66, 73, 77, 4, 30, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 56, 66, 73, 77, 4, 26, 0, 0, 0, 0, 3, 63, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 140, 0, 0, 0, 5, 0, 99, 0, 97, 0, 105, 0, 120, 0, 97, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 110, 117, 108, 108, 0, 0, 0, 2, 0, 0, 0, 6, 98, 111, 117, 110, 100, 115, 79, 98, 106, 99, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 82, 99, 116, 49, 0, 0, 0, 4, 0, 0, 0, 0, 84, 111, 112, 32, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 76, 101, 102, 116, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 111, 109, 108, 111, 110, 103, 0, 0, 0, 37, 0, 0, 0, 0, 82, 103, 104, 116, 108, 111, 110, 103, 0, 0, 0, 140, 0, 0, 0, 6, 115, 108, 105, 99, 101, 115, 86, 108, 76, 115, 0, 0, 0, 1, 79, 98, 106, 99, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 115, 108, 105, 99, 101, 0, 0, 0, 18, 0, 0, 0, 7, 115, 108, 105, 99, 101, 73, 68, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 7, 103, 114, 111, 117, 112, 73, 68, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 6, 111, 114, 105, 103, 105, 110, 101, 110, 117, 109, 0, 0, 0, 12, 69, 83, 108, 105, 99, 101, 79, 114, 105, 103, 105, 110, 0, 0, 0, 13, 97, 117, 116, 111, 71, 101, 110, 101, 114, 97, 116, 101, 100, 0, 0, 0, 0, 84, 121, 112, 101, 101, 110, 117, 109, 0, 0, 0, 10, 69, 83, 108, 105, 99, 101, 84, 121, 112, 101, 0, 0, 0, 0, 73, 109, 103, 32, 0, 0, 0, 6, 98, 111, 117, 110, 100, 115, 79, 98, 106, 99, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 82, 99, 116, 49, 0, 0, 0, 4, 0, 0, 0, 0, 84, 111, 112, 32, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 76, 101, 102, 116, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 111, 109, 108, 111, 110, 103, 0, 0, 0, 37, 0, 0, 0, 0, 82, 103, 104, 116, 108, 111, 110, 103, 0, 0, 0, 140, 0, 0, 0, 3, 117, 114, 108, 84, 69, 88, 84, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 110, 117, 108, 108, 84, 69, 88, 84, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 77, 115, 103, 101, 84, 69, 88, 84, 0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 97, 108, 116, 84, 97, 103, 84, 69, 88, 84, 0, 0, 0, 1, 0, 0, 0, 0, 0, 14, 99, 101, 108, 108, 84, 101, 120, 116, 73, 115, 72, 84, 77, 76, 98, 111, 111, 108, 1, 0, 0, 0, 8, 99, 101, 108, 108, 84, 101, 120, 116, 84, 69, 88, 84, 0, 0, 0, 1, 0, 0, 0, 0, 0, 9, 104, 111, 114, 122, 65, 108, 105, 103, 110, 101, 110, 117, 109, 0, 0, 0, 15, 69, 83, 108, 105, 99, 101, 72, 111, 114, 122, 65, 108, 105, 103, 110, 0, 0, 0, 7, 100, 101, 102, 97, 117, 108, 116, 0, 0, 0, 9, 118, 101, 114, 116, 65, 108, 105, 103, 110, 101, 110, 117, 109, 0, 0, 0, 15, 69, 83, 108, 105, 99, 101, 86, 101, 114, 116, 65, 108, 105, 103, 110, 0, 0, 0, 7, 100, 101, 102, 97, 117, 108, 116, 0, 0, 0, 11, 98, 103, 67, 111, 108, 111, 114, 84, 121, 112, 101, 101, 110, 117, 109, 0, 0, 0, 17, 69, 83, 108, 105, 99, 101, 66, 71, 67, 111, 108, 111, 114, 84, 121, 112, 101, 0, 0, 0, 0, 78, 111, 110, 101, 0, 0, 0, 9, 116, 111, 112, 79, 117, 116, 115, 101, 116, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 10, 108, 101, 102, 116, 79, 117, 116, 115, 101, 116, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 12, 98, 111, 116, 116, 111, 109, 79, 117, 116, 115, 101, 116, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 11, 114, 105, 103, 104, 116, 79, 117, 116, 115, 101, 116, 108, 111, 110, 103, 0, 0, 0, 0, 0, 56, 66, 73, 77, 4, 40, 0, 0, 0, 0, 0, 12, 0, 0, 0, 2, 63, 240, 0, 0, 0, 0, 0, 0, 56, 66, 73, 77, 4, 17, 0, 0, 0, 0, 0, 1, 1, 0, 56, 66, 73, 77, 4, 20, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 56, 66, 73, 77, 4, 12, 0, 0, 0, 0, 10, 30, 0, 0, 0, 1, 0, 0, 0, 140, 0, 0, 0, 37, 0, 0, 1, 164, 0, 0, 60, 180, 0, 0, 10, 2, 0, 24, 0, 1, 255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 2, 0, 0, 72, 0, 72, 0, 0, 255, 237, 0, 12, 65, 100, 111, 98, 101, 95, 67, 77, 0, 2, 255, 238, 0, 14, 65, 100, 111, 98, 101, 0, 100, 128, 0, 0, 0, 1, 255, 219, 0, 132, 0, 12, 8, 8, 8, 9, 8, 12, 9, 9, 12, 17, 11, 10, 11, 17, 21, 15, 12, 12, 15, 21, 24, 19, 19, 21, 19, 19, 24, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 13, 11, 11, 13, 14, 13, 16, 14, 14, 16, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 255, 192, 0, 17, 8, 0, 37, 0, 140, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 221, 0, 4, 0, 9, 255, 196, 1, 63, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 1, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 0, 1, 4, 1, 3, 2, 4, 2, 5, 7, 6, 8, 5, 3, 12, 51, 1, 0, 2, 17, 3, 4, 33, 18, 49, 5, 65, 81, 97, 19, 34, 113, 129, 50, 6, 20, 145, 161, 177, 66, 35, 36, 21, 82, 193, 98, 51, 52, 114, 130, 209, 67, 7, 37, 146, 83, 240, 225, 241, 99, 115, 53, 22, 162, 178, 131, 38, 68, 147, 84, 100, 69, 194, 163, 116, 54, 23, 210, 85, 226, 101, 242, 179, 132, 195, 211, 117, 227, 243, 70, 39, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 17, 0, 2, 2, 1, 2, 4, 4, 3, 4, 5, 6, 7, 7, 6, 5, 53, 1, 0, 2, 17, 3, 33, 49, 18, 4, 65, 81, 97, 113, 34, 19, 5, 50, 129, 145, 20, 161, 177, 66, 35, 193, 82, 209, 240, 51, 36, 98, 225, 114, 130, 146, 67, 83, 21, 99, 115, 52, 241, 37, 6, 22, 162, 178, 131, 7, 38, 53, 194, 210, 68, 147, 84, 163, 23, 100, 69, 85, 54, 116, 101, 226, 242, 179, 132, 195, 211, 117, 227, 243, 70, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 245, 66, 161, 117, 213, 83, 91, 173, 181, 237, 174, 182, 137, 115, 220, 64, 0, 121, 184, 167, 123, 154, 214, 151, 56, 195, 90, 36, 147, 216, 5, 228, 127, 91, 254, 180, 223, 214, 179, 29, 69, 47, 115, 58, 117, 46, 45, 174, 177, 160, 121, 7, 249, 235, 20, 252, 183, 47, 44, 243, 225, 26, 1, 243, 73, 139, 54, 97, 142, 54, 117, 39, 96, 246, 249, 159, 227, 15, 234, 222, 53, 142, 173, 182, 191, 32, 180, 234, 106, 105, 45, 255, 0, 61, 92, 232, 191, 91, 186, 55, 90, 200, 56, 216, 111, 120, 188, 52, 187, 101, 140, 45, 208, 114, 188, 183, 165, 253, 92, 235, 61, 89, 134, 204, 12, 103, 89, 83, 76, 122, 132, 134, 182, 124, 26, 235, 11, 87, 85, 254, 47, 186, 62, 110, 7, 93, 203, 110, 117, 14, 162, 218, 168, 0, 7, 119, 222, 241, 171, 93, 244, 93, 244, 21, 156, 220, 175, 47, 12, 114, 169, 222, 72, 14, 255, 0, 247, 44, 24, 243, 230, 148, 197, 199, 211, 35, 219, 246, 190, 130, 247, 53, 140, 47, 113, 13, 107, 65, 46, 113, 208, 0, 57, 43, 152, 119, 248, 197, 250, 180, 215, 17, 234, 90, 96, 145, 34, 183, 66, 143, 248, 194, 235, 159, 179, 250, 79, 216, 234, 116, 100, 231, 75, 7, 136, 172, 127, 58, 239, 251, 226, 242, 209, 85, 134, 183, 88, 214, 147, 93, 112, 30, 238, 192, 187, 232, 74, 111, 41, 201, 199, 44, 12, 230, 104, 29, 34, 187, 152, 230, 37, 9, 112, 199, 126, 175, 180, 116, 63, 172, 157, 51, 174, 122, 163, 1, 238, 113, 162, 55, 135, 180, 183, 233, 78, 222, 127, 170, 180, 50, 242, 106, 197, 198, 179, 38, 227, 21, 210, 210, 247, 145, 224, 53, 94, 101, 254, 45, 50, 253, 30, 187, 110, 57, 48, 50, 105, 48, 60, 216, 119, 143, 250, 46, 114, 237, 126, 187, 100, 253, 159, 234, 198, 115, 184, 54, 48, 86, 223, 139, 200, 106, 139, 55, 46, 33, 156, 99, 27, 30, 26, 242, 146, 252, 121, 184, 177, 25, 157, 197, 180, 63, 241, 202, 250, 181, 19, 55, 255, 0, 219, 71, 251, 215, 64, 206, 163, 85, 157, 56, 117, 22, 53, 238, 165, 213, 250, 205, 104, 111, 188, 182, 55, 253, 5, 225, 172, 97, 115, 154, 208, 36, 184, 128, 7, 197, 123, 182, 29, 30, 134, 29, 24, 253, 170, 173, 181, 255, 0, 154, 208, 213, 39, 57, 203, 99, 193, 193, 195, 103, 136, 155, 179, 217, 111, 47, 154, 121, 56, 175, 166, 207, 50, 127, 198, 103, 213, 225, 195, 50, 15, 246, 63, 218, 182, 58, 39, 214, 62, 157, 214, 241, 237, 200, 196, 115, 154, 218, 12, 90, 219, 6, 210, 52, 221, 187, 250, 171, 205, 254, 187, 116, 63, 217, 29, 97, 207, 165, 187, 113, 114, 230, 218, 96, 104, 29, 254, 18, 191, 236, 56, 172, 222, 143, 212, 108, 194, 200, 115, 91, 97, 101, 57, 3, 101, 237, 28, 56, 79, 183, 119, 245, 83, 242, 242, 152, 207, 44, 115, 97, 4, 203, 135, 138, 32, 159, 154, 191, 65, 24, 179, 203, 223, 24, 242, 17, 24, 153, 112, 241, 87, 203, 127, 164, 250, 171, 254, 181, 244, 230, 60, 180, 7, 188, 2, 70, 224, 52, 49, 220, 43, 125, 59, 172, 81, 212, 92, 225, 77, 111, 13, 111, 47, 112, 128, 185, 62, 147, 210, 174, 234, 54, 195, 37, 180, 180, 251, 236, 254, 3, 249, 75, 182, 197, 198, 167, 22, 150, 211, 72, 218, 198, 8, 255, 0, 122, 192, 228, 242, 243, 57, 143, 22, 74, 142, 62, 213, 172, 157, 158, 115, 15, 43, 132, 8, 99, 185, 228, 234, 120, 180, 139, 91, 172, 245, 108, 110, 143, 129, 102, 126, 84, 250, 117, 192, 13, 111, 210, 113, 58, 53, 141, 92, 207, 254, 58, 93, 39, 254, 226, 100, 127, 209, 255, 0, 201, 44, 111, 241, 143, 214, 254, 215, 212, 25, 210, 233, 116, 211, 135, 238, 182, 56, 54, 187, 243, 127, 235, 108, 92, 149, 152, 247, 85, 85, 87, 61, 187, 107, 188, 23, 84, 73, 228, 52, 236, 115, 128, 254, 178, 232, 185, 94, 75, 28, 177, 137, 101, 190, 41, 109, 173, 104, 225, 230, 230, 102, 38, 68, 42, 131, 237, 125, 19, 172, 81, 214, 112, 43, 207, 199, 107, 153, 93, 132, 141, 142, 228, 22, 152, 215, 106, 209, 92, 63, 248, 174, 203, 245, 58, 102, 86, 33, 58, 211, 104, 120, 30, 79, 31, 249, 138, 238, 21, 95, 187, 143, 189, 123, 63, 163, 197, 95, 224, 179, 251, 167, 217, 247, 58, 211, 255, 208, 239, 190, 181, 223, 102, 55, 213, 206, 161, 117, 95, 206, 54, 151, 71, 207, 219, 252, 87, 139, 68, 15, 37, 238, 249, 216, 149, 230, 225, 221, 137, 111, 243, 119, 177, 204, 119, 204, 47, 21, 235, 29, 31, 55, 163, 102, 59, 23, 45, 133, 160, 31, 209, 217, 249, 175, 111, 103, 49, 203, 79, 225, 147, 136, 19, 134, 210, 58, 253, 26, 92, 236, 77, 198, 93, 0, 125, 127, 234, 251, 240, 223, 209, 177, 62, 196, 90, 104, 21, 52, 0, 222, 198, 61, 251, 191, 149, 189, 90, 171, 51, 14, 223, 84, 213, 107, 44, 244, 14, 219, 92, 211, 59, 72, 27, 246, 185, 223, 213, 114, 240, 218, 242, 175, 165, 142, 109, 87, 62, 182, 59, 233, 53, 174, 45, 7, 251, 32, 237, 93, 87, 237, 65, 210, 126, 162, 85, 141, 91, 182, 229, 117, 103, 216, 233, 157, 69, 83, 182, 203, 63, 180, 193, 177, 71, 155, 145, 49, 32, 241, 241, 25, 202, 128, 243, 223, 137, 118, 62, 104, 17, 242, 215, 12, 119, 113, 190, 179, 245, 147, 214, 122, 205, 249, 83, 250, 6, 159, 79, 28, 120, 49, 186, 110, 255, 0, 174, 125, 37, 112, 83, 211, 235, 250, 146, 248, 200, 173, 217, 249, 25, 12, 180, 210, 28, 55, 134, 48, 250, 64, 109, 255, 0, 61, 235, 23, 167, 96, 223, 212, 179, 106, 193, 196, 0, 221, 105, 218, 208, 76, 13, 4, 151, 21, 185, 157, 245, 11, 174, 224, 97, 93, 155, 127, 164, 107, 161, 133, 239, 13, 116, 186, 7, 59, 116, 87, 103, 237, 64, 67, 25, 152, 135, 9, 4, 15, 222, 225, 107, 14, 57, 113, 79, 132, 202, 238, 207, 103, 59, 234, 214, 103, 216, 186, 246, 14, 68, 192, 22, 181, 142, 63, 201, 179, 244, 78, 255, 0, 170, 93, 239, 248, 205, 200, 217, 208, 170, 164, 31, 231, 239, 104, 143, 38, 130, 245, 229, 237, 176, 53, 193, 205, 112, 5, 186, 131, 230, 23, 103, 254, 48, 186, 165, 121, 152, 157, 28, 181, 224, 139, 169, 57, 7, 226, 224, 193, 252, 83, 51, 227, 18, 230, 112, 203, 166, 183, 254, 15, 169, 118, 41, 17, 135, 36, 124, 158, 111, 161, 99, 253, 167, 172, 225, 81, 200, 178, 246, 3, 240, 14, 146, 189, 193, 121, 7, 212, 42, 91, 145, 245, 159, 20, 242, 42, 15, 176, 252, 154, 99, 254, 169, 119, 95, 88, 58, 251, 70, 236, 60, 55, 251, 184, 182, 209, 219, 254, 13, 171, 63, 227, 92, 204, 49, 16, 100, 118, 142, 131, 196, 183, 126, 23, 203, 207, 53, 198, 35, 121, 106, 122, 68, 33, 250, 205, 212, 58, 102, 99, 155, 135, 118, 53, 121, 172, 164, 238, 151, 151, 0, 29, 199, 177, 204, 219, 253, 165, 205, 103, 91, 245, 123, 14, 163, 101, 157, 42, 130, 79, 208, 102, 231, 201, 63, 231, 45, 14, 157, 129, 127, 80, 200, 21, 84, 32, 79, 189, 253, 128, 92, 215, 214, 190, 153, 153, 211, 250, 205, 180, 94, 93, 99, 116, 117, 22, 70, 133, 135, 194, 22, 103, 194, 79, 55, 206, 103, 60, 89, 165, 135, 0, 215, 128, 30, 30, 47, 234, 197, 210, 248, 148, 121, 78, 83, 16, 140, 113, 12, 185, 228, 43, 142, 95, 163, 253, 121, 62, 159, 245, 99, 51, 11, 55, 163, 99, 223, 133, 91, 105, 172, 183, 107, 170, 110, 187, 94, 223, 107, 217, 37, 27, 174, 117, 90, 186, 71, 75, 191, 58, 205, 77, 109, 246, 52, 254, 115, 206, 140, 103, 249, 203, 128, 255, 0, 23, 125, 105, 216, 61, 73, 221, 58, 249, 24, 249, 177, 233, 146, 12, 11, 71, 209, 255, 0, 61, 190, 212, 79, 241, 145, 214, 31, 149, 156, 206, 151, 64, 113, 167, 19, 223, 113, 0, 193, 177, 195, 255, 0, 69, 181, 106, 253, 208, 14, 103, 219, 31, 37, 241, 95, 245, 28, 175, 188, 19, 135, 140, 252, 231, 79, 240, 158, 62, 235, 108, 200, 185, 246, 218, 233, 178, 215, 23, 61, 199, 93, 92, 101, 206, 91, 191, 90, 114, 58, 67, 241, 250, 94, 63, 76, 189, 183, 140, 74, 61, 43, 54, 181, 195, 89, 221, 62, 240, 223, 165, 47, 64, 250, 189, 245, 99, 55, 175, 91, 115, 42, 112, 199, 109, 0, 23, 62, 192, 98, 79, 13, 1, 88, 250, 193, 245, 47, 59, 161, 226, 215, 144, 251, 155, 146, 44, 126, 205, 181, 53, 210, 52, 221, 43, 74, 89, 48, 251, 176, 143, 29, 74, 27, 64, 124, 191, 107, 76, 71, 39, 4, 143, 14, 146, 220, 183, 127, 197, 158, 95, 163, 215, 108, 198, 38, 27, 147, 73, 129, 252, 166, 29, 203, 212, 101, 120, 175, 213, 171, 114, 48, 186, 246, 14, 71, 166, 240, 27, 104, 107, 165, 174, 225, 255, 0, 163, 61, 191, 148, 189, 169, 65, 56, 1, 207, 227, 55, 243, 2, 111, 196, 70, 76, 177, 36, 242, 211, 29, 136, 255, 0, 165, 23, 255, 209, 245, 69, 79, 168, 254, 204, 244, 15, 237, 47, 75, 208, 239, 235, 109, 219, 255, 0, 77, 124, 196, 146, 81, 249, 134, 255, 0, 224, 238, 137, 109, 211, 252, 39, 232, 106, 63, 230, 39, 170, 61, 15, 176, 122, 147, 166, 221, 147, 43, 71, 39, 246, 4, 213, 246, 191, 179, 125, 31, 208, 250, 155, 62, 143, 252, 31, 242, 23, 205, 9, 41, 101, 184, 254, 115, 235, 251, 24, 198, 199, 228, 126, 152, 196, 253, 133, 235, 143, 177, 253, 155, 215, 143, 111, 165, 179, 116, 119, 141, 158, 229, 118, 239, 75, 209, 119, 175, 183, 210, 131, 191, 124, 109, 142, 251, 167, 218, 190, 90, 73, 50, 95, 48, 249, 191, 194, 249, 151, 199, 111, 209, 255, 0, 7, 103, 233, 49, 255, 0, 54, 59, 125, 142, 63, 235, 104, 214, 254, 194, 219, 95, 173, 246, 109, 187, 127, 67, 191, 100, 108, 255, 0, 131, 221, 249, 171, 230, 100, 147, 206, 227, 231, 90, 58, 252, 143, 211, 152, 223, 178, 61, 79, 213, 62, 207, 234, 65, 254, 107, 102, 232, 252, 239, 160, 159, 252, 149, 172, 250, 51, 58, 253, 30, 87, 204, 73, 40, 50, 239, 211, 254, 171, 187, 46, 29, 142, 255, 0, 245, 39, 234, 58, 62, 203, 175, 161, 179, 207, 100, 127, 223, 82, 183, 236, 187, 191, 77, 233, 238, 237, 190, 39, 254, 146, 249, 113, 36, 161, 252, 184, 21, 61, 255, 0, 239, 223, 168, 91, 246, 45, 195, 103, 165, 187, 182, 221, 178, 157, 223, 100, 220, 119, 250, 123, 187, 206, 217, 95, 46, 164, 159, 215, 170, 206, 159, 162, 253, 75, 95, 163, 7, 210, 219, 231, 178, 63, 239, 169, 221, 233, 199, 190, 35, 249, 94, 43, 229, 148, 146, 235, 252, 173, 61, 58, 126, 199, 234, 79, 213, 187, 108, 158, 220, 34, 47, 149, 210, 75, 175, 84, 116, 232, 255, 0, 255, 217, 56, 66, 73, 77, 4, 33, 0, 0, 0, 0, 0, 85, 0, 0, 0, 1, 1, 0, 0, 0, 15, 0, 65, 0, 100, 0, 111, 0, 98, 0, 101, 0, 32, 0, 80, 0, 104, 0, 111, 0, 116, 0, 111, 0, 115, 0, 104, 0, 111, 0, 112, 0, 0, 0, 19, 0, 65, 0, 100, 0, 111, 0, 98, 0, 101, 0, 32, 0, 80, 0, 104, 0, 111, 0, 116, 0, 111, 0, 115, 0, 104, 0, 111, 0, 112, 0, 32, 0, 67, 0, 83, 0, 52, 0, 0, 0, 1, 0, 56, 66, 73, 77, 4, 6, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 1, 1, 0, 255, 225, 16, 65, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 0, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 98, 101, 103, 105, 110, 61, 34, 239, 187, 191, 34, 32, 105, 100, 61, 34, 87, 53, 77, 48, 77, 112, 67, 101, 104, 105, 72, 122, 114, 101, 83, 122, 78, 84, 99, 122, 107, 99, 57, 100, 34, 63, 62, 32, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 65, 100, 111, 98, 101, 32, 88, 77, 80, 32, 67, 111, 114, 101, 32, 52, 46, 50, 46, 50, 45, 99, 48, 54, 51, 32, 53, 51, 46, 51, 53, 50, 54, 50, 52, 44, 32, 50, 48, 48, 56, 47, 48, 55, 47, 51, 48, 45, 49, 56, 58, 49, 50, 58, 49, 56, 32, 32, 32, 32, 32, 32, 32, 32, 34, 62, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 32, 120, 109, 108, 110, 115, 58, 100, 99, 61, 34, 104, 116, 116, 112, 58, 47, 47, 112, 117, 114, 108, 46, 111, 114, 103, 47, 100, 99, 47, 101, 108, 101, 109, 101, 110, 116, 115, 47, 49, 46, 49, 47, 34, 32, 120, 109, 108, 110, 115, 58, 112, 104, 111, 116, 111, 115, 104, 111, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 112, 104, 111, 116, 111, 115, 104, 111, 112, 47, 49, 46, 48, 47, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 77, 77, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 109, 109, 47, 34, 32, 120, 109, 108, 110, 115, 58, 115, 116, 69, 118, 116, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 69, 118, 101, 110, 116, 35, 34, 32, 120, 109, 108, 110, 115, 58, 116, 105, 102, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 116, 105, 102, 102, 47, 49, 46, 48, 47, 34, 32, 120, 109, 108, 110, 115, 58, 101, 120, 105, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 101, 120, 105, 102, 47, 49, 46, 48, 47, 34, 32, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 61, 34, 65, 100, 111, 98, 101, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 67, 83, 52, 32, 87, 105, 110, 100, 111, 119, 115, 34, 32, 120, 109, 112, 58, 67, 114, 101, 97, 116, 101, 68, 97, 116, 101, 61, 34, 50, 48, 49, 53, 45, 48, 57, 45, 48, 56, 84, 49, 53, 58, 52, 50, 58, 53, 51, 45, 48, 51, 58, 48, 48, 34, 32, 120, 109, 112, 58, 77, 111, 100, 105, 102, 121, 68, 97, 116, 101, 61, 34, 50, 48, 49, 53, 45, 48, 57, 45, 48, 56, 84, 49, 53, 58, 52, 53, 58, 51, 52, 45, 48, 51, 58, 48, 48, 34, 32, 120, 109, 112, 58, 77, 101, 116, 97, 100, 97, 116, 97, 68, 97, 116, 101, 61, 34, 50, 48, 49, 53, 45, 48, 57, 45, 48, 56, 84, 49, 53, 58, 52, 53, 58, 51, 52, 45, 48, 51, 58, 48, 48, 34, 32, 100, 99, 58, 102, 111, 114, 109, 97, 116, 61, 34, 105, 109, 97, 103, 101, 47, 106, 112, 101, 103, 34, 32, 112, 104, 111, 116, 111, 115, 104, 111, 112, 58, 67, 111, 108, 111, 114, 77, 111, 100, 101, 61, 34, 51, 34, 32, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 67, 49, 57, 50, 68, 56, 67, 57, 53, 57, 53, 54, 69, 53, 49, 49, 57, 49, 48, 50, 67, 51, 65, 52, 65, 65, 57, 66, 50, 57, 55, 69, 34, 32, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 67, 49, 57, 50, 68, 56, 67, 57, 53, 57, 53, 54, 69, 53, 49, 49, 57, 49, 48, 50, 67, 51, 65, 52, 65, 65, 57, 66, 50, 57, 55, 69, 34, 32, 120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 67, 49, 57, 50, 68, 56, 67, 57, 53, 57, 53, 54, 69, 53, 49, 49, 57, 49, 48, 50, 67, 51, 65, 52, 65, 65, 57, 66, 50, 57, 55, 69, 34, 32, 116, 105, 102, 102, 58, 79, 114, 105, 101, 110, 116, 97, 116, 105, 111, 110, 61, 34, 49, 34, 32, 116, 105, 102, 102, 58, 88, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 61, 34, 55, 50, 48, 48, 48, 48, 47, 49, 48, 48, 48, 48, 34, 32, 116, 105, 102, 102, 58, 89, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 61, 34, 55, 50, 48, 48, 48, 48, 47, 49, 48, 48, 48, 48, 34, 32, 116, 105, 102, 102, 58, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 85, 110, 105, 116, 61, 34, 50, 34, 32, 116, 105, 102, 102, 58, 78, 97, 116, 105, 118, 101, 68, 105, 103, 101, 115, 116, 61, 34, 50, 53, 54, 44, 50, 53, 55, 44, 50, 53, 56, 44, 50, 53, 57, 44, 50, 54, 50, 44, 50, 55, 52, 44, 50, 55, 55, 44, 50, 56, 52, 44, 53, 51, 48, 44, 53, 51, 49, 44, 50, 56, 50, 44, 50, 56, 51, 44, 50, 57, 54, 44, 51, 48, 49, 44, 51, 49, 56, 44, 51, 49, 57, 44, 53, 50, 57, 44, 53, 51, 50, 44, 51, 48, 54, 44, 50, 55, 48, 44, 50, 55, 49, 44, 50, 55, 50, 44, 51, 48, 53, 44, 51, 49, 53, 44, 51, 51, 52, 51, 50, 59, 53, 48, 66, 54, 67, 70, 69, 50, 55, 56, 57, 56, 51, 56, 57, 55, 55, 67, 52, 50, 51, 66, 70, 52, 67, 53, 55, 53, 53, 67, 56, 68, 34, 32, 101, 120, 105, 102, 58, 80, 105, 120, 101, 108, 88, 68, 105, 109, 101, 110, 115, 105, 111, 110, 61, 34, 49, 52, 48, 34, 32, 101, 120, 105, 102, 58, 80, 105, 120, 101, 108, 89, 68, 105, 109, 101, 110, 115, 105, 111, 110, 61, 34, 51, 55, 34, 32, 101, 120, 105, 102, 58, 67, 111, 108, 111, 114, 83, 112, 97, 99, 101, 61, 34, 54, 53, 53, 51, 53, 34, 32, 101, 120, 105, 102, 58, 78, 97, 116, 105, 118, 101, 68, 105, 103, 101, 115, 116, 61, 34, 51, 54, 56, 54, 52, 44, 52, 48, 57, 54, 48, 44, 52, 48, 57, 54, 49, 44, 51, 55, 49, 50, 49, 44, 51, 55, 49, 50, 50, 44, 52, 48, 57, 54, 50, 44, 52, 48, 57, 54, 51, 44, 51, 55, 53, 49, 48, 44, 52, 48, 57, 54, 52, 44, 51, 54, 56, 54, 55, 44, 51, 54, 56, 54, 56, 44, 51, 51, 52, 51, 52, 44, 51, 51, 52, 51, 55, 44, 51, 52, 56, 53, 48, 44, 51, 52, 56, 53, 50, 44, 51, 52, 56, 53, 53, 44, 51, 52, 56, 53, 54, 44, 51, 55, 51, 55, 55, 44, 51, 55, 51, 55, 56, 44, 51, 55, 51, 55, 57, 44, 51, 55, 51, 56, 48, 44, 51, 55, 51, 56, 49, 44, 51, 55, 51, 56, 50, 44, 51, 55, 51, 56, 51, 44, 51, 55, 51, 56, 52, 44, 51, 55, 51, 56, 53, 44, 51, 55, 51, 56, 54, 44, 51, 55, 51, 57, 54, 44, 52, 49, 52, 56, 51, 44, 52, 49, 52, 56, 52, 44, 52, 49, 52, 56, 54, 44, 52, 49, 52, 56, 55, 44, 52, 49, 52, 56, 56, 44, 52, 49, 52, 57, 50, 44, 52, 49, 52, 57, 51, 44, 52, 49, 52, 57, 53, 44, 52, 49, 55, 50, 56, 44, 52, 49, 55, 50, 57, 44, 52, 49, 55, 51, 48, 44, 52, 49, 57, 56, 53, 44, 52, 49, 57, 56, 54, 44, 52, 49, 57, 56, 55, 44, 52, 49, 57, 56, 56, 44, 52, 49, 57, 56, 57, 44, 52, 49, 57, 57, 48, 44, 52, 49, 57, 57, 49, 44, 52, 49, 57, 57, 50, 44, 52, 49, 57, 57, 51, 44, 52, 49, 57, 57, 52, 44, 52, 49, 57, 57, 53, 44, 52, 49, 57, 57, 54, 44, 52, 50, 48, 49, 54, 44, 48, 44, 50, 44, 52, 44, 53, 44, 54, 44, 55, 44, 56, 44, 57, 44, 49, 48, 44, 49, 49, 44, 49, 50, 44, 49, 51, 44, 49, 52, 44, 49, 53, 44, 49, 54, 44, 49, 55, 44, 49, 56, 44, 50, 48, 44, 50, 50, 44, 50, 51, 44, 50, 52, 44, 50, 53, 44, 50, 54, 44, 50, 55, 44, 50, 56, 44, 51, 48, 59, 54, 57, 68, 51, 69, 69, 52, 55, 51, 53, 69, 54, 66, 69, 53, 51, 65, 56, 65, 70, 50, 65, 65, 50, 48, 54, 54, 53, 56, 66, 55, 68, 34, 62, 32, 60, 120, 109, 112, 77, 77, 58, 72, 105, 115, 116, 111, 114, 121, 62, 32, 60, 114, 100, 102, 58, 83, 101, 113, 62, 32, 60, 114, 100, 102, 58, 108, 105, 32, 115, 116, 69, 118, 116, 58, 97, 99, 116, 105, 111, 110, 61, 34, 99, 114, 101, 97, 116, 101, 100, 34, 32, 115, 116, 69, 118, 116, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 67, 49, 57, 50, 68, 56, 67, 57, 53, 57, 53, 54, 69, 53, 49, 49, 57, 49, 48, 50, 67, 51, 65, 52, 65, 65, 57, 66, 50, 57, 55, 69, 34, 32, 115, 116, 69, 118, 116, 58, 119, 104, 101, 110, 61, 34, 50, 48, 49, 53, 45, 48, 57, 45, 48, 56, 84, 49, 53, 58, 52, 53, 58, 51, 52, 45, 48, 51, 58, 48, 48, 34, 32, 115, 116, 69, 118, 116, 58, 115, 111, 102, 116, 119, 97, 114, 101, 65, 103, 101, 110, 116, 61, 34, 65, 100, 111, 98, 101, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 67, 83, 52, 32, 87, 105, 110, 100, 111, 119, 115, 34, 47, 62, 32, 60, 47, 114, 100, 102, 58, 83, 101, 113, 62, 32, 60, 47, 120, 109, 112, 77, 77, 58, 72, 105, 115, 116, 111, 114, 121, 62, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 32, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 101, 110, 100, 61, 34, 119, 34, 63, 62, 255, 238, 0, 14, 65, 100, 111, 98, 101, 0, 100, 0, 0, 0, 0, 1, 255, 219, 0, 132, 0, 6, 4, 4, 4, 5, 4, 6, 5, 5, 6, 9, 6, 5, 6, 9, 11, 8, 6, 6, 8, 11, 12, 10, 10, 11, 10, 10, 12, 16, 12, 12, 12, 12, 12, 12, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 7, 7, 7, 13, 12, 13, 24, 16, 16, 24, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 255, 192, 0, 17, 8, 0, 37, 0, 140, 3, 1, 17, 0, 2, 17, 1, 3, 17, 1, 255, 221, 0, 4, 0, 18, 255, 196, 1, 162, 0, 0, 0, 7, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 3, 2, 6, 1, 0, 7, 8, 9, 10, 11, 1, 0, 2, 2, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 0, 2, 1, 3, 3, 2, 4, 2, 6, 7, 3, 4, 2, 6, 2, 115, 1, 2, 3, 17, 4, 0, 5, 33, 18, 49, 65, 81, 6, 19, 97, 34, 113, 129, 20, 50, 145, 161, 7, 21, 177, 66, 35, 193, 82, 209, 225, 51, 22, 98, 240, 36, 114, 130, 241, 37, 67, 52, 83, 146, 162, 178, 99, 115, 194, 53, 68, 39, 147, 163, 179, 54, 23, 84, 100, 116, 195, 210, 226, 8, 38, 131, 9, 10, 24, 25, 132, 148, 69, 70, 164, 180, 86, 211, 85, 40, 26, 242, 227, 243, 196, 212, 228, 244, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 41, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250, 17, 0, 2, 2, 1, 2, 3, 5, 5, 4, 5, 6, 4, 8, 3, 3, 109, 1, 0, 2, 17, 3, 4, 33, 18, 49, 65, 5, 81, 19, 97, 34, 6, 113, 129, 145, 50, 161, 177, 240, 20, 193, 209, 225, 35, 66, 21, 82, 98, 114, 241, 51, 36, 52, 67, 130, 22, 146, 83, 37, 162, 99, 178, 194, 7, 115, 210, 53, 226, 68, 131, 23, 84, 147, 8, 9, 10, 24, 25, 38, 54, 69, 26, 39, 100, 116, 85, 55, 242, 163, 179, 195, 40, 41, 211, 227, 243, 132, 148, 164, 180, 196, 212, 228, 244, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 245, 65, 56, 169, 42, 23, 119, 150, 182, 150, 210, 92, 93, 76, 144, 91, 196, 165, 164, 150, 70, 8, 138, 7, 114, 199, 108, 49, 137, 145, 160, 198, 82, 0, 89, 121, 198, 175, 255, 0, 57, 13, 249, 111, 167, 220, 60, 17, 220, 205, 124, 232, 104, 205, 109, 19, 52, 123, 117, 163, 154, 12, 216, 226, 236, 172, 211, 28, 156, 60, 154, 248, 71, 100, 227, 201, 127, 155, 190, 78, 243, 118, 160, 116, 253, 42, 89, 197, 234, 163, 72, 97, 158, 38, 143, 225, 94, 164, 29, 198, 213, 204, 125, 70, 135, 38, 31, 169, 183, 14, 174, 57, 57, 51, 41, 229, 142, 40, 94, 89, 24, 36, 113, 169, 103, 114, 104, 21, 64, 169, 36, 248, 83, 49, 64, 179, 78, 65, 52, 30, 99, 39, 252, 228, 95, 229, 170, 72, 234, 110, 110, 155, 137, 34, 171, 110, 228, 108, 72, 219, 196, 102, 192, 118, 94, 82, 28, 51, 175, 128, 52, 202, 60, 145, 249, 145, 229, 143, 57, 27, 161, 162, 203, 35, 181, 159, 31, 92, 75, 25, 140, 128, 245, 226, 64, 61, 126, 206, 99, 103, 210, 207, 16, 245, 55, 99, 206, 39, 201, 63, 213, 117, 27, 93, 55, 77, 184, 212, 46, 152, 173, 181, 164, 109, 44, 172, 55, 60, 80, 84, 229, 48, 129, 145, 17, 29, 91, 101, 46, 17, 101, 230, 103, 254, 114, 83, 242, 215, 133, 121, 222, 211, 254, 97, 155, 250, 230, 203, 249, 35, 59, 131, 252, 163, 7, 160, 67, 230, 43, 89, 252, 186, 154, 244, 49, 203, 37, 164, 150, 255, 0, 91, 72, 194, 31, 84, 199, 199, 158, 201, 227, 76, 192, 240, 143, 31, 9, 115, 6, 64, 99, 196, 30, 116, 127, 231, 38, 63, 47, 128, 248, 98, 190, 97, 225, 232, 211, 245, 156, 216, 142, 197, 202, 122, 184, 146, 237, 24, 3, 69, 152, 121, 39, 243, 27, 203, 158, 113, 211, 174, 175, 244, 185, 30, 56, 236, 159, 133, 204, 119, 0, 35, 166, 220, 131, 29, 254, 201, 29, 243, 7, 87, 166, 150, 156, 212, 249, 57, 58, 124, 195, 47, 211, 205, 13, 55, 230, 183, 151, 98, 149, 227, 84, 154, 80, 164, 129, 34, 175, 194, 192, 26, 84, 123, 28, 231, 50, 118, 238, 24, 154, 162, 244, 56, 189, 159, 207, 40, 221, 132, 215, 203, 222, 111, 178, 215, 228, 145, 109, 32, 157, 99, 143, 172, 206, 188, 80, 159, 0, 115, 51, 75, 174, 25, 207, 164, 26, 112, 181, 122, 9, 105, 254, 163, 27, 111, 206, 94, 109, 211, 60, 169, 160, 220, 107, 90, 151, 35, 111, 1, 1, 99, 79, 182, 238, 198, 138, 139, 83, 212, 230, 219, 79, 167, 150, 89, 136, 197, 214, 102, 202, 49, 139, 47, 52, 255, 0, 161, 164, 242, 161, 255, 0, 165, 69, 247, 223, 23, 252, 213, 155, 95, 228, 44, 189, 241, 112, 127, 148, 225, 220, 244, 175, 37, 121, 190, 195, 205, 186, 12, 26, 213, 138, 60, 80, 78, 204, 190, 148, 148, 228, 172, 134, 132, 30, 36, 140, 212, 234, 48, 75, 20, 248, 75, 157, 139, 48, 152, 176, 200, 123, 101, 77, 175, 255, 208, 245, 44, 178, 71, 28, 109, 36, 140, 17, 17, 75, 59, 29, 128, 0, 84, 147, 130, 172, 210, 9, 0, 89, 124, 143, 249, 187, 249, 165, 125, 230, 253, 98, 91, 59, 89, 94, 47, 46, 218, 57, 142, 222, 216, 26, 9, 152, 26, 25, 164, 29, 235, 251, 42, 126, 202, 231, 97, 217, 157, 157, 28, 112, 226, 35, 212, 243, 250, 205, 89, 153, 161, 244, 164, 30, 86, 252, 185, 243, 159, 154, 32, 123, 141, 23, 77, 121, 237, 144, 149, 55, 12, 203, 28, 124, 135, 80, 173, 35, 40, 39, 229, 153, 89, 245, 248, 177, 26, 37, 163, 22, 151, 36, 249, 7, 169, 255, 0, 206, 62, 249, 67, 90, 208, 252, 247, 171, 71, 172, 217, 73, 103, 117, 109, 98, 20, 36, 131, 175, 171, 40, 53, 86, 21, 86, 31, 7, 80, 115, 81, 218, 218, 184, 100, 198, 56, 79, 87, 97, 161, 193, 40, 204, 241, 10, 102, 63, 243, 144, 158, 119, 253, 5, 229, 63, 209, 54, 178, 113, 212, 117, 154, 196, 40, 119, 91, 113, 253, 235, 125, 63, 99, 48, 123, 39, 77, 226, 78, 207, 211, 23, 39, 95, 155, 130, 52, 57, 190, 91, 91, 105, 205, 188, 147, 164, 108, 214, 240, 21, 89, 165, 161, 42, 165, 201, 224, 9, 241, 59, 231, 96, 39, 17, 179, 207, 240, 146, 9, 122, 183, 252, 227, 78, 174, 45, 60, 245, 115, 96, 90, 137, 168, 218, 48, 11, 208, 23, 129, 185, 143, 167, 139, 54, 105, 123, 111, 29, 226, 18, 29, 11, 176, 236, 236, 149, 42, 123, 79, 231, 110, 164, 44, 63, 44, 117, 183, 232, 211, 196, 182, 233, 243, 149, 194, 230, 139, 179, 163, 197, 158, 46, 215, 91, 58, 198, 95, 30, 193, 9, 145, 210, 53, 21, 103, 96, 128, 119, 171, 26, 103, 113, 51, 86, 124, 158, 110, 2, 228, 3, 238, 237, 30, 200, 89, 105, 22, 54, 52, 248, 109, 173, 226, 130, 135, 254, 43, 140, 47, 240, 207, 59, 200, 110, 100, 135, 171, 128, 244, 211, 229, 47, 206, 207, 35, 255, 0, 133, 188, 225, 36, 182, 177, 148, 210, 181, 90, 220, 218, 80, 124, 42, 255, 0, 238, 200, 193, 233, 240, 49, 228, 7, 242, 50, 231, 99, 217, 58, 159, 26, 21, 252, 80, 121, 253, 118, 19, 25, 91, 26, 242, 119, 152, 238, 52, 125, 66, 68, 75, 134, 138, 202, 248, 8, 111, 81, 107, 193, 210, 191, 15, 42, 118, 82, 115, 15, 218, 45, 7, 230, 52, 210, 17, 30, 183, 55, 176, 117, 131, 6, 166, 38, 95, 65, 123, 79, 149, 60, 169, 123, 175, 93, 5, 139, 146, 89, 70, 127, 127, 113, 216, 123, 15, 242, 179, 198, 180, 61, 153, 147, 44, 232, 138, 128, 125, 95, 180, 59, 91, 30, 24, 88, 55, 41, 125, 47, 107, 211, 52, 219, 61, 50, 202, 43, 75, 68, 244, 225, 136, 80, 14, 231, 196, 159, 115, 157, 206, 28, 17, 199, 26, 139, 193, 230, 207, 44, 146, 50, 147, 231, 15, 249, 200, 255, 0, 59, 157, 83, 204, 16, 249, 110, 209, 235, 103, 164, 254, 242, 239, 137, 217, 174, 92, 108, 164, 255, 0, 197, 105, 255, 0, 18, 206, 183, 177, 116, 156, 35, 140, 243, 47, 59, 218, 26, 139, 52, 30, 77, 113, 167, 94, 91, 90, 91, 93, 77, 25, 75, 123, 213, 103, 181, 114, 71, 198, 168, 197, 25, 128, 235, 78, 67, 142, 111, 35, 48, 73, 0, 242, 117, 166, 36, 7, 209, 31, 243, 139, 218, 183, 175, 229, 173, 79, 75, 102, 171, 89, 220, 137, 149, 123, 241, 149, 104, 127, 21, 206, 95, 183, 113, 214, 80, 93, 231, 102, 78, 226, 67, 219, 187, 102, 145, 217, 191, 255, 209, 239, 127, 154, 215, 247, 58, 127, 229, 215, 152, 46, 237, 141, 39, 142, 206, 78, 36, 127, 151, 240, 159, 192, 230, 78, 138, 34, 89, 98, 15, 243, 154, 53, 39, 247, 101, 241, 111, 16, 0, 27, 208, 126, 172, 239, 36, 56, 69, 7, 150, 230, 119, 125, 181, 249, 127, 62, 141, 47, 147, 116, 143, 209, 13, 25, 177, 75, 88, 213, 68, 116, 162, 183, 1, 204, 55, 249, 92, 235, 203, 56, 45, 88, 152, 200, 120, 185, 219, 212, 105, 204, 120, 5, 38, 118, 186, 198, 145, 117, 245, 167, 182, 186, 138, 97, 100, 198, 59, 183, 141, 131, 8, 200, 94, 101, 89, 189, 149, 171, 148, 248, 83, 21, 127, 196, 218, 39, 26, 183, 199, 223, 153, 222, 114, 127, 54, 249, 202, 251, 82, 228, 77, 146, 55, 213, 244, 245, 236, 176, 70, 105, 200, 127, 198, 67, 86, 206, 207, 65, 166, 240, 177, 129, 223, 245, 60, 222, 175, 41, 156, 237, 55, 22, 154, 5, 191, 228, 164, 220, 117, 11, 121, 53, 235, 237, 66, 43, 167, 179, 89, 23, 213, 17, 66, 76, 64, 21, 235, 181, 93, 255, 0, 217, 101, 70, 83, 58, 174, 94, 128, 27, 8, 136, 197, 253, 36, 135, 242, 211, 87, 253, 17, 231, 221, 14, 250, 188, 80, 93, 36, 82, 31, 242, 39, 253, 211, 87, 232, 108, 202, 237, 44, 92, 88, 136, 105, 210, 202, 178, 7, 188, 255, 0, 206, 77, 106, 30, 143, 145, 109, 109, 1, 222, 246, 246, 48, 71, 180, 106, 95, 248, 103, 59, 216, 176, 226, 205, 127, 205, 118, 221, 165, 48, 32, 249, 247, 200, 182, 7, 81, 243, 150, 137, 100, 69, 86, 123, 216, 85, 135, 249, 33, 193, 63, 134, 116, 122, 220, 156, 56, 201, 242, 117, 58, 120, 222, 64, 251, 132, 157, 201, 237, 227, 156, 20, 185, 61, 64, 15, 41, 252, 204, 215, 252, 181, 171, 75, 30, 149, 117, 166, 65, 171, 195, 104, 229, 203, 76, 206, 170, 178, 0, 69, 17, 144, 175, 143, 197, 154, 77, 79, 180, 146, 211, 74, 176, 243, 119, 218, 95, 103, 63, 49, 14, 60, 158, 151, 154, 107, 151, 63, 151, 154, 85, 163, 79, 55, 149, 44, 75, 17, 72, 97, 15, 63, 38, 61, 191, 111, 160, 255, 0, 136, 230, 199, 178, 251, 111, 180, 53, 179, 225, 31, 67, 143, 218, 125, 139, 164, 209, 67, 136, 159, 83, 221, 191, 44, 117, 141, 19, 87, 242, 102, 159, 123, 163, 219, 37, 165, 187, 70, 18, 75, 84, 36, 250, 114, 167, 194, 232, 73, 220, 208, 253, 150, 63, 179, 155, 29, 70, 147, 193, 153, 137, 116, 216, 245, 94, 48, 180, 103, 158, 60, 211, 109, 229, 111, 43, 223, 107, 83, 208, 181, 186, 17, 4, 103, 246, 230, 109, 145, 62, 150, 195, 165, 192, 114, 228, 17, 12, 53, 25, 188, 56, 91, 226, 123, 187, 171, 139, 235, 201, 174, 174, 101, 45, 113, 115, 35, 73, 60, 167, 127, 138, 67, 86, 99, 244, 255, 0, 194, 231, 121, 8, 8, 64, 1, 209, 230, 76, 132, 142, 236, 239, 243, 78, 255, 0, 202, 83, 105, 222, 87, 177, 242, 237, 242, 94, 38, 151, 101, 245, 91, 146, 136, 233, 70, 13, 200, 159, 141, 87, 237, 18, 249, 173, 236, 232, 100, 18, 156, 166, 43, 140, 185, 90, 169, 71, 132, 8, 167, 127, 243, 140, 250, 183, 213, 60, 245, 115, 167, 179, 81, 53, 27, 70, 1, 79, 119, 136, 134, 31, 133, 114, 142, 220, 198, 101, 14, 47, 230, 182, 246, 108, 234, 116, 250, 146, 163, 57, 103, 124, 255, 0, 255, 210, 244, 198, 187, 164, 91, 235, 26, 61, 238, 151, 114, 63, 113, 123, 11, 194, 254, 193, 197, 43, 147, 197, 144, 194, 64, 247, 22, 25, 35, 197, 26, 124, 87, 231, 15, 39, 107, 62, 82, 213, 229, 211, 117, 72, 90, 48, 173, 254, 141, 113, 67, 233, 202, 157, 153, 27, 161, 168, 251, 75, 157, 190, 143, 85, 12, 176, 231, 187, 205, 103, 193, 40, 157, 210, 203, 125, 86, 254, 214, 23, 142, 218, 242, 91, 120, 159, 119, 142, 57, 89, 21, 171, 214, 170, 15, 31, 158, 92, 113, 99, 230, 64, 107, 142, 73, 1, 65, 234, 131, 205, 41, 229, 127, 200, 171, 93, 62, 222, 80, 154, 167, 154, 102, 157, 234, 27, 226, 22, 197, 184, 201, 39, 251, 36, 10, 139, 254, 183, 249, 57, 164, 56, 134, 93, 77, 255, 0, 12, 28, 255, 0, 16, 227, 195, 93, 75, 204, 252, 185, 161, 222, 249, 131, 89, 180, 209, 180, 176, 175, 121, 116, 222, 156, 64, 158, 42, 2, 138, 150, 39, 176, 0, 102, 231, 54, 120, 226, 141, 158, 78, 6, 60, 70, 114, 166, 111, 174, 254, 67, 121, 231, 69, 209, 111, 53, 139, 207, 170, 155, 123, 40, 140, 243, 8, 229, 229, 33, 85, 21, 60, 118, 205, 126, 62, 216, 199, 57, 112, 185, 83, 208, 78, 49, 183, 155, 165, 202, 164, 139, 34, 58, 135, 66, 25, 88, 26, 80, 131, 81, 248, 230, 206, 114, 18, 21, 125, 28, 72, 130, 8, 123, 63, 252, 228, 47, 153, 237, 245, 93, 39, 201, 205, 28, 170, 69, 213, 163, 95, 48, 174, 213, 117, 64, 63, 91, 102, 151, 177, 225, 193, 41, 187, 29, 116, 184, 227, 26, 99, 31, 144, 214, 113, 223, 126, 103, 105, 135, 102, 91, 85, 154, 224, 238, 13, 56, 70, 64, 63, 123, 102, 95, 107, 100, 225, 192, 123, 218, 52, 48, 39, 35, 221, 124, 255, 0, 231, 228, 30, 166, 147, 165, 75, 241, 157, 174, 174, 80, 141, 135, 120, 212, 255, 0, 55, 243, 103, 146, 246, 191, 106, 144, 56, 32, 250, 87, 99, 246, 87, 17, 241, 50, 114, 31, 76, 88, 79, 151, 180, 11, 221, 114, 253, 109, 109, 129, 9, 200, 122, 211, 246, 69, 241, 39, 185, 205, 14, 151, 69, 147, 52, 197, 242, 122, 13, 110, 186, 26, 124, 100, 255, 0, 23, 240, 197, 230, 127, 154, 222, 90, 213, 244, 63, 57, 93, 217, 94, 51, 220, 71, 180, 150, 51, 241, 60, 90, 22, 27, 0, 5, 69, 65, 217, 179, 219, 59, 3, 14, 12, 56, 0, 21, 196, 249, 15, 107, 106, 114, 231, 202, 101, 59, 175, 225, 101, 223, 243, 142, 254, 115, 147, 70, 243, 35, 232, 23, 133, 151, 79, 214, 8, 244, 11, 43, 113, 75, 165, 20, 94, 219, 115, 95, 135, 7, 109, 97, 140, 192, 152, 230, 26, 187, 59, 36, 129, 163, 201, 17, 255, 0, 57, 31, 231, 9, 245, 61, 114, 31, 45, 89, 171, 181, 158, 149, 251, 219, 178, 170, 196, 53, 195, 142, 155, 15, 247, 90, 255, 0, 196, 178, 61, 139, 128, 68, 113, 158, 108, 187, 67, 33, 145, 225, 28, 152, 87, 229, 231, 229, 134, 181, 231, 107, 171, 184, 109, 165, 91, 24, 236, 209, 90, 73, 174, 17, 184, 150, 99, 64, 160, 1, 92, 216, 234, 251, 74, 56, 57, 122, 139, 135, 167, 210, 25, 159, 36, 199, 243, 3, 242, 95, 91, 242, 110, 149, 111, 125, 53, 218, 106, 11, 113, 55, 162, 34, 182, 142, 66, 69, 84, 181, 78, 222, 217, 94, 151, 181, 134, 99, 68, 112, 182, 102, 208, 152, 11, 73, 255, 0, 45, 110, 111, 244, 143, 62, 104, 119, 230, 218, 101, 68, 186, 72, 228, 38, 55, 3, 132, 223, 187, 53, 52, 255, 0, 43, 47, 237, 46, 9, 225, 144, 5, 134, 144, 74, 57, 65, 125, 165, 92, 226, 30, 151, 163, 255, 211, 245, 70, 217, 18, 169, 55, 152, 127, 195, 63, 81, 63, 226, 15, 170, 253, 71, 122, 253, 115, 211, 244, 255, 0, 225, 255, 0, 134, 89, 131, 196, 191, 77, 219, 78, 94, 15, 226, 98, 86, 63, 242, 162, 62, 180, 191, 83, 253, 5, 245, 154, 252, 28, 61, 30, 92, 179, 44, 254, 98, 191, 137, 164, 120, 55, 209, 144, 234, 63, 224, 26, 219, 126, 147, 253, 27, 253, 223, 250, 31, 175, 232, 211, 210, 237, 233, 215, 110, 29, 126, 206, 81, 15, 27, 126, 30, 43, 109, 159, 133, 214, 151, 233, 63, 224, 79, 174, 167, 232, 159, 209, 223, 93, 226, 120, 125, 91, 209, 245, 120, 247, 167, 15, 139, 12, 252, 106, 245, 113, 44, 124, 43, 218, 147, 171, 191, 170, 125, 82, 95, 174, 240, 250, 175, 3, 235, 250, 180, 225, 198, 155, 242, 175, 195, 76, 162, 23, 211, 155, 116, 171, 175, 38, 54, 63, 229, 88, 208, 83, 244, 69, 55, 255, 0, 150, 122, 102, 88, 241, 191, 164, 227, 126, 231, 173, 35, 46, 127, 192, 220, 45, 254, 183, 250, 59, 135, 166, 62, 169, 234, 250, 60, 125, 46, 222, 159, 47, 217, 255, 0, 87, 43, 135, 139, 211, 137, 176, 248, 126, 74, 218, 103, 248, 71, 215, 63, 162, 254, 161, 245, 142, 39, 253, 229, 244, 189, 78, 63, 181, 246, 55, 166, 67, 55, 139, 94, 174, 46, 21, 199, 225, 223, 167, 234, 93, 255, 0, 58, 181, 79, 47, 169, 214, 167, 149, 125, 58, 215, 189, 115, 94, 127, 47, 215, 133, 216, 143, 204, 127, 77, 25, 99, 250, 47, 127, 169, 122, 63, 229, 122, 60, 127, 30, 57, 110, 63, 14, 253, 60, 45, 57, 124, 79, 226, 226, 117, 207, 232, 207, 80, 125, 111, 208, 231, 79, 131, 214, 225, 90, 123, 114, 223, 50, 35, 197, 210, 220, 115, 195, 213, 78, 47, 208, 188, 199, 163, 245, 111, 82, 163, 143, 15, 79, 149, 123, 83, 36, 120, 171, 123, 68, 120, 58, 46, 147, 244, 79, 168, 222, 175, 213, 253, 95, 218, 231, 195, 149, 125, 235, 190, 8, 241, 244, 186, 89, 112, 117, 165, 91, 127, 169, 208, 253, 91, 210, 167, 127, 75, 143, 209, 246, 114, 50, 190, 182, 202, 60, 61, 23, 201, 232, 80, 122, 188, 120, 87, 110, 116, 165, 105, 239, 140, 111, 163, 41, 215, 85, 63, 247, 29, 81, 79, 70, 189, 169, 199, 174, 72, 241, 249, 181, 142, 15, 36, 79, 108, 143, 86, 199, 255, 217}},
                {BancoOpc.HSBC, "HSBC", "HSBC", New Byte() {255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 2, 1, 0, 72, 0, 72, 0, 0, 255, 254, 1, 2, 160, 129, 101, 4, 3, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 14, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 14, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 10, 0, 0, 0, 14, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 255, 192, 0, 17, 8, 0, 30, 0, 144, 3, 1, 17, 0, 2, 17, 1, 3, 17, 1, 255, 219, 0, 132, 0, 3, 2, 2, 3, 2, 2, 3, 3, 2, 3, 3, 3, 3, 4, 5, 8, 5, 5, 4, 4, 5, 10, 7, 8, 6, 8, 12, 11, 13, 13, 12, 11, 12, 12, 14, 15, 20, 17, 14, 15, 19, 15, 12, 12, 17, 24, 17, 19, 21, 21, 22, 23, 22, 13, 17, 25, 26, 24, 22, 26, 20, 22, 22, 21, 1, 3, 3, 3, 5, 4, 5, 10, 5, 5, 10, 21, 14, 12, 14, 14, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 255, 196, 1, 162, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 246, 191, 248, 41, 175, 197, 31, 138, 255, 0, 179, 103, 129, 116, 191, 136, 63, 8, 126, 39, 234, 250, 84, 26, 150, 183, 6, 144, 254, 31, 159, 72, 211, 46, 109, 160, 13, 109, 51, 239, 137, 222, 220, 202, 57, 131, 36, 59, 63, 50, 28, 21, 0, 45, 0, 125, 127, 240, 227, 194, 186, 231, 132, 60, 56, 182, 62, 51, 241, 158, 175, 227, 173, 81, 164, 50, 73, 170, 106, 86, 150, 150, 172, 50, 170, 54, 36, 118, 209, 70, 170, 128, 130, 70, 237, 205, 150, 57, 98, 48, 0, 7, 196, 95, 16, 252, 107, 241, 183, 194, 223, 183, 175, 195, 255, 0, 129, 218, 71, 199, 63, 18, 55, 134, 60, 79, 163, 190, 174, 247, 247, 30, 31, 209, 158, 238, 220, 34, 94, 49, 140, 48, 180, 8, 217, 251, 32, 249, 182, 140, 111, 232, 113, 200, 7, 182, 254, 214, 255, 0, 180, 118, 175, 251, 58, 120, 103, 225, 215, 131, 252, 25, 61, 182, 183, 241, 23, 198, 250, 148, 30, 31, 210, 117, 63, 16, 4, 88, 145, 247, 69, 28, 183, 151, 11, 18, 162, 146, 12, 177, 146, 168, 168, 185, 147, 32, 5, 93, 132, 3, 162, 215, 254, 25, 252, 106, 240, 231, 131, 165, 189, 240, 23, 198, 11, 143, 20, 248, 198, 222, 33, 42, 233, 254, 42, 209, 52, 248, 244, 203, 201, 23, 147, 24, 22, 208, 197, 52, 42, 221, 1, 50, 185, 28, 114, 122, 208, 5, 15, 217, 71, 198, 222, 53, 253, 161, 127, 100, 237, 7, 196, 30, 58, 241, 5, 255, 0, 134, 252, 99, 171, 92, 234, 2, 231, 82, 209, 45, 109, 82, 75, 51, 14, 165, 60, 107, 28, 113, 205, 20, 177, 97, 99, 137, 98, 249, 209, 206, 220, 146, 75, 252, 244, 1, 224, 127, 177, 247, 142, 62, 52, 124, 118, 248, 187, 241, 207, 194, 31, 16, 126, 54, 248, 162, 218, 219, 225, 230, 182, 154, 77, 180, 218, 54, 139, 162, 196, 247, 64, 205, 121, 17, 103, 50, 89, 56, 31, 241, 236, 132, 96, 14, 167, 219, 0, 29, 247, 237, 35, 241, 43, 227, 31, 236, 107, 162, 89, 252, 66, 62, 37, 143, 226, 215, 195, 123, 123, 168, 173, 181, 221, 55, 92, 211, 109, 236, 245, 43, 56, 229, 112, 169, 52, 51, 218, 199, 20, 76, 55, 50, 166, 30, 46, 9, 29, 119, 101, 0, 62, 155, 135, 226, 111, 134, 95, 225, 148, 63, 16, 101, 213, 32, 183, 240, 132, 154, 74, 235, 99, 83, 152, 21, 69, 179, 104, 132, 162, 66, 49, 145, 242, 16, 113, 140, 246, 197, 0, 124, 219, 240, 55, 227, 47, 197, 63, 219, 54, 93, 67, 197, 190, 5, 212, 99, 248, 81, 240, 134, 27, 169, 44, 244, 187, 168, 236, 97, 188, 214, 117, 130, 140, 85, 229, 204, 193, 224, 129, 6, 0, 3, 203, 144, 134, 220, 50, 216, 205, 0, 73, 251, 86, 31, 218, 11, 224, 127, 193, 143, 17, 248, 159, 224, 151, 143, 191, 225, 52, 54, 22, 173, 53, 220, 94, 36, 209, 44, 222, 254, 210, 21, 229, 238, 45, 158, 218, 56, 97, 98, 139, 150, 41, 36, 47, 242, 130, 70, 72, 193, 0, 250, 127, 193, 218, 240, 241, 87, 132, 116, 61, 105, 21, 81, 117, 43, 24, 47, 2, 174, 112, 4, 136, 173, 129, 158, 123, 208, 2, 248, 179, 197, 154, 63, 129, 124, 55, 127, 175, 120, 186, 254, 223, 75, 210, 44, 34, 50, 220, 93, 78, 78, 212, 94, 128, 0, 57, 36, 146, 0, 80, 9, 36, 128, 1, 36, 10, 198, 189, 120, 80, 131, 169, 81, 217, 35, 208, 202, 178, 172, 86, 107, 138, 134, 11, 5, 7, 58, 147, 118, 73, 117, 253, 18, 75, 86, 221, 146, 73, 182, 210, 71, 202, 105, 251, 86, 124, 81, 241, 255, 0, 128, 188, 81, 227, 223, 131, 62, 28, 240, 213, 215, 135, 116, 125, 77, 237, 63, 178, 181, 43, 89, 229, 190, 22, 203, 18, 55, 158, 90, 57, 149, 88, 252, 196, 148, 85, 249, 71, 70, 124, 22, 175, 150, 254, 219, 198, 98, 40, 207, 19, 133, 130, 113, 140, 173, 102, 157, 237, 109, 244, 127, 135, 79, 51, 247, 183, 225, 111, 14, 101, 25, 142, 27, 37, 207, 113, 21, 35, 90, 173, 37, 46, 120, 202, 42, 159, 51, 147, 92, 137, 74, 13, 173, 172, 164, 223, 188, 250, 70, 233, 30, 51, 255, 0, 15, 42, 248, 155, 255, 0, 64, 47, 2, 127, 224, 29, 215, 255, 0, 36, 87, 141, 254, 184, 98, 255, 0, 150, 63, 115, 255, 0, 51, 244, 159, 248, 151, 30, 30, 255, 0, 159, 213, 191, 240, 40, 127, 242, 179, 79, 195, 31, 240, 80, 79, 140, 94, 50, 215, 236, 116, 79, 11, 120, 83, 193, 122, 150, 171, 123, 32, 134, 222, 214, 11, 43, 146, 206, 199, 254, 222, 48, 0, 0, 146, 78, 0, 0, 146, 64, 21, 173, 30, 42, 199, 86, 154, 167, 78, 17, 109, 249, 63, 243, 56, 115, 47, 0, 248, 87, 45, 195, 79, 23, 139, 196, 213, 133, 56, 43, 182, 229, 11, 37, 255, 0, 130, 254, 73, 45, 91, 209, 106, 125, 20, 127, 105, 109, 71, 225, 103, 197, 141, 23, 192, 223, 180, 29, 199, 134, 237, 229, 214, 180, 171, 107, 216, 53, 61, 26, 218, 104, 45, 236, 238, 100, 150, 88, 204, 50, 153, 37, 114, 201, 152, 198, 37, 249, 0, 254, 37, 0, 150, 95, 161, 254, 216, 150, 23, 17, 28, 62, 53, 175, 122, 41, 221, 38, 146, 119, 106, 206, 237, 233, 231, 167, 153, 248, 226, 240, 227, 15, 158, 228, 213, 115, 142, 25, 141, 70, 169, 85, 148, 92, 39, 40, 202, 82, 138, 140, 100, 165, 30, 88, 198, 207, 93, 97, 239, 55, 246, 93, 244, 127, 70, 87, 209, 31, 142, 31, 0, 127, 193, 106, 255, 0, 228, 214, 60, 43, 255, 0, 99, 157, 175, 254, 145, 94, 208, 7, 209, 82, 126, 211, 154, 236, 50, 50, 55, 192, 15, 142, 164, 169, 42, 74, 217, 105, 76, 56, 244, 34, 255, 0, 7, 240, 160, 15, 146, 181, 175, 28, 93, 252, 66, 255, 0, 130, 184, 124, 15, 213, 53, 47, 8, 120, 171, 193, 79, 31, 133, 175, 45, 87, 79, 241, 44, 118, 241, 220, 72, 22, 223, 84, 111, 48, 44, 51, 74, 54, 29, 251, 65, 36, 18, 81, 184, 227, 36, 3, 232, 15, 248, 40, 55, 236, 129, 127, 251, 85, 252, 56, 209, 229, 240, 46, 161, 30, 155, 227, 175, 10, 220, 73, 123, 163, 188, 206, 99, 73, 195, 133, 243, 33, 46, 57, 141, 152, 199, 27, 43, 244, 12, 128, 28, 2, 89, 64, 62, 106, 248, 15, 255, 0, 5, 48, 241, 127, 192, 175, 17, 71, 240, 195, 246, 244, 240, 246, 179, 165, 106, 118, 123, 98, 79, 18, 155, 82, 102, 72, 186, 43, 207, 26, 3, 231, 39, 7, 19, 69, 184, 182, 62, 235, 156, 181, 0, 126, 139, 124, 51, 180, 240, 165, 191, 131, 109, 39, 248, 91, 45, 133, 199, 134, 181, 25, 174, 117, 91, 121, 236, 46, 12, 240, 204, 247, 83, 201, 113, 44, 136, 249, 60, 52, 178, 200, 216, 7, 3, 56, 0, 0, 0, 0, 252, 250, 253, 135, 124, 111, 172, 120, 67, 246, 174, 253, 175, 227, 240, 255, 0, 128, 188, 85, 227, 101, 186, 241, 131, 180, 173, 161, 79, 167, 197, 246, 82, 151, 186, 134, 208, 255, 0, 107, 185, 128, 29, 219, 219, 27, 75, 31, 144, 228, 14, 40, 3, 71, 246, 243, 248, 173, 227, 79, 138, 154, 78, 133, 240, 207, 226, 15, 133, 53, 95, 129, 127, 11, 117, 221, 82, 24, 245, 159, 27, 120, 164, 197, 118, 178, 8, 223, 204, 72, 20, 89, 180, 209, 198, 197, 163, 222, 55, 200, 3, 24, 199, 204, 170, 24, 144, 13, 239, 248, 42, 22, 165, 105, 240, 175, 246, 4, 240, 215, 133, 126, 31, 93, 121, 158, 29, 189, 189, 210, 124, 63, 111, 60, 114, 9, 4, 182, 81, 64, 242, 198, 67, 174, 1, 4, 90, 199, 200, 24, 35, 182, 15, 0, 31, 76, 254, 198, 26, 21, 175, 135, 127, 100, 191, 132, 22, 186, 116, 113, 197, 20, 158, 22, 211, 238, 202, 198, 187, 65, 146, 120, 22, 103, 56, 245, 45, 35, 18, 123, 146, 77, 0, 122, 253, 237, 148, 26, 141, 148, 246, 151, 209, 44, 214, 211, 198, 209, 75, 19, 116, 116, 97, 130, 15, 212, 26, 0, 204, 208, 244, 93, 47, 225, 239, 131, 116, 253, 35, 66, 182, 184, 183, 209, 116, 59, 8, 237, 109, 109, 163, 243, 110, 164, 75, 120, 99, 10, 138, 62, 244, 146, 48, 85, 3, 248, 153, 143, 169, 53, 50, 106, 42, 236, 210, 141, 39, 86, 113, 167, 27, 93, 180, 181, 105, 45, 123, 183, 100, 151, 155, 105, 46, 167, 229, 127, 237, 69, 251, 78, 107, 63, 180, 7, 137, 190, 207, 26, 92, 233, 62, 17, 211, 165, 111, 236, 253, 33, 206, 24, 176, 200, 243, 167, 3, 131, 41, 4, 128, 57, 8, 9, 85, 201, 44, 207, 249, 78, 117, 156, 212, 199, 212, 182, 208, 91, 47, 213, 249, 254, 91, 119, 111, 251, 251, 195, 47, 13, 112, 156, 35, 132, 231, 109, 79, 17, 53, 239, 207, 165, 183, 229, 135, 104, 174, 251, 201, 234, 237, 104, 198, 63, 86, 127, 193, 52, 63, 228, 145, 120, 155, 254, 195, 141, 255, 0, 162, 34, 175, 170, 224, 239, 247, 105, 255, 0, 143, 244, 71, 224, 191, 73, 15, 249, 29, 97, 255, 0, 235, 194, 255, 0, 210, 228, 112, 223, 182, 103, 236, 123, 105, 167, 220, 159, 27, 252, 50, 109, 43, 76, 134, 242, 229, 34, 191, 210, 174, 238, 161, 179, 133, 102, 145, 176, 178, 68, 242, 50, 162, 130, 79, 42, 72, 199, 81, 198, 64, 225, 226, 28, 130, 49, 127, 88, 195, 217, 93, 234, 174, 146, 215, 181, 244, 249, 31, 81, 224, 247, 139, 149, 106, 195, 251, 31, 54, 82, 155, 140, 91, 132, 212, 101, 55, 203, 21, 118, 164, 162, 156, 157, 150, 206, 207, 179, 214, 215, 247, 239, 217, 107, 246, 90, 210, 190, 0, 104, 31, 107, 212, 126, 207, 169, 120, 202, 246, 32, 47, 117, 5, 25, 88, 84, 243, 228, 195, 158, 66, 3, 140, 158, 11, 17, 147, 128, 21, 87, 223, 201, 50, 72, 101, 240, 230, 150, 179, 123, 191, 209, 121, 126, 103, 228, 190, 39, 120, 157, 137, 226, 220, 79, 178, 165, 120, 97, 160, 253, 216, 245, 111, 249, 165, 231, 217, 109, 21, 162, 214, 237, 252, 159, 255, 0, 5, 42, 255, 0, 146, 233, 161, 127, 216, 183, 7, 254, 148, 220, 215, 202, 113, 135, 251, 220, 127, 192, 191, 54, 126, 253, 244, 113, 255, 0, 146, 122, 183, 253, 132, 203, 255, 0, 72, 166, 118, 159, 176, 223, 237, 97, 168, 201, 169, 105, 191, 12, 188, 125, 253, 161, 171, 71, 57, 16, 232, 183, 241, 68, 211, 201, 110, 21, 127, 212, 200, 20, 18, 99, 1, 73, 14, 126, 224, 7, 113, 8, 1, 78, 222, 26, 207, 36, 228, 176, 149, 174, 255, 0, 149, 239, 111, 39, 229, 231, 211, 211, 111, 154, 241, 179, 194, 188, 60, 105, 84, 226, 28, 183, 150, 13, 107, 82, 45, 168, 169, 93, 252, 81, 187, 75, 153, 183, 103, 21, 241, 187, 114, 174, 119, 105, 82, 255, 0, 130, 214, 72, 139, 251, 46, 120, 82, 50, 202, 29, 188, 101, 106, 193, 51, 201, 2, 206, 243, 39, 31, 136, 252, 197, 125, 217, 252, 160, 126, 129, 80, 7, 231, 239, 198, 41, 17, 255, 0, 224, 178, 127, 3, 22, 54, 86, 41, 224, 219, 149, 96, 167, 238, 159, 39, 86, 56, 62, 156, 16, 127, 26, 0, 250, 19, 227, 143, 237, 21, 15, 193, 79, 218, 31, 224, 175, 134, 252, 75, 168, 193, 167, 248, 91, 198, 208, 235, 58, 125, 195, 206, 17, 82, 59, 216, 254, 198, 214, 142, 206, 70, 229, 229, 229, 139, 0, 133, 204, 224, 183, 221, 5, 64, 58, 47, 218, 111, 224, 55, 195, 239, 143, 31, 10, 245, 189, 47, 226, 253, 165, 132, 22, 54, 246, 114, 207, 30, 187, 34, 42, 205, 164, 148, 82, 222, 124, 114, 30, 87, 110, 50, 70, 118, 176, 4, 48, 32, 145, 64, 30, 9, 255, 0, 4, 134, 210, 188, 71, 165, 254, 199, 214, 167, 197, 176, 205, 5, 149, 206, 183, 121, 113, 162, 172, 191, 197, 100, 68, 99, 112, 29, 129, 152, 92, 17, 211, 61, 123, 228, 128, 114, 159, 240, 77, 217, 18, 111, 218, 139, 246, 205, 146, 22, 87, 141, 252, 100, 140, 172, 167, 32, 131, 121, 169, 224, 131, 64, 30, 201, 255, 0, 5, 38, 241, 71, 134, 124, 59, 251, 28, 124, 65, 181, 241, 181, 213, 148, 71, 85, 181, 75, 45, 58, 218, 114, 11, 92, 222, 121, 138, 241, 8, 215, 171, 50, 178, 7, 227, 160, 66, 221, 5, 0, 120, 221, 151, 236, 181, 226, 207, 141, 31, 240, 74, 175, 9, 248, 7, 95, 251, 82, 120, 230, 203, 78, 26, 190, 151, 5, 248, 33, 195, 164, 210, 201, 111, 110, 193, 185, 92, 219, 56, 132, 103, 27, 114, 185, 224, 17, 64, 26, 223, 240, 77, 79, 218, 203, 195, 186, 223, 194, 125, 35, 225, 23, 196, 139, 181, 240, 183, 196, 111, 8, 70, 218, 99, 105, 122, 198, 109, 158, 234, 8, 216, 136, 202, 7, 199, 206, 138, 85, 26, 63, 188, 54, 110, 198, 15, 0, 31, 89, 124, 87, 248, 205, 225, 143, 131, 186, 50, 92, 248, 170, 249, 91, 82, 187, 62, 78, 151, 162, 90, 254, 242, 247, 85, 184, 60, 36, 22, 240, 143, 154, 71, 102, 194, 140, 12, 12, 228, 144, 1, 52, 1, 181, 224, 11, 143, 18, 221, 248, 51, 73, 184, 248, 145, 109, 166, 89, 120, 150, 104, 68, 183, 214, 122, 105, 102, 134, 217, 216, 147, 229, 43, 18, 119, 236, 4, 33, 126, 3, 21, 44, 2, 130, 20, 0, 124, 167, 251, 100, 126, 198, 139, 227, 4, 188, 241, 207, 194, 13, 57, 71, 136, 139, 153, 181, 77, 34, 223, 129, 126, 15, 222, 150, 37, 233, 231, 119, 101, 24, 223, 201, 31, 63, 15, 241, 220, 65, 195, 222, 218, 248, 140, 50, 247, 186, 174, 254, 107, 207, 243, 245, 223, 250, 71, 194, 15, 24, 30, 90, 225, 147, 103, 117, 63, 115, 107, 66, 111, 236, 118, 140, 159, 242, 116, 79, 236, 104, 190, 15, 135, 55, 246, 10, 241, 222, 137, 240, 215, 246, 121, 241, 167, 136, 124, 101, 125, 22, 159, 165, 217, 235, 76, 207, 35, 245, 99, 228, 69, 133, 81, 213, 152, 158, 0, 29, 107, 62, 24, 196, 211, 195, 96, 170, 85, 170, 236, 148, 191, 68, 118, 248, 233, 145, 227, 51, 174, 38, 194, 96, 112, 48, 230, 169, 42, 10, 203, 254, 223, 150, 175, 178, 93, 89, 243, 23, 237, 33, 251, 72, 107, 127, 180, 23, 138, 124, 251, 191, 51, 79, 240, 229, 155, 145, 167, 105, 33, 184, 140, 116, 243, 31, 28, 52, 132, 117, 61, 0, 224, 119, 39, 230, 115, 124, 222, 166, 97, 82, 239, 72, 173, 151, 245, 212, 253, 195, 195, 175, 14, 176, 124, 33, 131, 228, 135, 189, 90, 75, 223, 159, 127, 37, 218, 43, 162, 235, 187, 242, 247, 143, 216, 215, 246, 204, 255, 0, 132, 127, 236, 94, 2, 248, 191, 168, 59, 105, 140, 201, 6, 147, 172, 220, 28, 253, 147, 56, 85, 130, 86, 255, 0, 158, 127, 221, 115, 247, 58, 19, 179, 5, 61, 222, 30, 226, 31, 103, 108, 54, 37, 233, 209, 246, 242, 126, 94, 125, 61, 54, 252, 167, 198, 15, 7, 190, 183, 207, 157, 100, 144, 247, 236, 221, 72, 47, 181, 213, 202, 43, 249, 187, 197, 124, 91, 165, 205, 126, 108, 255, 0, 219, 251, 194, 122, 191, 142, 191, 105, 127, 9, 232, 30, 17, 211, 231, 212, 245, 123, 253, 2, 222, 43, 123, 88, 0, 220, 237, 246, 139, 146, 73, 39, 133, 80, 1, 37, 137, 1, 64, 36, 144, 1, 53, 159, 20, 208, 157, 124, 116, 41, 211, 87, 110, 11, 243, 103, 103, 128, 217, 174, 23, 42, 225, 76, 78, 55, 27, 53, 10, 112, 196, 73, 182, 250, 123, 148, 254, 109, 183, 162, 75, 86, 236, 146, 109, 164, 125, 71, 251, 48, 126, 204, 26, 63, 236, 247, 225, 179, 44, 230, 223, 83, 241, 133, 252, 65, 117, 29, 85, 84, 237, 69, 224, 249, 16, 228, 101, 99, 4, 12, 158, 11, 144, 25, 177, 133, 84, 250, 124, 151, 37, 134, 95, 11, 189, 102, 247, 127, 162, 242, 252, 254, 228, 191, 10, 241, 47, 196, 188, 87, 23, 226, 185, 99, 120, 97, 160, 253, 200, 126, 28, 243, 182, 142, 77, 108, 182, 138, 209, 94, 242, 148, 173, 124, 97, 253, 143, 254, 21, 252, 126, 213, 69, 255, 0, 197, 253, 15, 89, 241, 35, 171, 7, 138, 218, 227, 196, 122, 156, 118, 176, 48, 69, 76, 197, 110, 151, 11, 20, 68, 170, 140, 148, 81, 184, 228, 156, 146, 73, 246, 207, 204, 14, 247, 225, 199, 195, 93, 15, 225, 71, 135, 23, 65, 240, 88, 213, 227, 210, 210, 67, 36, 112, 234, 90, 181, 222, 162, 209, 124, 170, 187, 81, 238, 101, 145, 145, 0, 81, 132, 82, 20, 28, 144, 50, 73, 32, 30, 73, 170, 254, 192, 255, 0, 5, 53, 223, 23, 69, 226, 173, 111, 195, 254, 38, 212, 60, 81, 14, 223, 47, 91, 186, 241, 142, 181, 45, 226, 109, 24, 92, 76, 215, 101, 198, 7, 3, 158, 5, 0, 122, 7, 139, 255, 0, 103, 159, 135, 95, 16, 211, 195, 139, 241, 27, 194, 154, 119, 139, 199, 135, 172, 166, 176, 211, 127, 225, 34, 47, 168, 152, 163, 148, 68, 36, 102, 51, 51, 121, 146, 31, 34, 47, 222, 190, 233, 50, 9, 221, 150, 108, 128, 115, 237, 251, 33, 252, 45, 155, 79, 135, 76, 190, 209, 181, 189, 67, 67, 132, 169, 143, 65, 212, 60, 73, 169, 221, 105, 169, 131, 144, 5, 156, 151, 13, 6, 7, 166, 204, 114, 120, 228, 208, 7, 164, 107, 158, 12, 210, 245, 239, 10, 183, 135, 37, 91, 253, 55, 73, 49, 199, 18, 71, 162, 95, 207, 166, 73, 10, 70, 84, 162, 199, 45, 179, 199, 36, 96, 109, 3, 8, 192, 21, 202, 158, 9, 4, 3, 198, 124, 37, 251, 6, 124, 23, 240, 14, 165, 121, 168, 248, 19, 66, 241, 71, 135, 53, 11, 211, 186, 230, 239, 72, 241, 150, 181, 107, 44, 231, 147, 151, 104, 238, 193, 111, 188, 221, 125, 79, 173, 0, 116, 86, 191, 178, 71, 194, 152, 252, 77, 103, 226, 45, 103, 195, 19, 120, 163, 91, 178, 33, 173, 111, 188, 89, 170, 222, 235, 146, 91, 145, 140, 24, 205, 228, 210, 236, 193, 0, 140, 99, 4, 2, 57, 20, 1, 236, 20, 1, 228, 127, 23, 255, 0, 100, 191, 132, 31, 30, 111, 69, 247, 197, 111, 1, 104, 122, 222, 164, 0, 83, 168, 170, 189, 181, 211, 168, 93, 161, 90, 104, 89, 36, 96, 7, 64, 88, 129, 219, 20, 1, 15, 193, 207, 216, 255, 0, 224, 239, 192, 29, 81, 181, 63, 132, 222, 4, 210, 180, 93, 80, 163, 70, 53, 7, 146, 91, 171, 132, 86, 251, 193, 101, 153, 221, 212, 16, 112, 64, 35, 35, 138, 0, 246, 42, 0, 40, 3, 201, 124, 111, 251, 44, 252, 55, 248, 131, 119, 115, 63, 136, 180, 57, 177, 115, 118, 215, 243, 219, 217, 222, 77, 111, 12, 183, 44, 161, 90, 99, 26, 48, 83, 35, 5, 25, 108, 100, 242, 122, 146, 79, 149, 137, 201, 48, 152, 134, 220, 227, 187, 190, 141, 165, 126, 246, 93, 79, 208, 50, 95, 19, 243, 252, 158, 17, 134, 22, 178, 247, 96, 160, 156, 163, 25, 53, 4, 238, 162, 156, 147, 124, 169, 189, 21, 236, 180, 91, 36, 151, 45, 255, 0, 12, 25, 240, 99, 254, 133, 171, 207, 252, 25, 220, 255, 0, 241, 117, 203, 254, 172, 96, 63, 147, 241, 127, 230, 123, 191, 241, 28, 248, 179, 254, 130, 23, 254, 1, 15, 254, 68, 63, 225, 131, 62, 12, 127, 208, 181, 121, 255, 0, 131, 59, 159, 254, 46, 143, 245, 99, 1, 252, 159, 139, 255, 0, 48, 255, 0, 136, 231, 197, 159, 244, 16, 191, 240, 8, 127, 242, 39, 166, 248, 19, 224, 231, 133, 254, 29, 94, 155, 223, 15, 90, 94, 73, 168, 11, 40, 244, 212, 188, 212, 111, 102, 188, 150, 27, 68, 98, 203, 4, 109, 43, 49, 72, 195, 18, 118, 174, 1, 32, 103, 59, 87, 30, 150, 27, 47, 163, 135, 124, 208, 90, 218, 215, 109, 189, 59, 43, 236, 188, 143, 136, 207, 56, 191, 49, 206, 41, 251, 28, 76, 146, 135, 59, 155, 140, 99, 24, 39, 54, 172, 231, 37, 20, 148, 165, 101, 107, 187, 189, 237, 187, 191, 109, 93, 167, 204, 159, 255, 217}},
                {BancoOpc.Unibanco, "União de Bancos Brasileiros S.A.", "", Nothing}}


            ''' <summary>
            ''' Obtem detalhe de array de variáveis para cada banco.
            ''' </summary>
            ''' <param name="Banco">Banco.</param>
            ''' <param name="Detalhe">Detalhe desejado.</param>
            ''' <returns>Conteúdo obtido no array de especificações de banco.</returns>
            ''' <remarks></remarks>
            Public Shared Function BancoDet(ByVal Banco As Integer, ByVal Detalhe As BancoDetOpc) As Object
                Try
                    For z As Integer = 0 To BancoDets.Length
                        If BancoDets(z, BancoDetOpc.Numero) = Banco Then
                            Return BancoDets(z, Detalhe)
                        End If
                    Next
                Catch
                End Try
                Return Nothing
            End Function


            ''' <summary>
            ''' Executa preparação para qualquer boleto atualizando variáveis com base nos textos informados.
            ''' </summary>
            ''' <param name="NumLinha">Obtem dado a partir do dataset nesta linha.</param>
            ''' <remarks></remarks>
            Sub PreparaParaQualquerModelo(ByVal NumLinha As Integer)

                Do While _DS.Tables(0).Rows.Count < (NumLinha + 1)
                    DS.Tables(0).Rows.Add(DS.Tables(0).NewRow())
                Loop

                ' verificação de campos obrigatórios
                Dim CamposObrig As String = "BancoNumero;CedenteNome;SacadoNome;DocData;Carteira"
                Dim Erros As String = ""
                Dim Campos As String = ""
                For Each Campo As String In Split(CamposObrig, ";")
                    Dim Val As Object = NZV(Prop(Me, Campo), Nothing)
                    If IsNothing(Val) Then
                        Campos &= IIf(Campos <> "", ";", "") & Campo
                    End If
                Next
                If Campos <> "" Then
                    Erros &= IIf(Erros <> "", vbCrLf, "") & "Campos obrigatórios: " & Campos & "."
                End If

                ' validação de campos individuais (limite de caracteres)
                Dim CamposLimitTxt As String = ""
                If BancoNumero = BancoOpc.Itau Then
                    CamposLimitTxt = ""
                ElseIf BancoNumero = BancoOpc.Bradesco Then
                    CamposLimitTxt = ""
                End If
                If CamposLimitTxt <> "" Then
                    Dim CamposLimit() As String = Split(CamposLimitTxt, ";")
                    Campos = ""
                    For z As Integer = 1 To CamposLimit.Length Step 2
                        Dim Campo As String = CamposLimit(z - 1)
                        Dim Limit As Integer = Val(CamposLimit(z))
                        Dim Conteudo As String = NZ(Prop(Me, Campo), "")
                        If Len(Conteudo) > Limit Then
                            Campos &= IIf(Campos <> "", ";", "") & Campo & " com máx de " & Limit & " carac"
                        End If
                    Next
                    If Campos <> "" Then
                        Erros &= IIf(Erros <> "", vbCrLf, "") & "Tam Incorreto: " & Campos & "."
                    End If
                End If

                'If Not TemNaLista("198;175;176;109",  CarteiraTxt) Then
                ' Erros &= IIf(Erros <> "", vbCrLf, "") & "Componente não preparado para carteira " & CarteiraTxt & "."
                'End If

                If Erros <> "" Then
                    DivTextoEmInstrInf(Erros)
                End If
            End Sub


            ''' <summary>
            ''' Texto a ser quebrado com base em CRLF a ser colocado nas instruções superiores.
            ''' </summary>
            ''' <param name="Texto">Texto a ser quebrado com base em CRLF a ser colocado nas instruções superiores.</param>
            ''' <remarks></remarks>
            Public Sub DivTextoEmInstrSup(ByVal Texto As String)
                Dim Linhas() As String = Split(Texto, vbCrLf)
                For z As Integer = 1 To 6
                    Dim Linha As String = Linhas(z)
                    Select Case z
                        Case 1
                            InstrucSup1 = Linha
                        Case 2
                            InstrucSup2 = Linha
                    End Select
                Next
            End Sub

            ''' <summary>
            ''' Quebra texto principal em campos de instrução inferior do boleto.
            ''' </summary>
            ''' <param name="Texto">Texto a ser quebrado baseando-se em CRLF.</param>
            ''' <remarks></remarks>
            Public Sub DivTextoEmInstrInf(ByVal Texto As String)
                Dim Linhas() As String = Split(Texto & vbCrLf & vbCrLf & vbCrLf & vbCrLf & vbCrLf, vbCrLf)
                For z As Integer = 1 To 6
                    Dim Linha As String = Linhas(z - 1)
                    Select Case z
                        Case 1
                            InstrucInf1 = Linha
                        Case 2
                            InstrucInf2 = Linha
                        Case 3
                            InstrucInf3 = Linha
                        Case 4
                            InstrucInf4 = Linha
                        Case 5
                            InstrucInf5 = Linha
                        Case 6
                            InstrucInf6 = Linha
                    End Select
                Next
            End Sub

            ''' <summary>
            ''' Variável que abriga um DataSet.
            ''' </summary>
            ''' <remarks></remarks>
            Private _DS As System.Data.DataSet = Nothing

            ''' <summary>
            ''' Dataset a ser considerado para obtenção das informações em banco de dados.
            ''' </summary>
            ''' <value>Dataset a ser considerado para obtenção das informações em banco de dados.</value>
            ''' <returns>Dataset a ser considerado para obtenção das informações em banco de dados.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property DS() As System.Data.DataSet
                Get
                    If IsNothing(_DS) Then
                        _DS = New System.Data.DataSet
                        _DS.ReadXmlSchema(DSDef.CreateReader)
                    End If
                    Return _DS
                End Get
            End Property

            Private _ValorComMoeda As Boolean = True
            Public Property ValorComMoeda() As Boolean
                Get
                    Return _ValorComMoeda
                End Get
                Set(ByVal value As Boolean)
                    _ValorComMoeda = value
                End Set
            End Property


            ''' <summary>
            ''' Função que prepara boleto bancário no formato do banco Itau.
            ''' </summary>
            ''' <param name="NumLinha">Linha de registro do dataset que será considerada para atualização das variáveis.</param>
            ''' <remarks></remarks>
            Sub PreparaModeloItau(Optional ByVal NumLinha As Integer = 0)
                PreparaParaQualquerModelo(NumLinha)

                With DS.Tables(0).Rows(NumLinha)
                    .Item("BANCO_NOME") = BancoDet(BancoNumero, BancoDetOpc.NomeParaBoleto)
                    .Item("BANCO_NUMERO_DAC") = Microsoft.VisualBasic.Left(BancoNumeroDacTxt, 3) & "-" & Mid(BancoNumeroDacTxt, 4)
                    .Item("CEDENTE_NOME") = CedenteNome
                    .Item("CEDENTE_ENDERECO") = CedenteEndereco
                    .Item("CEDENTE_CNPJ") = CedenteCNPJ
                    .Item("CEDENTE_AG") = AgenciaTxt
                    .Item("CEDENTE_AG_DAC") = AgenciaDAC
                    .Item("CEDENTE_CONTA") = Microsoft.VisualBasic.Left(ContaDacTxt, 5) & "-" & Mid(ContaDacTxt, 6)
                    .Item("CEDENTE_ESPEC") = CedenteEspec
                    .Item("VENCIMENTO") = Format(VencimentoData, "dd/MM/yyyy")
                    .Item("SACADO_NOME") = SacadoNome
                    .Item("SACADO_CPF") = NZ(SacadoCPF, "")
                    .Item("SACADO_ESPEC") = SacadoEspec1 & vbCrLf & SacadoEspec2
                    .Item("SACADO_ID") = SacadoId
                    .Item("DOC_VALOR") = IIf(DocValor <> 0, IIf(ValorComMoeda, EspecMoeda, "") & Trim(Format(DocValor, "#,###,###,##0.00")), "")

                    If BancoNumero = BancoOpc.Santander Then
                        Dim Ref As String = NossoNumero12DacTxt()
                        .Item("NOSSO_NUM") = Mid(Ref, 1, 12) & "-" & Mid(Ref, 13, 1)
                    ElseIf BancoNumero = BancoOpc.Caixa Then
                        .Item("NOSSO_NUM") = Microsoft.VisualBasic.Right(Carteira, 2) & FormatNum(NossoNumero8, 15)
                        .Item("NOSSO_NUM") &= "-" & DacMod11CNPJ(.Item("NOSSO_NUM"))
                    ElseIf BancoNumero = BancoOpc.Bradesco Then
                        .Item("NOSSO_NUM") = NossoNumero11DacTxt()
                    Else
                        .Item("NOSSO_NUM") = FormatNum(Carteira, 3) & "/" & Microsoft.VisualBasic.Left(NossoNumero8Txt, 8) & "-" & Mid(NossoNumero8DacTxt, 9)
                    End If

                    .Item("DOC_NUM") = Microsoft.VisualBasic.Left(DocNumeroDacTxt, 7) & "-" & Mid(DocNumeroDacTxt, 8)
                    .Item("LOCAL_PAG") = LocaldePagamento
                    .Item("DOC_DATA") = Format(DocData, "dd/MM/yyyy")
                    .Item("DOC_ESPEC") = DocEspec
                    .Item("ACEITE") = Aceite
                    .Item("DATA_PROCESS") = Format(ProcessData, "dd/MM/yyyy")
                    .Item("USO_BANCO") = UsoBanco
                    .Item("CARTEIRA") = CarteiraTxt
                    .Item("QUANTIDADE") = Quantidade
                    .Item("LINHA_DIGITAVEL") = LinhaDigitavelTxt()
                    .Item("INSTRUCOES_SUP") = InstrucSup1 & vbCrLf & InstrucSup2 & vbCrLf & InstrucSup3 & vbCrLf & InstrucSup4 & vbCrLf & InstrucSup5 & vbCrLf & InstrucSup6
                    .Item("INSTR_CAIXA") = InstrCaixa
                    .Item("ESPEC_MOEDA") = EspecMoeda
                    .Item("INSTRUCOES") = InstrucInf1 & vbCrLf & InstrucInf2 & vbCrLf & InstrucInf3 & vbCrLf & InstrucInf4 & vbCrLf & InstrucInf5 & vbCrLf & InstrucInf6
                    .Item("COD_CLIENTE") = CodClienteTxt
                    .Item("COD_CLIENTE_DAC") = CodClienteDAC
                    .Item("NOTAS") = Notas
                    .Item("SACADO_COMPL") = SacadoCompl
                    .Item("SEQ") = Seq

                    Dim NBAR As New CodBarras
                    NBAR.Metodo = IcftBase.CodBarras.MetodoOpc.ImagemInteiraInterc25
                    NBAR.LarguraPx = 420
                    NBAR.AlturaPx = 45
                    NBAR.Extensao = "jpg"
                    NBAR.Text = CodBarras()

                    Dim bit As System.Drawing.Bitmap = NBAR.ObtemImagemInteira
                    Dim map As New System.IO.MemoryStream
                    bit.Save(map, System.Drawing.Imaging.ImageFormat.Jpeg)

                    .Item("COD_BARRAS_IMG") = map.ToArray
                    Dim OB() As Byte = BancoDet(BancoNumero, BancoDetOpc.Imagem)

                    .Item("BANCO_LOGOTIPO") = OB
                    Dim Ced As Object = DSArquivo(CedenteLogo, StrConn, , Esquema)
                    If Not IsNothing(Ced) Then
                        .Item("CEDENTE_LOGO") = Ced
                    End If
                End With

            End Sub

            Public Property Seq() As Long
                Get
                    Return pnlPrinc.Attributes("SEQ")
                End Get
                Set(ByVal value As Long)
                    pnlPrinc.Attributes("SEQ") = value
                End Set
            End Property


            ''' <summary>
            ''' Número do documento.
            ''' </summary>
            ''' <value>Número do documento.</value>
            ''' <returns>Número do documento.</returns>
            ''' <remarks></remarks>
            Public Property DocNumero() As Long
                Get
                    Return pnlPrinc.Attributes("DOC_NUMERO")
                End Get
                Set(ByVal value As Long)
                    pnlPrinc.Attributes("DOC_NUMERO") = value
                End Set
            End Property

            ''' <summary>
            ''' Nosso número formatado quando utilizada especificação de 15 caracteres.
            ''' </summary>
            ''' <value>Nosso número quando utilizada especificação de 15 caracteres.</value>
            ''' <returns>Nosso número quando utilizada especificação de 15 caracteres.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property NossoNumero15Txt() As String
                Get
                    Return NossoNumero8Txt & DocNumeroTxt
                End Get
            End Property

            ''' <summary>
            ''' Número do documento formatado.
            ''' </summary>
            ''' <value>Número do documento formatado.</value>
            ''' <returns>Número do documento formatado.</returns>
            ''' <remarks></remarks>
            Public Property DocNumeroTxt() As String
                Get
                    Return Format(DocNumero, "0000000")
                End Get
                Set(ByVal value As String)
                    DocNumero = value
                End Set
            End Property

            Public Property NossoNumero() As Long
                Get
                    Return pnlPrinc.Attributes("NOSSO_NUMERO")
                End Get
                Set(ByVal value As Long)
                    pnlPrinc.Attributes("NOSSO_NUMERO") = value
                End Set
            End Property


            ''' <summary>
            ''' Nosso número.
            ''' </summary>
            ''' <value>Nosso número.</value>
            ''' <returns>Nosso número.</returns>
            ''' <remarks></remarks>
            Public Property NossoNumero8() As Long
                Get
                    Return NossoNumero
                End Get
                Set(ByVal value As Long)
                    NossoNumero = value
                End Set
            End Property

            ''' <summary>
            ''' Nosso número formatado.
            ''' </summary>
            ''' <value>Nosso número formatado.</value>
            ''' <returns>Nosso número formatado.</returns>
            ''' <remarks></remarks>
            Public Property NossoNumero8Txt() As String
                Get
                    Return Format(NossoNumero, "00000000")
                End Get
                Set(ByVal value As String)
                    NossoNumero = Val(value)
                End Set
            End Property

            ''' <summary>
            ''' Função que retorna DAC do nosso número em modo 10.
            ''' </summary>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Function NossoNumero8DacTxt() As String
                Return NossoNumero8Txt & DacMod10(AgenciaTxt & Microsoft.VisualBasic.Left(ContaDacTxt, 5) & Carteira & NossoNumero8Txt)
            End Function


            Public Property SacadoId() As Integer
                Get
                    Return pnlPrinc.Attributes("SACADO_ID")
                End Get
                Set(ByVal value As Integer)
                    pnlPrinc.Attributes("SACADO_ID") = value
                End Set
            End Property


            ''' <summary>
            ''' Função que retorna DAC do nosso número em modo 10.
            ''' </summary>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Function NossoNumero12DacTxt() As String
                Dim Num As String = Format(NossoNumero, "000000000000")
                Return Num & DacMod11(Num)
            End Function


            Public Function NossoNumero11DacTxt() As String
                Dim Num As String = Format(NossoNumero, "00000000000")
                Return Num & DacModP(Format(Carteira, "00") & Num)
            End Function


            ''' <summary>
            ''' Função que retorna DAC do texto em modo 10.
            ''' </summary>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Function DocNumeroDacTxt() As String
                Return DocNumeroTxt() & DacMod10(DocNumeroTxt)
            End Function


            ''' <summary>
            ''' Carrega boleto a partir de um DATASET contendo informações.
            ''' </summary>
            ''' <param name="DSLocal"></param>
            Sub CarregaAPartirDeDataSet(DSLocal As System.Data.DataSet)
                DS.Tables(0).Rows.Clear()

                For z As Integer = 0 To DSLocal.Tables(0).Rows.Count - 1
                    Dim Linha As System.Data.DataRow = DSLocal.Tables(0).Rows(z)

                    Me.Carteira = NZV(Linha("CARTEIRA"), "0")

                    If Linha("BANCO_NUMERO") = 104 Then
                        If Me.Carteira = "010" Then
                            Me.CarteiraTxt = "SR"
                        ElseIf Me.Carteira = "014" Then
                            Me.CarteiraTxt = "RG"
                        End If
                    ElseIf Linha("BANCO_NUMERO") = "237" Then
                        Me.CarteiraTxt = Format(Carteira, "00")
                    End If

                    Me.Agencia = NZV(Linha("CEDENTE_AGENCIA"), 0)
                    Me.AgenciaDAC = DacMod11(AgenciaTxt)

                    Me.ContaDac = NZV(Linha("CEDENTE_CONTADAC"), 0)
                    Me.CodCliente = NZV(Linha("CEDENTE_COD_CLIENTE"), 0)
                    Me.CodClienteDAC = DacModP(Me.CodClienteTxt7)
                    Me.VencimentoData = CDate(NZV(Linha("DATA_VENCIM"), Nothing))

                    Me.NossoNumero = NZV(Linha("NOSSO_NUM"), 0#)

                    If DSLocal.Tables(0).Columns.Contains("ACEITE") Then
                        Me.Aceite = Linha("ACEITE")
                    End If

                    If DSLocal.Tables(0).Columns.Contains("DOC_ESPEC") Then
                        If Not IsDBNull(Linha("DOC_ESPEC")) Then
                            Me.DocEspec = Linha("DOC_ESPEC")
                        End If
                    End If

                    If DSLocal.Tables(0).Columns.Contains("SACADO_SOCIO_MAT") Then
                        If Not IsDBNull(Linha("SACADO_SOCIO_MAT")) Then
                            Me.SacadoId = Linha("SACADO_SOCIO_MAT")
                        End If
                    End If


                    If DSLocal.Tables(0).Columns.Contains("SEQ") Then
                        Me.Seq = Linha("SEQ")
                    End If

                    If DSLocal.Tables(0).Columns.Contains("DOC_NUM") AndAlso NZ(Linha("DOC_NUM"), 0) <> 0 Then
                        Me.DocNumero = Linha("DOC_NUM")
                    Else
                        Me.DocNumero = NZV(Linha("SEQ"), 0)
                    End If

                    Me.DocValor = Linha("VALOR")
                    Me.CedenteLogo = NZ(Linha("CEDENTE_LOGO"), "")
                    Me.CedenteProduto = NZ(Linha("PRODUTO_NOME"), "")
                    Me.CedenteNome = NZ(Linha("CEDENTE_NOME"), "")
                    Me.CedenteEndereco = NZ(Linha("CEDENTE_ENDERECO"), "")
                    Me.CedenteCNPJ = NZ(Linha("CEDENTE_CNPJ"), "")
                    Me.CedenteEspec = NZ(Linha("CEDENTE_NOME"), "") & "    CNPJ:" & NZ(Linha("CEDENTE_CNPJ"), "") & vbCrLf & NZ(Linha("CEDENTE_ENDERECO"), "")
                    Me.SacadoNome = NZ(Linha("SACADO_NOME"), "")
                    Me.SacadoEspec1 = ExprExpr(" - ", " | ", NZV(Linha("SACADO_ENDERECO"), ""), NZV(Linha("SACADO_NUMERO"), ""), NZV(Linha("SACADO_BAIRRO"), ""))
                    Me.SacadoEspec2 = ExprExpr(" - ", " | ", NZV(Linha("SACADO_CIDADE"), ""), NZV(Linha("SACADO_ESTADO"), ""), NZV(Linha("SACADO_CEP"), ""))
                    Me.DocData = NZV(Linha("DATA_EMISSAO"), Nothing)

                    If Linha.Table.Columns.Contains("INSTRUCAO_INF_1") Then
                        Me.InstrucInf1 = NZV(Linha("INSTRUCAO_INF_1"), "")
                        Me.InstrucInf2 = NZV(Linha("INSTRUCAO_INF_2"), "")
                        Me.InstrucInf3 = NZV(Linha("INSTRUCAO_INF_3"), "")
                        Me.InstrucInf4 = NZV(Linha("INSTRUCAO_INF_4"), "")
                        Me.InstrucInf5 = NZV(Linha("INSTRUCAO_INF_5"), "")
                        Me.InstrucInf6 = NZV(Linha("INSTRUCAO_INF_6"), "")
                    Else
                        Dim Linhas() As String = Split(Icraft.IcftBase.LimitaSeqCarac(Linha("INSTRUCOES"), 50) & vbCrLf & vbCrLf & vbCrLf & vbCrLf & vbCrLf, vbCrLf)
                        Me.InstrucInf1 = Linhas(0)
                        Me.InstrucInf2 = Linhas(1)
                        Me.InstrucInf3 = Linhas(2)
                        Me.InstrucInf4 = Linhas(3)
                        Me.InstrucInf5 = Linhas(4)
                        Me.InstrucInf6 = Linhas(5)
                    End If

                    If Linha.Table.Columns.Contains("INSTRUCAO_SUP_1") Then
                        Me.InstrucSup1 = NZV(Linha("INSTRUCAO_SUP_1"), "")
                        Me.InstrucSup2 = NZV(Linha("INSTRUCAO_SUP_2"), "")
                    Else
                        Dim Linhas() As String = Split(Icraft.IcftBase.LimitaSeqCarac(Linha("INSTRUCOES_SUP"), 50) & vbCrLf & vbCrLf & vbCrLf & vbCrLf & vbCrLf, vbCrLf)
                        Me.InstrucSup1 = Linhas(0)
                        Me.InstrucSup2 = Linhas(1)
                        Me.InstrucSup3 = Linhas(2)
                        Me.InstrucSup4 = Linhas(3)
                        Me.InstrucSup5 = Linhas(4)
                        Me.InstrucSup6 = Linhas(5)
                    End If

                    If Linha.Table.Columns.Contains("NOTAS") Then
                        Me.Notas = NZV(Linha("NOTAS"), "")
                    End If

                    If Linha.Table.Columns.Contains("SACADO_CPF") Then
                        Me.SacadoCPF = NZV(Linha("SACADO_CPF"), "")
                    End If

                    If Linha.Table.Columns.Contains("SACADO_COMPL") Then
                        Me.SacadoCompl = NZV(Linha("SACADO_COMPL"), "")
                    End If

                    If Linha.Table.Columns.Contains("INSTR_CAIXA") Then
                        Me.InstrCaixa = NZV(Linha("INSTR_CAIXA"), "")
                    End If

                    If Linha.Table.Columns.Contains("PERIODO") Then
                        Me.Periodo = Microsoft.VisualBasic.Format(NZV(Linha("PERIODO"), Date.Now), "MM/yyyy")
                    End If

                    Me.Banco = Linha("BANCO_NUMERO")
                    PreparaModeloItau(z)
                Next
            End Sub

            ''' <summary>
            ''' Carrega boleto a partir de um registro em tabela.
            ''' </summary>
            ''' <param name="TabelaOuSQL">Tabela ou expressão SQL para obtenção dos dados.</param>
            ''' <param name="STRCONN">String de conexão a ser utilizada para extração dos dados.</param>
            ''' <param name="Params">Params utilizados no SQL contendo formato :VAR, CONTEUDO.</param>
            ''' <remarks></remarks>
            Sub CarregaApartirDeConsulta(ByVal TabelaOuSQL As String, ByVal StrConn As Object, Optional ByVal Params As ArrayList = Nothing)
                TabelaOuSQL = Trim(TabelaOuSQL)
                If Not TabelaOuSQL.StartsWith("SELECT ", StringComparison.OrdinalIgnoreCase) Then
                    TabelaOuSQL = "SELECT * FROM " & TabelaOuSQL
                End If
                Dim DSLocal As System.Data.DataSet = DSCarrega(TabelaOuSQL, StrConn, Params)

                CarregaAPartirDeDataSet(DSLocal)
            End Sub

            ''' <summary>
            ''' Carrega boleto a partir de request de página utilizando variáveis GET ou POST.
            ''' </summary>
            ''' <param name="Page">Página que está fazendo a solicitação.</param>
            ''' <remarks></remarks>
            Public Sub CarregaApartirDeRequest(ByVal Page As System.Web.UI.Page)
                DS.Tables(0).Rows.Clear()
                Me.Carteira = Page.Request("carteira")
                Me.Agencia = NZV(Page.Request("agencia"), 0)
                Me.ContaDac = NZV(Page.Request("contadac"), 0)
                Me.CodCliente = NZV(Page.Request("codcliente"), 0)
                Me.VencimentoData = CDate(NZV(Page.Request("vencimentodata"), Nothing))
                Me.NossoNumero = NZV(NZV(Page.Request("nossonumero"), Page.Request("nossonumero8")), 0)
                Me.DocNumero = NZV(Page.Request("docnumero"), 0)
                Me.DocValor = Val(Page.Request("docvalor").Replace(", ", "."))
                Me.CedenteLogo = Page.Request("cedentelogo")
                Me.CedenteProduto = Page.Request("cedenteproduto")
                Me.CedenteNome = Page.Request("cedentenome")
                Me.CedenteEndereco = Page.Request("cedenteendereco")
                Me.CedenteCNPJ = Page.Request("cedentecnpj")
                Me.CedenteEspec = Page.Request("cedenteespec")
                Me.SacadoNome = Page.Request("sacadonome")
                Me.SacadoEspec1 = Page.Request("sacadoespec1")
                Me.SacadoEspec2 = Page.Request("sacadoespec2")
                Me.Seq = Page.Request("seq")

                Me.DocData = CDate(NZV(Page.Request("docdata"), Nothing))
                Me.DocEspec = Page.Request("docespec")
                Me.UsoBanco = Page.Request("usobanco")
                Me.Aceite = Page.Request("aceite")

                Me.EspecMoeda = Page.Request("especmoeda")
                Me.InstrucInf1 = Page.Request("instrucinf1")
                Me.InstrucInf2 = Page.Request("instrucinf2")
                Me.InstrucInf3 = Page.Request("instrucinf3")
                Me.InstrucInf4 = Page.Request("instrucinf4")
                Me.InstrucInf5 = Page.Request("instrucinf5")
                Me.InstrucInf6 = Page.Request("instrucinf6")
                Me.InstrucSup1 = Page.Request("instrucsup1")
                Me.InstrucSup2 = Page.Request("instrucsup2")
                Me.InstrucSup3 = Page.Request("instrucsup3")
                Me.InstrucSup4 = Page.Request("instrucsup4")
                Me.InstrucSup5 = Page.Request("instrucsup5")
                Me.InstrucSup6 = Page.Request("instrucsup6")

                Me.LocaldePagamento = Page.Request("localdepagamento")
                Me.Banco = Page.Request("banco")
                Me.Notas = Page.Request("notas")
                Me.SacadoCompl = Page.Request("sacado_compl")
                Me.InstrCaixa = Page.Request("instrcaixa")
                Me.SacadoId = Page.Request("sacadoid")

                PreparaModeloItau()
            End Sub


        End Class

        ''' <summary>
        ''' Registra ou obtém dado em dicionário criando-o caso não exista ou atualizando-o.
        ''' </summary>
        ''' <param name="Dicionario">Dicionário a ser considerado.</param>
        ''' <param name="Chave">Chave que será criada ou atualizada.</param>
        ''' <value>Conteúdo desta chave.</value>
        ''' <returns>Conteúdo da chave mencionada.</returns>
        ''' <remarks></remarks>
        Public Shared Property RegDict(ByVal Dicionario As Dictionary(Of String, Integer), ByVal Chave As Object) As Integer
            Get
                Try
                    Return Dicionario(Chave)
                Catch
                    Return 0
                End Try
            End Get
            Set(ByVal value As Integer)
                If Not Dicionario.Keys.Contains(Chave) Then
                    Dicionario.Add(Chave, value)
                Else
                    Dicionario(Chave) = value
                End If
            End Set
        End Property

        ''' <summary>
        ''' Transforma Array de parâmetros em dicionário de string que aponta para objeto.
        ''' </summary>
        ''' <param name="LISTA">Array contendo parâmetros a serem tratados.</param>
        ''' <returns>Dicionário de strings que apontam para objetos.</returns>
        ''' <remarks></remarks>
        Public Shared Function ParamArrayToDict(ByVal ParamArray Lista() As Object) As Dictionary(Of String, Object)
            Dim Opc As ArrayList = ParamArrayToArrayList(Lista)
            Dim Dict As New Dictionary(Of String, Object)
            For z As Integer = 0 To Opc.Count - 1 Step 2
                Dict.Add(Opc(z), Opc(z + 1))
            Next
            Return Dict
        End Function

        ''' <summary>
        ''' Trata expressão de equivalência buscando os termos.
        ''' </summary>
        ''' <param name="Param">String contendo a equivalência VALOR=CONTEUDO.</param>
        ''' <param name="SimbEquiv">Símbo considerado como equivalência (exemplo: igual).</param>
        ''' <returns>Retorna lista de strings contendo na primeira posição lado esquerdo da equivalência e no segundo param lado direito.</returns>
        ''' <remarks></remarks>
        Shared Function Equivalencia(ByVal Param As String, Optional ByVal SimbEquiv As String = "=") As String()
            Dim Pos As Integer = InStr(Param, SimbEquiv)
            Dim AtribIgual As New List(Of String)
            If Pos = 0 Then
                AtribIgual.Add(Param)
            Else
                AtribIgual.Add(Microsoft.VisualBasic.Left(Param, Pos - 1))
                AtribIgual.Add(Mid(Param, Pos + 1))
            End If
            Return AtribIgual.ToArray
        End Function

        ''' <summary>
        ''' Divide expressão baseando-se em código regex.
        ''' </summary>
        ''' <param name="Texto">Texto a ser tratado.</param>
        ''' <param name="Mascara">Máscara regex.</param>
        ''' <returns>Lista de strings que resultaram do tratamento da string principal pela expressão regex.</returns>
        ''' <remarks></remarks>
        Function RegexSplit(ByVal Texto As String, ByVal Mascara As String) As String()
            Return System.Text.RegularExpressions.Regex.Split(Texto, Mascara)
        End Function

        ''' <summary>
        ''' Gera código de barras.
        ''' </summary>
        ''' <remarks></remarks>
        Class CodBarras
            ' "<=1, "2=2", ">=3", "4=4"

            ''' <summary>
            ''' Códigos para especificação entrelaçada.
            ''' </summary>
            ''' <remarks></remarks>
            Private CodInterc() As String = {"<<>><", "><<<>", "<><<>", ">><<<", "<<><>", "><><<", "<>><<", "<<<>>", "><<><", "<><><"}

            ''' <summary>
            ''' Códigos de especificação para barras COD128.
            ''' </summary>
            ''' <remarks></remarks>
            Private Cod128() As String = {"B2E<B2E2B2E2", "B2E2B2E<B2E2", "B2E2B2E2B2E<", "B<E2B<E2B2E>", "B<E2B<E>B2E2", "B<E>B<E2B2E2", "B<E2B2E2B<E>",
    "B<E2B2E>B<E2", "B<E>B2E2B<E2", "B2E2B<E2B<E>", "B2E2B<E>B<E2", "B2E>B<E2B<E2", "B<E<B2E2B>E2", "B<E2B2E<B>E2",
    "B<E2B2E2B>E<", "B<E<B>E2B2E2", "B<E2B>E<B2E2", "B<E2B>E2B2E<", "B2E2B>E2B<E<", "B2E2B<E<B>E2", "B2E2B<E2B>E<",
    "B2E<B>E2B<E2", "B2E2B>E<B<E2", "B>E<B2E<B>E<", "B>E<B<E2B2E2", "B>E2B<E<B2E2", "B>E2B<E2B2E<", "B>E<B2E2B<E2",
    "B>E2B2E<B<E2", "B>E2B2E2B<E<", "B2E<B2E<B2E>", "B2E<B2E>B2E<", "B2E>B2E<B2E<", "B<E<B<E>B2E>", "B<E>B<E<B2E>",
    "B<E>B<E>B2E<", "B<E<B2E>B<E>", "B<E>B2E<B<E>", "B<E>B2E>B<E<", "B2E<B<E>B<E>", "B2E>B<E<B<E>", "B2E>B<E>B<E<",
    "B<E<B2E<B>E>", "B<E<B2E>B>E<", "B<E>B2E<B>E<", "B<E<B>E<B2E>", "B<E<B>E>B2E<", "B<E>B>E<B2E<", "B>E<B>E<B2E<",
    "B2E<B<E>B>E<", "B2E>B<E<B>E<", "B2E<B>E<B<E>", "B2E<B>E>B<E<", "B2E<B>E<B>E<", "B>E<B<E<B2E>", "B>E<B<E>B2E<",
    "B>E>B<E<B2E<", "B>E<B2E<B<E>", "B>E<B2E>B<E<", "B>E>B2E<B<E<", "B>E<B4E<B<E<", "B2E2B<E4B<E<", "B4E>B<E<B<E<",
    "B<E<B<E2B2E4", "B<E<B<E4B2E2", "B<E2B<E<B2E4", "B<E2B<E4B2E<", "B<E4B<E<B2E2", "B<E4B<E2B2E<", "B<E<B2E2B<E4",
    "B<E<B2E4B<E2", "B<E2B2E<B<E4", "B<E2B2E4B<E<", "B<E4B2E<B<E2", "B<E4B2E2B<E<", "B2E4B<E2B<E<", "B2E2B<E<B<E4",
    "B4E<B>E<B<E<", "B2E4B<E<B<E2", "B<E>B4E<B<E<", "B<E<B<E2B4E2", "B<E2B<E<B4E2", "B<E2B<E2B4E<", "B<E<B4E2B<E2",
    "B<E2B4E<B<E2", "B<E2B4E2B<E<", "B4E<B<E2B<E2", "B4E2B<E<B<E2", "B4E2B<E2B<E<", "B2E<B2E<B4E<", "B2E<B4E<B2E<",
    "B4E<B2E<B2E<", "B<E<B<E<B4E>", "B<E<B<E>B4E<", "B<E>B<E<B4E<", "B<E<B4E<B<E>", "B<E<B4E>B<E<", "B4E<B<E<B<E>",
    "B4E<B<E>B<E<", "B<E<B>E<B4E<", "B<E<B4E<B>E<", "B>E<B<E<B4E<", "B4E<B<E<B>E<", "B2E<B<E4B<E2", "B2E<B<E2B<E4",
    "B2E<B<E2B>E2", "B2E>B>E<B<E<B2"}

            ''' <summary>
            ''' Tradução de texto em composição para modo entrelaçado.
            ''' </summary>
            ''' <param name="Texto">Texto normal.</param>
            ''' <returns>Texto entrelaçado.</returns>
            ''' <remarks></remarks>
            Private Function TextoTrat25(ByVal Texto As String) As String
                Dim Result As String = ""
                For z As Integer = 1 To Len(Texto) Step 2
                    Dim Calc As Integer = Val(Mid(Texto, z, 2))
                    Calc += IIf(Calc <= 49, 48, 0) + IIf(Calc >= 50, 142, 0)
                    Result &= Chr(Calc)
                Next
                If Result <> "" Then
                    Result = Result
                End If
                Return Result
            End Function

            Private _Text As String = ""

            ''' <summary>
            ''' Texto que será mostrado no código de barras.
            ''' </summary>
            ''' <value>Texto que será mostrado no código de barras.</value>
            ''' <returns>Texto que será mostrado no código de barras.</returns>
            ''' <remarks></remarks>
            Public Property Text() As String
                Get
                    Return _Text
                End Get
                Set(ByVal value As String)
                    _Text = value
                End Set
            End Property

            Private _LarguraPx As Double

            ''' <summary>
            ''' Largura em px a ser utilizada na construção da imagem de código de barras.
            ''' </summary>
            ''' <value>Largura em px a ser utilizada na construção da imagem de código de barras.</value>
            ''' <returns>Largura em px a ser utilizada na construção da imagem de código de barras.</returns>
            ''' <remarks></remarks>
            Property LarguraPx() As Double
                Get
                    Return _LarguraPx
                End Get
                Set(ByVal value As Double)
                    _LarguraPx = value
                End Set
            End Property

            Private _AlturaPx As Double

            ''' <summary>
            ''' Altura em px a ser utilizada na construção da imagem de código de barras.
            ''' </summary>
            ''' <value>Altura em px a ser utilizada na construção da imagem de código de barras.</value>
            ''' <returns>Altura em px a ser utilizada na construção da imagem de código de barras.</returns>
            ''' <remarks></remarks>
            Property AlturaPx() As Double
                Get
                    Return _AlturaPx
                End Get
                Set(ByVal value As Double)
                    _AlturaPx = value
                End Set
            End Property

            Private _Ext As System.Drawing.Imaging.ImageFormat = System.Drawing.Imaging.ImageFormat.Jpeg
            Private _Concat As String = ""

            ''' <summary>
            ''' Verifica se dados informados para construção do código de barras estão corretos.
            ''' </summary>
            ''' <remarks></remarks>
            Private Sub Verifica()
                If Metodo = MetodoOpc.ImagemInteiraInterc25 Then
                    If Text <> "" AndAlso Not IsNumeric(Text) Then
                        Throw New Exception("Esta especificação de código 2 5 intercalado só permite caracteres numéricos.")
                    End If
                    If Len(Text) Mod 2 <> 0 Then
                        Throw New Exception("Erro em código de barra. Intercalado com fonte CODE_2_5 só pode ser utilizado num de carac par.")
                    End If
                End If
                Select Case Extensao.ToLower
                    Case "gif"
                        _Ext = System.Drawing.Imaging.ImageFormat.Gif
                    Case "png"
                        _Ext = System.Drawing.Imaging.ImageFormat.Png
                    Case "jpg"
                        _Ext = System.Drawing.Imaging.ImageFormat.Jpeg
                    Case "bmp"
                        _Ext = System.Drawing.Imaging.ImageFormat.Bmp
                    Case "tiff"
                        _Ext = System.Drawing.Imaging.ImageFormat.Tiff
                End Select

                If Metodo = MetodoOpc.ImagemInteiraInterc25 Then
                    _Concat = "B<E<B<E<"
                    For z As Integer = 1 To Len(Text) Step 2
                        Dim Simb As String = CodInterc(Val(Mid(Text, z, 1))) & CodInterc(Val(Mid(Text, z + 1, 1)))
                        For zz As Integer = 1 To 5
                            _Concat &= "B" & Mid(Simb, zz, 1) & "E" & Mid(Simb, 5 + zz, 1) ' BARRA E ESPAÇO
                        Next
                    Next
                    _Concat &= "E<B>E<B<"
                ElseIf Metodo = MetodoOpc.ImagemInteiraCode128C Then
                    _Concat = Cod128(105)
                    Dim V As Integer = 105
                    For Z As Integer = 1 To Len(Text) Step 2
                        Dim Ind As Integer = Val(Mid(Text, Z, 1) & Mid(Text, Z + 1, 1))
                        _Concat &= Cod128(Ind)
                        V += Ind * ((Z - 1) / 2 + 1)
                    Next
                    _Concat &= Cod128(V Mod 103)
                    _Concat &= Cod128(106)
                ElseIf Metodo = MetodoOpc.ImagemInteiraCode128B Then
                    _Concat &= Cod128(104)
                    Dim V As Integer = 104
                    For Z As Integer = 1 To Len(Text)
                        Dim Ascii As Integer = Asc(Mid(Text, Z, 1))

                        Dim Ind As Integer
                        If Ascii >= 32 And Ascii <= 126 Then
                            Ind = Ascii - 32
                        ElseIf Ascii >= 200 And Ascii <= 211 Then
                            Ind = Ascii - 105
                        Else
                            Throw New Exception("Código de caracter " & Ascii & " inválido para tipo COD128B")
                        End If
                        _Concat &= Cod128(Ind)
                        V += Ind * Z
                    Next
                    _Concat &= Cod128(V Mod 103)
                    _Concat &= Cod128(106)
                End If

            End Sub

            ''' <summary>
            ''' Atribui a extensão "jpeg" a _Extensao.
            ''' </summary>
            ''' <remarks></remarks>
            Private _Extensao As String = "jpeg"

            ''' <summary>
            ''' Extensão a ser utilizada no algorítmo de criação do desenho.
            ''' </summary>
            ''' <value>Extensão a ser utilizada no algorítmo de criação do desenho.</value>
            ''' <returns>Extensão a ser utilizada no algorítmo de criação do desenho.</returns>
            ''' <remarks></remarks>
            Property Extensao() As String
                Get
                    Return _Extensao
                End Get
                Set(ByVal value As String)
                    _Extensao = value
                End Set
            End Property

            ''' <summary>
            ''' Função que converte uma imagem para o tamanho 32x32 px.
            ''' </summary>
            ''' <returns>Retorna um bitmap redimensionado</returns>
            ''' <remarks></remarks>
            Public Function ObtemImagemInteira() As System.Drawing.Bitmap
                Verifica()
                Dim Bmp As New System.Drawing.Bitmap(Convert.ToInt32(LarguraPx), Convert.ToInt32(AlturaPx))
                Dim Grp As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(Bmp)
                Grp.Clear(Drawing.Color.White)
                Dim Pos As Integer = 5 ' início

                Dim Curto As Integer = 1 ' tamanho do curto ==== <
                Dim Medio As Integer = 2 ' tamanho médio ======= 2
                Dim Longo As Integer = 3 ' tamanho do longo ==== >
                Dim Mlongo As Integer = 4 ' muito longo ======== 4

                For z As Integer = 1 To Len(_Concat) Step 2
                    Dim Item As String = Mid(_Concat, z, 2)
                    Select Case Item
                        Case "E<"
                            Pos += Curto
                        Case "E>"
                            Pos += Longo
                        Case "E2"
                            Pos += Medio
                        Case "E4"
                            Pos += Mlongo
                        Case "B<"
                            Grp.FillRectangle(Drawing.Brushes.Black, New System.Drawing.Rectangle(Pos, 0, Curto, AlturaPx))
                            Pos += Curto
                        Case "B>"
                            Grp.FillRectangle(Drawing.Brushes.Black, New System.Drawing.Rectangle(Pos, 0, Longo, AlturaPx))
                            Pos += Longo
                        Case "B2"
                            Grp.FillRectangle(Drawing.Brushes.Black, New System.Drawing.Rectangle(Pos, 0, Medio, AlturaPx))
                            Pos += Medio
                        Case "B4"
                            Grp.FillRectangle(Drawing.Brushes.Black, New System.Drawing.Rectangle(Pos, 0, Mlongo, AlturaPx))
                            Pos += Mlongo
                        Case Else
                            Stop
                    End Select
                Next

                Return Bmp
            End Function

            ''' <summary>
            ''' Opções para criação de código de barras.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum MetodoOpc
                ImagemInteiraCode128C
                ImagemInteiraCode128B
                ImagemInteiraInterc25
            End Enum

            ''' <summary>
            ''' Opção de método escolhida.
            ''' </summary>
            ''' <remarks></remarks>
            Private _Metodo As MetodoOpc = Nothing

            ''' <summary>
            ''' Método de criação do código de barras.
            ''' </summary>
            ''' <value>Método de criação do código de barras.</value>
            ''' <returns>Método de criação do código de barras.</returns>
            ''' <remarks></remarks>
            Public Property Metodo() As MetodoOpc
                Get
                    Return NZV(_Metodo, MetodoOpc.ImagemInteiraInterc25)
                End Get
                Set(ByVal value As MetodoOpc)
                    _Metodo = value
                End Set
            End Property

            ''' <summary>
            ''' Obtém array de bytes para código de barras.
            ''' </summary>
            ''' <returns>Array de bytes.</returns>
            ''' <remarks></remarks>
            Public Function ObtemImagemBytes() As Byte()
                Dim bit As System.Drawing.Bitmap = ObtemImagemInteira()
                Dim map As New System.IO.MemoryStream
                bit.Save(map, System.Drawing.Imaging.ImageFormat.Jpeg)
                Return map.ToArray
            End Function

        End Class

        ''' <summary>
        ''' Limita sequência de caracteres contínuos para quebra obrigatória incluindo espaço.
        ''' </summary>
        ''' <param name="Texto">Sequência a ser tratada.</param>
        ''' <param name="QtdCarac">Quantidade de caracteres máxima sem a ocorrência de espaço.</param>
        ''' <returns>Sequência com espaço incluído após quantidade de caracteres informada.</returns>
        ''' <remarks></remarks>
        Public Shared Function LimitaSeqCarac(ByVal Texto As Object, ByVal QtdCarac As Integer) As String
            Texto = NZV(Texto, "")
            If QtdCarac <> 0 Then
                Texto = System.Text.RegularExpressions.Regex.Replace(Texto, "([^ ]{" & QtdCarac & "," & QtdCarac & "})", "$1 ")
            End If
            Return Texto
        End Function

        ''' <summary>
        ''' Variáveis de tradução de código morse
        ''' </summary>
        ''' <remarks></remarks>
        Public Shared MORSE_PRIM = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890?.,?!:""'=ÄÖÜ"
        Public Shared MORSE_TRADUZ = New String() {"12", "2111", "2121", "211", "1", "1121", "221", "1111", "11", "1222", "212", "1211", "22", "21", "222", "1221", "2212", "121", "111", "2", "112", "1112", "122", "2112", "2122", "2211", "12222", "11222", "11122", "11112", "11111", "21111", "22111", "22211", "22221", "22222", "112211", "121212", "221122", "112211", "11221", "222111", "121121", "122221", "21112", "1212", "2221", "1122"}

        ''' <summary>
        ''' Traduz texto em código morse.
        ''' </summary>
        ''' <param name="Texto">Texto.</param>
        ''' <param name="Ponto">Caracter a ser utilizado como ponto.</param>
        ''' <param name="Traco">Caractere a ser utilizado como traço.</param>
        ''' <returns>Texto traduzido.</returns>
        ''' <remarks></remarks>
        Public Shared Function TextoEmCodMorse(ByVal Texto As String, Optional ByVal Ponto As String = "1", Optional ByVal Traco As String = "2") As String
            Dim RET As String = ""
            For Z As Integer = 1 To Len(Texto)
                Dim POS As Integer = InStr(MORSE_PRIM, Mid(Texto, Z, 1))
                If POS <> 0 Then
                    RET &= IIf(RET <> "" AndAlso Not RET.EndsWith(vbCrLf), " ", "") & MORSE_TRADUZ(POS - 1)
                Else
                    RET &= Mid(Texto, Z, 1)
                End If
            Next
            If Ponto <> "1" Or Traco <> "2" Then
                RET = Replace(RET, "1", Ponto)
                RET = Replace(RET, "2", Traco)
            End If
            Return RET
        End Function

        ''' <summary>
        ''' Transforma código morse em texto.
        ''' </summary>
        ''' <param name="Texto">Texto codificado.</param>
        ''' <returns>Texto traduzido.</returns>
        ''' <remarks></remarks>
        Public Shared Function CodMorseEmTexto(ByVal Texto As String) As String
            Dim TRATA As String = Replace(Texto, vbCrLf, " " & vbCrLf) & " "
            Dim RET As String = ""
            Do While TRATA <> ""
                Dim Z As Integer = 0
                For Z = LBound(MORSE_TRADUZ) To UBound(MORSE_TRADUZ)
                    If TRATA.StartsWith(MORSE_TRADUZ(Z) & " ") OrElse TRATA.StartsWith(Replace(Replace(MORSE_TRADUZ(Z), "1", "."), "2", "-") & " ") Then
                        RET &= Mid(MORSE_PRIM, Z + 1, 1)
                        TRATA = Mid(TRATA, Len(MORSE_TRADUZ(Z)) + 2)
                        Exit For
                    End If
                Next
                If Not Z <= UBound(MORSE_TRADUZ) Then
                    RET &= Mid(TRATA, 1, 1)
                    TRATA = Mid(TRATA, 2)
                End If

            Loop
            Return RET
        End Function

        ''' <summary>
        ''' Divide linha em parâmetros considerando múltiplos delimitadores.
        ''' </summary>
        ''' <param name="Texto">Linha inicial a ser dividida.</param>
        ''' <param name="Delim">Array de string contendo os delimitadores.</param>
        ''' <returns>Retorna itens conforme a divisão da linha inicial.</returns>
        ''' <remarks></remarks>
        Public Shared Function SplitMultiDelim(ByVal Texto As String, ByVal Delim() As String) As ArrayList
            Dim Ar As New ArrayList
            Ar.Add(Texto)

            Dim ArTemp As New ArrayList
            For Each CadaDelim In Delim
                Dim Faz As Boolean = False
                ArTemp.Clear()
                For Each Linha As String In Ar
                    ArTemp.AddRange(Split(Linha, CadaDelim))
                    Faz = True
                Next
                If Faz Then
                    Ar.Clear()
                    Ar.AddRange(ArTemp)
                End If
            Next

            Return Ar
        End Function

        ''' <summary>
        ''' Busca máximo de valor em coleção comparando todos os registros.
        ''' </summary>
        ''' <param name="Colecao">Coleção para pesquisa.</param>
        ''' <param name="Atrib">Atributo a ser pesquisado.</param>
        ''' <returns>Atributo maior na coleção.</returns>
        ''' <remarks></remarks>
        Public Shared Function ColecAtribMax(ByVal Colecao As Object, ByVal Atrib As String) As Object
            Dim ObjMax As Object = Nothing
            For Each Obj As Object In Colecao
                Dim P As Object = Prop(Obj, Atrib)
                If IsNothing(ObjMax) OrElse P > ObjMax Then
                    ObjMax = P
                End If
            Next
            Return ObjMax
        End Function

        ''' <summary>
        ''' Formata o texto retirando parênteses caso haja um iniciado.
        ''' </summary>
        ''' <param name="Texto">Texto que será formatado.</param>
        ''' <param name="Inicio">Início do texto.</param>
        ''' <param name="Final">Final do Texto.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function TrimCasado(ByVal Texto As String, ByVal Inicio As String, Optional ByVal Final As String = "") As String
            If Final = "" Then Final = Inicio
            Do While True
                If Texto.StartsWith(Inicio) AndAlso Texto.EndsWith(Final) Then
                    Dim TamInicio As Integer = Len(Inicio)
                    Texto = Mid(Texto, TamInicio + 1, Len(Texto) - TamInicio - Len(Final))
                Else
                    Exit Do
                End If
            Loop
            Return Texto
        End Function

        ''' <summary>
        ''' Carrega imagens a partir de uma fonte.
        ''' </summary>
        ''' <param name="Texto">Texto que será exibido.</param>
        ''' <param name="Fonte">Fonte usada no texto.</param>
        ''' <param name="LarguraOrig">Largura original.</param>
        ''' <param name="AlturaOrig">Altura original.</param>
        ''' <param name="x">Posição X.</param>
        ''' <param name="y">Posição Y.</param>
        ''' <param name="Tamanho">Tamanho da fonte.</param>
        ''' <param name="ResolucaoX">Resolução da posição X.</param>
        ''' <param name="ResolucaoY">Resolução da posição Y.</param>
        ''' <param name="Cor">Cor da fonte.</param>
        ''' <param name="CorDaBorda">Cor da borda.</param>
        ''' <param name="Fundo">Fundo da imagem.</param>
        ''' <param name="Extensao">Extensão da imagem.</param>
        ''' <returns>Retorna a imagem carregada com as especificações passadas.</returns>
        ''' <remarks></remarks>
        Public Shared Function ImagemAPartirDeFonte(ByVal Texto As String, ByVal Fonte As String, ByVal LarguraOrig As Integer, ByVal AlturaOrig As Integer, ByVal x As Integer, ByVal y As Integer, ByVal Tamanho As Integer, Optional ByVal ResolucaoX As Integer = 96, Optional ByVal ResolucaoY As Integer = 96, Optional ByVal Cor As String = "black", Optional ByVal CorDaBorda As String = "white", Optional ByVal Fundo As String = "white", Optional ByVal Extensao As String = "jpg") As Bitmap
            Dim gr As Graphics
            Dim dest As Bitmap
            dest = New Bitmap(LarguraOrig, AlturaOrig)
            dest.SetResolution(ResolucaoX, ResolucaoY)
            gr = Graphics.FromImage(dest)
            gr.Clear(ObtemCor(Fundo))

            If Not Compare(CorDaBorda, "none") Then
                Dim bd As New Pen(ObtemCor(CorDaBorda))
                gr.DrawLine(bd, 0, 0, LarguraOrig - 1, 0)
                gr.DrawLine(bd, LarguraOrig - 1, 0, LarguraOrig - 1, AlturaOrig - 1)
                gr.DrawLine(bd, LarguraOrig - 1, AlturaOrig - 1, 0, AlturaOrig - 1)
                gr.DrawLine(bd, 0, 0, 0, AlturaOrig - 1)
            End If

            gr.DrawString(Texto, CarregaFonte(Fonte, Tamanho), New SolidBrush(ObtemCor(Cor)), x, y)
            Return dest
        End Function

        ''' <summary>
        ''' Carrega fontes especiais.
        ''' </summary>
        ''' <param name="Fonte">Fonte que será carregada.</param>
        ''' <param name="Tamanho">Tamanho da fonte.</param>
        ''' <returns>Retorna a fonte renderizada de acordo com as especificações.</returns>
        ''' <remarks></remarks>
        Public Shared Function CarregaFonte(ByVal Fonte As String, Optional ByVal Tamanho As Integer = 30) As Font
            Dim pfc As System.Drawing.Text.PrivateFontCollection = New System.Drawing.Text.PrivateFontCollection
            pfc.AddFontFile(FileExpr("~/uc/icftfontespec/fonts", Fonte))
            Dim fontFamily As FontFamily = pfc.Families(0)
            Return New Font(fontFamily, Tamanho)
        End Function

        ''' <summary>
        ''' Pega itens de um Array de X em X.
        ''' </summary>
        ''' <param name="ListaVet">Array que contém os itens.</param>
        ''' <param name="DeXemX">Sequência que irá pegar os itens.</param>
        ''' <returns>Retorna os itens buscados.</returns>
        ''' <remarks></remarks>
        Public Shared Function ArrayPegaItem(ByVal ListaVet() As String, Optional ByVal DeXemX As Integer = 2) As String()
            Dim Ret As New ArrayList
            For z As Integer = 0 To ListaVet.Count - 1 Step DeXemX
                If Not ListaVet(z).StartsWith("=") Then
                    Ret.Add(ListaVet(z))
                End If
            Next
            Return Ret.ToArray(GetType(System.String))
        End Function

        ''' <summary>
        ''' Opções para função de obtenção do elemento XML.
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum TipoExtracao
            FirstChildValue
        End Enum

        ''' <summary>
        ''' Obtém elementos do Xml.
        ''' </summary>
        ''' <param name="ELEM">Elemento que será buscado.</param>
        ''' <param name="Tipo">Tipo do elemento.</param>
        ''' <returns>Retorna elemento buscado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ObtemDoXmlElem(ByVal ELEM As XmlElement, ByVal Tipo As TipoExtracao) As Object
            Try
                If Tipo = TipoExtracao.FirstChildValue Then
                    Return ELEM.FirstChild.Value
                End If
            Catch
            End Try
            Return Nothing
        End Function

        ''' <summary>
        ''' Exclui arquivos do diretório.
        ''' </summary>
        ''' <param name="Dir"></param>
        ''' <remarks></remarks>
        Public Shared Function LimpaDir(ByVal Dir As String)
            Try
                For Each Arq In Directory.GetFiles(Dir)
                    System.IO.File.Delete(Arq)
                Next
            Catch Ex As Exception
            End Try
            Return Nothing
        End Function

        ''' <summary>
        ''' Copia diretórios incluindo sub diretórios.
        ''' </summary>
        ''' <param name="DirO">Diretório de Origem.</param>
        ''' <param name="DirD">Diretório de Destino.</param>
        ''' <param name="Sobrepor">True ou False para Sobrepor arquivos já existentes.</param>
        ''' <remarks></remarks>
        Public Shared Function CopyDir(ByVal DirO As String, ByVal DirD As String, Optional ByVal Sobrepor As Boolean = True)
            Dim O As System.IO.DirectoryInfo = New System.IO.DirectoryInfo(DirO)
            Dim D As System.IO.DirectoryInfo = New System.IO.DirectoryInfo(DirD)
            If O.Exists Then
                If Not D.Parent.Exists Then
                    Throw New System.IO.DirectoryNotFoundException(" O diretório de destino não existe : " + D.FullName)
                End If
                If Not D.Exists Then
                    D.Create()
                End If
                Dim Arquivos As System.IO.FileInfo
                For Each Arquivos In O.GetFiles()
                    If Sobrepor Then
                        Arquivos.CopyTo(System.IO.Path.Combine(D.FullName, Arquivos.Name), True)
                    Else
                        If Not System.IO.File.Exists(System.IO.Path.Combine(D.FullName, Arquivos.Name)) Then
                            Arquivos.CopyTo(System.IO.Path.Combine(D.FullName, Arquivos.Name), False)
                        End If
                    End If
                Next
                Dim SubDir As System.IO.DirectoryInfo
                For Each SubDir In O.GetDirectories()
                    CopyDir(SubDir.FullName, System.IO.Path.Combine(D.FullName, SubDir.Name), Sobrepor)
                Next
            Else
                Throw New System.IO.DirectoryNotFoundException("Diretório origem não existe " + O.FullName)
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Operações com arquivos.
        ''' </summary>
        ''' <remarks></remarks>
        Class ArquivoDet
            Public Arquivo As String
            Public MomentoCriacao As Date
            Public MomentoAlteracao As Date
            Public Tamanho As Integer

            ''' <summary>
            ''' Construtor da classe.
            ''' </summary>
            ''' <remarks></remarks>
            Sub New()
            End Sub

            ''' <summary>
            ''' Busca informações sobre arquivos.
            ''' </summary>
            ''' <param name="Arquivo">Arquivo referente as informações.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Arquivo As String)
                Dim A = ArquivoDet.DoArquivo(Arquivo)
                Me.Arquivo = A.Arquivo
                MomentoCriacao = A.MomentoCriacao
                MomentoAlteracao = A.MomentoAlteracao
                Tamanho = A.Tamanho
            End Sub
            ''' <summary>
            ''' Informações referentes ao arquivo.
            ''' </summary>
            ''' <param name="Arquivo">Arquivo do qual seram obtidas as informações</param>
            ''' <param name="MomentoCriacao">Data/hora em que o arquivo foi criado.</param>
            ''' <param name="MomentoAlteracao">Data/hora em que o arquivo foi alterado pela última vez.</param>
            ''' <param name="Tamanho">Tamanho atual do arquivo</param>
            ''' <remarks></remarks>
            Sub New(ByVal Arquivo As String, ByVal MomentoCriacao As Date, ByVal MomentoAlteracao As Date, ByVal Tamanho As Integer)
                Me.Arquivo = Arquivo
                Me.MomentoCriacao = MomentoCriacao
                Me.MomentoAlteracao = MomentoAlteracao
                Me.Tamanho = Tamanho
            End Sub

            ''' <summary>
            ''' Informações referentes ao arquivo.
            ''' </summary>
            ''' <param name="Arquivo">Arquivo do qual seram obtidas as informações</param>
            ''' <value></value>
            ''' <returns>Informações do arquivo.</returns>
            ''' <remarks></remarks>
            Public Shared ReadOnly Property DoArquivo(ByVal Arquivo As String) As ArquivoDet
                Get
                    Dim Ret As New ArquivoDet
                    Dim Farq As New System.IO.FileInfo(Arquivo)
                    Ret.Arquivo = Arquivo
                    Ret.MomentoCriacao = Farq.CreationTime
                    Ret.MomentoAlteracao = Farq.LastWriteTime
                    Ret.Tamanho = Farq.Length
                    Farq = Nothing
                    Return Ret
                End Get
            End Property

            ''' <summary>
            ''' Mostra listagem de um determinador diretório.
            ''' </summary>
            ''' <param name="Diretorio">Caminho onde os arquivos serão listados.</param>
            ''' <param name="Mascara"></param>
            ''' <param name="IncluiSub">Inclui um subdiretório.</param>
            ''' <value></value>
            ''' <returns>Retorna um determinado arquivo da lista.</returns>
            ''' <remarks></remarks>
            Public Shared ReadOnly Property ListaDir(ByVal Diretorio As String, ByVal Mascara As String, ByVal IncluiSub As Boolean) As List(Of ArquivoDet)
                Get
                    Dim REF As New List(Of ArquivoDet)
                    For Each ARQ As String In Icraft.IcftBase.ListaDir(Diretorio, Mascara, IncluiSub)
                        REF.Add(DoArquivo(ARQ))
                    Next
                    Return REF
                End Get
            End Property
            ''' <summary>
            ''' Lista informações de arquivos.
            ''' </summary>
            ''' <param name="LISTA">Lista de informações.</param>
            ''' <param name="Arquivo">Arquivos contidos na lista.</param>
            ''' <param name="MomentoCriacao">Data/hora de criação dos arquivos.</param>
            ''' <param name="MomentoAlteracao">Data/hora da última alteração do arquivo.</param>
            ''' <param name="Tamanho"></param>Tamanho atual do arquivo.
            ''' <value></value>
            ''' <returns>Informações do arquivo.</returns>
            ''' <remarks></remarks>
            Public Shared ReadOnly Property Primeiro(ByVal Lista As List(Of ArquivoDet), ByVal Arquivo As String, ByVal MomentoCriacao As Date, ByVal MomentoAlteracao As Date, ByVal Tamanho As Integer) As ArquivoDet
                Get
                    For Each Arq As ArquivoDet In Lista
                        If Not IsNothing(Arquivo) Then
                            If System.IO.Path.GetFileName(Arq.Arquivo) <> System.IO.Path.GetFileName(Arquivo) Then Continue For
                        End If
                        If MomentoCriacao <> CDate(Nothing) Then
                            If Arq.MomentoCriacao <> MomentoCriacao Then Continue For
                        End If
                        If MomentoAlteracao <> CDate(Nothing) Then
                            If Arq.MomentoAlteracao <> MomentoAlteracao Then Continue For
                        End If
                        If Not IsNothing(Tamanho) Then
                            If Arq.Tamanho <> Tamanho Then Continue For
                        End If
                        Return Arq
                    Next
                    Return Nothing
                End Get
            End Property

            ''' <summary>
            ''' Lista informações de arquivos.
            ''' </summary>
            ''' <param name="LISTA">Lista de informações.</param>
            ''' <param name="Arquivo">Arquivos contidos na lista.</param>
            ''' <param name="MomentoCriacao">Data/hora de criação dos arquivos.</param>
            ''' <param name="MomentoAlteracao">Data/hora da última alteração do arquivo.</param>
            ''' <param name="Tamanho">Tamanho atual do arquivo.</param>
            ''' <value></value>
            ''' <returns>Informações do arquivo.</returns>
            ''' <remarks></remarks>
            Public Shared ReadOnly Property Existe(ByVal Lista As List(Of ArquivoDet), ByVal Arquivo As String, ByVal MomentoCriacao As Date, ByVal MomentoAlteracao As Date, ByVal Tamanho As Integer)
                Get
                    Return Not IsNothing(Primeiro(Lista, Arquivo, MomentoCriacao, MomentoAlteracao, Tamanho))
                End Get
            End Property

            ''' <summary>
            ''' Lista informações de arquivos.
            ''' </summary>
            ''' <param name="LISTA">Lista de informações.</param>
            ''' <param name="Arquivo">Arquivos contidos na lista.</param>
            ''' <param name="MomentoCriacao">Data/hora de criação dos arquivos.</param>
            ''' <param name="MomentoAlteracao">Data/hora da última alteração do arquivo.</param>
            ''' <param name="Tamanho">Tamanho atual do arquivo.</param>
            ''' <value></value>
            ''' <returns>Modifica um arquivo, ou caso ele não exista, cria um novo arquivo.</returns>
            ''' <remarks></remarks>
            Public Shared ReadOnly Property EncontraTodos(ByVal Lista As List(Of ArquivoDet), ByVal Arquivo As String, ByVal MomentoCriacao As Date, ByVal MomentoAlteracao As Date, ByVal Tamanho As Integer) As List(Of ArquivoDet)
                Get
                    Dim Ret As New List(Of ArquivoDet)
                    For Each Arq As ArquivoDet In Lista
                        If Not IsNothing(Arquivo) Then
                            If Arq.Arquivo <> Arquivo Then Continue For
                        End If
                        If Not IsNothing(MomentoCriacao) Then
                            If Arq.MomentoCriacao <> MomentoCriacao Then Continue For
                        End If
                        If Not IsNothing(MomentoAlteracao) Then
                            If Arq.MomentoAlteracao <> MomentoAlteracao Then Continue For
                        End If
                        If Not IsNothing(Tamanho) Then
                            If Arq.Tamanho <> Tamanho Then Continue For
                        End If
                        Ret.Add(Arq)
                    Next
                    Return Ret
                End Get
            End Property

            ''' <summary>
            ''' Obtenção de coluna através de pesquisa por nome.
            ''' </summary>
            ''' <param name="Colunas">Colunas a serem pesquisadas.</param>
            ''' <param name="Nome">Nome da coluna.</param>
            ''' <returns>Column correspondente ou nothing caso não seja encontrada.</returns>
            ''' <remarks></remarks>
            Public Shared Function ColumnPorNome(ByVal Colunas As System.Data.DataColumnCollection, ByVal Nome As String) As Object
                For Each Item As System.Data.DataColumn In Colunas
                    If Item.ColumnName = Nome Then
                        Return Item
                    End If
                Next
                Return Nothing
            End Function
        End Class



        ''' <summary>
        ''' Acumula o posicionamento de um controle a partir do Top.
        ''' </summary>
        ''' <param name="Ctl">Controle que será utilizado.</param>
        ''' <returns>Retorna o posicionamento que o controle deverá utilizar.</returns>
        ''' <remarks></remarks>
        Shared Function TopAcum(ByVal Ctl As System.Windows.Forms.Control) As Integer
            Dim Acum As Integer = Ctl.Top
            If Not IsNothing(Ctl.Parent) Then
                Acum += TopAcum(Ctl.Parent)
            End If
            Return Acum
        End Function

        ''' <summary>
        ''' Acumula o posicionamento de um controle a partir do Left.
        ''' </summary>
        ''' <param name="Ctl">Controle que será utilizado.</param>
        ''' <returns>Retorna o posicionamento que o controle deverá utilizar.</returns>
        ''' <remarks></remarks>
        Shared Function LeftAcum(ByVal Ctl As System.Windows.Forms.Control) As Integer
            Dim Acum As Integer = Ctl.Left
            If Not IsNothing(Ctl.Parent) Then
                Acum += LeftAcum(Ctl.Parent)
            End If
            Return Acum
        End Function


        Public Shared Function LeftAcumAte(obj As Object, ctl As Object) As Integer
            If ctl.parent Is obj Then
                Return 0
            End If
            Return ctl.left + LeftAcumAte(obj, ctl.parent)
        End Function

        Public Shared Function TopAcumAte(obj As Object, ctl As Object) As Integer
            If ctl.parent Is obj Then
                Return 0
            End If
            Return ctl.top + TopAcumAte(obj, ctl.parent)
        End Function


        ''' <summary>
        ''' Função para verificar IP da máquina.
        ''' </summary>
        ''' <param name="MascPrior">Máscara que deverá ser considerada.</param>
        ''' <returns>Retorna o IP da máquina.</returns>
        ''' <remarks>Retorna a mensagem desconhecido caso não seja encontrado nenhum IP.</remarks>
        Shared Function IPLocal(Optional ByVal MascPrior As String = "*.*") As List(Of String)
            Dim Ret As New List(Of String)
            Try
                For Each IP As System.Net.IPAddress In System.Net.Dns.GetHostEntry("").AddressList
                    Ret.Add(IP.ToString)
                Next
                Ret = (From x As String In Ret Order By IIf(x Like MascPrior, 0, 1), Val(x)).ToList
                Return Ret
            Catch
                Ret.Add("[desconhecido]")
                Return Ret
            End Try
        End Function

        ''' <summary>
        ''' Escreve log de exportação para planilhas do Excel.
        ''' </summary>
        ''' <param name="Texto">Texto do LOG.</param>
        ''' <remarks></remarks>
        Public Shared Event ExportaParaXlsLog(ByVal Texto As String)

        ''' <summary>
        ''' Exporta para excel uma tabela.
        ''' </summary>
        ''' <param name="Tabela">Tabela de um dataset.</param>
        ''' <param name="Arq">Nome do arquivo que será criado.</param>
        ''' <remarks></remarks>
        Shared Sub ExportaParaXls(ByVal Tabela As System.Data.DataTable, ByVal Arq As String, Optional ByVal DeixarVisivel As Boolean = True, Optional ByVal XlsModelo As String = "")
            If Arq <> "" Then
                Dim excel As Object = CreateObject("excel.application")
                Dim wBook As Object
                Dim wSheet As Object

                If XlsModelo = "" Then
                    wBook = excel.Workbooks.Add()
                Else
                    wBook = excel.Workbooks.Add(XlsModelo)
                End If

                wSheet = wBook.ActiveSheet()

                Dim colIndex As Integer = 0
                Dim rowIndex As Integer = 0

                For Each dc As DataColumn In Tabela.Columns
                    If dc.ColumnName <> "__ord" And dc.ColumnName <> "__tipo" Then
                        colIndex += 1
                        excel.Cells(1, colIndex) = dc.ColumnName
                    End If
                Next

                For Each dr In Tabela.Rows
                    rowIndex = rowIndex + 1
                    colIndex = 0

                    RaiseEvent ExportaParaXlsLog("Exportando linha " & rowIndex & " de " & Tabela.Rows.Count & ", arq: " & Arq & ".")

                    For Each dc In Tabela.Columns
                        colIndex = colIndex + 1
                        If TypeOf dr(dc.ColumnName) Is System.Array Then
                            excel.Cells(rowIndex + 1, colIndex) = "[ARRAY]"
                        Else
                            Try
                                excel.Cells(rowIndex + 1, colIndex) = dr(dc.ColumnName)
                            Catch
                                excel.Cells(rowIndex + 1, colIndex) = "[ERRO]"
                            End Try
                        End If
                    Next
                Next

                wSheet.Columns.AutoFit()

                If System.IO.Path.GetExtension(Arq) = "" Then
                    Arq = Arq & ".XLSX"
                End If
                If System.IO.Path.GetDirectoryName(Arq) = "" Then
                    Arq = FileExpr(DirCorrente, "Export", Arq)
                End If
                If Not System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(Arq)) Then
                    MkDir(System.IO.Path.GetDirectoryName(Arq))
                End If

                wBook.SaveAs(Arq)

                If DeixarVisivel Then
                    excel.Visible = True
                Else
                    CType(wBook, Object).Close
                    FechaExcel(excel)
                End If
            End If
        End Sub

        ''' <summary>
        ''' Obtém diretório corrente com base no aplicativo que está rodando.
        ''' </summary>
        ''' <returns>Caminho do aplicativo atual.</returns>
        ''' <remarks></remarks>
        Public Shared Function DirCorrente() As String
            Return System.IO.Path.GetDirectoryName(System.Windows.Forms.Application.ExecutablePath)
        End Function


        ''' <summary>
        ''' Funcção para adicionar cláusulas IN em um SQL para arraylist.
        ''' </summary>
        ''' <param name="SQLIn">SQL contendo a cláusula IN.</param>
        ''' <returns>Retorna arraylist contendo as cláusulas do SQL passado.</returns>
        ''' <remarks></remarks>
        Public Shared Function SQLInToArrayList(ByVal SQLIn As String) As ArrayList
            If SQLIn.StartsWith("IN ('") And SQLIn.EndsWith("')") Then
                SQLIn = Mid(SQLIn, 6, Len(SQLIn) - 7)
            End If

            Dim Ret As New ArrayList
            For Each PARTE As String In System.Text.RegularExpressions.Regex.Split(SQLIn, "', '")
                Dim ITEM As String = Replace(PARTE, "''", "'")
                Ret.Add(ITEM)
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Define o tamanho das colunas do Grid.
        ''' </summary>
        ''' <param name="Grd">Grid</param>
        ''' <param name="TamanhosPx">Tamanho da coluna em pixels.</param>
        ''' <remarks></remarks>
        Public Shared Sub DefineTamCols(ByVal Grd As System.Windows.Forms.DataGridView, ByVal TamanhosPx As String)
            Dim tampx() As String = Split(TamanhosPx, ";")
            For Ord As Integer = 0 To Grd.Columns.Count - 1
                If Ord < tampx.Length AndAlso tampx(Ord) <> "" Then
                    Grd.Columns(Ord).Width = Val(tampx(Ord))
                End If
            Next
        End Sub

        ''' <summary>
        ''' Obtem o tamanho das colunas do Grid.
        ''' </summary>
        ''' <param name="Grd">Grid.</param>
        ''' <returns>O tamanho das colunas do grid em formato de texto concateado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ObtemTamCols(ByVal Grd As System.Windows.Forms.DataGridView) As String
            Dim Txt As String = ""
            For Z As Integer = 0 To Grd.Columns.Count - 1
                Txt &= IIf(Txt <> "", ";", "") & Grd.Columns(Z).Width
            Next
            Return Txt
        End Function

        ''' <summary>
        ''' Busca um texto com base em alguma das escolhas passadas.
        ''' </summary>
        ''' <param name="Opcoes">São opções como 10.0.* texto x 10.50.*.. texto y separados por pipe.</param>
        ''' <param name="Escolhas">Opções separadas por pipe. Caso uma destas seja encontrada a opção será considerada.</param>
        ''' <returns>Texto para aquela opção.</returns>
        ''' <remarks></remarks>
        Public Shared Function TextoCondicional(ByVal Opcoes As String, ByVal Escolhas As String)
            Dim Ret As String = ""
            Try
                Dim CFG() As String = Split(Opcoes, "|")
                For MASC As Integer = 0 To CFG.Count - 1 Step 2
                    For Each Esco As String In Split(Escolhas, "|")
                        If Esco Like CFG(MASC) Then
                            Ret = CFG(MASC + 1)
                            Exit For
                        End If
                    Next
                    If Ret <> "" Then
                        Exit For
                    End If
                Next
            Catch
            End Try
            Return Ret
        End Function

        ''' <summary>
        ''' Salva um array de bytes em um arquivo compactado.
        ''' </summary>
        ''' <param name="Ar">Array de bytes.</param>
        ''' <param name="ArqCompress">Arquivo que será gravado.</param>
        ''' <remarks></remarks>
        Public Shared Sub SalvaByteArray(ByVal Ar() As Byte, ByVal ArqCompress As String)
            Dim St As New System.IO.StreamWriter(ArqCompress)
            St.BaseStream.Write(Ar, 0, Ar.Length)
            St.Flush()
            St.Close()
        End Sub


        'CtlProp(Controle, "ATUALIZAR")
        'CtlProp(MyBaseInst, "LINHAS_QUANTIDADE")
        'CtlProp(MyBaseInst, "LINHA_NOVA")
        'CtlProp(MyBaseInst, "LINHA_INV")
        'CtlProp(MyBaseInst, "LINHA_" & NumLinha & "_DS" & UCase(Tipo))
        'CtlProp(MyBaseInst, "LINHA_SEL")
        'CtlProp(list, "SQL")
        'CtlProp(list, "STRCONN")
        'CtlProp(list, "QTDCOLS")
        'CtlProp(list, "LISTA")
        'CtlProp(ctl, "ANTERIOR")
        'CtlProp(ctl, "TIPO")
        'CtlProp(Ctl, "AUTO")
        'CtlProp(Ctl, "FORMATO")
        'CtlProp(fld, "VALOR_PADRAO")
        'CtlProp(fld, "TOOLTIP")
        'CtlProp(Ctl, "ATUALIZADO_POR")
        'CtlProp(Ctl, "AUTOMATIZADO")
        'CtlProp(Combo, "EXCLUIR_VALORES")
        'CtlProp(Combo, "NOTNULL")
        'CtlProp(Combo, "OCULTAR_VALOR")
        'CtlProp(Combo, "SEPARA_COLS")
        'CtlProp(Ctl, "KEYDOWN_CARREGADO")
        'CtlProp(Ctl, "DESCR")

        ''' <summary>
        ''' Label que tem como herança  a classe Label padrão do Windows.
        ''' </summary>
        ''' <remarks></remarks>
        Class CtlPropLabel : Inherits System.Windows.Forms.Label
            Public Espec As Object
        End Class

        ''' <summary>
        ''' Propriedades do controle.
        ''' </summary>
        ''' <param name="Ctl">Controle.</param>
        ''' <param name="Prop">Propriedades do controle.</param>
        ''' <value>Valores que serão passados por parâmetro.</value>
        ''' <returns>Retorna as propriedades do controle.</returns>
        ''' <remarks></remarks>
        Public Shared Property CtlProp(ByVal Ctl As Object, ByVal Prop As String) As Object
            Get
                If TypeOf Ctl Is System.Windows.Forms.Control Then
                    Dim Ret As Object = Nothing
                    Dim CtlP() As Object = Ctl.Controls.Find("CTLPROP_" & Prop, True)
                    If CtlP.Count = 0 Then
                        For Each ITEM In NZ(Ctl.tag, "").Split(";")
                            If ITEM.Contains(Prop) Then
                                Try
                                    Ret = ITEM.replace(Prop & ":", "")
                                Catch ex As Exception
                                End Try
                            End If
                        Next
                    End If
                    If CtlP.Count > 0 Then
                        Ret = CtlP(0).Espec
                    End If
                    Return NZ(Ret, "")
                Else
                    Return PropE(Ctl, Prop)
                End If
            End Get
            Set(ByVal value As Object)
                If TypeOf Ctl Is System.Windows.Forms.Control Then
                    Dim CtlP() As Object = Ctl.Controls.Find("CTLPROP_" & Prop, False)
                    If CtlP.Count = 0 Then
                        Dim Lbl As New CtlPropLabel
                        Lbl.Name = "CTLPROP_" & Prop
                        Lbl.Espec = value
                        Lbl.Visible = False
                        Ctl.Controls.Add(Lbl)
                    Else
                        CtlP(0).Espec = value
                    End If
                Else
                    PropE(Ctl, Prop) = value
                End If
            End Set
        End Property

        ''' <summary>
        ''' Define as propriedades do controle através da TAG.
        ''' </summary>
        ''' <param name="Container"></param>
        ''' <param name="Prefixo"></param>
        ''' <remarks></remarks>
        Shared Sub DefineCtlPropFromTag(ByVal Container As Object, ByVal Prefixo As String)
            For Each Pref As String In Split(Prefixo, ";")
                For Each ctl As Object In Form.Controles(Container, Pref)
                    If ctl.tag <> "" Then
                        Dim Elem As New ElementosStr(ctl.tag)
                        For z As Integer = 0 To Elem.Count - 1
                            CtlProp(ctl, Elem(z).Nome) = TrimCarac(Elem(z).Conteudo, New String() {"""", "'"})
                        Next
                    End If
                Next
            Next
        End Sub

        Public Const TamEtiq As Integer = 140 ' Tamanho padrão da etiqueta.
        Public Const TamCampo As Integer = 400 ' Largura padrão do campo.
        Public Const TamCarac As Integer = 10 ' Tamanho do caracter para cálculo de largura automática em px.
        Public Const TamCaracCompl As Integer = 15 ' Px a ser acrescido no cálculo de caracter (arredondamento).
        Public Const AltTexto As Integer = 40 ' Altura padrão do campo texto.
        Public Const AltMemo As Integer = 150 ' Altura padrão do campo memo.
        Public Const AltMinima As Integer = 300 ' Altura mínima do campo.

        ''' <summary>
        ''' Form criado dinamicamente para janelas rápidas de zoom ou outras funções afins.
        ''' </summary>
        ''' <remarks></remarks>
        Class FormAplIcraft
            Inherits System.Windows.Forms.Form

            ''' <summary>
            ''' Evento que ocorre após o clique no botão OK do formulário.
            ''' </summary>
            ''' <param name="Formulario">Formulário.</param>
            ''' <remarks></remarks>
            Public Event AposConfirmar(ByVal Formulario As System.Windows.Forms.Form)

            ''' <summary>
            ''' Evento que ocorre após o clique no botão de Cancelar do formulário.
            ''' </summary>
            ''' <param name="Formulario">Formulário.</param>
            ''' <remarks></remarks>
            Public Event AposCancelar(ByVal Formulario As System.Windows.Forms.Form)


            Public Miolo As New System.Windows.Forms.Panel
            Public Sender As Object = Nothing
            Public PnlBotoes As System.Windows.Forms.Panel = Nothing
            Public WithEvents BtnOK As System.Windows.Forms.Button = Nothing
            Public WithEvents BtnCancel As System.Windows.Forms.Button = Nothing
            Public Campos As ArrayList = Nothing

            ''' <summary>
            ''' Enumerador de tipos.
            ''' </summary>
            ''' <remarks></remarks>
            Public Enum TipoOpc
                Assistente
            End Enum

            ''' <summary>
            ''' Construtor do form.
            ''' </summary>
            ''' <param name="Sender"></param>
            ''' <param name="Titulo">Titulo do form.</param>
            ''' <param name="Tipo"></param>
            ''' <remarks></remarks>
            Sub New(ByVal Sender As Object, ByVal Titulo As String, ByVal Tipo As TipoOpc)
                Me.Sender = Sender
                Me.Text = Titulo

                ' montagem dinâmica
                If Tipo = TipoOpc.Assistente Then
                    BtnOK = New System.Windows.Forms.Button
                    BtnCancel = New System.Windows.Forms.Button
                    PnlBotoes = New System.Windows.Forms.Panel

                    PnlBotoes.Dock = System.Windows.Forms.DockStyle.Bottom
                    PnlBotoes.AutoSize = True
                    Me.Controls.Add(PnlBotoes)
                    '
                    BtnOK.AutoSize = True
                    BtnOK.Name = "btnOK"
                    BtnOK.Location = New Point(5, 5)
                    BtnOK.Text = "OK"
                    PnlBotoes.Controls.Add(BtnOK)
                    '
                    BtnCancel.AutoSize = True
                    BtnCancel.Name = "btnCancel"
                    BtnCancel.Location = New Point(100, 5)
                    BtnCancel.Text = "Cancelar"
                    PnlBotoes.Controls.Add(BtnCancel)

                    Me.Controls.Add(Miolo)
                    Miolo.Dock = System.Windows.Forms.DockStyle.Fill


                    PnlBotoes.SendToBack()
                    '
                    Me.ShowIcon = False
                    Me.ShowInTaskbar = False
                    Me.AutoSize = True
                End If
            End Sub

            ''' <summary>
            ''' Botão OK.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Private Sub BtnOK_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnOK.Click
                DialogResult = System.Windows.Forms.DialogResult.OK
                RaiseEvent AposConfirmar(Me)
                Fechar()
            End Sub

            ''' <summary>
            ''' Botão Cancelar.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Private Sub BtnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnCancel.Click
                DialogResult = System.Windows.Forms.DialogResult.Cancel
                RaiseEvent AposCancelar(Me)
                Fechar()
            End Sub

            ''' <summary>
            ''' Procedure para fechar o form dinâmico.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub Fechar()
                If Not IsNothing(Me.Sender) Then
                    Me.Sender.focus()
                End If
                Me.Close()
            End Sub
        End Class

        ''' <summary>
        ''' Atualização de controles.
        ''' </summary>
        ''' <param name="Ctl">Controle.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <param name="Params">Parâmetros.</param>
        ''' <remarks></remarks>
        Public Shared Sub CtlAtualizar(ByVal Ctl As System.Windows.Forms.Control, ByVal StrConn As Object, ByVal ParamArray Params() As Object)
            If TypeOf Ctl Is System.Windows.Forms.ComboBox Then
                Dim SQL As String = CtlProp(Ctl, "SQL")
                If SQL <> "" Then
                    Dim DS As System.Data.DataSet = DSCarrega(SQL, StrConn, Params)
                    CarregaCombo(Ctl, DS.Tables(0).Columns.Count, False, " | ", True, DS)
                End If
            End If
        End Sub

        ''' <summary>
        ''' Chama rotinas assíncronamente.
        ''' </summary>
        ''' <param name="Rotina">Rotina Delegate.</param>
        ''' <param name="Param">Parâmetros.</param>
        ''' <returns>Thread que abriga a rotina assinc.</returns>
        ''' <remarks></remarks>
        Public Shared Function ChamaAssinc(ByVal Rotina As System.Delegate, Optional ByVal Param As Object = Nothing) As System.Threading.Thread
            Dim th As System.Threading.Thread = Nothing
            If TypeOf (Rotina) Is System.Threading.ThreadStart Then
                th = New System.Threading.Thread(CType(Rotina, System.Threading.ThreadStart))
            ElseIf TypeOf (Rotina) Is System.Threading.ParameterizedThreadStart Then
                th = New System.Threading.Thread(CType(Rotina, System.Threading.ParameterizedThreadStart))
            End If
            If IsNothing(Param) Then
                th.Start()
            Else
                th.Start(Param)
            End If
            Return th
        End Function

        ''' <summary>
        ''' Atualiza controle combobox com base nas definições de propriedades de campo.
        ''' </summary>
        ''' <param name="ComboOuContainer">Combobox ou container onde serão encontrados os controles combobox.</param>
        ''' <remarks></remarks>
        Public Shared Sub AutomatizaComboDefs(ByVal ComboOuContainer As Object)
            For Each Opc As Object In Form.Containers(ComboOuContainer)
                For Each Ctl As Object In Opc.controls
                    If TypeOf Ctl Is System.Windows.Forms.ComboBox Then
                        Dim ATUALIZADO_POR As String = CtlProp(Ctl, "ATUALIZADO_POR")
                        If ATUALIZADO_POR <> "" Then
                            For Each Campo As String In Split(ATUALIZADO_POR, ";")
                                Dim ctl2 As System.Windows.Forms.ComboBox = Form.FindGeral(Ctl.parent, Campo)
                                If Not IsNothing(ctl2) Then
                                    Dim Atualizar As String = CtlProp(ctl2, "ATUALIZAR")
                                    If Not TemNaLista(Atualizar, Ctl.name) Then
                                        Atualizar &= IIf(Atualizar <> "", ";", "") & Ctl.name
                                        CtlProp(ctl2, "ATUALIZAR") = Atualizar
                                    End If
                                End If
                            Next
                            CtlProp(Ctl, "ATUALIZADO_POR") = ""
                        End If
                    End If
                Next
            Next
            For Each Opc As Object In Form.Containers(ComboOuContainer)
                For Each Ctl As Object In Opc.controls
                    If TypeOf Ctl Is System.Windows.Forms.ComboBox Then
                        If CtlProp(Ctl, "SQL") <> "" AndAlso Not NZ(CtlProp(Ctl, "KEYDOWN_CARREGADO"), False) Then
                            AddHandler CType(Ctl, System.Windows.Forms.Control).KeyDown, AddressOf COMBO_KeyDown
                            CtlProp(Ctl, "KEYDOWN_CARREGADO") = True
                        End If
                        Dim Atualizar As String = CtlProp(Ctl, "ATUALIZAR")
                        If Atualizar <> "" AndAlso Not NZ(CtlProp(Ctl, "AUTOMATIZADO"), False) Then
                            AddHandler CType(Ctl, System.Windows.Forms.ComboBox).SelectedIndexChanged, AddressOf AtualizouControle
                            CtlProp(Ctl, "AUTOMATIZADO") = True
                        End If
                    End If
                Next
            Next
        End Sub

        ''' <summary>
        ''' Faz o carregamento das ComboBox através do F9.
        ''' </summary>
        ''' <param name="sender">Objeto padrão.</param>
        ''' <param name="e">Evento do Teclado.</param>
        ''' <remarks></remarks>
        Private Shared Sub COMBO_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
            If e.KeyCode = System.Windows.Forms.Keys.F9 Then
                CarregaCombo(sender)
            End If
        End Sub

        Private Shared _DefaultFormStrConn As Object = Nothing
        Public Shared Property DefaultFormStrConn() As Object
            Get
                Return _DefaultFormStrConn
            End Get
            Set(ByVal value As Object)
                _DefaultFormStrConn = value
            End Set
        End Property

        Private Delegate Sub CarregaComboDelegate(ByRef Combo As Object)

        ''' <summary>
        ''' Carrega as ComboBox.
        ''' </summary>
        ''' <param name="Combo">ComboBox.</param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaCombo(ByRef Combo As Object)
            If Ambiente() = AmbienteTipo.Windowsforms AndAlso Combo.InvokeRequired Then
                Combo.Invoke(New CarregaComboDelegate(AddressOf CarregaCombo), New Object() {Combo})
            Else
                If IsContainer(Combo) Then
                    For Each Opc As Object In Form.Containers(Combo)
                        For Each Ctl As Object In Opc.controls
                            If TypeOf Ctl Is System.Windows.Forms.ComboBox Then
                                CarregaCombo(Ctl)
                            End If
                        Next
                    Next
                Else
                    Try
                        Combo.BACKCOLOR = Color.Gray
                        Dim Lista As ArrayList = Nothing
                        If CtlProp(Combo, "SQL") <> "" Then
                            If TypeOf Combo Is System.Windows.Forms.Control Then
                                Lista = ParamArrayToArrayList(DSCarrega(CtlProp(Combo, "SQL"), CtlProp(Combo, "StrConn"), Combo.Parent))
                            Else
                                Lista = ParamArrayToArrayList(DSCarrega(CtlProp(Combo, "SQL"), CtlProp(Combo, "StrConn"), Combo.Parent, Logon(Combo.Page)))
                            End If
                        ElseIf CtlProp(Combo, "Lista") <> "" Then
                            Lista = ParamArrayToArrayList(Split(CtlProp(Combo, "Lista"), ";"))
                        End If
                        Dim ExcluirValores As String = CtlProp(Combo, "ExcluirValores")
                        Dim QtdCols As Integer = NZV(CtlProp(Combo, "QtdCols"), "1")
                        Dim OcultaValor As Boolean = CType(NZV(CtlProp(Combo, "OcultaValor"), Boolean.FalseString), Boolean)
                        Dim SeparaCols As String = NZV(CtlProp(Combo, "SeparaCols"), ComboSepDefault)

                        If ExcluirValores <> "" And Not IsNothing(Lista) Then
                            Dim z As Integer = 0
                            Do While z < Lista.Count
                                If TemNaLista(ExcluirValores, Lista(z).ToString) Then
                                    For zz As Integer = 0 To QtdCols - 1
                                        Lista.RemoveAt(z)
                                    Next
                                Else
                                    z += QtdCols
                                End If
                            Loop
                        End If
                        If Not IsNothing(Lista) Then
                            If Not CType(NZV(CtlProp(Combo, "NotNull"), Boolean.FalseString), Boolean) Then
                                CarregaComboSimpl(Combo, True, ComboNull)
                            Else
                                Combo.Items.Clear()
                            End If
                            If QtdCols = 1 Then
                                CarregaComboSimpl(Combo, False, Lista)
                            Else
                                CarregaCombo(Combo, QtdCols, OcultaValor, SeparaCols, False, Lista)
                            End If
                        End If
                    Catch EX As Exception
                        MsgBox(EX)
                    End Try
                    Try
                        Combo.BACKCOLOR = Color.White
                    Catch
                    End Try
                End If
            End If
        End Sub

        ''' <summary>
        ''' Carrega ComboBox.
        ''' </summary>
        ''' <param name="Combo">ComoboBox.</param>
        ''' <param name="Limpa">Verifica se a comboBox está limpa.</param>
        ''' <param name="Params">Uma lista de Parâmetros.</param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaComboSimpl(ByVal Combo As Object, ByVal Limpa As Boolean, ByVal ParamArray Params() As Object)
            CarregaCombo(Combo, 1, False, "", Limpa, Params)
        End Sub

        ''' <summary>
        ''' Carrega as combobox.
        ''' </summary>
        ''' <param name="combo">ComboBox.</param>
        ''' <param name="qtdcols">Quantidade de Colunas.</param>
        ''' <param name="ocultavalor">Verifica se o valor é oculto ou não.</param>
        ''' <param name="separadorcols">Caractér separador de colunas.</param>
        ''' <param name="limpa">Verifica se a combobox está limpa.</param>
        ''' <param name="Params">Parâmetros.</param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaCombo(ByVal combo As Object, ByVal qtdcols As Integer, ByVal ocultavalor As Boolean, ByVal separadorcols As String, ByVal limpa As Boolean, ByVal ParamArray Params() As Object)
            ' transforma todos os itens em parâmetros serializáveis
            Dim Itens As ArrayList = ParamArrayToArrayList(Params)

            ' caso solicitado, limpa o combo
            If limpa Then
                combo.Items.Clear()
            End If

            ' separador
            If separadorcols = "" Then
                separadorcols = ComboSepDefault
            End If

            Dim FILTROAR() As String = {}
            If combo.TEXT.STARTSWITH("{") AndAlso combo.TEXT.ENDSWITH("}") Then
                FILTROAR = Split(Mid(combo.TEXT, 2, Len(combo.TEXT) - 2), ";")
            End If

            ' primeira coluna sempre com o valor.
            ' caso já exista no combo, não coloca denovo...
            For z As Integer = 0 To Itens.Count - 1 Step qtdcols
                Dim ListIT As ListItem
                If qtdcols > 1 Then
                    Dim Expr As String = ""
                    For zz As Integer = (z + IIf(ocultavalor, 1, 0)) To z + qtdcols - 1
                        Expr &= IIf(Expr <> "", separadorcols, "") & NZ(Itens(zz), "")
                    Next
                    ListIT = New ListItem(Expr, Itens(z))
                Else
                    ListIT = New ListItem(NZ(Itens(z), ComboNull))
                End If

                If Not combo.Items.Contains(ListIT) Then
                    If FILTROAR.Length = 0 Then
                        combo.Items.Add(ListIT)
                    Else
                        Dim ZZ As Integer
                        For ZZ = 0 To FILTROAR.Count - 1
                            Dim OPC As String = Trim(FILTROAR(ZZ))
                            If OPC <> "" AndAlso Not ListIT.Text Like "*" & Trim(FILTROAR(ZZ)) & "*" Then
                                Exit For
                            End If
                        Next
                        If ZZ = FILTROAR.Count Then
                            combo.ITEMS.ADD(ListIT)
                        End If
                    End If
                End If
                System.Windows.Forms.Application.DoEvents()
            Next
            Try
                DefineValorCtl(combo, ObtemValorCtl(combo))
            Catch
            End Try
        End Sub

        ''' <summary>
        ''' Passagem de parâmetros para carga da ComboBox.
        ''' </summary>
        ''' <param name="Combo">ComboBox.</param>
        ''' <param name="SQL">Comando SQL para a carga das combobox.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <param name="Atualizar">Atualiza as combobox.</param>
        ''' <param name="VinculadoA">Campo ao qual está vinculado a ComboBox.</param>
        ''' <remarks></remarks>
        Shared Sub CarregaComboVinc(ByVal Combo As Object, ByVal SQL As String, ByVal StrConn As Object, Optional ByVal Atualizar As String = "", Optional ByVal VinculadoA As String = "")
            CarregaComboVinc(Combo, 1, False, "", SQL, StrConn, Atualizar, VinculadoA)
        End Sub

        ''' <summary>
        ''' Carrega ComboBox Vinculada.
        ''' </summary>
        ''' <param name="Combo">ComboBox a ser carregada.</param>
        ''' <param name="QtdCols">Quantidade de colunas existente na ComboBox.</param>
        ''' <param name="OcultaValor">Ocultar Valor?</param>
        ''' <param name="SeparadorCols">Separador de colunas. (Default: "|")</param>
        ''' <param name="SQL">Comando SQL para a carga das combobox.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <param name="Atualizar">Atualiza as ComboBox.</param>
        ''' <param name="VinculadoA">Campo ao qual está vinculado a ComboBox.</param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaComboVinc(ByVal Combo As Object, ByVal QtdCols As Integer, ByVal OcultaValor As Boolean, ByVal SeparadorCols As String, ByVal SQL As String, ByVal StrConn As Object, Optional ByVal Atualizar As String = "", Optional ByVal VinculadoA As String = "")
            ' separador
            If SeparadorCols = "" Then
                SeparadorCols = ComboSepDefault
            End If


            CtlProp(Combo, "SQL") = SQL
            CtlProp(Combo, "QTDCOLS") = QtdCols
            CtlProp(Combo, "OCULTA_VALOR") = OcultaValor
            CtlProp(Combo, "SEPARA_COLS") = SeparadorCols
            CtlProp(Combo, "STRCONN") = StrConn
            CtlProp(Combo, "ATUALIZAR") = Atualizar
            CtlProp(Combo, "ATUALIZADO_POR") = VinculadoA
        End Sub

        Public Shared Sub CarregaComboAssinc(ByRef Combo As Object)
            If TypeOf Combo Is System.Windows.Forms.Control Then
                Dim ar() As Object = {Combo}
                Try
                    Icraft.IcftBase.AssincRun.Exec(Combo.FINDFORM, Combo.NAME, New Threading.ParameterizedThreadStart(AddressOf CarregaComboCtl), ar)
                Catch EX As Exception
                    Stop
                End Try
            End If
        End Sub


        Delegate Sub DelegateCarregaComboCtl(T As Dictionary(Of AssincRun.Tipo, Object))

        Public Shared Sub CarregaComboCtl(T As Dictionary(Of AssincRun.Tipo, Object))
            AssincRun.Inicia(T)
            CarregaCombo(T(AssincRun.Tipo.param)(0))
            AssincRun.Finaliza(T)
        End Sub

        ''' <summary>
        ''' Verifica se o controle é container de um ou mais controles.
        ''' </summary>
        ''' <param name="RAIZ">Controle pai.</param>
        ''' <returns>Verdadeiro ou falso.</returns>
        ''' <remarks></remarks>
        Public Shared Function IsContainer(ByVal RAIZ As Object) As Boolean
            If TypeOf RAIZ Is RepeaterItem OrElse TypeOf RAIZ Is Web.UI.ControlCollection OrElse TypeOf RAIZ Is System.Windows.Forms.Form.ControlCollection OrElse TypeOf RAIZ Is System.Windows.Forms.Form OrElse TypeOf RAIZ Is System.Windows.Forms.GroupBox OrElse TypeOf RAIZ Is System.Windows.Forms.TabControl OrElse TypeOf RAIZ Is System.Windows.Forms.SplitContainer OrElse TypeOf RAIZ Is System.Windows.Forms.TableLayoutPanel OrElse TypeOf RAIZ Is System.Windows.Forms.FlowLayoutPanel OrElse TypeOf RAIZ Is System.Windows.Forms.TabControl OrElse TypeOf RAIZ Is System.Windows.Forms.Panel Then
                Return True
            End If
            Return False
        End Function

        ''' <summary>
        ''' Retorna os valores dos itens de uma combobox.
        ''' </summary>
        ''' <param name="Obj">Objeto</param>
        ''' <param name="Conteudo">Conteúdo</param>
        ''' <returns>Valor do conteúdo</returns>
        ''' <remarks></remarks>
        Public Shared Function ComboItem(ByVal Obj As Object, ByVal Conteudo As Object) As Object
            If IsDBNull(Conteudo) Then
                Return Nothing
            End If
            'Variavel p verificar se o valor atual foi encontrando nos itens do combo
            Dim EncontrouItem As Boolean = False
            For Each Item As Object In Obj.items
                Dim VALOR As Object
                If TypeOf Item Is ListItem Then
                    VALOR = Item.Value
                Else
                    VALOR = Item
                End If
                If TypeOf VALOR Is System.Data.DataRow Then
                    EncontrouItem = True
                    Return Nothing
                End If
                If CStr(VALOR) = ComboNull Then
                    If TypeOf Conteudo Is String AndAlso Conteudo = ComboNull Then
                        EncontrouItem = True
                        Return Item
                    End If
                    If IsNothing(Conteudo) OrElse IsDBNull(Conteudo) Then
                        EncontrouItem = True
                        Return Item
                    End If
                Else
                    If VALOR = Conteudo Or Item.text = Conteudo.ToString Then
                        EncontrouItem = True
                        Return Item
                    End If
                End If
            Next
            'Verifica se Item com o Conteudo foi encontrado
            If EncontrouItem = False And Conteudo <> "" Then
                Try
                    Obj.items.add(New ListItem(Conteudo, Conteudo))
                    OrdenarCombo(Obj)
                    'Roda rotina p selecionar item atual novamente
                    For Each Item In Obj.items
                        If Item.VALUE = Conteudo Or Item.text = Conteudo Then
                            Obj.SELECTEDITEM = Item
                            EncontrouItem = True
                            Return Item
                        End If
                    Next
                Catch ex As Exception
                    MsgBox(ex)
                End Try
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Define o item da combobox de acordo com um valor.
        ''' </summary>
        ''' <param name="Ctl">Controle.</param>
        ''' <param name="Valor">Valor do Item.</param>
        ''' <returns>Item selecionado da ComboBox</returns>
        ''' <remarks></remarks>
        Public Shared Function ComboSelItem(ByVal Ctl As Object, ByVal Valor As Object) As Object
            Dim Combo As System.Windows.Forms.ComboBox = Ctl
            Dim Item As Object = ComboItem(Ctl, Valor)
            If Not IsNothing(Item) Then
                Combo.SelectedItem = Item
                If NZ(Prop(Combo), "") <> Valor Then
                    Ctl.TEXT = Item.TEXT
                End If
                Return Item
            End If
            Return Nothing
        End Function

        ''' <summary>
        ''' Transforma uma Array em um DataSet.
        ''' </summary>
        ''' <param name="CampoConteudo">Conteudo do campo.</param>
        ''' <returns>DataSet</returns>
        ''' <remarks></remarks>
        Public Shared Function ArrayToDS(ByVal CampoConteudo As ArrayList) As System.Data.DataSet
            Dim DS As New System.Data.DataSet
            Dim TB As New DataTable
            Dim Conteudo As New ArrayList
            For z As Integer = 0 To CampoConteudo.Count - 1 Step 2
                Dim Campo As String = CampoConteudo(z)
                If Campo.StartsWith(":") Then
                    Campo = Mid(Campo, 2)
                End If
                Dim Valor As Object = CampoConteudo(z + 1)
                Dim TC As New TabCol(Campo, Valor)
                TB.Columns.Add(New System.Data.DataColumn(TC.Nome, TC.Tipo))
                Conteudo.Add(Valor)
            Next
            TB.Rows.Add(Conteudo.ToArray)
            Return DS
        End Function

        ''' <summary>
        ''' Transforma um Array de controles em um DataSet.
        ''' </summary>
        ''' <param name="CampoConteudo">Conteúdo do campo.</param>
        ''' <param name="Prefixo">Prefixo do controle.</param>
        ''' <returns>DataSet de valores dos controles.</returns>
        ''' <remarks></remarks>
        Public Shared Function ArrayFLDToDS(ByVal CampoConteudo As ArrayList, Optional ByVal Prefixo As String = "FLD") As System.Data.DataSet
            Dim DS As New System.Data.DataSet
            Dim TB As New DataTable
            DS.Tables.Add(TB)
            Dim Conteudo As New ArrayList
            For z As Integer = 0 To CampoConteudo.Count - 1
                Dim Campo As String = CampoConteudo(z).name
                If Campo.StartsWith(Prefixo) Then
                    Campo = Mid(Campo, Len(Prefixo) + 1)
                End If
                Dim Valor As Object = ObtemValorCtl(CampoConteudo(z))
                Dim TC As New TabCol(Campo, Valor)
                TB.Columns.Add(New System.Data.DataColumn(TC.Nome, TC.Tipo))
                Conteudo.Add(Valor)
            Next
            TB.Rows.Add(Conteudo.ToArray)
            Return DS
        End Function

        ''' <summary>
        ''' Transforma um DataSet em uma lista de variáveis.
        ''' </summary>
        ''' <param name="DS">DataSet</param>
        ''' <returns>ArrayList com o conteúdo do DataSet.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSToListVars(ByVal DS As System.Data.DataSet) As ArrayList
            Return LinhaToListVars(DS.Tables(0).Rows(0))
        End Function

        ''' <summary>
        ''' Linha de um dataset para lista de variáveis.
        ''' </summary>
        ''' <param name="Linha">Linha</param>
        ''' <returns>ArrayList com os valores da linha.</returns>
        ''' <remarks></remarks>
        Public Shared Function LinhaToListVars(ByVal Linha As System.Data.DataRow) As ArrayList
            Dim PA As New ArrayList
            For z As Integer = 0 To Linha.Table.Columns.Count - 1
                Dim coluna As String = Linha.Table.Columns(z).ColumnName
                PA.Add(":" & coluna)
                PA.Add(Linha(coluna))
            Next
            Return PA
        End Function

        ''' <summary>
        ''' DataSet para referência.
        ''' </summary>
        ''' <param name="Dado">Dados para serem postos no DataSet.</param>
        ''' <param name="NomeCampo">Nome do campo.</param>
        ''' <param name="EsquemaTabelaOrigem">Esquema da tabela de origem do banco de dados.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <returns>Dados.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSRef(ByVal Dado As Object, ByVal NomeCampo As String, ByVal EsquemaTabelaOrigem As String, ByVal StrConn As Object) As Object
            Dim Ref As String = Dado.ToString.Replace(" ", "").Replace("--", "-")
            If System.Text.RegularExpressions.Regex.Match(Ref, "[A-Z0-9]{4,4}\-").Success Then
                If Len(Ref) < 13 Then
                    If Len(Ref) < 5 Then ' AAAA-
                        Ref &= "-"
                    End If
                    If Len(Ref) < 7 Then ' AAAA-99
                        Ref &= Format(Now, "yy")
                    End If
                    If Len(Ref) < 8 Then ' AAAA-99-
                        Ref &= "-"
                    End If
                    Dim RefU As String = NZV(DSValor("MAX(SUBSTR(" & NomeCampo & "," & Len(Ref) + 1 & "))", EsquemaTabelaOrigem, StrConn, NomeCampo & " LIKE '" & Ref & "%'"), "0")
                    Dim Masc As String = Format(Val(RefU) + 1, New String("0", 13 - Len(Ref)))
                    If Len(Masc) > (13 - Len(Ref)) Then
                        Throw New Exception("Não existe mais sequencial disponível para esta referência neste segmento. Última: " & Ref & RefU & ".")
                    End If
                    Ref = Ref & Masc
                    Dado = Ref
                End If
            Else
                Dado = Convert.DBNull
            End If
            Return Dado
        End Function

        ''' <summary>
        ''' Permite formatação de campos através do campo TAG.
        ''' </summary>
        ''' <param name="Origem">Origem do Controle</param>
        ''' <param name="StrConn">String de Conexão</param>
        ''' <param name="Prefixo">Prefixo do nome do controle. (Default: CTL)</param>
        ''' <remarks></remarks>
        Public Shared Sub FldFormaTag(ByVal Origem As Object, Optional ByVal StrConn As Object = "STRCONN", Optional ByVal Prefixo As String = "")
            If IsContainer(Origem) Then
                For Each Ctl In Form.Controles(Origem, Prefixo)
                    FldFormaTag(Ctl, StrConn)
                Next
            Else
                Try
                    If Origem.Tag <> "" Then
                        Dim ELEM As New ElementosStr(Origem.TAG)
                        Dim Formato As String = ELEM.Items("FORMATO").Conteudo
                        Dim Tipo As Defs.TipoDefEstrut = New Defs.TipoDefEstrut
                        Tipo.Tipo = ELEM.Items("TIPO").Conteudo
                        Tipo.Tamanho = NZV(ELEM.Items("TAMANHO").Conteudo, 0)
                        Tipo.TamDecimal = NZV(ELEM.Items("TAMDECIMAL").Conteudo, 0)
                        Dim RelsN1SQL As String = ELEM.Items("RELN1SQL").Conteudo
                        Dim RelQtdCols As Integer = NZV(ELEM.Items("RELQTDCOLS").Conteudo, 0)
                        Dim AtualizadoPor As String = ELEM.Items("ATUALIZADOPOR").Conteudo
                        Dim ToolTip As String = ELEM.Items("TOOLTIP").Conteudo
                        Dim TamMax As Integer = NZV(ELEM.Items("TAMMAX").Conteudo, 0)
                        Dim Validating As Boolean = CType(NZV(ELEM.Items("VALIDATING").Conteudo, "TRUE"), Boolean)
                        Dim RelsTips As System.Text.RegularExpressions.MatchCollection = System.Text.RegularExpressions.Regex.Matches(ToolTip, "\b(\w+)=(\w+)\b")
                        Fld.CtlForma(StrConn, Formato, Tipo, RelsN1SQL, RelQtdCols, RelsTips, AtualizadoPor, ToolTip, TamMax, Validating, Origem)
                    End If
                Catch EX As Exception
                    MsgBox("Erro ao formatar campo " & Origem.name & ": " & EX.Message)
                End Try
            End If
        End Sub

        ''' <summary>
        ''' Faz a referência cruzada de SQL.
        ''' </summary>
        ''' <param name="SQL">SQL para referência.</param>
        ''' <param name="CamposLinha">Campos das linhas.</param>
        ''' <param name="CampoColuna">Campos das colunas.</param>
        ''' <param name="TipoValor">Tipo do conteúdo.</param>
        ''' <param name="CampoValor">Valor do campo.</param>
        ''' <param name="StrConn">String de conexão.</param>
        ''' <param name="OrdemBuscaCols">Ordem de busca das colunas.</param>
        ''' <param name="OrdemLinhas">Ordem das linhas.</param>
        ''' <param name="Param">Parâmetros.</param>
        ''' <returns>SQL primário.</returns>
        ''' <remarks></remarks>
        Public Shared Function RefCruz(ByVal SQL As String, ByVal CamposLinha As String, ByVal CampoColuna As String, ByVal TipoValor As String, ByVal CampoValor As String, ByVal StrConn As Object, ByVal OrdemBuscaCols As String, ByVal OrdemLinhas As String, ByVal ParamArray Param() As Object) As String
            Dim Param2 = ParamArrayToArrayList(Param)
            If OrdemBuscaCols = "" Then
                OrdemBuscaCols = Replace(CampoColuna, ";", ",") & " DESC"
            End If
            Dim BUSCACOLUNA As String = "SELECT " & CampoColuna & " FROM (" & SQL & ") GROUP BY " & CampoColuna & " ORDER BY " & OrdemBuscaCols
            Dim DS As System.Data.DataSet = DSCarrega(BUSCACOLUNA, StrConn, Param2)
            Dim SQLCOLS As String = ""
            For Each Col As System.Data.DataRow In DS.Tables(0).Rows
                If IsDBNull(Col(0)) Then
                    SQLCOLS &= IIf(SQLCOLS <> "", ", ", "") & TipoValor & "(DECODE(" & CampoColuna & ", NULL, " & CampoValor & ", 0)) ""[vazio]"""
                Else
                    SQLCOLS &= IIf(SQLCOLS <> "", ", ", "") & TipoValor & "(DECODE(" & CampoColuna & ", '" & Tratex(Col(0)) & "', " & CampoValor & ", 0)) " & """" & IIf(IsDBNull(Col(0)), "[vazio]", Col(0)) & """"
                End If
            Next
            Dim CAMPOSLINHASTR As String = Join(Split(CamposLinha, ";"), ", ")
            If OrdemLinhas = "" Then
                OrdemLinhas = Replace(CamposLinha, ";", ",")
            End If
            Dim SQLPRIM As String = "SELECT " & CAMPOSLINHASTR & ", " & SQLCOLS & " FROM (" & SQL & ") GROUP BY " & CAMPOSLINHASTR & " ORDER BY " & OrdemLinhas
            Return SQLPRIM
        End Function

        ''' <summary>
        ''' Elimina um processo pelo nome.
        ''' </summary>
        ''' <param name="Processo">Nome do processo.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function EliminarProcesso(ByVal Processo As String) As String
            Dim proc As Process
            For Each proc In Process.GetProcesses
                If proc.ProcessName.ToUpper() Like Processo.ToUpper() Then
                    Try
                        proc.Kill()
                        proc.Close()
                    Catch ex As Exception
                    End Try
                End If
            Next
            Return Nothing
        End Function

        ''' <summary>
        ''' Função de conversão de Character Encoding.
        ''' </summary>
        ''' <param name="Texto">Texto no qual deseja fazer a substituição.</param>
        ''' <param name="EncodingDe">Codificação de origem.</param>
        ''' <param name="EncodingPara">Codificação de destino.</param>
        ''' <returns>Texto codificado.</returns>
        ''' <remarks></remarks>
        Public Shared Function ConvCarac(ByVal Texto As String, ByVal EncodingDe As String, ByVal EncodingPara As String) As String
            Return (System.Text.Encoding.GetEncoding(EncodingPara)).GetChars((System.Text.Encoding.GetEncoding(EncodingDe)).GetBytes(Texto.ToCharArray))
        End Function

        ''' <summary>
        ''' Retorna a versão do aplicativo.
        ''' </summary>
        ''' <returns>Versão do Aplicativo</returns>
        ''' <remarks></remarks>
        Public Shared Function VersaoApl() As String
            Dim v() As String = Split(My.Application.Info.Version.ToString & ".0.0.0.0", ".")
            Return "V" & Format(Val(v(0)), "00") & "." & Format(Val(v(1)), "00") & "." & Format(Val(v(2)), "00") & "." & Format(Val(v(3)), "00")
        End Function

        ''' <summary>
        ''' Retorna a versão do IcftBase que é formado junto ao programa.
        ''' </summary>
        ''' <returns>Versão do IcftBase no formato correto</returns>
        ''' <remarks></remarks>
        Public Shared Function VersaoIcftBase() As String
            Dim v() As String = Split(System.Reflection.AssemblyName.GetAssemblyName("Icraft.dll").Version.ToString, ".")
            Dim resp As String = "V" & Format(Val(v(0)), "00") & "." & Format(Val(v(1)), "00") & "." & Format(Val(v(2)), "00") & "." & Format(Val(v(3)), "00")
            Return resp
        End Function

        ''' <summary>
        ''' Preenche uma string ao lado esquerdo com o preenchedor especificado.
        ''' </summary>
        ''' <param name="Texto">Texto</param>
        ''' <param name="Tamanho">Tamanho desejado do texto</param>
        ''' <param name="Preenchedor">O que irá preencher para que o texto fique do tamanho desejado</param>
        ''' <returns>Texto alterado</returns>
        ''' <remarks></remarks>
        Public Shared Function Lpad(ByVal Texto As String, ByVal Tamanho As Integer, Optional ByVal Preenchedor As String = " ") As String
            Return Microsoft.VisualBasic.Left(Texto & New String(Preenchedor, Tamanho), Tamanho)
        End Function

        ''' <summary>
        ''' Preenche uma string ao lado direito com o preenchedor especificado.
        ''' </summary>
        ''' <param name="Texto">Texto</param>
        ''' <param name="Tamanho">Tamanho desejado do texto</param>
        ''' <param name="Preenchedor">O que irá preencher para que o texto fique do tamanho desejado</param>
        ''' <returns>Texto alterado</returns>
        ''' <remarks></remarks>
        Public Shared Function RPad(ByVal Texto As String, ByVal Tamanho As Integer, Optional ByVal Preenchedor As String = " ") As String
            Return Microsoft.VisualBasic.Right(New String(Preenchedor, Tamanho) & Texto, Tamanho)
        End Function

        ''' <summary>
        ''' Classe criada para recurso de clique e arraste.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class DragAndDrop

            ''' <summary>
            ''' Status do objeto: movendo ou parado.
            ''' </summary>
            ''' <remarks></remarks>
            Public Class Status
                Public Drag As Boolean = False, Ativo As Boolean = True
                Public ptX As Double = 0.0, ptY As Double = 0.0
            End Class

            ''' <summary>
            ''' Ativa os controles de clique e arraste.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub AtivarTodos()
                For Each Elem As Object In CtlStatus.Keys
                    CtlStatus(Elem).Ativo = True
                Next
            End Sub

            ''' <summary>
            ''' Desativa os controles de clique e arraste.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub DesativarTodos()
                For Each Elem As Object In CtlStatus.Keys
                    CtlStatus(Elem).Ativo = False
                    Elem.Cursor = System.Windows.Forms.Cursors.Default
                Next
            End Sub

            ''' <summary>
            ''' Status do controle.
            ''' </summary>
            ''' <remarks></remarks>
            Public CtlStatus As New Dictionary(Of Object, Status)

            ''' <summary>
            ''' Acontece ao pressionar o controle.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Private Sub AoPressionar(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
                If CtlStatus(sender).Ativo Then
                    If e.Button = System.Windows.Forms.MouseButtons.Left Then
                        CtlStatus(sender).Drag = True
                        CtlStatus(sender).ptX = e.X
                        CtlStatus(sender).ptY = e.Y
                    End If
                End If
            End Sub

            ''' <summary>
            ''' Ao soltar o controle.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Private Sub AoLargar(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
                If CtlStatus(sender).Ativo Then
                    CtlStatus(sender).Drag = False
                End If
            End Sub

            ''' <summary>
            ''' Arraste do controle.
            ''' </summary>
            ''' <param name="sender"></param>
            ''' <param name="e"></param>
            ''' <remarks></remarks>
            Public Sub Arraste(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
                If CtlStatus(sender).Ativo Then
                    If CtlStatus(sender).Drag = True Then
                        sender.Location = New System.Drawing.Point(sender.Location.X + e.X - CtlStatus(sender).ptX, sender.Location.Y + e.Y - CtlStatus(sender).ptY)
                    Else
                        Dim pnl As New Panel
                        Dim btn1 As New Button
                        Dim btn2 As New Button
                    End If
                End If
            End Sub

            ''' <summary>
            ''' Muda o ponteiro do mouse.
            ''' </summary>
            ''' <param name="sender">Objeto</param>
            ''' <param name="e">Argumentos de eventos do sistema.</param>
            ''' <remarks></remarks>
            Private Sub MudaPonteiro(ByVal sender As System.Object, ByVal e As System.EventArgs)
                If CtlStatus(sender).Ativo Then
                    sender.Cursor = System.Windows.Forms.Cursors.SizeAll
                End If
            End Sub

            ''' <summary>
            ''' Carrega o controle que contenha um prefixo específico.
            ''' </summary>
            ''' <param name="Container">Onde o controle irá ser encontrado.</param>
            ''' <param name="Prefixo">Prefixo</param>
            ''' <param name="Limpar">Limpar</param>
            ''' <param name="Ativo">Ativo</param>
            ''' <remarks></remarks>
            Public Sub CarregaPorPrefixo(ByVal Container As Object, Optional ByVal Prefixo As String = "*", Optional ByVal Limpar As Boolean = False, Optional ByVal Ativo As Boolean = True)
                If Limpar Then
                    CtlStatus.Clear()
                End If
                For Each Ctl As System.Windows.Forms.Control In Form.Controles(Container, Prefixo)
                    CarregaCtl(Ctl, , Ativo)
                Next
            End Sub

            ''' <summary>
            ''' Carrega controle.
            ''' </summary>
            ''' <param name="Ctl">Controle</param>
            ''' <param name="Limpar">Limpar</param>
            ''' <param name="Ativo">Ativo</param>
            ''' <remarks></remarks>
            Public Sub CarregaCtl(ByVal Ctl As System.Windows.Forms.Control, Optional ByVal Limpar As Boolean = False, Optional ByVal Ativo As Boolean = True)
                If Limpar Then
                    CtlStatus.Clear()
                End If
                If Not CtlStatus.ContainsKey(Ctl) Then
                    CtlStatus.Add(Ctl, New Status)
                    CtlStatus(Ctl).Ativo = Ativo
                End If
                AddHandler Ctl.MouseDown, AddressOf AoPressionar
                AddHandler Ctl.MouseUp, AddressOf AoLargar
                AddHandler Ctl.MouseMove, AddressOf Arraste
                AddHandler Ctl.MouseEnter, AddressOf MudaPonteiro
            End Sub
        End Class

        ''' <summary>
        ''' Propriedade extendida.
        ''' </summary>
        ''' <param name="Elem">Elementos.</param>
        ''' <param name="Prop">Propriedade.</param>
        ''' <value></value>
        ''' <returns>Conteúdo de um objeto.</returns>
        ''' <remarks></remarks>
        Public Shared Property PropExtend(ByVal Elem As ElementosStr, ByVal Prop As String) As String
            Get
                Return Elem(Prop).Conteudo
            End Get
            Set(ByVal value As String)
                Elem(Prop).Conteudo = value
            End Set
        End Property

        ''' <summary>
        ''' Propriedade extendida.
        ''' </summary>
        ''' <param name="Strconn">String de conexão.</param>
        ''' <param name="EsquemaGerador">Esquema Gerador.</param>
        ''' <param name="Sistema">Sistema.</param>
        ''' <param name="Tabela">Tabela.</param>
        ''' <param name="Campo">Campo.</param>
        ''' <value>Elemento de string.</value>
        ''' <returns>Elemento de string.</returns>
        ''' <remarks></remarks>
        Public Shared Property PropExtend(ByVal Strconn As Object, ByVal EsquemaGerador As String, ByVal Sistema As String, ByVal Tabela As String, ByVal Campo As String) As ElementosStr
            Get
                Dim Ret As String = ""
                Dim DS As System.Data.DataSet = DSCarrega("SELECT PROP_EXTEND FROM " & EsquemaGerador & ".GER_CAMPO WHERE SISTEMA=:SISTEMA AND TABELA=:TABELA AND CAMPO=:CAMPO", Strconn, ":SISTEMA", Sistema, ":TABELA", Tabela, ":CAMPO", Campo)
                If DS.Tables.Count = 1 AndAlso DS.Tables(0).Rows.Count = 1 AndAlso Not IsDBNull(DS.Tables(0).Rows(0)(0)) Then
                    Ret = DS.Tables(0).Rows(0)(0)
                End If
                Return New ElementosStr(Ret)
            End Get
            Set(ByVal value As ElementosStr)
                DSGrava("UPDATE " & EsquemaGerador & ".GER_CAMPO SET PROP_EXTEND=:PROP_EXTEND WHERE SISTEMA=:SISTEMA AND TABELA=:TABELA AND CAMPO=:CAMPO", Strconn, ":SISTEMA", Sistema, ":TABELA", Tabela, ":CAMPO", Campo, ":PROP_EXTEND", value.ToStyleStr)
            End Set
        End Property

        ''' <summary>
        ''' Transforma uma coleção de objetos em Array de Parâmetros.
        ''' </summary>
        ''' <param name="Colecao">Coleção dos objetos.</param>
        ''' <param name="Prop">Propriedade do objeto.</param>
        ''' <returns>ArrayList de parâmetros.</returns>
        ''' <remarks></remarks>
        Public Shared Function ColecaoToParamArray(ByVal Colecao As Object, ByVal Prop As String) As ArrayList
            Dim Param As New ArrayList
            For Each Obj As Object In Colecao
                Param.Add(Icraft.IcftBase.Prop(Obj, Prop))
            Next
            Return Param
        End Function

        ''' <summary>
        ''' Ordena combobox.
        ''' </summary>
        ''' <param name="Combo"></param>
        ''' <remarks></remarks>
        Public Shared Sub OrdenarCombo(ByVal Combo As System.Windows.Forms.ComboBox)
            Dim Ar As ArrayList = ColecaoToParamArray(Combo.Items, "value")
            Ar.Sort()
            CarregaComboSimpl(Combo, True, Ar)
        End Sub

        ''' <summary>
        ''' Título com versão do aplicativo.
        ''' </summary>
        ''' <returns>Título do aplicativo.</returns>
        ''' <remarks></remarks>
        Public Shared Function TituloVerApl() As String
            Return My.Application.Info.ProductName & " - " & My.Application.Info.CompanyName & " - " & VersaoApl()
        End Function


        ''' <summary>
        ''' Executa script no oracle partindo de variável de memória.
        ''' </summary>
        ''' <param name="Texto">Script que será executado.</param>
        ''' <param name="Usuario">Usuário que será utilizado.</param>
        ''' <param name="Senha">Senha.</param>
        ''' <param name="Servico">Serviço de conexão com ORACLE.</param>
        ''' <param name="SYSDBA">TRUE caso sysdba ou false caso usuário comum.</param>
        ''' <param name="Params">Parâmetros para substituição em caso de [:VALOR.VARIAVEL] ou [:VARIAVEL] sendo arraylist de variável, conteúdo, variável, conteúdo...</param>
        ''' <returns>Resultado da execução.</returns>
        ''' <remarks>Coloque em seu script SET ECHO ON no início para visualizar tanto comando quanto resultado.</remarks>
        Public Shared Function ExecutaNoOracleTexto(ByVal Texto As String, ByVal Usuario As String, ByVal Senha As String, ByVal Servico As String, Optional ByVal SYSDBA As Boolean = False, Optional ByVal Params As ArrayList = Nothing) As String
            Dim Ret As String
            Dim Temp As String = ""
            Try
                Temp = TemporaryFile()
                GravaLog(Temp, Texto, True)
                Ret = ExecutaNoOracleArq(Temp, Usuario, Senha, Servico, SYSDBA, Params)
            Catch ex As Exception
                Ret = ex.Message
            End Try
            Try
                If Temp <> "" Then
                    Kill(Temp)
                End If
            Catch
            End Try
            Return Ret
        End Function


        ''' <summary>
        ''' Executando script no ORACLE tendo como base um arquivo texto.
        ''' </summary>
        ''' <param name="Arquivo">Nome do arquivo.</param>
        ''' <param name="Usuario">Usuário que será utilizado.</param>
        ''' <param name="Senha">Senha.</param>
        ''' <param name="Servico">Serviço de conexão com ORACLE.</param>
        ''' <param name="SYSDBA">TRUE caso sysdba ou false caso usuário comum.</param>
        ''' <param name="Params">Parâmetros para substituição em caso de [:VALOR.VARIAVEL] ou [:VARIAVEL] sendo arraylist de variável, conteúdo, variável, conteúdo...</param>
        ''' <returns>Resultado da execução.</returns>
        ''' <remarks>Coloque em seu script SET ECHO ON no início para visualizar tanto comando quanto resultado.</remarks>
        Public Shared Function ExecutaNoOracleArq(ByVal Arquivo As String, ByVal Usuario As String, ByVal Senha As String, ByVal Servico As String, Optional ByVal SYSDBA As Boolean = False, Optional ByVal Params As ArrayList = Nothing) As String
            Dim Result As String
            Try
                If IsNothing(Params) Then
                    Params = New ArrayList
                End If

                Params.Add(":USUARIO")
                Params.Add(Usuario)
                Params.Add(":SENHA")
                Params.Add(Senha)
                Params.Add(":SERVICO")
                Params.Add(Servico)

                Dim Psi As New System.Diagnostics.ProcessStartInfo("SQLPLUS.EXE", MacroSubstSQLText("[:VALOR.USUARIO]/[:VALOR.SENHA]@[:VALOR.SERVICO]" & IIf(SYSDBA, " AS SYSDBA", ""), Params))
                Psi.UseShellExecute = False
                Psi.RedirectStandardError = True
                Psi.RedirectStandardInput = True
                Psi.RedirectStandardOutput = True
                Psi.WorkingDirectory = TemporaryDir()
                Dim Proc As System.Diagnostics.Process = System.Diagnostics.Process.Start(Psi)
                Dim StdIn As System.IO.StreamWriter = Proc.StandardInput
                Dim StdOut As System.IO.StreamReader = Proc.StandardOutput
                Dim StdErr As System.IO.StreamReader = Proc.StandardError
                StdIn.WriteLine("@" & Arquivo)
                Proc.Close()
                StdIn.Close()
                Result = StdOut.ReadToEnd
                Dim Erro As String = StdErr.ReadToEnd
                If Erro <> "" Then
                    Result &= vbCrLf & vbCrLf & "Erro:" & vbCrLf & Erro
                End If
                StdOut.Close()
                StdErr.Close()
            Catch ex As Exception
                Result = ex.Message
            End Try
            Return Result
        End Function

        ''' <summary>
        ''' Quantos anos a empresa tem.
        ''' </summary>
        ''' <returns>Quantidade de anos da empresa no mercado.</returns>
        ''' <remarks></remarks>
        Public Shared Function IcraftIdade() As Integer
            Return DateDiff(DateInterval.Year, CDate("1998-05-22"), Now)
        End Function

        ''' <summary>
        ''' Concatena um texto a partir de um determinado ponto.
        ''' </summary>
        ''' <param name="Itens">Itens a serem concatenados.</param>
        ''' <param name="Ini">Posição inicial.</param>
        ''' <param name="Delim">Separador das strings.</param>
        ''' <param name="Fim">Posição final.</param>
        ''' <returns>String concatenada.</returns>
        ''' <remarks></remarks>
        Public Shared Function ConcatAPartirDe(ByVal Itens() As String, ByVal Ini As Integer, Optional ByVal Delim As String = ";", Optional ByVal Fim As Integer = 0) As String
            Dim Z As Integer = Ini
            Dim Ret As String = ""
            Do While Z < NZV(Fim, Itens.Count - 1) + 1
                If Itens(Z) <> "" Then
                    Ret &= IIf(Ret <> "", Delim, "") & Itens(Z)
                End If
                Z += 1
            Loop
            Return Ret
        End Function

        ''' <summary>
        ''' Retorna string contendo comandos CACLS para definições de diretórios para usuários conforme permissões.
        ''' </summary>
        ''' <param name="DirRaiz">Raiz devendo representar '/' sendo formato correto c:\inetpub\wwwroot\site.</param>
        ''' <param name="perm_usu">Usuários que receberão as permissões separados por ponto e vírgula.</param>
        ''' <param name="perm_dir">Linhas contendo diretório:permissão (R/W).</param>
        ''' <returns>String contendo comandos para execução em DOS.</returns>
        ''' <remarks></remarks>
        Public Shared Function BatDefGrupoPerm(ByVal DirRaiz As String, ByVal perm_usu As String, ByVal perm_dir As String) As String
            Dim Result As String = ""
            For Each Linha As String In Split(perm_dir, ";")
                Dim DD As String = Trim(Linha)
                If DD <> "" Then
                    Dim dir() As String = Split(DD & ":", ":")
                    DD = FileExpr(DirRaiz, dir(0))
                    If System.IO.Directory.Exists(DD) Then
                        Result &= IIf(Result <> "", vbCrLf, "") & "echo DIRETÓRIO:PERMISSÃO = " & Trim(Linha)
                        Result &= IIf(Result <> "", vbCrLf, "") & BatDefPerm(perm_usu, DD, dir(1))
                    ElseIf System.IO.File.Exists(DD) Then
                        Result &= IIf(Result <> "", vbCrLf, "") & "echo ARQUIVO:PERMISSÃO = " & Trim(Linha)
                        Result &= IIf(Result <> "", vbCrLf, "") & BatDefPerm(perm_usu, DD, dir(1))
                    Else
                        Result &= IIf(Result <> "", vbCrLf, "") & "echo " & DD & " ... NÃO EXISTE"
                    End If
                End If
            Next
            Return Result
        End Function

        ''' <summary>
        ''' Monta cada linha de comando CACLS de diretório para usuários informados.
        ''' </summary>
        ''' <param name="perm_usu">Usuários separados por ponto e vírgula.</param>
        ''' <param name="diretorio">Diretório para o qual será definida a permissão.</param>
        ''' <param name="perm">Tipo de permissão (R/W).</param>
        ''' <returns>String contendo comandos para execução em DOS.</returns>
        ''' <remarks></remarks>
        Public Shared Function BatDefPerm(ByVal perm_usu As String, ByVal diretorio As String, ByVal perm As String) As String
            If diretorio.EndsWith("\") Then
                diretorio = StrStr(diretorio, 0, -1)
            End If

            Dim RetAcum As String = ""
            For Each Usu As String In Split(perm_usu, ";")
                Dim UU As String = Trim(Usu)
                Dim Coma As String = "CACLS.EXE """ & diretorio & """ /T /E /G """ & UU & """:" & NZV(perm, "R")
                RetAcum &= IIf(RetAcum <> "", vbCrLf, "") & Coma
            Next
            Return RetAcum
        End Function

        ''' <summary>
        ''' Retorna reticências no final da string caso seja maior que limite.
        ''' </summary>
        ''' <param name="Texto">Texto.</param>
        ''' <param name="Tam">Tamanho máximo.</param>
        ''' <returns>Texto contendo ou não reticências no final.</returns>
        ''' <remarks></remarks>
        Public Shared Function Retic(ByVal Texto As String, ByVal Tam As Integer) As String
            Return Microsoft.VisualBasic.Left(Texto, Tam) & IIf(Len(Texto) > Tam, "...", "")
        End Function

        ''' <summary>
        ''' Classe de criptografia.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class TrataRSA

            Private _Chave As Dictionary(Of TipoChave, String)
            ''' <summary>
            ''' Classe TipoChave é String.
            ''' </summary>
            ''' <param name="Tipo">TipoChave.</param>
            ''' <value>TipoChave como String.</value>
            ''' <returns>Chave como publica ou privada.</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Chave(ByVal Tipo As TipoChave) As String
                Get
                    Return _Chave(Tipo)
                End Get
            End Property

            ''' <summary>
            ''' Criando objeto chave.
            ''' </summary>
            ''' <remarks></remarks>
            Sub New()
                _Chave = CriaChave()
            End Sub

            ''' <summary>
            ''' Enumerando TipoChave como publica ou privada.
            ''' </summary>
            ''' <remarks></remarks>
            Enum TipoChave
                Publica
                Privada
            End Enum
            ''' <summary>
            ''' Função pública compartilhada que cria uma nova chave.
            ''' </summary>
            ''' <returns>Retornando um dicionário de chaves do tipo String.</returns>
            ''' <remarks></remarks>
            Public Shared Function CriaChave() As Dictionary(Of TipoChave, String)
                Try
                    Dim RSAParams As New CspParameters
                    RSAParams.Flags = CspProviderFlags.UseMachineKeyStore
                    Using RSA As New RSACryptoServiceProvider(1024, RSAParams)
                        Dim Dict As New Dictionary(Of TipoChave, String)
                        Dict.Add(TipoChave.Privada, RSA.ToXmlString(True))
                        Dict.Add(TipoChave.Publica, RSA.ToXmlString(False))
                        Return Dict
                    End Using
                Catch ex As Exception
                    Throw New Exception(ex.Message & " criando chave", ex)
                End Try
            End Function
            ''' <summary>
            ''' Função que criptografa a Chave.
            ''' </summary>
            ''' <param name="Data">Bytes para comparação.</param>
            ''' <returns>Chave criptografada.</returns>
            ''' <remarks></remarks>
            Public Function Encrypt(ByVal Data As String) As Result
                Return Encrypt(Data, Chave(TipoChave.Publica))
            End Function
            ''' <summary>
            ''' Função de criptografia de chave pública.
            ''' </summary>
            ''' <param name="Data">Data como String.</param>
            ''' <param name="Publickey">Publickey como String.</param>
            ''' <returns>Retornando a chave pública criptografada em bytes.</returns>
            ''' <remarks></remarks>
            Public Shared Function Encrypt(ByVal Data As String, ByVal Publickey As String) As Result
                Try
                    Dim ByteConverter As New UnicodeEncoding()
                    Return Encrypt(ByteConverter.GetBytes(Data), Publickey)
                Catch ex As Exception
                    Throw New Exception(ex.Message & " criptogravando texto" & ex.Message, ex)
                End Try
            End Function
            ''' <summary>
            ''' Função pública compartilhada de criptografia.
            ''' </summary>
            ''' <param name="Data">Array de Bytes.</param>
            ''' <param name="Publickey">Publickey como String.</param>
            ''' <returns>Novo resultado criptografado.</returns>
            ''' <remarks></remarks>
            Public Shared Function Encrypt(ByVal Data() As Byte, ByVal Publickey As String) As Result
                Try
                    Dim RSAParams As New CspParameters
                    RSAParams.Flags = CspProviderFlags.UseMachineKeyStore
                    Dim RSA As System.Security.Cryptography.RSACryptoServiceProvider = New System.Security.Cryptography.RSACryptoServiceProvider(1024, RSAParams)
                    RSA.FromXmlString(Publickey)
                    Return New Result(RSAEncrypt(Data, RSA.ExportParameters(False), False))
                Catch ex As Exception
                    Throw New Exception(ex.Message & " criptogravando dados", ex)
                End Try
            End Function
            ''' <summary>
            ''' Função pública de Decriptografia que transforma String de Base64 em Base64.
            ''' </summary>
            ''' <param name="Base64">String.</param>
            ''' <returns>Decriptografa tudo de String da Base64 em Base64.</returns>
            ''' <remarks></remarks>
            Public Function Decrypt(ByVal Base64 As String) As Result
                Return Decrypt(Convert.FromBase64String(Base64))
            End Function
            ''' <summary>
            ''' Função de Decriptografia do objeto Data e Chave.
            ''' </summary>
            ''' <param name="Data">Bytes.</param>
            ''' <returns>Decriptografa Data e Chave.</returns>
            ''' <remarks></remarks>
            Public Function Decrypt(ByVal Data() As Byte) As Result
                Return Decrypt(Data, Chave(TipoChave.Privada))
            End Function
            ''' <summary>
            ''' Função que decriptografa String Base64 na própria Base64.
            ''' </summary>
            ''' <param name="Base64">String.</param>
            ''' <param name="Privatekey">String.</param>
            ''' <returns>Decriptografa a conversão da String da base64 em Base64.</returns>
            ''' <remarks></remarks>
            Public Shared Function Decrypt(ByVal Base64 As String, ByVal Privatekey As String) As Result
                Return Decrypt(Convert.FromBase64String(Base64), Privatekey)
            End Function
            ''' <summary>
            ''' Função compartilhada a decriptografia dos dados.
            ''' </summary>
            ''' <param name="Data">Bytes.</param>
            ''' <param name="Privatekey">String.</param>
            ''' <returns>Retorna o resultado da RSAdecriptografada.</returns>
            ''' <remarks></remarks>
            Public Shared Function Decrypt(ByVal Data() As Byte, ByVal Privatekey As String) As Result
                Try
                    Dim RSAParams As New CspParameters
                    RSAParams.Flags = CspProviderFlags.UseMachineKeyStore
                    Dim RSA As System.Security.Cryptography.RSACryptoServiceProvider = New System.Security.Cryptography.RSACryptoServiceProvider(1024, RSAParams)
                    RSA.FromXmlString(Privatekey)
                    Dim Result As New Result(RSADecrypt(Data, RSA.ExportParameters(True), False))
                    Return Result
                Catch ex As Exception
                    Throw New Exception(ex.Message & " decriptogravando dados", ex)
                End Try
            End Function
            ''' <summary>
            ''' Classe Result pública, com o objeto _Data como array de Bytes.
            ''' </summary>
            ''' <remarks></remarks>
            Public Class Result
                Private _Data() As Byte

                ''' <summary>
                ''' O objeto Data está sendo criado.
                ''' </summary>
                ''' <param name="Data">Byte</param>
                ''' <remarks></remarks>
                Public Sub New(ByVal Data() As Byte)
                    _Data = Data
                End Sub
                ''' <summary>
                ''' Propriedade que está apenas passando o _Data. 
                ''' </summary>
                ''' <value></value>
                ''' <returns>Retornando o objeto _Data.</returns>
                ''' <remarks></remarks>
                Public ReadOnly Property AsBytes() As Byte()
                    Get
                        Return _Data
                    End Get
                End Property
                ''' <summary>
                ''' Função que instancia um objeto.
                ''' </summary>
                ''' <value>String.</value>
                ''' <returns>Retornando o objeto _Data como String.</returns>
                ''' <remarks></remarks>
                Public ReadOnly Property AsString() As String
                    Get
                        Dim ByteConverter As New UnicodeEncoding()
                        Return ByteConverter.GetString(_Data)
                    End Get
                End Property
                ''' <summary>
                ''' Função que pega a base64 String.
                ''' </summary>
                ''' <value>String.</value>
                ''' <returns>Retorna o objeto _Data como Base64String.</returns>
                ''' <remarks></remarks>
                Public ReadOnly Property AsBase64String() As String
                    Get
                        Return Convert.ToBase64String(_Data)
                    End Get
                End Property
            End Class
            ''' <summary>
            ''' Criptografia RSA.
            ''' </summary>
            ''' <param name="DataToEncrypt">Byte.</param>
            ''' <param name="RSAKeyInfo">Parâmetros de RSA.</param>
            ''' <param name="DoOAEPPadding">Boolean.</param>
            ''' <returns>Retorna a Data criptografada.</returns>
            ''' <remarks></remarks>
            Private Shared Function RSAEncrypt(ByVal DataToEncrypt() As Byte, ByVal RSAKeyInfo As RSAParameters, ByVal DoOAEPPadding As Boolean) As Byte()
                Try
                    Dim encryptedData() As Byte
                    Dim RSAParams As New CspParameters
                    RSAParams.Flags = CspProviderFlags.UseMachineKeyStore
                    Using RSA As New RSACryptoServiceProvider(1024, RSAParams)
                        RSA.ImportParameters(RSAKeyInfo)
                        encryptedData = RSA.Encrypt(DataToEncrypt, DoOAEPPadding)
                    End Using
                    Return encryptedData
                Catch e As CryptographicException
                    Throw New Exception(e.Message & " gerando RSA", e)
                End Try
            End Function
            ''' <summary>
            ''' Descriptografia RSA.
            ''' </summary>
            ''' <param name="DataToDecrypt">Byte.</param>
            ''' <param name="RSAKeyInfo">Parâmetros de RSA.</param>
            ''' <param name="DoOAEPPadding">Boolean.</param>
            ''' <returns>Retorna a Data Decriptografada.</returns>
            ''' <remarks></remarks>
            Private Shared Function RSADecrypt(ByVal DataToDecrypt() As Byte, ByVal RSAKeyInfo As RSAParameters, ByVal DoOAEPPadding As Boolean) As Byte()
                Try
                    Dim decryptedData() As Byte
                    Dim RSAParams As New CspParameters
                    RSAParams.Flags = CspProviderFlags.UseMachineKeyStore
                    Using RSA As New RSACryptoServiceProvider(1024, RSAParams)
                        RSA.ImportParameters(RSAKeyInfo)
                        decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding)
                    End Using
                    Return decryptedData
                Catch e As CryptographicException
                    Throw New Exception(e.Message & " interpretando RSA", e)
                End Try
            End Function

        End Class

        ''' <summary>
        ''' Função auto que retorna o Id do processo.
        ''' </summary>
        ''' <param name="hwnd">Número inteiro de 32 bits.</param>
        ''' <param name="lpdwProcessId">Id do Processo.</param>
        ''' <returns>Inteiro que equivale ao ID do processo.</returns>
        ''' <remarks></remarks>
        Private Declare Auto Function _GetWindowThreadProcessId Lib "user32.dll" Alias "GetWindowProcessId" (ByVal hwnd As IntPtr, ByRef lpdwProcessId As Integer) As Integer

        ''' <summary>
        ''' Função que retorna o Id do processo através de um API.
        ''' </summary>
        ''' <param name="Hwnd">Número do processo.</param>
        ''' <returns>Número do processo.</returns>
        ''' <remarks></remarks>
        Public Shared Function GetWindowThreadProcessId(ByVal Hwnd As Integer) As Integer
            Dim ProcN As Integer = 0
            _GetWindowThreadProcessId(Hwnd, ProcN)
            Return ProcN
        End Function

        ''' <summary>
        ''' Procedimento para fechar o excel.
        ''' </summary>
        ''' <param name="XLS">Planilha do excel.</param>
        ''' <remarks ></remarks>
        Public Shared Sub FechaExcel(ByVal XLS As Object)
            On Error Resume Next

            If Not IsNothing(XLS) Then
                Dim HWnd As Integer = XLS.Hwnd
                Dim ProcN As Integer = GetWindowThreadProcessId(XLS.Hwnd)

                XLS.Workbooks.Close()
                XLS.Quit()

                System.Runtime.InteropServices.Marshal.ReleaseComObject(XLS)
                XLS = Nothing
                GC.Collect()
                GC.WaitForPendingFinalizers()

                For Each proc As System.Diagnostics.Process In System.Diagnostics.Process.GetProcessesByName("EXCEL")
                    If proc.Id = ProcN Then
                        proc.Kill()
                        Threading.Thread.Sleep(100)
                    End If
                Next
            End If
        End Sub

        ''' <summary>
        ''' Muda o cursor(mouse) do objeto atual.
        ''' </summary>
        ''' <param name="sender">Objeto no qual o cursor(mouse) está presente.</param>
        ''' <param name="Cursor">Modelo do cursor.</param>
        ''' <remarks></remarks>
        Public Shared Sub MudaCursor(ByVal sender As Object, ByVal Cursor As System.Windows.Forms.Cursor)
            sender.Cursor = Cursor
        End Sub

        ''' <summary>
        ''' Define a extensão da imagem do QR.
        ''' </summary>
        ''' <param name="Formato">Formato da imagem.</param>
        ''' <returns>Formato de imagem.</returns>
        ''' <remarks></remarks>
        Public Shared Function QRCodeFormato(ByVal Formato As String) As System.Drawing.Imaging.ImageFormat
            Formato = NZ(Formato, "")
            Dim f As System.Drawing.Imaging.ImageFormat = System.Drawing.Imaging.ImageFormat.Bmp
            If Formato.StartsWith(".") Then
                Formato = Mid(Formato, 2)
            End If
            Select Case Formato
                Case "jpeg", "jpg"
                    f = System.Drawing.Imaging.ImageFormat.Jpeg
                Case "png"
                    f = System.Drawing.Imaging.ImageFormat.Png
                Case "bmp"
                    f = System.Drawing.Imaging.ImageFormat.Bmp
            End Select
            Return f
        End Function



        ''' <summary>
        ''' Criar um processo de busca em um servidor de DNS.
        ''' </summary>
        ''' <param name="DomainName">String.</param>
        ''' <param name="ServidorDNS">String.</param>
        ''' <returns>Retornar uma lista com todos os itens pertencentes aquele domínio.</returns>
        ''' <remarks></remarks>
        Public Shared Function DNSMXLookup(ByVal DomainName As String, Optional ByVal ServidorDNS As String = "") As ArrayList
            Dim Ret As New ArrayList
            Dim lookup As New Process
            lookup.StartInfo.UseShellExecute = False
            lookup.StartInfo.RedirectStandardInput = True
            lookup.StartInfo.RedirectStandardOutput = True
            lookup.StartInfo.FileName = "nslookup"
            lookup.StartInfo.Arguments = "-timeout=4 -querytype=MX " & DomainName
            If ServidorDNS <> "" Then
                lookup.StartInfo.Arguments &= " " & ServidorDNS
            End If
            lookup.StartInfo.CreateNoWindow = True
            lookup.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
            lookup.Start()
            lookup.WaitForExit(5000)
            Dim output As String = lookup.StandardOutput.ReadToEnd()
            Dim pattern As String = "mail exchanger = ([^\s]*)"
            Dim m As System.Text.RegularExpressions.MatchCollection = Regex.Matches(output, pattern)
            For Each Item As System.Text.RegularExpressions.Match In m
                Ret.Add(Item.Groups(1).Value)
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Transforma os dados do Dataset em um HTML.
        ''' </summary>
        ''' <param name="DS">Dataset.</param>
        ''' <param name="Estilo">Estilo do HTML.</param>
        ''' <returns>HTML personalizado.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSParaHtml(ByVal DS As System.Data.DataSet, ByVal ParamArray Estilo() As Object) As String
            ' "table", "...", "tr", "...", "tralt", "...", "th", "...", "td", "...", "div", "..."
            ' "th:2", "..." (para segunda coluna)
            ' "td:2", "..." (para segunda coluna)
            ' "td:nomecoluna", "..." (para coluna de nome)
            ' "..." = "style='border:1px solid blue' ou rules='all' frame='box' cellpadding='3'"
            Dim Ret As String = ""
            For z As Integer = 0 To DS.Tables.Count - 1
                Ret &= IIf(Ret <> "", "<br/><br/>", "") & DSTableParaHtml(DS.Tables(z), Estilo)
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Transforma tabelas de um Dataset em um HTML.
        ''' </summary>
        ''' <param name="Tabela">Tabela.</param>
        ''' <param name="Estilo">HTML.</param>
        ''' <returns>Linhas correspondentes aquela tabela em HTML.</returns>
        ''' <remarks></remarks>
        Public Shared Function DSTableParaHtml(ByVal Tabela As System.Data.DataTable, ByVal ParamArray Estilo() As Object) As String
            ' "table", "...", "tr", "...", "tralt", "...", "th", "...", "td", "...", "div", "..."
            ' "th:2", "..." (para segunda coluna)
            ' "td:2", "..." (para segunda coluna)
            ' "td:nomecoluna", "..." (para coluna de nome)
            ' "..." = "style='border:1px solid blue' ou rules='all' frame='box' cellpadding='3'"
            If Not IsNothing(Estilo) Then
                For z As Integer = 0 To Estilo.Count - 1 Step 2
                    Dim Termos() As String = Split(Estilo(z) & ":", ":")
                    Dim Coluna As String = Termos(1)
                    Dim Pos As Integer = Tabela.Columns.IndexOf(Coluna)
                    If Pos <> -1 Then
                        Estilo(z) = Termos(0) & ":" & (Pos + 1)
                    End If
                Next
            End If
            Dim Itens As New ArrayList
            For Each Col As System.Data.DataColumn In Tabela.Columns
                Itens.Add(Col.ColumnName)
            Next
            For Each Linha As System.Data.DataRow In Tabela.Rows
                For z As Integer = 0 To Tabela.Columns.Count - 1
                    Itens.Add(Linha.Item(z))
                Next
            Next
            Return ItensParaHtml(Itens, True, HTML.Table_Sentido.Horizontal, Tabela.Columns.Count, Tabela.Rows.Count, Estilo)
        End Function










        ''' <summary>
        ''' Itens para HTML
        ''' </summary>
        ''' <param name="Itens">Array de itens.</param>
        ''' <param name="TituloPrimLinha">Boolean.</param>
        ''' <param name="Sentido">HTML.Table_Sentido.</param>
        ''' <param name="QtdColunas">Integer.</param>
        ''' <param name="QtdLinhas">Integer.</param>
        ''' <param name="Estilo">Array de parâmetros.</param>
        ''' <returns>Irá retornar o ret como uma String "".</returns>
        ''' <remarks></remarks>
        Public Shared Function ItensParaHtml(ByVal Itens As ArrayList, ByVal TituloPrimLinha As Boolean, ByVal Sentido As HTML.Table_Sentido, ByVal QtdColunas As Integer, ByVal QtdLinhas As Integer, ByVal ParamArray Estilo() As Object) As String
            ' "table", "...", "tr", "...", "tralt", "...", "th", "...", "td", "...", "div", "..."
            ' "th:2", "..." (para segunda coluna)
            ' "td:2", "..." (para segunda coluna)
            ' "..." = "style='border:1px solid blue' ou rules='all' frame='box' cellpadding='3'"
            Dim Defs As Dictionary(Of String, Object) = ParamArrayToDict(Estilo)
            Dim Ret As String = ""

            If Not Defs.ContainsKey("div") Then
                Defs.Add("div", "")
            End If
            If Not Defs.ContainsKey("table") Then
                Defs.Add("table", "rules='all' frame='box' cellpadding='3'")
            End If
            If Not Defs.ContainsKey("tralt") Then
                Defs.Add("tralt", "style='background-color:#d0d0d0'")
            End If
            If Not Defs.ContainsKey("tr") Then
                Defs.Add("tr", "style='background-color:#fefefe'")
            End If
            If Not Defs.ContainsKey("th") Then
                Defs.Add("th", "style='font-weight:bold'")
            End If
            If Not Defs.ContainsKey("td") Then
                Defs.Add("td", "")
            End If

            Ret &= "<div" & IIf(Defs("div") <> "", " " & Defs("div"), "") & ">" & vbCrLf
            Ret &= "   <table" & IIf(Defs("table") <> "", " " & Defs("table"), "") & ">" & vbCrLf
            For z As Integer = 0 To QtdLinhas
                Dim TrTipo As String = "tr"
                If z Mod 2 <> 0 Then
                    TrTipo = "tralt"
                End If
                Ret &= "      <tr" & IIf(Defs(TrTipo) <> "", " " & Defs(TrTipo), "") & ">" & vbCrLf
                Dim Tag As String = "td"
                If z = 0 And TituloPrimLinha Then
                    Tag = "th"
                End If
                For zz As Integer = 0 To QtdColunas - 1
                    Dim P As String = ""
                    If Defs.ContainsKey(Tag & ":" & (zz + 1)) Then
                        P = Defs(Tag & ":" & (zz + 1))
                    Else
                        P = Defs(Tag)
                    End If
                    Ret &= "         <" & Tag & IIf(P <> "", " " & P, "") & ">"
                    Dim Item As Object
                    If Sentido = HTML.Table_Sentido.Horizontal Then
                        Item = Itens(z * QtdColunas + zz)
                    Else
                        Item = Itens(zz * QtdLinhas + z)
                    End If
                    Ret &= HttpUtility.HtmlEncode(Trim(NZ(Item, "")))
                    Ret &= "</" & Tag & ">" & vbCrLf
                Next
                Ret &= "      </tr>" & vbCrLf
            Next
            Ret &= "   </table>" & vbCrLf
            Ret &= "</div>" & vbCrLf
            Return Ret
        End Function


        ''' <summary>
        ''' Classe de modem 3G.
        ''' </summary>
        ''' <remarks></remarks>
        Public Class Modem3G
            Private SerialPort1 As New System.IO.Ports.SerialPort
            Private byteEnd(2) As Char
            Private Bytenumber As Integer
            Private readBuffer As String = String.Empty
            Public Buffer As String = ""
            Private Timer1 As New System.Windows.Forms.Timer
            Public Event Received(ByVal Buffer As String)

            ''' <summary>
            ''' Envia um SMS.
            ''' </summary>
            ''' <param name="Porta">Porta de saída.</param>
            ''' <param name="Telefone">Número do Telefone.</param>
            ''' <param name="Msg">Mensagem a ser enviada.</param>
            ''' <returns>Um SMS.</returns>
            ''' <remarks></remarks>
            Public Shared Function EnviaSMS(ByVal Porta As String, ByVal Telefone As String, ByVal Msg As String) As String
                Dim m As New Modem3G(Porta)
                m.SendAndWait("AT+CFUN=1" & vbCrLf)
                m.SendAndWait("AT+CMGS=""+" & Telefone & """,145" & vbCrLf)
                Dim ret As String = m.SendAndWait(Msg & "^Z" & vbCrLf)
                m.Close()
                Return ret
            End Function

            ''' <summary>
            ''' Construtor.
            ''' </summary>
            ''' <param name="Porta">Porta.</param>
            ''' <remarks></remarks>
            Sub New(ByVal Porta As String)
                AddHandler SerialPort1.DataReceived, AddressOf SerialPort1_DataReceived
                AddHandler Timer1.Tick, AddressOf Timer1_Tick

                With SerialPort1

                    .ParityReplace = &H3B
                    .PortName = Porta
                    .BaudRate = 9600
                    .Parity = IO.Ports.Parity.None
                    .DataBits = 8
                    .StopBits = IO.Ports.StopBits.One
                    .Handshake = IO.Ports.Handshake.None
                    .RtsEnable = False
                    .ReceivedBytesThreshold = 1
                    .NewLine = vbCr
                    .ReadTimeout = 10000

                End With

                SerialPort1.Open()
            End Sub

            ''' <summary>
            ''' Recebimento da confirmação (ACK).
            ''' </summary>          
            ''' <param name="sender">Parâmetros padrão do sistema.</param>
            ''' <param name="e">Evento padrão do sistema.</param>
            ''' <remarks></remarks>
            Private Sub SerialPort1_DataReceived(ByVal sender As System.Object, ByVal e As System.IO.Ports.SerialDataReceivedEventArgs)
                If SerialPort1.IsOpen Then
                    byteEnd = SerialPort1.NewLine.ToCharArray

                    Bytenumber = SerialPort1.BytesToRead

                    Try
                        'ByteToRead = SerialPort1.ReadByte()
                        'CharToRead = SerialPort1.ReadChar()
                        'readBuffer1 = SerialPort1.ReadTo("90")
                        readBuffer = SerialPort1.ReadLine()

                    Catch EX As Exception
                        readBuffer = ""
                    End Try

                    Dim ee As EventHandler = New EventHandler(AddressOf DoUpdate)
                    ee.Invoke(Me, Nothing)

                End If
            End Sub

            ''' <summary>
            ''' Atualiza.
            ''' </summary>
            ''' <param name="sender">Objeto padrão do sistema.</param>
            ''' <param name="e">Evento padrão do sistema.</param>
            ''' <remarks></remarks>
            Private Sub DoUpdate(ByVal sender As Object, ByVal e As System.EventArgs)
                Buffer = readBuffer
                Timer1.Enabled = True
                RaiseEvent Received(Buffer)
            End Sub

            ''' <summary>
            ''' Temporizador.
            ''' </summary>
            ''' <param name="sender">Obejto padrão do sistema.</param>
            ''' <param name="e">Evento padrão do sistema.</param>
            ''' <remarks></remarks>
            Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs)
                Timer1.Enabled = False
            End Sub

            ''' <summary>
            ''' Finaliza o buffer e fecha a porta.
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub Close()
                SerialPort1.DiscardInBuffer()
                SerialPort1.Close()
            End Sub

            ''' <summary>
            ''' Envia a mensagem.
            ''' </summary>
            ''' <param name="Texto">Texto da mensagem.</param>
            ''' <remarks></remarks>
            Public Sub Send(ByVal Texto As String)
                Buffer = ""
                Do While True
                    Dim M As System.Text.RegularExpressions.Match = System.Text.RegularExpressions.Regex.Match(Texto, "\^([A-Z])")
                    If Not M.Success Then Exit Do
                    Texto = Replace(Texto, M.Groups(0).Value, Chr(Asc(M.Groups(1).Value) - 64))
                Loop

                SerialPort1.WriteLine(Texto)
            End Sub

            ''' <summary>
            ''' Manda a mensagem e espera o retorno da confirmação de recebimento (ACK).
            ''' </summary>      
            ''' <param name="Texto">Texto da mensagem.</param>
            ''' <returns>Buffer de armazenamento.</returns>
            ''' <remarks></remarks>
            Public Function SendAndWait(ByVal Texto As String) As String
                Send(Texto)
                Dim t As Date = Now
                Dim ret As String = ""
                Do While Buffer = ""
                    If DateDiff(DateInterval.Second, t, Now) > 3 Then
                        ret = "err:timeout"
                        Exit Do
                    End If
                    System.Threading.Thread.Sleep(1000)
                Loop
                Return Buffer
            End Function

        End Class
        ''' <summary>
        ''' Função que cria uma lista com todas as variáveis de bind e seus valores.
        ''' </summary>
        ''' <param name="Lista">Lista da array.</param>
        ''' <param name="Nome">String.</param>
        ''' <returns>Retorna verdadeiro se a variável existir (mostrar a lista).</returns>
        ''' <remarks></remarks>

        Public Shared Function VarDefsExiste(ByVal Lista As ArrayList, ByVal Nome As String) As Boolean
            If Not Nome.StartsWith(":") Then
                Nome = ":" & Nome
            End If
            For z As Integer = 0 To Lista.Count - 1 Step 2
                If Lista(z) = Nome Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Grava Registro
        ''' </summary>
        ''' <param name="ConnStr"></param>
        ''' <param name="EsquemaTabela"></param>
        ''' <param name="Filtro"></param>
        ''' <param name="Ar"></param>
        ''' <remarks></remarks>
        Public Shared Sub GravaReg(ByVal ConnStr As Object, ByVal EsquemaTabela As String, ByVal Filtro As String, ByVal ParamArray Ar As Object())
            Try
                Dim Estrut As System.Data.DataSet = Nothing

                If Filtro = "" Then
                    Filtro = "1=2"
                End If
                Dim Ar2 As ArrayList = Icraft.IcftBase.ParamArrayToArrayList(Ar)
                Dim Qtd As Integer = Icraft.IcftBase.DSValor("COUNT(*)", EsquemaTabela, ConnStr, Filtro, Ar)
                Estrut = Icraft.IcftBase.DSCarregaEstrut("SELECT * FROM " & EsquemaTabela, ConnStr)
                Dim CAMPOS As String = ""
                Dim VALORES As String = ""
                Dim DEFS As String = ""
                Dim PARAMS As New ArrayList
                Dim z As Integer = 0
                For Each COL As System.Data.DataColumn In Estrut.Tables(0).Columns
                    z += 1
                    If VarDefsExiste(Ar2, ":" & COL.ColumnName) Then
                        CAMPOS &= IIf(CAMPOS <> "", ", ", "") & COL.ColumnName
                        VALORES &= IIf(VALORES <> "", ", ", "") & ":" & COL.ColumnName
                        DEFS &= IIf(DEFS <> "", ", ", "") & COL.ColumnName & " = :" & COL.ColumnName
                    End If
                Next
                Dim Coma As String = ""
                If Qtd = 0 Then
                    Coma = "INSERT INTO " & EsquemaTabela & "(" & CAMPOS & ") VALUES (" & VALORES & ")"
                Else
                    Coma = "UPDATE " & EsquemaTabela & " SET " & DEFS & " WHERE " & Filtro
                End If
                Icraft.IcftBase.DSGrava(Coma, ConnStr, Ar2)
            Catch EX As Exception
                Throw New Exception("Erro na gravação do registro: " & EX.Message)
            End Try
        End Sub

        ''' <summary>
        ''' Procura coluna em uma planilha excel 
        ''' </summary>
        ''' <param name="Xls"></param>
        ''' <param name="Coluna"></param>
        ''' <param name="NrLinha"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function ExcelProcuraCol(ByVal Xls As Object, ByVal Coluna As String, ByVal NrLinha As Integer) As Integer
            Dim Ret As Integer = 0
            For Z As Integer = 1 To 100
                If Icraft.IcftBase.NZ(Xls.Cells(NrLinha, Z).VALUE, "") = Coluna Then
                    Ret = Z
                    Exit For
                End If
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Procura coluna em uma planilha excel
        ''' </summary>
        ''' <param name="Xls"></param>
        ''' <param name="NrColuna"></param>
        ''' <param name="DefQtdVazias"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Shared Function ExcelProcuraUltLinha(ByVal Xls As Object, ByVal NrColuna As Integer, Optional ByVal DefQtdVazias As Integer = 30) As Integer
            Dim QtdVazio As Integer = 0
            Dim z As Integer = 0
            For z = 1 To 65535
                If Icraft.IcftBase.NZ(Xls.Cells(z, NrColuna).value, "") = "" Then
                    QtdVazio += 1
                    If QtdVazio > DefQtdVazias Then
                        Exit For
                    End If
                Else
                    QtdVazio = 0
                End If
            Next
            Return z - DefQtdVazias - 1
        End Function
        ''' <summary>
        ''' Função compartilhada.
        ''' </summary>
        ''' <param name="Ctl"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function ControlToBmp(ByVal Ctl As System.Windows.Forms.Control) As Bitmap
            Dim bmp As New Bitmap(Ctl.Width, Ctl.Height)
            Ctl.DrawToBitmap(bmp, Ctl.ClientRectangle)
            Return bmp
        End Function

        ''' <summary>
        ''' Converte BitMap para JPEG
        ''' </summary>
        ''' <param name="Bmp"></param>
        ''' <param name="Capacidade"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function BitMapToJpegBytes(ByVal Bmp As Bitmap, Optional ByVal Capacidade As Long = 60000) As Byte()
            Dim ST As New System.IO.MemoryStream(Capacidade)
            Bmp.Save(ST, System.Drawing.Imaging.ImageFormat.Jpeg)
            ST.Position = 0
            Dim b(ST.Length) As Byte
            ST.Read(b, 0, ST.Length)
            ST.Close()
            Return b
        End Function
        ''' <summary>
        ''' Separa texto
        ''' </summary>
        ''' <param name="Texto"></param>
        ''' <param name="SEPARA"></param>
        ''' <returns></returns>
        Public Shared Function DeslTxt(ByVal Texto As String, Optional ByVal SEPARA As String = " ") As String
            Dim Ret As String = ""
            For Each linha As String In Split(Texto, vbCrLf)
                Ret &= IIf(Ret <> "", vbCrLf, "") & SEPARA & linha
            Next
            Return Ret
        End Function
        ''' <summary>
        ''' Cria Arvore em TXT
        ''' </summary>
        ''' <param name="ddBase"></param>
        ''' <param name="Opc"></param>
        ''' <returns></returns>
        Public Shared Function ArvToTxt(ByVal ddBase As Object, Optional ByVal Opc As String = "+---") As String
            If TypeOf ddBase Is System.Windows.Forms.TreeView Then
                ddBase = CType(ddBase, System.Windows.Forms.TreeView).TopNode
            End If
            Dim Ret As String = ddBase.text
            For Each Item As Object In ddBase.nodes
                Dim texto As String = ""
                texto = Item.text
                Dim SS As String = ArvToTxt(Item, Opc)
                If SS <> "" Then
                    Ret &= vbCrLf & DeslTxt(SS, Opc)
                End If
            Next
            Return Ret
        End Function
        ''' <summary>
        ''' Cria uma Arvore em XML
        ''' </summary>
        ''' <param name="Arv"></param>
        ''' <returns></returns>
        Public Shared Function ArvToXMLDoc(ByVal Arv As Object) As System.Xml.XmlDocument
            Dim XmlDoc As System.Xml.XmlDocument = New System.Xml.XmlDocument
            XmlDoc.LoadXml(("<?xml version='1.0' ?>" &
            "<XMLTreeView>" &
            "</XMLTreeView>"))
            XmlDoc.DocumentElement.AppendChild(ArvToXMLNode(Arv, XmlDoc))
            Return XmlDoc
        End Function
        ''' <summary>
        ''' Cria Nó na Arvore em XML 
        ''' </summary>
        ''' <param name="arv"></param>
        ''' <param name="xmldoc"></param>
        ''' <returns></returns>
        Public Shared Function ArvToXMLNode(ByVal arv As Object, ByVal xmldoc As System.Xml.XmlDocument) As System.Xml.XmlNode
            If TypeOf arv Is System.Windows.Forms.TreeView Then
                Return ArvToXMLNode(CType(arv, System.Windows.Forms.TreeView).TopNode, xmldoc)
            End If
            Dim NewXMLNode As System.Xml.XmlNode = xmldoc.CreateNode(System.Xml.XmlNodeType.Element, "Node", "Node", "")
            ' inclui valor
            Dim XMLAttribute As System.Xml.XmlAttribute = xmldoc.CreateAttribute("name")
            XMLAttribute.Value = arv.Text
            NewXMLNode.Attributes.Append(XMLAttribute)
            ' tooltip
            XMLAttribute = xmldoc.CreateAttribute("tooltip")
            XMLAttribute.Value = arv.ToolTipText
            NewXMLNode.Attributes.Append(XMLAttribute)
            ' filhos
            For Each Item As System.Windows.Forms.TreeNode In arv.nodes
                NewXMLNode.AppendChild(ArvToXMLNode(Item, xmldoc))
            Next
            Return NewXMLNode
        End Function

        ''' <summary>
        ''' Separa string de uma array
        ''' </summary>
        ''' <param name="Separa"></param>
        ''' <param name="ListaAr"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function JoinSQLExpr(ByVal Separa As String, ByVal ParamArray ListaAr() As Object) As String
            Dim Lista As ArrayList = ParamArrayToArrayList(ListaAr)
            Dim Ret As String = ""
            For Each Item As String In Lista
                Ret &= IIf(Ret <> "", Separa, "") & Icraft.IcftBase.SqlExpr(Item)
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Carrega um XML na arvore
        ''' </summary>
        ''' <param name="Arv"></param>
        ''' <param name="XML"></param>
        ''' <remarks></remarks>
        Public Shared Sub CarregaXMLNaArv(ByVal Arv As Object, ByVal XML As Object)
            If TypeOf XML Is String Then
                Dim XMLN As New System.Xml.XmlDocument
                XMLN.Load(XML)
                If TypeOf Arv Is TreeNode Then
                    CarregaXMLNaArv(Arv.Nodes, XMLN.ChildNodes(1))
                Else
                    CarregaXMLNaArv(Arv, XMLN.ChildNodes(1))
                End If
                Exit Sub
            End If
            For Each Trecho As Object In XML.ChildNodes
                Dim NO As Object
                Try
                    NO = New System.Windows.Forms.TreeNode(CType(Trecho, System.Xml.XmlElement).Attributes("name").Value)
                Catch EX As Exception
                    NO = New System.Windows.Forms.TreeNode(Trecho.LOCALNAME)
                End Try
                Try
                    NO.ToolTipText = CType(Trecho, System.Xml.XmlElement).Attributes("tooltip").Value
                Catch
                End Try
                If TypeOf Arv Is TreeNodeCollection Then
                    Arv.ADD(NO)
                ElseIf TypeOf Arv Is System.Windows.Forms.TreeView Then
                    CType(Arv, System.Windows.Forms.TreeView).Nodes.Add(NO)
                Else
                    CType(Arv, System.Windows.Forms.TreeNode).Nodes.Add(NO)
                End If
                CarregaXMLNaArv(NO, Trecho)
            Next
        End Sub

        ''' <summary>
        ''' Função que pega uma String aleatoricamente
        ''' </summary>
        ''' <param name="Qtd"></param>
        ''' <param name="Opcoes"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function RandText(ByVal Qtd As Integer, Optional ByVal Opcoes As String = "") As String
            If Opcoes = "" Then
                Opcoes = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            End If
            Dim R As New Random(Now.Millisecond)
            Dim Result As String = ""
            Dim n As Integer
            For Z As Integer = 1 To Qtd
                For Y As Integer = 0 To New Random().NextDouble
                    n = R.NextDouble * (Len(Opcoes) - 1) + 1
                Next
                Result &= Mid(Opcoes, n, 1)
            Next
            Return Result
        End Function
        ''' <summary>
        ''' Função que mostra Captcha.
        ''' </summary>
        ''' <remarks></remarks>

        Public Class Captcha
            Inherits CaptchaImagem

            Private _qtdcarac As Integer = 5
            ''' <summary>
            ''' Função que retorna a quantidade de caracteres do Captcha.
            ''' </summary>
            ''' <value>Integer.</value>
            ''' <returns>Retorna quantidade de caracteres.</returns>
            ''' <remarks></remarks>
            Public Property QtdCarac() As Integer
                Get
                    Return _qtdcarac
                End Get
                Set(ByVal value As Integer)
                    _qtdcarac = value
                End Set
            End Property
            ''' <summary>
            ''' Função que cria um NovoSegredo como String, e a Imagem.
            ''' </summary>
            ''' <returns>Retorna o texto do captcha.</returns>
            ''' <remarks></remarks>
            Public Function NovoSegredo() As String
                Me.Text = RandText(QtdCarac)
                Me.GeraImagem()
                Return Me.Text
            End Function
            ''' <summary>
            ''' Função que grava o UltimoSegredo (captcha anterior).
            ''' </summary>
            ''' <returns>Retorna o texto.</returns>
            ''' <remarks></remarks>
            Public Function UltimoSegredo() As String
                Return Me.Text
            End Function
            ''' <summary>
            ''' 
            ''' </summary>
            ''' <param name="Texto">Boolean.</param>
            ''' <returns></returns>
            ''' <remarks></remarks>
            Public Function Confere(ByVal Texto As String) As Boolean
                If UCase(UltimoSegredo) = UCase(Texto) Then
                    Return True
                End If
                Return False
            End Function
        End Class

        ''' <summary>
        ''' Mostra a imagem do Captcha
        ''' </summary>
        ''' <remarks></remarks>
        Public Class CaptchaImagem
            Private _texto As String
            Private _largura As Integer = Nothing
            Private _altura As Integer = Nothing
            Private _nome_fonte As String
            Private _imagem As Bitmap = Nothing
            Private _random As New Random()

            ''' <summary>
            ''' Texto exibido na pagina 
            ''' </summary>
            ''' <value> String </value>
            ''' <returns>  </returns>
            ''' <remarks></remarks>
            Public Property Text() As String
                Get
                    Return Me._texto
                End Get
                Set(ByVal value As String)
                    _texto = value
                End Set
            End Property

            ''' <summary>
            ''' Referente a Largura da fonte a ser exibida no texto. 
            ''' </summary>
            ''' <value> Interger </value>
            ''' <returns> Largura referente ao texto exibido na fonte  </returns>
            ''' <remarks></remarks>
            Public Property Largura() As Integer
                Get
                    Return Me._largura
                End Get
                Set(ByVal value As Integer)
                    Me._largura = value
                End Set
            End Property

            ''' <summary>
            ''' Referente a altura da fonte a ser exibida no texto. 
            ''' </summary>
            ''' <value> Interger </value>
            ''' <returns> Altura referente a fonte do texto  </returns>
            ''' <remarks></remarks>
            Public Property Altura() As Integer
                Get
                    Return Me._altura
                End Get
                Set(ByVal value As Integer)
                    Me._altura = value
                End Set
            End Property


            ''' <summary>
            ''' Referente ao nome da fonte a ser usada no texto
            ''' </summary>
            ''' <value> String </value>
            ''' <returns> Nome referente a fonte </returns>
            ''' <remarks></remarks>
            Public Property NomeDaFonte() As String
                Get
                    Return _nome_fonte
                End Get
                Set(ByVal value As String)
                    _nome_fonte = value
                End Set
            End Property

            ''' <summary>
            ''' Imagem
            ''' </summary>
            ''' <value>Imagem</value>
            ''' <returns>Imagem</returns>
            ''' <remarks></remarks>
            Public ReadOnly Property Imagem() As Bitmap
                Get
                    Return Me._imagem
                End Get
            End Property

            Public Sub New()
            End Sub

            ''' <summary>
            ''' Formata o tamanho da imagem a ser exibida 
            ''' </summary>
            ''' <param name="s"> S é a representação da imagem como objeto </param>
            ''' <param name="Largura"> Largura da imagem para exibição </param>
            ''' <param name="Altura"> Altura da imagem para exibição </param>
            ''' <remarks></remarks>
            Public Sub New(ByVal s As String, ByVal Largura As Integer, ByVal Altura As Integer)
                Me._texto = s
                Me._largura = Largura
                Me._altura = Altura
                Me.GeraImagem()
            End Sub


            ''' <summary>
            ''' Formata a fonte que vai ser usada no texto.
            ''' </summary>
            ''' <param name="s"> s representa a fonte usada no texto </param>
            ''' <param name="Largura"> Largura da fonte no texto </param>
            ''' <param name="Altura"> Altura da fonte no texto </param>
            ''' <param name="NomeDaFonte"> Nome da fonte que vai ser usada no texto </param>
            ''' <remarks></remarks>
            Public Sub New(ByVal s As String, ByVal Largura As Integer, ByVal Altura As Integer, ByVal NomeDaFonte As String)
                Me._texto = s
                Me._largura = Largura
                Me._altura = Altura
                Me._nome_fonte = _nome_fonte
                Me.GeraImagem()
            End Sub

            ''' <summary>
            ''' Dispose Finalize
            ''' </summary>
            ''' <remarks>Dispose</remarks>
            Protected Overrides Sub Finalize()
                Try
                    Dispose(False)
                Finally
                    MyBase.Finalize()
                End Try
            End Sub

            ''' <summary>
            ''' Dispose SuppressFinalize
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub Dispose()
                GC.SuppressFinalize(Me)
                Me.Dispose(True)
            End Sub

            ''' <summary>
            ''' Dispose Imagem
            ''' </summary>
            ''' <param name="disposing"></param>
            ''' <remarks></remarks>
            Protected Overridable Sub Dispose(ByVal disposing As Boolean)
                If disposing Then
                    Me._imagem.Dispose()
                End If
            End Sub

            ''' <summary>
            ''' Gera uma imagem no formato Pixel de 32bp 
            ''' </summary>
            ''' <remarks></remarks>
            Public Sub GeraImagem()
                Dim bitmap As New Bitmap(Me._largura, Me._altura, PixelFormat.Format32bppArgb)
                Dim g As Graphics = Graphics.FromImage(bitmap)
                g.SmoothingMode = SmoothingMode.AntiAlias
                Dim rect As New Rectangle(0, 0, Me._largura, Me._altura)
                Dim hatchBrush As New HatchBrush(HatchStyle.SmallConfetti, Color.LightGray, Color.White)
                g.FillRectangle(hatchBrush, rect)
                Dim size As SizeF
                Dim fontSize As Single = rect.Height + 1
                Dim font As Font
                Do
                    fontSize -= 1
                    font = New Font(CType(Icraft.IcftBase.NZ(Me._nome_fonte, "Arial"), String), fontSize, FontStyle.Bold)
                    size = g.MeasureString(Me._texto, font)
                Loop While size.Width > rect.Width
                Dim format As New StringFormat()
                format.Alignment = StringAlignment.Center
                format.LineAlignment = StringAlignment.Center
                Dim path As New GraphicsPath()
                path.AddString(Me._texto, font.FontFamily, CInt(font.Style), font.Size, rect, format)
                Dim v As Single = 4.0F
                Dim points As PointF() = {New PointF(Me._random.[Next](rect.Width) / v, Me._random.[Next](rect.Height) / v), New PointF(rect.Width - Me._random.[Next](rect.Width) / v, Me._random.[Next](rect.Height) / v), New PointF(Me._random.[Next](rect.Width) / v, rect.Height - Me._random.[Next](rect.Height) / v), New PointF(rect.Width - Me._random.[Next](rect.Width) / v, rect.Height - Me._random.[Next](rect.Height) / v)}
                Dim matrix As New Matrix()
                matrix.Translate(0.0F, 0.0F)
                path.Warp(points, rect, matrix, WarpMode.Perspective, 0.0F)
                hatchBrush = New HatchBrush(HatchStyle.LargeConfetti, Color.LightGray, Color.DarkGray)
                g.FillPath(hatchBrush, path)
                Dim m As Integer = Math.Max(rect.Width, rect.Height)
                For i As Integer = 0 To CInt((rect.Width * rect.Height / 30.0F)) - 1
                    Dim x As Integer = Me._random.[Next](rect.Width)
                    Dim y As Integer = Me._random.[Next](rect.Height)
                    Dim w As Integer = Me._random.[Next](m / 50)
                    Dim h As Integer = Me._random.[Next](m / 50)
                    g.FillEllipse(hatchBrush, x, y, w, h)
                Next
                font.Dispose()
                hatchBrush.Dispose()
                g.Dispose()
                Me._imagem = bitmap
            End Sub

        End Class

        ''' <summary>
        ''' Seleciona Itens por um controle. 
        ''' </summary>
        ''' <param name="Controle"> Nome do controle que vai restringir os itens. </param>
        ''' <returns> Retornara o valor do item selecionado </returns>
        ''' <remarks></remarks>
        Public Shared Function SelItens(ByVal Controle As Object) As String
            Dim Ret As String = ""
            For Each ITEM As String In Controle.SelectedItems
                Ret &= IIf(Ret <> "", ";", "") & ITEM
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Cria um objeto para a classe biblioteca se não existir.
        ''' </summary>
        ''' <param name="Classe"> Nome da classe que vai receber o objeto. </param>
        ''' <param name="Biblioteca"> Nome da biblioteca do objeto. </param>
        ''' <returns> Retorna o valor da variável que retém a instância do objeto </returns>
        ''' <remarks></remarks>
        Public Shared Function CriaObj(ByVal Classe As String, Optional ByVal Biblioteca As Object = Nothing) As Object
            If Icraft.IcftBase.NZ(Biblioteca, "") = "" Then
                Return System.Reflection.Assembly.GetEntryAssembly.CreateInstance(Classe)
            End If
            Dim Ret As Object = Nothing
            For Each ay In System.Reflection.Assembly.GetExecutingAssembly().GetReferencedAssemblies()
                If (ay.Name = Biblioteca) Then
                    Ret = System.Reflection.Assembly.Load(ay).CreateInstance(Icraft.IcftBase.ExprExpr(".", "", Biblioteca, Classe))
                    Exit For
                End If
            Next
            Return Ret
        End Function

        ''' <summary>
        ''' Obtém o identificador do controle. 
        ''' </summary>
        ''' <param name="Ctl"> Controle. </param>
        ''' <returns> Número do controle. </returns>
        ''' <remarks></remarks>
        Public Shared Function ObtemIdentif(ByVal Ctl As Object) As String
            If TypeOf Ctl Is WebControl OrElse TypeOf Ctl Is UserControl Then
                Return Ctl.id
            Else
                Return Ctl.name
            End If
        End Function

        ''' <summary>
        ''' Limpa o arquivo temporário do diretório . 
        ''' </summary>
        ''' <param name="MaxHoras"> Que estaja dentro de 24 horas.  </param>
        ''' <param name="Extensao"> Extensão do arquivo. </param>
        ''' <remarks></remarks>
        Public Shared Sub TempLimpaDir(Optional ByVal MaxHoras As Integer = 24, Optional ByVal Extensao As String = "tmp")
            Dim Arq As String = Dir(Icraft.IcftBase.FileExpr(TemporaryDir(), "*." & Extensao))
            Do While Arq <> ""
                Arq = FileExpr(TemporaryDir(), Arq)
                Dim TM As New System.IO.FileInfo(Arq)
                If DateDiff(DateInterval.Hour, TM.CreationTime, Now) > MaxHoras Then
                    Try
                        Kill(Arq)
                    Catch
                    End Try
                End If
                Arq = Dir()
            Loop
        End Sub

        ''' <summary>
        '''     Retorna se a variável corresponde à um cdate(nothing).
        ''' </summary>
        ''' <param name="V">Conteúdo a ser comparado.</param>
        ''' <returns>True caso seja cdate(nothing) e false caso não.</returns>
        ''' <remarks></remarks>
        Public Shared Function IsNothingD(ByVal V As Object) As Boolean
            If IsNothing(V) Then
                Return True
            End If
            If TypeOf V Is Date AndAlso V = CDate(Nothing) Then
                Return True
            End If
            Return False
        End Function

        ''' <summary>
        ''' Retorna a data mínima
        ''' </summary>
        ''' <param name="Datas"> Array de datas </param>
        ''' <returns> RData mínima </returns>
        ''' <remarks>  </remarks>
        Public Shared Function DateMin(ByVal ParamArray Datas() As Date) As Date
            Dim DM As Date = Nothing
            For z As Integer = 0 To Datas.Count - 1
                If DM = CDate(Nothing) OrElse Datas(z) < DM Then
                    DM = Datas(z)
                End If
            Next
            Return DM
        End Function

        ''' <summary>
        '''      Retorna a data máxima 
        ''' </summary>
        ''' <param name="Datas"> Array de datas </param>
        ''' <returns> Data maxima </returns>
        ''' <remarks></remarks>
        Public Shared Function DateMax(ByVal ParamArray Datas() As Date) As Date
            Dim DM As Date = Nothing
            For z As Integer = 0 To Datas.Count - 1
                If DM = CDate(Nothing) OrElse Datas(z) > DM Then
                    DM = Datas(z)
                End If
            Next
            Return DM
        End Function

        ''' <summary>
        ''' Trata o erro com registro 
        ''' </summary>
        ''' <param name="page"></param>
        ''' <param name="ex"></param>
        ''' <param name="Local"></param>
        ''' <param name="Simpl"></param>
        ''' <param name="Redir"></param>
        ''' <remarks></remarks>
        Public Shared Sub TrataErroComReg(ByVal page As Page, ByVal ex As Exception, ByVal Local As String, ByVal Simpl As String, ByVal Redir As String)
            Icraft.IcftBase.ErroLogReg(ex, Simpl)
            TrataErro(page, New Exception(Simpl), Local, , Redir)
        End Sub

        ''' <summary>
        ''' Cria configuraçõe spara aplicativos
        ''' </summary>
        ''' <param name="Opcao"></param>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Property AppConf(ByVal Opcao As String) As String
            Get
                Dim config As System.Configuration.Configuration = System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel.None)
                Dim elem As System.Configuration.KeyValueConfigurationElement = config.AppSettings.Settings.Item(Opcao)
                If IsNothing(elem) Then
                    Return Nothing
                End If
                Return elem.Value()
            End Get
            Set(ByVal value As String)
                Dim config As System.Configuration.Configuration = System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel.None)
                config.AppSettings.Settings.Remove(Opcao)
                config.AppSettings.Settings.Add(Opcao, value)
                config.Save(System.Configuration.ConfigurationSaveMode.Full)
            End Set
        End Property

        ''' <summary>
        ''' Retira os caracteres especiais
        ''' </summary>
        ''' <param name="Texto"></param>
        ''' <returns></returns>
        Public Shared Function FormaVar(ByVal Texto As String) As String
            Return ReplRepl(Regex.Replace(UCase(Icraft.IcftBase.TiraAcento(Texto)), "[^A-Z0-9]", "_"), "__", "_")
        End Function

        ''' <summary>
        ''' Retorna quantidade de caracteres do texto
        ''' </summary>
        ''' <param name="Texto"></param>
        ''' <param name="QtdCarac"></param>
        ''' <returns></returns>
        Public Shared Function AbstrCarac(ByVal Texto As String, ByVal QtdCarac As Integer) As String
            Return Microsoft.VisualBasic.Left(AbstrCarac(Texto), QtdCarac)
        End Function

        ''' <summary>
        ''' Retorna Data
        ''' </summary>
        ''' <param name="Data"></param>
        ''' <returns></returns>
        Public Shared Function CDateDDMMYYYY(Data As String) As Date
            Try
                Dim D As String = Mid(Data, 7, 4) + "-" + Mid(Data, 4, 2) + "-" + Mid(Data, 1, 2)
                Return CDate(D)
            Catch
            End Try
            Return Nothing
        End Function


        ''' <summary>
        ''' Obtem imagem em BitMap
        ''' </summary>
        ''' <param name="frm"></param>
        ''' <returns></returns>
        Public Shared Function ObtemBitMap(frm As System.Windows.Forms.Form) As Bitmap
            Dim wid As Integer = frm.Width
            Dim hgt As Integer = frm.Height
            Dim bm As New Bitmap(wid, hgt)
            frm.DrawToBitmap(bm, New Rectangle(0, 0, wid, hgt))
            wid = frm.ClientSize.Width
            hgt = frm.ClientSize.Height
            Dim bm2 As New Bitmap(wid, hgt)
            Dim pt As New Point(0, 0)
            pt = frm.PointToScreen(pt)
            Dim dx As Integer = pt.X - frm.Left
            Dim dy As Integer = pt.Y - frm.Top
            Dim gr As Graphics = Graphics.FromImage(bm2)
            gr.DrawImage(bm, 0, 0, New Rectangle(dx, dy, wid, hgt), GraphicsUnit.Pixel)
            Return bm
        End Function

        Public Class CEPCorreios
            Sub New(ByVal CEP As String)
                Dim PAG As String = Icraft.IcftBase.ObtemPag("https://viacep.com.br/ws/" & CEP & "/json/", System.Text.Encoding.UTF8)
            End Sub

            Private _CEPNum As String
            Public Property CEPNum() As String
                Get
                    Return Trim(_CEPNum)
                End Get
                Set(ByVal value As String)
                    _CEPNum = value
                End Set
            End Property

            Private _LOGRADOURO As String
            Public Property LOGRADOURO() As String
                Get
                    Return Trim(_LOGRADOURO)
                End Get
                Set(ByVal value As String)
                    _LOGRADOURO = value
                End Set
            End Property

            Private _COMPLEMENTO As String
            Public Property COMPLEMENTO() As String
                Get
                    Return Trim(_COMPLEMENTO)
                End Get
                Set(ByVal value As String)
                    _COMPLEMENTO = value
                End Set
            End Property

            Private _BAIRRO As String
            Public Property BAIRRO() As String
                Get
                    Return Trim(_BAIRRO)
                End Get
                Set(ByVal value As String)
                    _BAIRRO = value
                End Set
            End Property

            Private _LOCALIDADE As String
            Public Property LOCALIDADE() As String
                Get
                    Return Trim(_LOCALIDADE)
                End Get
                Set(ByVal value As String)
                    _LOCALIDADE = value
                End Set
            End Property

            Private _UF As String
            Public Property UF() As String
                Get
                    Return Trim(_UF)
                End Get
                Set(ByVal value As String)
                    _UF = value
                End Set
            End Property

            Private _IBGE As String
            Public Property IBGE() As String
                Get
                    Return Trim(_IBGE)
                End Get
                Set(ByVal value As String)
                    _IBGE = value
                End Set
            End Property
        End Class
        ''' <summary>
        ''' Obtem dados dos Correios
        ''' </summary>
        ''' <param name="CEP"></param>
        ''' <returns></returns>
        Public Shared Function CEPCorreiosDados(ByVal CEP As String) As CEPCorreios
            Return New CEPCorreios(CEP)
        End Function

        Public Shared ReadOnly Property LinhaNum(Linha As System.Windows.Forms.DataGridViewRow) As Integer
            Get
                If IsNothing(Linha) Then
                    Return -1
                End If
                Return Linha.Index
            End Get
        End Property
        ''' <summary>
        ''' Limpa variaves
        ''' </summary>
        ''' <param name="Url"></param>
        ''' <param name="Vars"></param>
        ''' <returns></returns>
        Public Shared Function GetLimpaVars(ByVal Url As String, ByVal ParamArray Vars() As String) As String
            Dim UrlP As New Uri(Url)
            Dim p As Specialized.NameValueCollection = HttpUtility.ParseQueryString(UrlP.Query)
            Dim Ret As String = ""
            For Each Item As Object In p
                If Not TemNaLista(Vars, Item) Then
                    Ret &= IIf(Ret = "", "?", "&") & Item & "=" & p(Item)
                End If
            Next
            Return UrlP.AbsolutePath & Ret
        End Function
        ''' <summary>
        ''' Codifica para textos de base 64.
        ''' </summary>
        ''' <param name="Texto"></param>
        ''' <returns></returns>
        Function EncodeBase64(ByVal Texto As String) As String
            Dim bytesToEncode As Byte()
            bytesToEncode = Encoding.UTF8.GetBytes(Texto)
            Return Convert.ToBase64String(bytesToEncode)
        End Function
        ''' <summary>
        ''' Decodifica os textos de base 64.
        ''' </summary>
        ''' <param name="TextoBase64"></param>
        ''' <returns></returns>
        Function DecodeBase64(ByVal TextoBase64 As String) As String
            Dim decodedBytes As Byte()
            decodedBytes = Convert.FromBase64String(TextoBase64)
            Return Encoding.UTF8.GetString(decodedBytes)
        End Function

        ''' <summary>
        ''' Transforma linha em sequência de :VAR, CONTEÚDO.
        ''' </summary>
        ''' <param name="r">Row.</param>
        ''' <returns>Arraylist contendo :VAR, CONTEÚDO.</returns>
        Public Shared Function RowToParams(r As System.Data.DataRow) As ArrayList
            Dim ret As New ArrayList
            For Each col As System.Data.DataColumn In r.Table.Columns
                ret.Add(":" & col.ColumnName)
                ret.Add(r(col.ColumnName))
            Next
            Return ret
        End Function



        Class AssincRun
            Enum Tipo
                nome
                terminado
                inicio
                final
                contador
                param
                thread
            End Enum

            Public Shared PS As New Dictionary(Of String, Dictionary(Of Tipo, Object))

            Private Shared Function NovaT(Nome As String) As Dictionary(Of Tipo, Object)
                Dim VARS As New Dictionary(Of Tipo, Object)
                PS.Add(Nome, VARS)
                Return VARS
            End Function
            Public Shared Function Acompanha() As String
                Dim QtdErr As Integer = 0
                While True
                    Dim Txt As String = ""
                    Try
                        For Z As Integer = 0 To PS.Keys.Count - 1
                            Dim ITEM As String = PS.Keys(Z)
                            Txt &= ITEM
                            For ZZ = 0 To PS(ITEM).Keys.Count - 1
                                Dim CHAVE As Integer = PS(ITEM).Keys(ZZ)
                                Txt &= ": " & System.Enum.GetName(GetType(AssincRun.Tipo), CHAVE) & "="
                                Try
                                    Txt &= PS(ITEM)(CHAVE)
                                Catch EX As Exception
                                    Txt &= PS(ITEM)(CHAVE).GetType.ToString
                                End Try
                            Next
                            Txt &= vbCrLf
                        Next
                        Txt &= "."
                        Return Txt
                    Catch EX As System.InvalidOperationException
                        If QtdErr > 10 Then
                            Exit While
                        End If
                        Continue While
                    Catch EX As Exception
                        Exit While
                    End Try
                End While
                Return "[erro]"
            End Function

            Public Shared Sub Exec(form As Windows.Forms.Form, Nome As String, CallBack As Threading.ParameterizedThreadStart, Optional Param As Object = Nothing)
                Dim NomeThr As String = NomeForm(form) & "$" & Nome
                Exec(NomeThr, CallBack, Param)
            End Sub

            Public Shared Sub Exec(Nome As String, CallBack As Threading.ParameterizedThreadStart, Optional Param As Object = Nothing)
                If PS.ContainsKey(Nome) Then
                    Cancela(Nome)
                Else
                    NovaT(Nome)
                End If
                PS(Nome)(Tipo.param) = Param
                Dim TH As New Threading.Thread(CallBack)
                TH.Name = Nome
                TH.Priority = Threading.ThreadPriority.BelowNormal
                PS(Nome)(Tipo.thread) = TH
                TH.Start(PS(Nome))
            End Sub

            Public Shared Sub Inicia(T As Dictionary(Of Tipo, Object))
                DicDef(T, Tipo.terminado, False)
                DicDef(T, Tipo.inicio, Now)
            End Sub

            Public Shared Sub Finaliza(T As Dictionary(Of Tipo, Object))
                DicDef(T, Tipo.final, Now)
                DicDef(T, Tipo.terminado, True)
            End Sub

            Public Shared Sub Cancela(Nome As String)
                Try
                    Dim PSL As Dictionary(Of AssincRun.Tipo, Object) = PS(Nome)
                    Finaliza(PSL)
                    Dim TH As Threading.Thread = PSL(Tipo.thread)
                    If TH.IsAlive Then
                        TH.Abort()
                        TH = Nothing
                    End If
                Catch
                End Try
                GC.Collect()
            End Sub

            Public Shared Sub LiberaProcessamento()
                Threading.Thread.Sleep(5)
                System.Windows.Forms.Application.DoEvents()
            End Sub

            Public Shared Function Terminado(T As Dictionary(Of Tipo, Object))
                LiberaProcessamento()
                Return DicDef(T, Tipo.terminado)
            End Function

            Public Shared Sub Limpa()
                LiberaProcessamento()
                Dim Z As Integer = 0
                Do While Z < PS.Count
                    Dim ITEM As String = PS.Keys(Z)
                    If DicDef(PS(ITEM), Tipo.terminado) Then
                        PS.Remove(ITEM)
                    Else
                        Z += 1
                    End If
                Loop
            End Sub

            Public Shared Sub CancelaTudo(form As Windows.Forms.Form, Optional Espera As Boolean = False, Optional LimpaLogoApos As Boolean = False)
                Dim NF As String = ""
                If Not IsNothing(form) Then
                    NF = NomeForm(form)
                End If
                For Each Item As String In PS.Keys
                    If NF = "" OrElse Item Like NF & "$" & "*" Then
                        If Not DicDef(PS(Item), Tipo.terminado) Then
                            Cancela(Item)
                        End If
                    End If
                Next
                If Espera Then
                    For Each Item As String In PS.Keys
                        If NF = "" OrElse Item Like NF & "$" & "*" Then
                            Do While Not DicDef(PS(Item), Tipo.terminado)
                                LiberaProcessamento()
                            Loop
                        End If
                    Next
                End If
                If LimpaLogoApos Then
                    Limpa()
                End If
            End Sub

            Public Shared Sub CancelaTudo(Optional Espera As Boolean = False, Optional LimpaLogoApos As Boolean = False)
                CancelaTudo(Nothing, Espera, LimpaLogoApos)
            End Sub

        End Class


        Public Shared Sub DicDef(D As Dictionary(Of AssincRun.Tipo, Object), Chave As String, Valor As Object)
            If D.Keys.Contains(Chave) Then
                D(Chave) = Valor
            Else
                D.Add(Chave, Valor)
            End If
        End Sub

        Public Shared Function DicDef(D As Dictionary(Of AssincRun.Tipo, Object), Chave As String) As Object
            If D.Keys.Contains(Chave) Then
                Return D(Chave)
            End If
            Return Nothing
        End Function


        Private Delegate Sub LimpaItensDelegate(ByVal CB As Object)
        Public Shared Sub LimpaItens(ByVal TB As Object)
            If TB.InvokeRequired Then
                TB.Invoke(New LimpaItensDelegate(AddressOf LimpaItens), New Object() {TB})
            Else
                TB.items.clear
            End If
        End Sub


        Private Delegate Sub AtribuiDelegate(ByVal Controle As Object, Propriedade As String, ByVal Valor As Object)
        Public Shared Sub Atribui(ByVal Controle As Object, Propriedade As String, ByVal Valor As Object)
            If Controle.InvokeRequired Then
                Controle.Invoke(New AtribuiDelegate(AddressOf Atribui), New Object() {Controle, Propriedade, Valor})
            Else
                Prop(Controle, Propriedade) = Valor
            End If
        End Sub

        Private Delegate Function ObtemDelegate(ByVal Controle As Object, Propriedade As String) As Object
        Public Shared Function Obtem(ByVal Controle As Object, Propriedade As String)
            If Controle.InvokeRequired Then
                Return Controle.Invoke(New ObtemDelegate(AddressOf Obtem), New Object() {Controle, Propriedade})
            End If
            Return Prop(Controle, Propriedade)
        End Function

        Public Shared Function NomeForm(ByVal F As Object) As String
            Try
                If TypeOf F Is String Then
                    Return F
                End If
                Return F.name
            Catch ex As Exception
                Return ""
            End Try
        End Function

        Public Shared Function ByteArrayToBitMap(ByVal Bytes As Byte()) As Bitmap
            Dim mStream As New System.IO.MemoryStream
            Dim pData As Byte() = Bytes
            mStream.Write(pData, 0, Convert.ToInt32(pData.Length))
            Dim bm As Bitmap = New Bitmap(mStream, False)
            mStream.Dispose()
            Return bm
        End Function


        Public Shared Function XlsParaDataSet(Arquivo As String) As DataSet
            Dim DS As New System.Data.DataSet
            Dim excel As Object = CreateObject("excel.application")
            Dim wBook As Object = excel.Workbooks.Open(Arquivo)
            For z As Integer = 1 To wBook.Sheets.Count
                Dim wSheet As Object = wBook.Sheets(z)
                Dim TB As New DataTable
                Dim c As Integer = 0
                For c = 1 To 100
                    If wSheet.cells(1, c).value = "" Then
                        Exit For
                    End If
                    TB.Columns.Add(wSheet.cells(1, c).value)
                Next
                Dim QtdCols As Integer = c - 1
                Dim QtdLinhasVazias As Integer = 0
                Dim LinhaVazia As ArrayList = Nothing
                For c = 2 To 10000
                    Dim Ar As New ArrayList
                    Dim Vazia As Boolean = True
                    For cc As Integer = 1 To QtdCols
                        Ar.Add(wSheet.cells(c, cc).value)
                        If Not IsNothing(wSheet.cells(c, cc).value) Then
                            Vazia = False
                        End If
                    Next
                    If Vazia Then
                        LinhaVazia = Ar
                        QtdLinhasVazias += 1
                        If QtdLinhasVazias > 10 Then
                            Exit For
                        End If
                    Else
                        For l As Integer = 0 To QtdLinhasVazias - 1
                            TB.Rows.Add(LinhaVazia.ToArray)
                        Next
                        TB.Rows.Add(Ar.ToArray)
                        QtdLinhasVazias = 0
                    End If
                Next
                If DS.Tables.Count = 0 Or TB.Rows.Count > 0 Then
                    DS.Tables.Add(TB)
                End If
            Next
            Return DS
        End Function

        Public Shared Function GridRowToArrayList(Linha As System.Windows.Forms.DataGridViewRow) As ArrayList
            Dim Ar As New ArrayList
            For z As Integer = 0 To Linha.Cells.Count - 1
                Ar.Add(Linha.Cells(z).Value)
            Next
            Return Ar
        End Function


        Public Shared Function GridToDataTable(Grd As System.Windows.Forms.DataGridView) As System.Data.DataTable
            Dim DT As New DataTable
            For Each col As System.Windows.Forms.DataGridViewColumn In Grd.Columns
                DT.Columns.Add(col.HeaderText)
            Next
            For Each Linha As System.Windows.Forms.DataGridViewRow In Grd.Rows
                DT.Rows.Add(GridRowToArrayList(Linha).ToArray)
            Next
            Return DT
        End Function

        Public Shared Function Ender(Nome As String, Email As String) As String
            If Nome <> "" And Email <> "" Then
                Return """" & Nome & """ [" & Email & "]"
            ElseIf Email <> "" Then
                Return Email
            End If
            Return ""
        End Function

        Class DSAssinc
            Public TotalRegs As Integer = 0
            Public RegsLidos As Integer = 0
            Public DS As System.Data.DataSet
            Public QtdCargaRegs As Integer = 100
            Public Event CarregaProgress(Result As DSAssinc)
            Public Cancelar As Boolean = False
            Public Cancelado As Boolean = False
            Public CarregaInicio As Date = Nothing
            Public CarregaTermino As Date = Nothing

            Public Function Carrega(ByVal SQL As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As DSAssinc
                Dim ListaParametros As ArrayList = Icraft.IcftBase.ParamArrayToArrayList(Params)
                Return Carrega(ListaParametros, Nothing, Nothing, SQL, StrConn)
            End Function

            Public Function Carrega(ByVal ListaParametros As ArrayList, ByVal Conexao As Object, ByVal Comm As Object, ByVal SQL As String, ByVal StrConn As Object) As DSAssinc
                Cancelado = False
                Cancelar = False
                TotalRegs = 0
                DS = New System.Data.DataSet
                RegsLidos = 0
                CarregaInicio = Now
                CarregaTermino = Nothing

                ' Obtém lista string de conexão
                Dim ConnW As System.Configuration.ConnectionStringSettings = Icraft.IcftBase.StrConnObj(StrConn, ListaParametros)

                If String.Compare(ConnW.ProviderName, Icraft.IcftBase.Oracle, True) = 0 Then

                    ' Prepara conexão
                    Icraft.IcftBase.AssincRun.LiberaProcessamento()

                    If Cancelar Then
                        Cancelado = True
                        Return Me
                    End If
                    Dim Agora As Boolean = False
                    If IsNothing(Conexao) Then
                        Conexao = DefaultFormStrConn
                        Agora = True
                    End If

                    If Cancelar Then
                        Cancelado = True
                        Return Me
                    End If

                    Conexao = New OracleClient.OracleConnection(Conexao.connectionstring)
                    Comm = Icraft.IcftBase.DSCriaComandoOracle("SELECT COUNT(*) QTD FROM (" & SQL & ")", Conexao, Comm, ListaParametros)
                    Dim Adapt As New OracleClient.OracleDataAdapter(Comm)
                    Dim DSTot As New System.Data.DataSet
                    Adapt.Fill(DSTot)
                    TotalRegs = DSTot.Tables(0).Rows(0)(0)

                    ' Obtem dados
                    RaiseEvent CarregaProgress(Me)
                    Icraft.IcftBase.AssincRun.LiberaProcessamento()

                    If Cancelar Then
                        Cancelado = True
                        Return Me
                    End If
                    Comm = Icraft.IcftBase.DSCriaComandoOracle(SQL, Conexao, Comm, ListaParametros)
                    Adapt = New OracleClient.OracleDataAdapter(Comm)
                    Do While Adapt.Fill(DS, RegsLidos, QtdCargaRegs, "Table") > 0

                        Icraft.IcftBase.AssincRun.LiberaProcessamento()

                        If Cancelar Then
                            Cancelado = True
                            Return Me
                        End If
                        RaiseEvent CarregaProgress(Me)
                        RegsLidos += QtdCargaRegs
                    Loop
                    RaiseEvent CarregaProgress(Me)
                ElseIf String.Compare(ConnW.ProviderName, Icraft.IcftBase.MSAccess, True) = 0 Then
                    ' Prepara conexão
                    Icraft.IcftBase.AssincRun.LiberaProcessamento()

                    If Cancelar Then
                        Cancelado = True
                        Return Me
                    End If
                    Dim Agora As Boolean = False
                    If IsNothing(Conexao) Then
                        Conexao = DefaultFormStrConn
                        Agora = True
                    End If


                    If Cancelar Then
                        Cancelado = True
                        Return Me
                    End If

                    Conexao = New OleDb.OleDbConnection(Conexao.connectionstring)
                    Comm = Icraft.IcftBase.DSCriaComandoAccess("SELECT COUNT(*) AS QTD FROM (" & SQL & ")", Conexao, ListaParametros)
                    Dim Adapt As New OleDb.OleDbDataAdapter(Comm)
                    Dim DSTot As New System.Data.DataSet
                    Adapt.Fill(DSTot)
                    TotalRegs = DSTot.Tables(0).Rows(0)(0)

                    ' Obtem dados
                    RaiseEvent CarregaProgress(Me)
                    Icraft.IcftBase.AssincRun.LiberaProcessamento()

                    If Cancelar Then
                        Cancelado = True
                        Return Me
                    End If
                    Comm = Icraft.IcftBase.DSCriaComandoOracle(SQL, Conexao, Comm, ListaParametros)
                    Adapt = New OleDb.OleDbDataAdapter(Comm)
                    Do While Adapt.Fill(DS, RegsLidos, QtdCargaRegs, "Table") > 0

                        Icraft.IcftBase.AssincRun.LiberaProcessamento()

                        If Cancelar Then
                            Cancelado = True
                            Return Me
                        End If
                        RaiseEvent CarregaProgress(Me)
                        RegsLidos += QtdCargaRegs
                    Loop
                    RaiseEvent CarregaProgress(Me)

                Else
                    Throw New Exception("Tipo de banco não suportado pelo DSAssinc.")
                End If

                CarregaTermino = Now
                Return Me
            End Function

            Public Shared Function CarregaAssinc(ByVal ListaParametros As ArrayList, ByVal Conexao As Object, ByVal Comm As Object, ByVal SQL As String, ByVal StrConn As Object, Optional Result As DSAssinc = Nothing) As DSAssinc
                If IsNothing(Result) Then
                    Result = New DSAssinc
                End If
                Return Result.Carrega(ListaParametros, Conexao, Comm, SQL, StrConn)
            End Function

            Public Shared Function CarregaAssinc(ByVal SQL As String, ByVal StrConn As Object, ByVal ParamArray Params() As Object) As DSAssinc
                Dim ListaParametros As ArrayList = Icraft.IcftBase.ParamArrayToArrayList(Params)
                Return CarregaAssinc(ListaParametros, Nothing, Nothing, SQL, StrConn)
            End Function
        End Class
        Public Shared Sub GravaArqBin(ByVal Arquivo As String, ByVal Bytes() As Byte)
            Dim BR As System.IO.BinaryWriter = Nothing
            Dim FS As New System.IO.FileStream(FileExpr(Arquivo), System.IO.FileMode.Create, IO.FileAccess.Write)
            BR = New System.IO.BinaryWriter(FS)
            BR.Write(Bytes)
            FS.Close()
            BR.Close()
        End Sub


        ''' <summary>
        ''' Grava um arquivo binário.
        ''' </summary>
        ''' <param name="NomeArq">Nome do arquivo.</param>
        ''' <param name="Conteudo">Conteúdo do arquivo.</param>
        ''' <remarks></remarks>
        Public Shared Sub GravaArqBin(ByVal NomeArq As String, ByVal Conteudo As Object)
            Dim B() As Byte = Nothing
            If Not TypeOf Conteudo Is Byte() Then
                B = ObjectToByteArray(Conteudo)
            Else
                B = Conteudo
            End If

            If IsNothing(B) Then
                Try
                    Kill(NomeArq)
                Catch
                End Try
            Else
                Dim Arq As New System.IO.StreamWriter(FileExpr(NomeArq))
                Dim ArqB As New System.IO.BinaryWriter(Arq.BaseStream)
                ArqB.Write(B)
                ArqB.Flush()
                Arq.Flush()
                ArqB.Close()
            End If
        End Sub

        Public Shared Function NomeArqObscurecido(ByVal Diretorio As String, ByVal Arquivo As String, Optional ByVal Qtd As Integer = 10) As String
            Try
                Dim Arq As String = System.IO.Path.GetFileNameWithoutExtension(Arquivo)
                Arq = Icraft.IcftBase.TiraAcento(Replace(Arq, " ", "_"))
                Dim Ext As String = System.IO.Path.GetExtension(Arquivo)
                For z As Integer = 1 To 100
                    Dim NovoArq As String = FileExpr(Diretorio, Arq & "-" & Icraft.IcftBase.RandText(Qtd) & Ext)
                    If Not System.IO.File.Exists(NovoArq) Then
                        Return NovoArq
                    End If
                Next
                Throw New Exception("Muitas tentativas sem sucesso de obter nome de arquivo em " & Diretorio & ".")
            Catch ex As Exception
                Throw New Exception("Erro ao tentar obter nome de arquivo em " & Diretorio & ": " & ex.Message)
            End Try
        End Function


        Public Shared Function DataRowToGridViewRow(Linha As System.Data.DataRow)
            Dim t As New System.Windows.Forms.DataGridViewRow
            For Each C As System.Data.DataColumn In Linha.Table.Columns
                t.Cells.Add(Linha(C.ColumnName))
            Next
            Return t
        End Function


        Public Shared Function GetDsColumnVals(ByVal DS As System.Data.DataSet) As ArrayList
            Return SqlColumnVals(DS.Tables(0))
        End Function
        Public Shared Function SqlColumnVals(ByVal table As System.Data.DataTable) As ArrayList
            Dim PA As New ArrayList
            If table.Rows.Count = 0 Then
            Else
                For z As Integer = 0 To NZ(table.Rows(z).Table.Rows.Count - 1, 0)
                    Dim coluna As String = table.Rows(z).Table.Columns(0).ColumnName
                    PA.Add(table.Rows(z)(coluna))
                Next
            End If


            Return PA
        End Function





        ' ----------------------------------------- ----------------------------------------- ----------------------------------------- ----------------------------------------- 
        ' ----------------------------------------- ----------------------------------------- ----------------------------------------- ----------------------------------------- 





        ''' <summary>
        ''' Obtém e seta conteúdo criptografado de propriedade.
        ''' </summary>
        ''' <param name="Objeto">Objeto para o qual a propriedade será tratada.</param>
        ''' <param name="Propriedade">Nome da propriedade.</param>
        ''' <param name="Container">Container quando objeto estiver em outro continente.</param>
        ''' <param name="ChaveEncrypB">Chave de criptografia sendo opcional. Na falta desta, default da biblioteca será utilizada.</param>
        ''' <value>Valor para definição da propriedade.</value>
        ''' <returns>Valor obtido com base na propriedade pesquisada.</returns>
        ''' <remarks></remarks>
        Shared Property PropE(ByVal Objeto As Object, Optional ByVal Propriedade As String = "", Optional ByVal Container As Object = Nothing, Optional ByVal ChaveEncrypB As String = EncrypBChavePadrao) As Object
            Get
                If TypeOf (Objeto) Is String Then
                    Objeto = UCase(Objeto)
                End If
                Return DecrypB(Prop(Objeto, EncrypB(Propriedade, ChaveEncrypB).Replace("=", ""), Container), ChaveEncrypB)
            End Get
            Set(ByVal value As Object)
                If TypeOf (Objeto) Is String Then
                    Objeto = UCase(Objeto)
                End If
                Prop(Objeto, EncrypB(Propriedade, ChaveEncrypB).Replace("=", ""), Container) = EncrypB(NZ(value, ""), ChaveEncrypB)
            End Set
        End Property


        ''' <summary>
        ''' Define ou obter propriedade de um objeto ou resultado de uma busca em um container.
        ''' </summary>
        ''' <param name="Objeto">Objeto ou string contendo o nome do objeto a ser procurado.</param>
        ''' <param name="Propriedade">Nome da propriedade a ser definida.</param>
        ''' <param name="Container">Caso esse parâmetro não seja informado, propriedade do objeto será definida. Caso esteja presente, deverá indicar a página ou colleção de controles onde o nome do objeto será procurado.</param>
        ''' <value>Conteúdo a ser atribuído ao objeto ou resultado de pesquisa.</value>
        ''' <returns>Conteúdo obtido a partir do objeto ou resultado da pesquisa.</returns>
        ''' <remarks>Todas as propriedades precisam de prévia programação. Ao informar novidade em 'get', informe também em 'set' e vice-versa.</remarks>
        Shared Property Prop(ByVal Objeto As Object, Optional ByVal Propriedade As String = "", Optional ByVal Container As Object = Nothing) As Object
            Get
                ' busca pelo elemento ou retorno de NOTHING
                If IsNothing(Objeto) Then
                    Return Nothing
                End If

                Dim tipo As String = Objeto.GetType.ToString
                If IsNothing(Container) Then
                    If Compare(tipo, "System.String") Then
                        Return Nothing
                    End If
                Else
                    Objeto = Form.FindControl(Container, Objeto)
                    tipo = Objeto.GetType.ToString
                End If

                ' nenhum elemento, retorna nothing
                If IsNothing(Objeto) Then
                    Return Nothing
                End If

                ' tratamento de propriedade
                Propriedade = LCase(Propriedade)

                Try
                    Select Case Propriedade
                        Case "valoranterior"
                            Return CtlProp(Objeto, "valoranterior")
                        Case "tipo"
                            Return NZV(CtlProp(Objeto, "tipo"), Nothing)
                        Case "", "checked", "text", "valoratual", "conteudo", "value"
                            Return ObtemValorCtl(Objeto, Container)
                        Case "enabled"
                            Return Objeto.Enabled
                        Case "backcolor"
                            Return Objeto.BackColor
                        Case "visible"
                            Return Objeto.Visible
                        Case "tooltip"
                            Return Objeto.ToolTip
                        Case "cssclass"
                            Return Objeto.CssClass
                        Case "validationgroup"
                            Return Objeto.ValidationGroup
                        Case "forecolor"
                            Return Objeto.ForeColor
                        Case "readonly"
                            Return Objeto.ReadOnly
                        Case "imageurl"
                            Return Objeto.ImageUrl
                        Case "nome", "name"
                            Select Case tipo
                                Case "Icraft+ElementoStr"
                                    Return Objeto.Nome
                                Case Else
                                    Return Objeto.Name
                            End Select
                        Case "id"
                            If tipo = "Icraft+ElementoStr" Then
                                Return Objeto.Nome
                            ElseIf TypeOf Objeto Is System.Windows.Forms.Control Then
                                Return CType(Objeto, System.Windows.Forms.Control).Name
                            End If
                            Return Objeto.ID
                        Case "navigateurl"
                            Return Objeto.NavigateUrl
                        Case Else
                            Try
                                Return Objeto.GetType.GetProperty(Propriedade, Reflection.BindingFlags.Public + Reflection.BindingFlags.Static + Reflection.BindingFlags.Instance + Reflection.BindingFlags.IgnoreCase + Reflection.BindingFlags.NonPublic).GetValue(Objeto, Nothing)
                            Catch
                                Return Objeto(Propriedade)
                            End Try
                    End Select
                Catch
                    Try
                        Return Objeto.Attributes(Propriedade)
                    Catch
                        Return Convert.DBNull
                    End Try
                End Try

            End Get

            Set(ByVal value As Object)
                ' busca pelo elemento ou retorno de NOTHING
                If IsNothing(Objeto) Then
                    Throw New Exception("Tentativa de definição de um objeto inexistente em Prop.")
                End If
                Dim Tipo As String = Objeto.GetType.ToString
                If IsNothing(Container) Then
                    If Compare(Tipo, "System.String") Then
                        Throw New Exception("Tentativa de definição de um objeto inexistente em Prop.")
                    End If
                Else
                    Objeto = Form.FindControl(Container, Objeto)
                    Tipo = Objeto.GetType.ToString
                End If

                ' nenhum elemento, gera erro
                If IsNothing(Objeto) Then
                    Throw New Exception("Tentativa de definição de um objeto inexistente em Prop.")
                End If

                ' tratamento de propriedade
                Propriedade = LCase(Propriedade)

                Try
                    Select Case Propriedade
                        Case "valoranterior"
                            CtlProp(Objeto, "valoranterior") = value
                        Case "tipo"
                            CtlProp(Objeto, "tipo") = value
                        Case "", "checked", "text", "valoratual", "conteudo", "value"
                            DefineValorCtl(Objeto, value, Container)
                        Case "enabled"
                            Objeto.Enabled = value
                        Case "backcolor"
                            Objeto.BackColor = value
                        Case "visible"
                            Objeto.Visible = value
                        Case "tooltip"
                            Objeto.ToolTip = value
                        Case "cssclass"
                            Objeto.CssClass = value
                        Case "validationgroup"
                            Objeto.ValidationGroup = value
                        Case "forecolor"
                            Objeto.ForeColor = value
                        Case "readonly"
                            Objeto.ReadOnly = value
                        Case "nome", "name"
                            Select Case Tipo
                                Case "Icraft+ElementoStr"
                                    Objeto.Nome = value
                                Case Else
                                    Objeto.Name = value
                            End Select
                        Case "id"
                            If Tipo = "Icraft+ElementoStr" Then
                                Objeto.Nome = value
                            ElseIf TypeOf Objeto Is System.Windows.Forms.Control Then
                                CType(Objeto, System.Windows.Forms.Control).Name = value
                            End If
                            Objeto.ID = value
                        Case "navigateurl"
                            Objeto.NavigateUrl = value
                        Case "imageurl"
                            Objeto.ImageUrl = value
                        Case Else
                            Try
                                Objeto.GetType.GetProperty(Propriedade, Reflection.BindingFlags.Public + Reflection.BindingFlags.Static + Reflection.BindingFlags.Instance + Reflection.BindingFlags.IgnoreCase + Reflection.BindingFlags.Static).SetValue(Objeto, value, Nothing)
                            Catch
                                Objeto(Propriedade) = value
                            End Try
                    End Select
                Catch
                    If TypeOf Objeto Is System.Windows.Forms.ComboBox Then
                        Objeto.Text = value
                    Else
                        Objeto.Attributes(Propriedade) = value
                    End If
                End Try

            End Set

        End Property



        ''' <summary>
        ''' Obtém o valor de um controle.
        ''' </summary>
        ''' <param name="Ctl">Controle a ser pesquisado.</param>
        ''' <param name="Container">Container onde está o controle.</param>
        ''' <returns>Retorna o valor do controle.</returns>
        ''' <remarks></remarks>
        Public Shared Function ObtemValorCtl(ByVal Ctl As Object, Optional ByVal Container As Object = Nothing) As Object
            Dim Tipo As String = Ctl.GetType.ToString
            Dim Ret As Object = Nothing

            If TypeOf Ctl Is String Then
                If IsNothing(Container) Then
                    Return Nothing
                End If
                If TypeOf Container Is System.Windows.Forms.DataGridViewRow Then
                    Return Container.Cells(Ctl).value
                End If
                Ctl = Container.Controls.Find(Ctl, True)
                If Ctl.LENGTH = 0 Then
                    Return Nothing
                End If
                Ctl = Ctl(0)
            End If

            If TypeOf Ctl Is System.Windows.Forms.MaskedTextBox Then
                Ret = ObtemValorTextoMasc(Ctl.text, Ctl.mask)
            ElseIf Tipo = "System.Web.UI.WebControls.TextBox" Then
                Dim Outro As Object = Nothing
                Try
                    Outro = Ctl.page.request.form(Ctl.uniqueid)
                Catch
                End Try
                Dim Texto As String = NZ(Ctl.text, Outro)
                Dim Mascara As String = CType(Ctl, System.Web.UI.WebControls.TextBox).Attributes("mask")
                Ret = ObtemValorTextoMasc(Texto, Mascara)
            ElseIf TypeOf Ctl Is System.Windows.Forms.ComboBox Then
                If Ctl.text = "" Or Ctl.text = ComboNull Then
                    Ctl.text = ComboNull
                    Ctl.SelectedItem = ComboNull
                End If
                Try
                    'Variavel p verificar se o valor atual foi encontrando nos itens do combo
                    Dim EncontrouItem As Boolean = False
                    'Rotina p selecionar item atual
                    For Each Item In Ctl.items
                        If Item.VALUE = Ctl.text Or Item.text = Ctl.text Then
                            Ctl.SELECTEDITEM = Item
                            EncontrouItem = True
                            Exit For
                        End If
                    Next
                    If EncontrouItem = False And Ctl.text <> "" Then
                        Try
                            Ctl.items.add(New ListItem(Ctl.text, Ctl.text))
                            OrdenarCombo(Ctl)
                            'Roda rotina p selecionar item atual novamente
                            For Each Item In Ctl.items
                                If Item.VALUE = Ctl.text Or Item.text = Ctl.text Then
                                    Ctl.SELECTEDITEM = Item
                                    EncontrouItem = True
                                    Exit For
                                End If
                            Next
                        Catch ex As Exception
                            MsgBox(ex)
                        End Try
                    End If
                Catch
                End Try
                If Ctl.text <> ComboNull Then
                    If Not IsNothing(Ctl.SelectedItem) Then
                        Try
                            Ret = Ctl.SELECTEDITEM.VALUE
                        Catch
                            Ret = Ctl.SELECTEDITEM
                        End Try
                    Else
                        Ret = Ctl.TEXT
                    End If
                    Dim CTX As System.Windows.Forms.ComboBox = Ctl
                    If InStr(Ret, "|") <> 0 Then
                        Ret = Trim(Split(Ret, "|")(0))
                    End If
                End If
                If Ret = ComboNull Then
                    Ret = Convert.DBNull
                End If
            ElseIf Tipo = "ASP.uc_icftgridview_icftgridview_ascx" Then
                Ret = Ctl.chavesel
            ElseIf Tipo = "ASP.uc_icftgridview_ascx" OrElse Tipo = "ASP.uc_icftdetalhes_ascx" Then
                Ret = Ctl.ChaveSel
            ElseIf Tipo = "System.Web.UI.WebControls.HiddenField" OrElse Tipo = "System.Xml.XmlAttribute" OrElse Tipo = "System.Web.UI.HtmlControls.HtmlTextArea" Then
                Ret = Ctl.Value
            ElseIf Tipo = "Icraft+ElementoStr" Then
                Ret = Ctl.Conteudo
            ElseIf Tipo = "ASP.uc_icfttextarea_ascx" Then
                Ret = Ctl.Attributes("text")
            ElseIf Tipo = "System.Web.UI.WebControls.DropDownList" Then
                Dim Outro As Object = Nothing
                Try
                    Outro = Ctl.page.request.form(Ctl.uniqueid)
                Catch
                End Try
                Ret = NZ(Ctl.TEXT, Outro)
                If Ret = ComboNull Then
                    Ret = Convert.DBNull
                Else
                    Dim Mascara As String = CType(Ctl, System.Web.UI.WebControls.DropDownList).Attributes("mask")
                    If Mascara <> "" Then
                        Ret = ObtemValorTextoMasc(Ret, Mascara)
                    End If
                End If
            ElseIf Tipo = "System.Web.UI.WebControls.CheckBox" OrElse Tipo = "System.Windows.Forms.CheckBox" Then
                Try
                    Dim Outro As Object = Nothing
                    Try
                        Outro = Ctl.page.request.form(Ctl.uniqueid)
                    Catch
                    End Try

                    Ret = NZV(Ctl.Checked, Outro)
                Catch
                    Ret = Ctl.Checked
                End Try
            ElseIf Tipo = "ASP.uc_icftcombobox_icftcombobox_ascx" Then
                Ret = Ctl.text()
            ElseIf Tipo = "System.Web.UI.WebControls.TextBox" Then
                Dim Outro As Object = Nothing
                Try
                    Outro = Ctl.page.request.form(Ctl.uniqueid)
                Catch
                End Try
                Ret = NZ(Ctl.text, Outro)
            ElseIf TypeOf Ctl Is System.Windows.Forms.TextBox Then
                Dim Outro As Object = Nothing
                Ret = NZ(Ctl.text, Outro)
            ElseIf Tipo.EndsWith("Icraft.IcftFRadioList") Then
                Return Ctl.text
            ElseIf Tipo.EndsWith("Icraft.IcftFWebBrow") Then
                Return Ctl.text
            ElseIf Tipo = "System.Web.UI.WebControls.ListItem" Then
                Return Ctl.value
            ElseIf Tipo = "System.Windows.Forms.TreeView" Then
                Return Ctl.SelectedNode.Name
            Else
                Ret = Ctl.text()
            End If

            Return NZ(Ret, Convert.DBNull)
        End Function


        ''' <summary>
        ''' Define o valor de um controle.
        ''' </summary>
        ''' <param name="Ctl">Controle que receberá o valor.</param>
        ''' <param name="Valor">Valor que será inserido no controle.</param>
        ''' <param name="Container">Container onde o controle está localizado.</param>
        ''' <remarks></remarks>
        Public Shared Sub DefineValorCtl(ByVal Ctl As Object, ByVal Valor As Object, Optional ByVal Container As Object = Nothing)
            Dim Tipo As String = Ctl.GetType.ToString
            If TypeOf Ctl Is String Then
                If IsNothing(Container) Then
                    Exit Sub
                End If
                If TypeOf Container Is System.Windows.Forms.DataGridViewRow Then
                    Container.cells(Ctl).value = Valor
                    Exit Sub
                End If
                Ctl = Container.Controls.Find(Ctl, True)
                If Ctl.count = 0 Then
                    Exit Sub
                End If
                Ctl = Ctl(0)
            End If

            If TypeOf Ctl Is System.Windows.Forms.MaskedTextBox Then
                If IsNothing(Valor) OrElse IsDBNull(Valor) Then
                    Ctl.TEXT = ""
                Else
                    If Ctl.Mask = "00/00/0000" Then
                        Ctl.text = Format(Valor, "dd/MM/yyyy")
                    ElseIf Ctl.MASK = "00/00/0000 00:00:00" Then
                        Ctl.TEXT = Format(Valor, "dd/MM/yyyy HH:mm:ss")
                    ElseIf EMascaraDeNum(Ctl.mask) Then
                        Ctl.text = NumMask(Ctl.mask, Valor)
                    Else
                        Ctl.TEXT = NZ(Valor, "")
                    End If
                End If
            ElseIf TypeOf Ctl Is System.Windows.Forms.ComboBox Then
                If IsNothing(Valor) OrElse IsDBNull(Valor) Then
                    Ctl.Text = ComboNull
                Else
                    If IsNothing(ComboSelItem(Ctl, Valor)) OrElse Ctl.Text = "" Then
                        Ctl.Text = Valor
                    Else
                        Ctl.Text = ComboItem(Ctl, Valor).text
                    End If
                End If
            ElseIf Tipo = "ASP.uc_icftgridview_icftgridview_ascx" Then
                Ctl.ChaveSel = Valor
            ElseIf Tipo = "ASP.uc_icftgridview_ascx" OrElse Tipo = "ASP.uc_icftdetalhes_ascx" Then
                Ctl.ChaveSel = Valor
            ElseIf Tipo = "System.Web.UI.WebControls.HiddenField" OrElse Tipo = "System.Xml.XmlAttribute" Then
                Ctl.Value = Valor
            ElseIf Tipo = "Icraft+ElementoStr" Then
                Ctl.Conteudo = Valor
            ElseIf Tipo = "ASP.uc_icfttextarea_ascx" Then
                Ctl.Attributes("text") = Valor
            ElseIf Tipo = "System.Web.UI.WebControls.DropDownList" Then

                Dim Masc As String = CType(Ctl, Web.UI.WebControls.DropDownList).Attributes("mask")
                If Masc <> "" Then
                    If TypeOf Valor Is Date Then
                        If Masc = "0000-00" Then
                            Valor = Format(Valor, "yyyy-MM")
                        End If
                    End If
                End If

                Valor = NZ(Valor, ComboNull)
                If IsNothing(Ctl.Items.FindByValue(Valor)) Then
                    Ctl.Items.Add(Valor)
                End If
                Ctl.Text = Valor
            ElseIf Tipo = "System.Web.UI.WebControls.CheckBox" OrElse Tipo = "System.Windows.Forms.CheckBox" Then
                Valor = NZ(Valor, "")
                If Valor = "" OrElse Valor = "off" Then
                    Valor = System.Boolean.FalseString
                ElseIf Valor = "on" Then
                    Valor = System.Boolean.TrueString
                End If
                Ctl.Checked = Valor
            ElseIf Tipo = "System.Web.UI.WebControls.Label" Then
                Ctl.Text = NZ(Valor, "")
            ElseIf Tipo = "ASP.uc_icftcombobox_icftcombobox_ascx" Then
                Dim V As Object = NZ(Valor, ComboNull)
                If IsNothing(Ctl.combobox.Items.FindByValue(V)) Then
                    Ctl.combobox.Items.Add(V)
                End If
                Ctl.TEXT = V
            ElseIf Tipo = "System.Web.UI.WebControls.TextBox" Then
                Ctl.Text = NZ(Valor, "")
            ElseIf TypeOf Ctl Is System.Windows.Forms.TextBox Then
                Ctl.text = NZ(Valor, "")
            ElseIf Tipo.EndsWith("Icraft.IcftFRadioList") Then
                Ctl.text = NZ(Valor, "")
            ElseIf Tipo.EndsWith("Icraft.IcftFWebBrow") Then
                Ctl.text = NZ(Valor, "")
            ElseIf Tipo.EndsWith("Icraft.IcftFImagem") Then
                Ctl.Text = NZ(Valor, "")
            Else
                Ctl.Text = NZ(Valor, "")
            End If
        End Sub

        ''' <summary>
        ''' Retorna a máscara utilizada para um determinado campo.
        ''' </summary>
        ''' <param name="Texto">Texto a ser obtido.</param>
        ''' <param name="Mascara">Máscara utilizada.</param>
        ''' <returns>Máscara.</returns>
        ''' <remarks></remarks>
        Public Shared Function ObtemValorTextoMasc(ByVal Texto As String, ByVal Mascara As String) As Object
            Mascara = NZ(Mascara, "")
            Dim Ret As Object = Nothing
            If Mascara = "00/00/0000" Then
                If Trim(Texto) = "" OrElse Trim(Texto) = "/  /" Then
                    Ret = Convert.DBNull
                Else
                    Ret = CDate(Mid(Texto, 7, 4) & "-" & Mid(Texto, 4, 2) & "-" & Mid(Texto, 1, 2))
                End If
            ElseIf Mascara = "00/00/0000 00:00:00" Then
                If Trim(Texto) = "" OrElse Trim(Texto) = "/  /       :  :" Then
                    Ret = Convert.DBNull
                Else
                    Ret = CDate(Mid(Texto, 7, 4) & "-" & Mid(Texto, 4, 2) & "-" & Mid(Texto, 1, 2) & " " & Mid(Texto, 12))
                End If
            ElseIf Mascara = "0000-00" Then
                If Trim(Texto) = "" OrElse Trim(Texto) = "-" Then
                    Ret = Convert.DBNull
                Else
                    Ret = CDate(Texto)
                End If
            ElseIf EMascaraDeNum(Mascara) Then
                Dim Verif As String = Trim(TrocaTexto(Texto, New String() {"/", "", ",", "", ".", "", "-", ""}))
                If Verif = "" Then
                    Ret = Convert.DBNull
                Else
                    Ret = Val(Replace(Trim(Texto), ",", ".").Replace(" ", "X"))
                End If
            ElseIf System.Text.RegularExpressions.Regex.Match(Mascara, "[09\-\/\,\.]").Success Then
                Dim Verif As String = Trim(TrocaTexto(Texto, New String() {"/", "", ",", "", ".", "", "-", ""}))
                If Verif = "" Then
                    Ret = Convert.DBNull
                Else
                    Ret = Texto
                End If
            Else
                Ret = Texto
            End If
            Return Ret
        End Function


    End Class
End Namespace